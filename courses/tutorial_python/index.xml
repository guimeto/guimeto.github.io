<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Overview | GDueymes</title>
    <link>/courses/tutorial_python/</link>
      <atom:link href="/courses/tutorial_python/index.xml" rel="self" type="application/rss+xml" />
    <description>Overview</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Overview</title>
      <link>/courses/tutorial_python/</link>
    </image>
    
    <item>
      <title>1 Basic data types</title>
      <link>/courses/tutorial_python/1-python_basics/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/1-python_basics/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-1-variables&#34;&gt;1.1 Variables&lt;/h2&gt;

&lt;p&gt;A variable is an identifier or name to store information or results.
All python programs use variables. It is important to remember that each type of information is stored in a special type of variable.
A type of variable is an information about the contents of the variable. The type of variable will tell the python interpreter what it can do or not with this variable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python can make the difference between upper and lower case letters&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;You can not start a variable with a number&lt;/li&gt;
&lt;li&gt;Do not use accents in variable names&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function : type() give you informations on the type of our variable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m=3.2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;int(m)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-1-1-numeric-type&#34;&gt;1.1.1 Numeric type:&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Integer: int()&lt;/td&gt;
&lt;td&gt;1 is an integer, 1.0 is not an integer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Float: float()&lt;/td&gt;
&lt;td&gt;Number that includes a decimal part&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Complex numbers&lt;/td&gt;
&lt;td&gt;Association between a real number and an imaginary number&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(m)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;float
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;int(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;int(3.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;float(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3+5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-1-2-booleans&#34;&gt;1.1.2 Booleans:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;variable storing binary values: True or False&lt;/li&gt;
&lt;li&gt;data types result from logical operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Very useful in if() conditional structures.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3&amp;gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3&amp;lt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-1-3-strings&#34;&gt;1.1.3 Strings:&lt;/h3&gt;

&lt;p&gt;Python can also manipulate strings, which can be expressed in several ways. They can be enclosed in single quotes (&amp;lsquo;&amp;hellip;&amp;rsquo;) or double quotes (&amp;ldquo;&amp;hellip;&amp;rdquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(&#39;Hello&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(&amp;quot;15&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;15&amp;quot; + 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-13-3fe5846cb1c2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 &amp;quot;15&amp;quot; + 2
TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
----------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we can concatenate two strings together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;15&amp;quot; + &amp;quot;56&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;1556&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str(15)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;15&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;String objects have a bunch of useful methods; for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = &amp;quot;hello&amp;quot;
print(s.capitalize())  # Capitalize a string; prints &amp;quot;Hello&amp;quot;
print(s.upper())       # Convert a string to uppercase; prints &amp;quot;HELLO&amp;quot;
print(s.rjust(7))      # Right-justify a string, padding with spaces; prints &amp;quot;  hello&amp;quot;
print(s.center(7))     # Center a string, padding with spaces; prints &amp;quot; hello &amp;quot;
print(s.replace(&#39;l&#39;, &#39;(ell)&#39;))  # Replace all instances of one substring with another;
                           # prints &amp;quot;he(ell)(ell)o&amp;quot;
print(&#39;  world &#39;.strip())  # Strip leading and trailing whitespace; prints &amp;quot;world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Hello
HELLO
  hello
 hello 
he(ell)(ell)o
world
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-2-python-arithmetic-operators&#34;&gt;1.2 Python Arithmetic Operators&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Adds values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Subtracts right hand operand from left hand operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Multiplies values on either side of the operator&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;Divides left hand operand by right hand operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;Divides left hand operand by right hand operand and returns remainder (modulus)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%%&lt;/td&gt;
&lt;td&gt;Performs exponential (power) calculation on operators&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;Floor Division - The division of operands where the result is the quotient in which the digits after the decimal point are removed. But if one of the operands is negative, the result is floored, i.e., rounded away from zero (towards negative infinity)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5-3 # Subtraction 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5+3 # Addition 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5*3 # Multiplication
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5/3 # division  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1.6666666666666667
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5//3 # Floor Division 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5%3 # Modulus  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5**3 # power
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;125
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_variable1=10
ma_variable2=20
ma_variable1*ma_variable2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;200
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_variable1*10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We cannot apply arithmetic operators on text.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;mon texte&amp;quot; - &amp;quot;mon texte&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-26-5483fafb4a74&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 &amp;quot;mon texte&amp;quot; - &amp;quot;mon texte&amp;quot; 
TypeError: unsupported operand type(s) for -: &#39;str&#39; and &#39;str&#39;
----------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;Hi&amp;quot; + &amp;quot; how are you ?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Hi how are you ?&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;Hi &amp;quot; * 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Hi Hi Hi Hi Hi &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-3-python-comparison-operators&#34;&gt;1.3 Python Comparison Operators&lt;/h2&gt;

&lt;p&gt;These operators compare the values on either sides of them and decide the relation among them. They are also called Relational operators.
The true value of relationships is often used to make decisions by ensuring that conditions are met to perform a certain task.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;If the values of two operands are equal, then the condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;If values of two operands are not equal, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;If the value of left operand is greater than the value of right operand, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;If the value of left operand is less than the value of right operand, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;If the value of left operand is greater than or equal to the value of right operand, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;If the value of left operand is less than or equal to the value of right operand, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;is&lt;/td&gt;
&lt;td&gt;Identity operators compare the memory locations of two objects. Evaluates to true if the variables on either side of the operator point to the same object and false otherwise&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;is not&lt;/td&gt;
&lt;td&gt;Identity operators compare the memory locations of two objects. Evaluates to false if the variables on either side of the operator point to the same object and true otherwise&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1 == 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1==2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1!=2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;lt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;=1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2 &amp;lt;= 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a=1 # Warning !!!! this is an assignment  operator
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-4-python-logical-operators&#34;&gt;1.4 Python Logical Operators&lt;/h2&gt;

&lt;p&gt;Logical operators compare Boolean expressions instead of values as in the previous point.&lt;/p&gt;

&lt;p&gt;They are used to create Boolean expressions that help us know if a certain task should be performed or not.
Operator| Description   |
|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;|
|  and| If both operands are true then condition becomes true|
|  or| If any of the two operands are non-zero then condition becomes true|
|  not| Used to reverse the logical state of its operand|&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# and
(3==3) and (4==4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(3==3) and (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# or
(3==3) or (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(3!=3) or (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#  not
not((3!=3) or (4==5))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-5-python-assignment-operators&#34;&gt;1.5 Python Assignment Operators&lt;/h2&gt;

&lt;p&gt;Assignment operators store a value in a variable. We have already seen the simplest case (=), but python offers many other operators of this type, in particular to perform an arithmetic operation at the same time as the assignment.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;Assigns values from right side operands to left side operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td&gt;It adds right operand to the left operand and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-=&lt;/td&gt;
&lt;td&gt;It subtracts right operand from the left operand and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;*=&lt;/td&gt;
&lt;td&gt;It multiplies right operand with the left operand and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td&gt;It divides left operand with the right operand and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td&gt;It takes modulus using two operands and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;**=&lt;/td&gt;
&lt;td&gt;Performs exponential (power) calculation on operators and assign value to the left operande&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//=&lt;/td&gt;
&lt;td&gt;It performs floor division on operators and assign value to the left operand&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 2
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable += 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable -= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable *= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5. 
Mavariable /= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2.5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable %= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable **= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;25
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5. 
Mavariable //= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2.0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2 List in Python</title>
      <link>/courses/tutorial_python/2-lists_in_python/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/2-lists_in_python/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;img src=&#34;./figures/pylogo.png&#34; alt=&#34;Indentation&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Python includes several built-in container types, but the most common ones are lists and tuples, which we would see in this tutorial.&lt;/p&gt;

&lt;p&gt;There are certain things you can do with all container types. These operations include indexing, slicing, adding, multiplying. In addition, Python has built-in functions like finding the length of a sequence, finding its largest and smallest elements&amp;hellip;&lt;/p&gt;

&lt;p&gt;Each element of a sequence is assigned by a number - its position or index. The first index is zero, the second index is one&amp;hellip;&lt;/p&gt;

&lt;p&gt;Creating a list is as simple as putting different comma-separated values between square brackets :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;list1 = [ a, b, c, d, e]&lt;/li&gt;
&lt;li&gt;list2 = [ 1, 2, 3, 4, 5]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python is an object-oriented language, lists are associated with methods: object.method()
Functions can be applied to lists.&lt;/p&gt;

&lt;h2 id=&#34;2-1-create-a-list&#34;&gt;2.1 Create a list&lt;/h2&gt;

&lt;p&gt;To create a list, we use comma-separated values between square brackets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)  # fonction to print elements in list 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use &lt;b&gt;range()&lt;/b&gt; function to generate a sequence of numbers over time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = list(range(10))
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = list(range(1981,2011,2))
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1981,
 1983,
 1985,
 1987,
 1989,
 1991,
 1993,
 1995,
 1997,
 1999,
 2001,
 2003,
 2005,
 2007,
 2009]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we work with Python object, dir() command always shows us the tasks we can do with this object: dir(my_list)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;__add__&#39;,
 &#39;__class__&#39;,
 &#39;__contains__&#39;,
 &#39;__delattr__&#39;,
 &#39;__delitem__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__getitem__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__iadd__&#39;,
 &#39;__imul__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__iter__&#39;,
 &#39;__le__&#39;,
 &#39;__len__&#39;,
 &#39;__lt__&#39;,
 &#39;__mul__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__reversed__&#39;,
 &#39;__rmul__&#39;,
 &#39;__setattr__&#39;,
 &#39;__setitem__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;append&#39;,
 &#39;clear&#39;,
 &#39;copy&#39;,
 &#39;count&#39;,
 &#39;extend&#39;,
 &#39;index&#39;,
 &#39;insert&#39;,
 &#39;pop&#39;,
 &#39;remove&#39;,
 &#39;reverse&#39;,
 &#39;sort&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-2-accessing-values-in-lists&#34;&gt;2.2 Accessing Values in Lists :&lt;/h2&gt;

&lt;p&gt;To access values in a list, use the square brackets for slicing along with the index or indices to obtain value available at that index.&lt;/p&gt;

&lt;p&gt;The first index is zero, the second index is one&amp;hellip; to read first element, we use index 0. Then to read last element, we use -1 index.&lt;/p&gt;

&lt;p&gt;It is also possible to modify a value with its index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
my_list[:]  # To use all elements
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[1] # to access an item from the list: here we access the second element. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[2:4] # slicing:  to access the elements between the 3rd position and the 4th

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[:4] # slicing: to access all elements up to index 4 or 4th position
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[3:] # slicing: to access all elements from index 3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[-2] # to get the 2nd value from the end, with use negative indexes, we do not start from 0 anymore.

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[1:-4] # we start from the index 1, with slicing, we stop at the 4th index from the end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[::2] # to extract the elements with an increment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 3, 5, 7, &#39;hello&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[1::2] # to extract the elements with an increment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 4, 6, 8, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-3-updating-lists&#34;&gt;2.3 Updating Lists&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/tutorial/datastructures.html#more-on-lists&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/tutorial/datastructures.html#more-on-lists&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-3-1-add-elements&#34;&gt;2.3.1 Add elements&lt;/h3&gt;

&lt;p&gt;To &lt;b&gt;add&lt;/b&gt; an element: we use &lt;b&gt;.append()&lt;/b&gt; method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.append(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-2-insert-elements&#34;&gt;2.3.2 Insert elements&lt;/h3&gt;

&lt;p&gt;To &lt;b&gt;insert&lt;/b&gt; an element to our list using index: &lt;b&gt;insert()&lt;/b&gt; method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.insert(5,&amp;quot;new&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-3-update-elements&#34;&gt;2.3.3 Update elements&lt;/h3&gt;

&lt;p&gt;To &lt;b&gt;change&lt;/b&gt; an element in our list using index&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[0]=&amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;a&#39;, 2, 3, 4, 5, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To &lt;b&gt;change&lt;/b&gt; several elements in our list: slicing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[3:5]=[8,10,11,22]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;a&#39;, 2, 3, 8, 10, 11, 22, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-4-remove-elements&#34;&gt;2.3.4 Remove elements&lt;/h3&gt;

&lt;p&gt;To &lt;b&gt;remove&lt;/b&gt; in our list: 2 methods&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[0:2]=[]  # remove using slicing 
print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 8, 10, 11, 22, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 8, 10, 11, 22, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del my_list[3] # to remove using keywords
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 8, 10, 22, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.programiz.com/python-programming/keyword-list&#34; target=&#34;_blank&#34;&gt;https://www.programiz.com/python-programming/keyword-list&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-4-some-useful-operations-on-lists&#34;&gt;2.4  Some useful operations on lists&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Concatenate two lists&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list1=[1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list2=[6,7,8,9,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list3=my_list1+my_list2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Duplicate a list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list1=[1,2,3,4,5]
my_list1*3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reverse elements in list&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;.reverse()&lt;/b&gt; method is used to reverse elements in list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list1=[1,2,3,4,5]
print(my_list1)
my_list1.reverse()
print(my_list1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5]
[5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Count elements in list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;.count()&lt;/b&gt; method is used to return count of how many times obj occurs in list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list2= [&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;]
my_list2.count(&amp;quot;a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;.index()&lt;/b&gt; method returns the lowest index in list that obj appears&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list2=[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;]
my_list2.index(&amp;quot;c&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;function &lt;b&gt;sum()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list1=[1,2,3,4,5]
sum(my_list1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;function &lt;b&gt;.len()&lt;/b&gt; gives the total length of the list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(my_list1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.sort()&lt;/b&gt; function to sort objects of list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [90,3,8,4,1,10,25,99]
my_list.sort() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 3, 4, 8, 10, 25, 90, 99]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [90,3,8,4,1,10,25,99]
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[90, 3, 8, 4, 1, 10, 25, 99]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.sort()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.reverse()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[99, 90, 25, 10, 8, 4, 3, 1]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;min()&lt;/b&gt; and &lt;b&gt;max()&lt;/b&gt; functions to return the &lt;b&gt;minimum&lt;/b&gt; and the &lt;b&gt;maximum&lt;/b&gt; from list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[99, 90, 25, 10, 8, 4, 3, 1]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;99&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;example applying a loop &lt;b&gt;for&lt;/b&gt; and &lt;b&gt;print()&lt;/b&gt; function to return values from a list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_month = [&amp;quot;jan&amp;quot;,&amp;quot;feb&amp;quot;,&amp;quot;mar&amp;quot;]
for month in list_month:
print(month)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jan
feb
mar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;enumerate()&lt;/b&gt; function to return values and index&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_month = [&amp;quot;jan&amp;quot;,&amp;quot;feb&amp;quot;,&amp;quot;mar&amp;quot;]
for month in enumerate(list_month):
 print(month)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(0, &amp;lsquo;jan&amp;rsquo;)
(1, &amp;lsquo;feb&amp;rsquo;)
(2, &amp;lsquo;mar&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.split()&lt;/b&gt; method to transform string into list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_string = &amp;quot;January-February-March&amp;quot;
my_string.split(&amp;quot;-&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&amp;lsquo;January&amp;rsquo;, &amp;lsquo;February&amp;rsquo;, &amp;lsquo;March&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.join()&lt;/b&gt; method to transform list into string&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [&#39;January&#39;, &#39;February&#39;, &#39;March&#39;]
&amp;quot;:&amp;quot;.join(list1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lsquo;January:February:March&amp;rsquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-5-loop-over-lists&#34;&gt;2.5 Loop over lists&lt;/h2&gt;

&lt;p&gt;You can loop over the elements of a list like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [&#39;January&#39;, &#39;February&#39;, &#39;March&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for month in list1:
    print(month)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;January
February
March
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want access to the index of each element within the body of a loop, use the built-in enumerate function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [&#39;January&#39;, &#39;February&#39;, &#39;March&#39;]
for idx, month in enumerate(list1):
    print(&#39;#%d: %s&#39; % (idx + 1, month))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#1: January
#2: February
#3: March
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-6-list-comprehensions&#34;&gt;2.6 List comprehensions&lt;/h2&gt;

&lt;p&gt;When programming, frequently we want to transform one type of data into another. As a simple example, consider the following code that computes square numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = [0, 1, 2, 3, 4]
squares = []
for x in nums:
    squares.append(x ** 2)
print(squares)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 1, 4, 9, 16]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, with You can make this code simpler using a list comprehension:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = [0, 1, 2, 3, 4]
squares = [x ** 2 for x in nums]
print(squares)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 1, 4, 9, 16]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List comprehensions can also contain conditions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = [0, 1, 2, 3, 4]
even_squares = [x ** 2 for x in nums if x % 2 == 0]
print(even_squares)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 4, 16]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-7-tuples&#34;&gt;2.7 Tuples&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1 tuple is a list, a set of stored values, but with the difference that a tuple can not be modified as in a list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the interest of a tuple is what is stored in a tuple will never be modifiable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We write all the elements of a tuple by separating them with commas and all surrounded by parentheses:
         - my_tuple = (,,,,)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use a tuple to define some kinds of constants that are not intended to change&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1=(1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1, 2, 3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1[0]=0 # we can&#39;t change a tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-60-c1b0272b0229&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 tuple1[0]=0 # we can&#39;t change a tuple
TypeError: &#39;tuple&#39; object does not support item assignment
----------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercice-on-lists&#34;&gt;- Exercice on lists:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    1- Create a list named &amp;quot;my_notes&amp;quot; which contains the following numbers:
                 19,7,15,9,10,6,18,10,16,14,13,10,2,20,17,8,12,10,11,4

    2- Calculate the overall average of this class of 20 students and put the result in a variable called &amp;quot;general_note&amp;quot;

    3- Find the lowest score and the highest score

    4- Sort the list of notes from largest to smallest

    5- Replace note 2 by 6

    6- Count the number of notes equal to 10 in the class

    7- Count the number of notes equal to 10 in the class

    8- Find the number of students with a grade&amp;gt; 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1- Create a list named &amp;ldquo;my_notes&amp;rdquo; which contains the following numbers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes=[19,7,15,9,10,6,18,10,16,14,13,10,2,20,17,8,12,10,11,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[19, 7, 15, 9, 10, 6, 18, 10, 16, 14, 13, 10, 2, 20, 17, 8, 12, 10, 11, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Calculate the overall average of this class of 20 students and put the result in a variable called &amp;ldquo;general_note&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy
moyenne_generale=numpy.mean(mes_notes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;moyenne_generale
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11.55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3- Find the lowest score and the highest score&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(mes_notes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(mes_notes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4- Sort the list of notes from largest to smallest
    - method 1 :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes.sort()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 4, 6, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes.reverse()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 10, 10, 10, 9, 8, 7, 6, 4, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;method 2: using .sort() method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(mes_notes.sort)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Help on built-in function sort:&lt;/p&gt;

&lt;p&gt;sort(*, key=None, reverse=False) method of builtins.list instance
    Stable sort &lt;em&gt;IN PLACE&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes.sort(reverse=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 10, 10, 10, 9, 8, 7, 6, 4, 2]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5- Replace note 2 by 6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes[19]=6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 10, 10, 10, 9, 8, 7, 6, 4, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6-  Count the number of notes equal to 10 in the class? : method count()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes.count(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7- Count the number of notes equal to 10 in the class&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array=numpy.asarray(mes_notes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 10, 10, 10,  9,  8,  7,
        6,  4,  6])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array[mes_notes_array&amp;gt;10] # affichage des notes supérieures à 10 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([20, 19, 18, 17, 16, 15, 14, 13, 12, 11])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array&amp;gt;10 # cette opération est un masque avec des booléens
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False, False, False, False, False, False, False, False,
       False, False])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(mes_notes_array[mes_notes_array&amp;gt;10])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array[mes_notes_array&amp;gt;10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([20, 19, 18, 17, 16, 15, 14, 13, 12, 11])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>3 Flow control</title>
      <link>/courses/tutorial_python/3-flow_control/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/3-flow_control/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;img src=&#34;./figures/pylogo.png&#34; alt=&#34;Indentation&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-1-flow-control-with-the-conditional-structure-if-else&#34;&gt;3.1  Flow control with the conditional structure: If, else&lt;/h2&gt;

&lt;p&gt;The flow control statements can be classified into Conditional Statements and Iteration Statements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Conditional Statements selects a particular set of statements for execution depending upon a specified condition.
The most popular conditional control statement is ‘if else’, so let’s see how it works in python.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                                 Syntax IF:

                                 if condition:
                                 indentation ---&amp;gt; action 1
                                 elif:
                                 indentation ---&amp;gt; action 2
                                 else:
                                 indentation ---&amp;gt; action 3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WARNING: python works in indentation
&lt;img src=&#34;/img/indentation.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Multiple tasks can be assigned in conditional structures.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_variable = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (my_variable &amp;gt; 5 ):
my_variable = my_variable + 1 
my_variable    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (my_variable &amp;gt; 5 ):
my_variable = my_variable + 1 
else:
my_variable = my_variable - 1 
my_variable   

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (my_variable &amp;gt; 5 ):
my_variable = my_variable + 1 
elif (my_variable == 5) :
my_variable = my_variable * 10 
else:
my_variable = my_variable - 1 
my_variable   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-2-flow-control-loop-for&#34;&gt;3.2 Flow control: Loop for:&lt;/h2&gt;

&lt;p&gt;A loop allows to repeat instructions according to your needs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                         Syntax FOR:
                                     items = [1,2,3]
                                     for i in items:
                                     indentation ---&amp;gt; print (i) # 1,2,3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be careful once again to respect the indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list=[1,2,3,4,5,6,7,8,9,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for value in my_list:
    print(value*2)
    print(&amp;quot;---&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
---
4
---
6
---
8
---
10
---
12
---
14
---
16
---
18
---
20
---
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for value in my_list:
    my_new_value=value*2
    print(&amp;quot;The multiplication of 2 * %d = %d&amp;quot; % (value,my_new_value))  # to concatenate text and a variable
                               #% d: python knows we&#39;ll display an integer
                               #% s: python knows we&#39;ll display a string
                               #% f: python knows we will display a float
                               # we give a tuple to display
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The multiplication of 2 * 1 = 2
The multiplication of 2 * 2 = 4
The multiplication of 2 * 3 = 6
The multiplication of 2 * 4 = 8
The multiplication of 2 * 5 = 10
The multiplication of 2 * 6 = 12
The multiplication of 2 * 7 = 14
The multiplication of 2 * 8 = 16
The multiplication of 2 * 9 = 18
The multiplication of 2 * 10 = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-3-flow-control-while-loop-same-as-if-structure-but-repeated&#34;&gt;3.3 Flow control:  while() loop , same as if structure but repeated&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;                        Syntaxe WHILE:
                                       run = True
                                       while run:
                                       indentation ---&amp;gt; print(&#39;running&#39;)
                                            if &amp;lt;condition&amp;gt;:
                                               run = False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as the condition is met, the iteration in the loop continues.
Be careful to respect the indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list=[1,2,3,4,5,6,7,8,9,10]
counter=0
while (counter &amp;lt; 10):
    print(&amp;quot;My counter = %d&amp;quot; % (counter))
    print(&amp;quot;My value = %d&amp;quot; % (my_list[counter]))   # in a tuple, we want the value from our list
    counter=counter+1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My counter = 0
My value = 1
My counter = 1
My value = 2
My counter = 2
My value = 3
My counter = 3
My value = 4
My counter = 4
My value = 5
My counter = 5
My value = 6
My counter = 6
My value = 7
My counter = 7
My value = 8
My counter = 8
My value = 9
My counter = 9
My value = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we can combine several conditions in a while loop
# we will for example extract only the even values
# If modulo value = 0, even number
counter=0
counter_true_result=0
while (counter &amp;lt; 10):
    if my_list[counter] % 2 == 0:
        print(&amp;quot;My counter = %d&amp;quot; % (counter))
        print(&amp;quot;My value = %d&amp;quot; % (my_list[counter]))  
        counter_true_result=counter_true_result+1
    counter=counter+1
print(counter_true_result)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My counter = 1
My value = 2
My counter = 3
My value = 4
My counter = 5
My value = 6
My counter = 7
My value = 8
My counter = 9
My value = 10
5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-4-loop-range&#34;&gt;3.4 Loop  range&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s possible to create a loop with range() function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for my_value in range(0,10):
    print(my_value*2)
    print(&amp;quot;---&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
---
2
---
4
---
6
---
8
---
10
---
12
---
14
---
16
---
18
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-5-to-stop-a-loop&#34;&gt;3.5 To stop a loop:&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s possible to stop a loop with break command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list=[1,2,3,4,5,6,7,8,9,10]
for i in my_list:
     if i &amp;gt; 5:
             print(&amp;quot;stop: the following values are greater than 5.&amp;quot;)
             break
     print(i)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
2
3
4
5
stop: the following values are greater than 5.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# to import a library
import numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(np)    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;b&gt;help()&lt;/b&gt; function provides help on a function of the library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Example: help(numpy.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help (np.median) # for help on a library function
                 # we can distinguish between optional and mandatory arguments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Help on function median in module numpy:

median(a, axis=None, out=None, overwrite_input=False, keepdims=False)
    Compute the median along the specified axis.

    Returns the median of the array elements.

    Parameters
    ----------
    a : array_like
        Input array or object that can be converted to an array.
    axis : {int, sequence of int, None}, optional
        Axis or axes along which the medians are computed. The default
        is to compute the median along a flattened version of the array.
        A sequence of axes is supported since version 1.9.0.
    out : ndarray, optional
        Alternative output array in which to place the result. It must
        have the same shape and buffer length as the expected output,
        but the type (of the output) will be cast if necessary.
    overwrite_input : bool, optional
       If True, then allow use of memory of input array `a` for
       calculations. The input array will be modified by the call to
       `median`. This will save memory when you do not need to preserve
       the contents of the input array. Treat the input as undefined,
       but it will probably be fully or partially sorted. Default is
       False. If `overwrite_input` is ``True`` and `a` is not already an
       `ndarray`, an error will be raised.
    keepdims : bool, optional
        If this is set to True, the axes which are reduced are left
        in the result as dimensions with size one. With this option,
        the result will broadcast correctly against the original `arr`.

        .. versionadded:: 1.9.0

    Returns
    -------
    median : ndarray
        A new array holding the result. If the input contains integers
        or floats smaller than ``float64``, then the output data-type is
        ``np.float64``.  Otherwise, the data-type of the output is the
        same as that of the input. If `out` is specified, that array is
        returned instead.

    See Also
    --------
    mean, percentile

    Notes
    -----
    Given a vector ``V`` of length ``N``, the median of ``V`` is the
    middle value of a sorted copy of ``V``, ``V_sorted`` - i
    e., ``V_sorted[(N-1)/2]``, when ``N`` is odd, and the average of the
    two middle values of ``V_sorted`` when ``N`` is even.

    Examples
    --------
    &amp;gt;&amp;gt;&amp;gt; a = np.array([[10, 7, 4], [3, 2, 1]])
    &amp;gt;&amp;gt;&amp;gt; a
    array([[10,  7,  4],
           [ 3,  2,  1]])
    &amp;gt;&amp;gt;&amp;gt; np.median(a)
    3.5
    &amp;gt;&amp;gt;&amp;gt; np.median(a, axis=0)
    array([ 6.5,  4.5,  2.5])
    &amp;gt;&amp;gt;&amp;gt; np.median(a, axis=1)
    array([ 7.,  2.])
    &amp;gt;&amp;gt;&amp;gt; m = np.median(a, axis=0)
    &amp;gt;&amp;gt;&amp;gt; out = np.zeros_like(m)
    &amp;gt;&amp;gt;&amp;gt; np.median(a, axis=0, out=m)
    array([ 6.5,  4.5,  2.5])
    &amp;gt;&amp;gt;&amp;gt; m
    array([ 6.5,  4.5,  2.5])
    &amp;gt;&amp;gt;&amp;gt; b = a.copy()
    &amp;gt;&amp;gt;&amp;gt; np.median(b, axis=1, overwrite_input=True)
    array([ 7.,  2.])
    &amp;gt;&amp;gt;&amp;gt; assert not np.all(a==b)
    &amp;gt;&amp;gt;&amp;gt; b = a.copy()
    &amp;gt;&amp;gt;&amp;gt; np.median(b, axis=None, overwrite_input=True)
    3.5
    &amp;gt;&amp;gt;&amp;gt; assert not np.all(a==b)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;exercise&#34;&gt;- Exercise&lt;/h3&gt;

&lt;h3 id=&#34;objective-to-manipulate-a-list-containing-the-prices-of-58-houses&#34;&gt;Objective: To manipulate a list containing the prices of 58 houses&lt;/h3&gt;

&lt;p&gt;Creation of the list &amp;ldquo;price_of_58_houses&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;price_of_58_houses=list(range(125000,700000,10000))   
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;price_of_58_houses[0:20]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[125000,
 135000,
 145000,
 155000,
 165000,
 175000,
 185000,
 195000,
 205000,
 215000,
 225000,
 235000,
 245000,
 255000,
 265000,
 275000,
 285000,
 295000,
 305000,
 315000]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(price_of_58_houses)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;58



1- How many houses have a price greater than or equal to 300000 euros?

2- How many houses have a price between 250000 and 400000 euros?

3- How many houses have a price that is not higher than 600000 euros?

4- How many houses have a price lower than 150000 euros or more than 650000 euros?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hint: Scroll through the list with a loop, use if condition statements, and a counter to count the true results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 1. 
nombre_maisons=0
for prix in price_of_58_houses:    
    if prix &amp;gt;= 300000:             
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Number of house with price greater than or equal to 300000 euros : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Number of house with price greater than or equal to 300000 euros : 40
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2. 

nombre_maisons=0
for prix in price_of_58_houses:   
    if (prix &amp;gt;= 250000) and (prix &amp;lt;= 400000):  compteur
        nombre_maisons=nombre_maisons+1
print(&amp;quot;The result is : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The result is : 15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3.
nombre_maisons=0
for prix in price_of_58_houses:
    if not(prix &amp;gt; 600000):
        nombre_maisons=nombre_maisons+1
print(&amp;quot;The result is : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The result is : 48
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 4. 
nombre_maisons=0
for prix in price_of_58_houses:
    if (prix &amp;lt; 150000) or (prix &amp;gt; 650000):
        nombre_maisons=nombre_maisons+1
print(&amp;quot;The result is : : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is : 8&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4 Functions</title>
      <link>/courses/tutorial_python/4-functions/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/4-functions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;img src=&#34;./figures/pylogo.png&#34; alt=&#34;Indentation&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;4-libraries-and-functions-in-python&#34;&gt;4  Libraries and functions in  Python&lt;/h1&gt;

&lt;h2 id=&#34;4-1-introduction-to-librairies&#34;&gt;4.1 Introduction to librairies&lt;/h2&gt;

&lt;p&gt;To facilitate the processing, manipulation and visualization of data, Python has many libraries.&lt;/p&gt;

&lt;p&gt;Python libraries allow you to import codes and functions that will make our analysis easier.&lt;/p&gt;

&lt;p&gt;Here are the most popular libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;numpy: mathematics or scientific calculations: &lt;a href=&#34;http://www.numpy.org/&#34; target=&#34;_blank&#34;&gt;http://www.numpy.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pandas: data manipulation: &lt;a href=&#34;http://pandas.pydata.org/&#34; target=&#34;_blank&#34;&gt;http://pandas.pydata.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;matplotlib: visualization of data: &lt;a href=&#34;https://matplotlib.org/&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;scikit-learn: machine learning: &lt;a href=&#34;https://scikit-learn.org&#34; target=&#34;_blank&#34;&gt;https://scikit-learn.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Datetime: formatting dates: https: //docs.python.org/2/library/datetime.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To import a library under Python, use the function: &lt;b&gt; import &lt;/b&gt; + library_name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# To import a library
import numpy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every library imported under python has help.&lt;/p&gt;

&lt;p&gt;To know what a library contains, we use the function: dir ()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Example: dir(numpy)    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(numpy)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;b&gt; help () &lt;/b&gt; function provides help with a function in the library&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Example: help(numpy.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(numpy.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Help on function mean in module numpy:

mean(a, axis=None, dtype=None, out=None, keepdims=&amp;lt;no value&amp;gt;)
    Compute the arithmetic mean along the specified axis.

    Returns the average of the array elements.  The average is taken over
    the flattened array by default, otherwise over the specified axis.
    `float64` intermediate and return values are used for integer inputs.

    Parameters
    ----------
    a : array_like
        Array containing numbers whose mean is desired. If `a` is not an
        array, a conversion is attempted.
    axis : None or int or tuple of ints, optional
        Axis or axes along which the means are computed. The default is to
        compute the mean of the flattened array.

        .. versionadded:: 1.7.0

        If this is a tuple of ints, a mean is performed over multiple axes,
        instead of a single axis or all the axes as before.
    dtype : data-type, optional
        Type to use in computing the mean.  For integer inputs, the default
        is `float64`; for floating point inputs, it is the same as the
        input dtype.
    out : ndarray, optional
        Alternate output array in which to place the result.  The default
        is ``None``; if provided, it must have the same shape as the
        expected output, but the type will be cast if necessary.
        See `doc.ufuncs` for details.

    keepdims : bool, optional
        If this is set to True, the axes which are reduced are left
        in the result as dimensions with size one. With this option,
        the result will broadcast correctly against the input array.

        If the default value is passed, then `keepdims` will not be
        passed through to the `mean` method of sub-classes of
        `ndarray`, however any non-default value will be.  If the
        sub-class&#39; method does not implement `keepdims` any
        exceptions will be raised.

    Returns
    -------
    m : ndarray, see dtype parameter above
        If `out=None`, returns a new array containing the mean values,
        otherwise a reference to the output array is returned.

    See Also
    --------
    average : Weighted average
    std, var, nanmean, nanstd, nanvar

    Notes
    -----
    The arithmetic mean is the sum of the elements along the axis divided
    by the number of elements.

    Note that for floating-point input, the mean is computed using the
    same precision the input has.  Depending on the input data, this can
    cause the results to be inaccurate, especially for `float32` (see
    example below).  Specifying a higher-precision accumulator using the
    `dtype` keyword can alleviate this issue.

    By default, `float16` results are computed using `float32` intermediates
    for extra precision.

    Examples
    --------
    &amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2], [3, 4]])
    &amp;gt;&amp;gt;&amp;gt; np.mean(a)
    2.5
    &amp;gt;&amp;gt;&amp;gt; np.mean(a, axis=0)
    array([ 2.,  3.])
    &amp;gt;&amp;gt;&amp;gt; np.mean(a, axis=1)
    array([ 1.5,  3.5])

    In single precision, `mean` can be inaccurate:

    &amp;gt;&amp;gt;&amp;gt; a = np.zeros((2, 512*512), dtype=np.float32)
    &amp;gt;&amp;gt;&amp;gt; a[0, :] = 1.0
    &amp;gt;&amp;gt;&amp;gt; a[1, :] = 0.1
    &amp;gt;&amp;gt;&amp;gt; np.mean(a)
    0.54999924

    Computing the mean in float64 is more accurate:

    &amp;gt;&amp;gt;&amp;gt; np.mean(a, dtype=np.float64)
    0.55000000074505806
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_1=[1,2,3,4,5,6,7,8,9,10]
list_1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numpy.mean(list_1)  # name of library + name of function 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numpy.max(list_1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-2-built-in-function&#34;&gt;4.2  Built-in function&lt;/h2&gt;

&lt;p&gt;Python gives you many built-in functions like print(), etc&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a list: &lt;a href=&#34;https://docs.python.org/3/library/functions.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/3/library/functions.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;some-examples&#34;&gt;Some examples:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;abs(-1)  # Return the absolute value of a number 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len([1,2,3]) # Return the length (the number of items) of an object. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max([1,3,2,6,99,1])    #Return max value from a list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;99
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;round(1.2)  # Return number rounded to ndigits precision 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-3-create-own-functions&#34;&gt;4.3  Create own functions.&lt;/h2&gt;

&lt;p&gt;These functions are called user-defined functions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a function makes our code more fluid and readable:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Syntax: to write a function, we start with the def() keyword&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;           def sum (a, b): # we define the parameters
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;indentation &amp;mdash;&amp;gt; return a + b # return keyword to return result variable&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It does not specify the type of return, it is dynamically resolved at the time of execution of the program.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Call of the function: result = sum (12,4) # result = 16&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python also supports keyword arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                def sum (a, b): # we define the parameters
                    return a + b # return keyword to return result variable
                result = sum (12, b = 4)
            -----------------------------
                def sum (a, b = 4): # we define the parameters
                      return a + b # return keyword to return result variable
                result = sum (12)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sign(x):
    if x &amp;gt; 0:
        return &#39;positive&#39;
    elif x &amp;lt; 0:
        return &#39;negative&#39;
    else:
        return &#39;zero&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list_to_test = [0,2,-8,10,1,-6]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for element in my_list_to_test:
    print(sign(element))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;zero
positive
negative
positive
positive
negative
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will often define functions to take optional keyword arguments, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello(name, loud=False):
    if loud:
        print(&#39;HELLO, %s&#39; % name.upper())
    else:
        print(&#39;Hello, %s!&#39; % name)

hello(&#39;Bob&#39;)
hello(&#39;Fred&#39;, loud=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Hello, Bob!
HELLO, FRED
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-4-functions-with-args&#34;&gt;4.4  Functions with *args&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Special syntax in python that allows to manage a variable number of parameters when calling a function&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s the * that counts&lt;/li&gt;
&lt;li&gt;args is a convention&lt;/li&gt;
&lt;li&gt;* args is a list of parameters containing the parameters of a function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntax * args:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def print_ingredients (* args):
            for ingredients in args:
                print (ingredient)

        print_ingredients ( &#39;Tomatoes&#39;)
        print_ingredients ( &#39;Tomatoes&#39; Banana)
        print_ingredients ( &#39;Tomatoes&#39; Banana, apple)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sum(*args):
    total = 0 
    for number in args: 
        total += number 
    print(total)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(2,3)
sum(2,3,10,90,23)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
128
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-5-functions-with-kwargs&#34;&gt;4.5 Functions with **kwargs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Like * args, but for keyword arguments&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s the * that counts&lt;/li&gt;
&lt;li&gt;** kwargs is a python dictionary containing the keys / values ​​of the parameters of a function&lt;/li&gt;
&lt;li&gt;it must always be present last in the list of parameters of a function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntax ** kwargs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def print_languages ​​(** args):
            for language, definition in kwargs.items ():
                print (&#39;{} is {}&#39;. format (language, definition))

        print_languages ​​(Python = &#39;awesome&#39;)
        print_languages ​​(Python = &#39;awesome&#39;, Java = &#39;verbose&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def capitals(**kwargs):
    for country, capital in kwargs.items():
        print(&amp;quot;The capital of {} in {}&amp;quot;.format(country, capital))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;capitals(France = &#39;Paris&#39;, Germany=&#39;Berlin&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The capital of France in Paris
The capital of Germany in Berlin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def capitals(title, ending=&#39;&#39;,  **kwargs):
    print(title)
    for country, capital in kwargs.items():
        print(&amp;quot;The capital of {} in {}&amp;quot;.format(country, capital))
    if ending:
        print(ending)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;capitals(&amp;quot;List of countries&amp;quot;,
    France = &#39;Paris&#39;, Germany=&#39;Berlin&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;List of countries
The capital of France in Paris
The capital of Germany in Berlin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;keywords = {&#39;france&#39;: &#39;Paris&#39;, &#39;Germany&#39; : &#39;Allemage&#39;}
capitals(&amp;quot;List of countries 2 &amp;quot;, **keywords)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;List of countries 2 
The capital of france in Paris
The capital of Germany in Allemage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-6-import-own-functions&#34;&gt;4.6 Import own functions&lt;/h2&gt;

&lt;p&gt;Modules refer to a file containing Python statements and definitions.&lt;/p&gt;

&lt;p&gt;A file containing Python code, for e.g.: example.py, is called a module and its module name would be example.&lt;/p&gt;

&lt;p&gt;We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.&lt;/p&gt;

&lt;p&gt;We can define our most used functions in a module and import it, instead of copying their definitions into different programs.&lt;/p&gt;

&lt;p&gt;Here, we have defined different funcitons inside a module named my_functions.&lt;/p&gt;

&lt;p&gt;We use the import keyword to import our module and then our functions. To import our previously defined module example we type the following in the Python prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import my_functions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the module name we can access the function using the dot . operator. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_functions.substraction(4,6)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5 Dictionaries</title>
      <link>/courses/tutorial_python/5-dictionaries/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/5-dictionaries/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;img src=&#34;./figures/pylogo.png&#34; alt=&#34;Indentation&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The dictionary stores (key, value) pairs&lt;/li&gt;
&lt;li&gt;They are unordered data structures&lt;/li&gt;
&lt;li&gt;Principle: we can link a key to a value&lt;/li&gt;
&lt;li&gt;The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.&lt;/li&gt;
&lt;li&gt;Keys are unique within a dictionary while values may not be.&lt;/li&gt;
&lt;li&gt;Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces.&lt;/li&gt;
&lt;li&gt;An empty dictionary without any items is written with just two curly braces, like this: {}.&lt;/li&gt;
&lt;li&gt;Dictionary values have no restrictions. They can be any arbitrary Python object, either standard objects or user-defined objects. However, same is not true for the keys.&lt;/li&gt;
&lt;li&gt;Keys must be immutable. Which means you can use strings, numbers or tuples as dictionary keys but something like [&amp;lsquo;key&amp;rsquo;] is not allowed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find all you need to know about dictionaries in the documentation:
&lt;a href=&#34;https://docs.python.org/2/library/stdtypes.html#dict&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/library/stdtypes.html#dict&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-1-create-a-dictionary&#34;&gt;5.1 Create a dictionary:&lt;/h2&gt;

&lt;p&gt;In a dictionary, each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces like this: {}.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# exemple : students&#39; note dictionary
my_dictionary = {
    &amp;quot;Marie&amp;quot; : 15,
    &amp;quot;Thomas&amp;quot; : 12,
    &amp;quot;Julien&amp;quot; : &amp;quot;absent&amp;quot;,
    &amp;quot;Elise&amp;quot; : 9,
    &amp;quot;Samuel&amp;quot; : 17
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_dictionary  # We have the key : the value 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Marie&#39;: 15, &#39;Thomas&#39;: 12, &#39;Julien&#39;: &#39;absent&#39;, &#39;Elise&#39;: 9, &#39;Samuel&#39;: 17}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-2-update-a-dictionary&#34;&gt;5.2 Update a dictionary:&lt;/h2&gt;

&lt;p&gt;You can update a dictionary by adding a new entry or a key-value pair, modifying an existing entry, or deleting an existing entry as shown below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To &lt;b&gt;add&lt;/b&gt; key-value pair&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Adding a key-value pair in a dictionary
my_dictionary[&amp;quot;Julie&amp;quot;]=9
print(my_dictionary)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;Marie&amp;rsquo;: 15, &amp;lsquo;Thomas&amp;rsquo;: 12, &amp;lsquo;Julien&amp;rsquo;: &amp;lsquo;absent&amp;rsquo;, &amp;lsquo;Elise&amp;rsquo;: 9, &amp;lsquo;Samuel&amp;rsquo;: 17, &amp;lsquo;Julie&amp;rsquo;: 9}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To &lt;b&gt;change&lt;/b&gt; a value using existing key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_dictionary[&amp;quot;Julien&amp;quot;]=13
print(my_dictionary)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;Marie&amp;rsquo;: 15, &amp;lsquo;Thomas&amp;rsquo;: 12, &amp;lsquo;Julien&amp;rsquo;: 13, &amp;lsquo;Elise&amp;rsquo;: 9, &amp;lsquo;Samuel&amp;rsquo;: 17, &amp;lsquo;Julie&amp;rsquo;: 9}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More than one entry per key not allowed. Which means no duplicate key is allowed. When duplicate keys encountered during assignment, the last assignment wins.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict = {&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;Manni&#39;}
dict
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Name&#39;: &#39;Manni&#39;, &#39;Age&#39;: 7}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To &lt;b&gt;delete&lt;/b&gt; a value using a key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can either remove individual dictionary elements or clear the entire contents of a dictionary. You can also delete entire dictionary in a single operation.&lt;/p&gt;

&lt;p&gt;To explicitly remove an entire dictionary, just use the del statement. Following is a simple example −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del my_dictionary[&amp;quot;Julie&amp;quot;] # remove entry with key &#39;Name&#39;
my_dictionary.clear()     # remove all entries in my_dictionary
del my_dictionary       # delete entire dictionary
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_dictionary)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-7-04bcd56b6daf&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 print(my_dictionary)
NameError: name &#39;my_dictionary&#39; is not defined
---------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-3-access-a-dictionary&#34;&gt;5.3 Access a dictionary:&lt;/h2&gt;

&lt;p&gt;To access dictionary elements, you can use the familiar square brackets along with the key to obtain its value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_dictionary = {
    &amp;quot;Marie&amp;quot; : 15,
    &amp;quot;Thomas&amp;quot; : 12,
    &amp;quot;Julien&amp;quot; : &amp;quot;absent&amp;quot;,
    &amp;quot;Elise&amp;quot; : 9,
    &amp;quot;Samuel&amp;quot; : 17
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_dictionary[&amp;quot;Samuel&amp;quot;]   
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We can access ditionary elements using &lt;b&gt;FOR&lt;/b&gt; loop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by value valeur&lt;/li&gt;
&lt;li&gt;by key&lt;/li&gt;

&lt;li&gt;&lt;p&gt;by key-value pair&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# .keys() method returns list of dictionary dict&#39;s keys:
my_dictionary.keys()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dict_keys([&amp;lsquo;Marie&amp;rsquo;, &amp;lsquo;Thomas&amp;rsquo;, &amp;lsquo;Julien&amp;rsquo;, &amp;lsquo;Elise&amp;rsquo;, &amp;lsquo;Samuel&amp;rsquo;])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# .values() method returns list of dictionary dict&#39;s values
my_dictionary.values()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_values([15, 12, &amp;lsquo;absent&amp;rsquo;, 9, 17])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example using for loop and keys dictionary
for key in my_dictionary.keys():
print(key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Marie
Thomas
Julien
Elise
Samuel&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for value in my_dictionary.values():
print(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15
12
absent
9
17&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# .items() method returns a list of dict&#39;s (key, value) tuple pairs
my_dictionary.items()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_items([(&amp;lsquo;Marie&amp;rsquo;, 15), (&amp;lsquo;Thomas&amp;rsquo;, 12), (&amp;lsquo;Julien&amp;rsquo;, &amp;lsquo;absent&amp;rsquo;), (&amp;lsquo;Elise&amp;rsquo;, 9), (&amp;lsquo;Samuel&amp;rsquo;, 17)])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example using for loop and key-value pairs in dictionary
for key,value in my_dictionary.items(): # la boucle for obtient un tuple à chaque itération
if value == &#39;absent&#39;:
    print(&#39;Absent&#39;)
else:
    print(&#39;The average of %s is %s /20&#39; % (key, value))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The average of Marie is 15 /20
The average of Thomas is 12 /20
Absent
The average of Elise is 9 /20
The average of Samuel is 17 /20&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;exercise-on-dictionaries&#34;&gt;Exercise on dictionaries&lt;/h3&gt;

&lt;h3 id=&#34;goal-to-manipulate-a-dictionary-containing-the-notes-of-15-students&#34;&gt;Goal: To manipulate a dictionary containing the notes of 15 students.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1- Create a dictionary named notes_levels containing the following notes:
Mary: 15; Samuel: 17; Gaston: 12; Fred: 10; Mae: 5; Julie: 15; Zoe: 7; Claire: 20; Chloe: 8; Julian: 14, Gael: 9, Samia: 15, Omar: 11, Gabriel: 16, Manon: 2

2- What is the average of the class?

3- Display the total number of students in the class.

4- How many students have a grade strictly above average?

5- What is the name of the best student in the class?

6- How many students have a first name with strictly less than 4 letters?

7- Show the first name of the pupils who have an even note (multiple of 2).! 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;correction&#34;&gt;Correction&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notes_levels ={
&amp;quot;Marie&amp;quot; : 15,
&amp;quot;Samuel&amp;quot; : 17,
&amp;quot;Gaston&amp;quot; : 12,
&amp;quot;Fred&amp;quot; : 10,
&amp;quot;Mae&amp;quot; : 5,
&amp;quot;Julie&amp;quot; : 15,
&amp;quot;Zoe&amp;quot; : 7,
&amp;quot;Claire&amp;quot; : 20,
&amp;quot;Chloe&amp;quot; : 8,
&amp;quot;Julien&amp;quot; : 14,
&amp;quot;Gaël&amp;quot; : 9,
&amp;quot;Samia&amp;quot; : 15,
&amp;quot;Omar&amp;quot; : 11,
&amp;quot;Gabriel&amp;quot; : 16,
&amp;quot;Manon&amp;quot; : 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notes_eleves.values()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_values([15, 17, 12, 10, 5, 15, 7, 20, 8, 14, 9, 15, 11, 16, 2])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import numpy  
average_note =numpy.mean(list(notes_eleves.values()))  

``
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;average_note&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    11.733333333333333



- 3: 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
nombre_eleves=len(notes_eleves)
print(&amp;ldquo;Le nombre d&amp;rsquo;élèves dans la classe est de %d&amp;rdquo; % (nombre_eleves))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Le nombre d&#39;élèves dans la classe est de 15
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
len(notes_eleves.keys())&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    15

- 4: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
nombre_eleves_avec_note_sup_moyenne=0
for valeur in notes_eleves.values():
    if valeur &amp;gt; moyenne_generale:&lt;br /&gt;
        nombre_eleves_avec_note_sup_moyenne=nombre_eleves_avec_note_sup_moyenne+1
print(&amp;ldquo;Le nombre d&amp;rsquo;élèves avec une note supérieure à %.2f est de %d élèves&amp;rdquo; % (moyenne_generale, nombre_eleves_avec_note_sup_moyenne))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    Le nombre d&#39;élèves avec une note supérieure à 11.73 est de 8 élèves
    

- 5:  


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python&lt;/p&gt;

&lt;h1 id=&#34;on-va-d-abord-déterminer-la-meilleure-note-utilisation-de-la-fonction-max&#34;&gt;On va d&amp;rsquo;abord déterminer  la meilleure note: utilisation de la fonction max()&lt;/h1&gt;

&lt;p&gt;meilleure_note=max(notes_eleves.values())&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;meilleure_note
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On va parcourir notre dictionnaire et trouver la clef associée à notre valeur
# Pour cela on va travailler sur les tuples avec la méthode item()
for prenom,note in notes_eleves.items():
    if note == meilleure_note:
        print(prenom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Claire
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;6:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On va parcourir les clefs de notre dictionnaire et mettre une condition sur la longueur de chaque clef

nombre_eleves=0
for prenom in notes_eleves.keys():
if len(prenom) &amp;lt; 4:
    nombre_eleves=nombre_eleves+1
print(nombre_eleves)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;7:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On va parcourir les tuples du dictionnaire et mettre une condition sur les valeurs 
for prenom,note in notes_eleves.items():
if note % 2 == 0:
    print(prenom, note)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gaston 12
Fred 10
Claire 20
Chloe 8
Julien 14
Gabriel 16
Manon 2&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>6 Numpy library</title>
      <link>/courses/tutorial_python/6-numpy_library/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/6-numpy_library/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/numpy.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numpy is the core library for scientific computing in Python&lt;/li&gt;
&lt;li&gt;A new data container will be used: the ndarray (N-dimensional array). There are vectors (one-dimensional arrays), multidimensional arrays&lt;/li&gt;
&lt;li&gt;It provides a high-performance multidimensional array object, and tools for working with these arrays
We&amp;rsquo;ll see how to initialize Numpy arrays in several ways, access values in arrays, perform math and matrix operations, and use arrays for both masking and comparisons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/&#34; target=&#34;_blank&#34;&gt;https://docs.scipy.org/doc/numpy/reference/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-1-create-a-numpy-array-or-ndarray&#34;&gt;6.1- Create a Numpy array or ndarray&lt;/h2&gt;

&lt;p&gt;We first need to import the numpy package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We will import Numpy library and create alias. 
# Codes with aliases are easier to write and read. 
import numpy as np
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the rank of the array; the shape of an array is a tuple of integers giving the size of the array along each dimension.&lt;/p&gt;

&lt;p&gt;Unlike a list, you can not create empty Numpy tables. You will find below several ways to initialize a Numpy table according to your needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using &lt;b&gt;array()&lt;/b&gt; function to create Numpy array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table1 = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])
table1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
       18, 19, 20])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creation of a two-dimensional array with rows and columns; we create a list of lists. Each list is a row of the table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#  2 rows and 3 columns
table2 = np.array([[1,2,3], [4,5,6]])
table2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#  3 rows and 3 columns
table3 = np.array([[1,2,3], [4,5,6], [7,8,9]])
table3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using &lt;b&gt;range()&lt;/b&gt; function to create Numpy array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table4 = np.array(range(10)) # table with values from 0 to 9
table4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;zeros()&lt;/b&gt; function to create Numpy array with &amp;lsquo;0&amp;rsquo; value :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table5 = np.zeros((4,3)) # table with 4 rows and 3 columns
table5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;ones()&lt;/b&gt; function to create Numpy array with ones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table6 = np.ones((4,3)) # table with 4 rows and 3 columns
table6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;identity()&lt;/b&gt; function to create Numpy array as matrix identity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table7 = np.identity(4) # 4 dimensions
table7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Converting list to ndarray with &lt;b&gt;array()&lt;/b&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [0,1,2,3,4,5,6]
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[0, 1, 2, 3, 4, 5, 6]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table8 = np.array(my_list)
table8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0, 1, 2, 3, 4, 5, 6])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;random()&lt;/b&gt; function to create ndarray with random values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table9 = np.random.randint(100,size=(4,3))  #  4*3  ndarray with random values between  0 and 100 
table9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[78, 47, 23],
       [79, 17,  5],
       [61, 41, 71],
       [12, 41, 27]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;full()&lt;/b&gt;  to create a constant array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table10 = np.full((2,2), 7) # Create a constant array
table10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[7, 7],
       [7, 7]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-2-access-data-in-a-numpy-or-ndarray-array&#34;&gt;6.2 Access data in a Numpy or ndarray array&lt;/h2&gt;

&lt;p&gt;We can access an individual element or a slice of values. Similar to lists, the first element is indexed to 0. For example, array1 [0,0] indicates that we are accessing the first row and the first column. The first number of the tuple [0,0] indicates the index of the line and the second number indicates the index of the column:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table = np.array([[1,2,3], [4,5,6], [7,8,9]])
my_table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here are some examples to access values in a numpy array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[1,2]     # We want the element located at row with index 1 and column with index 2
              #  ndarray(row,column) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[1,-1]    # We want the element at row index 1 and last column
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[0,1]     # We want the element located at row with index 0 and column with index 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[1,0]     # We want the element located at row with index 1 and column with index 0                     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Here are some examples to access data using &lt;b&gt;Slicing&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[:,0]    # We want all rows with column index 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([1, 4, 7])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[0,:]    # We want all columns with row index 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([1, 2, 3])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[:,0:3:2] # We want all rows and index columns from 0 to 3 with steps of 2.
              # So all rows and columns 1 and 2.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1, 3],
       [4, 6],
       [7, 9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[:,-1]  #We want all rows at last column
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([3, 6, 9])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[:,1:-1] # We want all rows with columns between index 1 and last index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[2],
       [5],
       [8]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[2,1:-1] # We want values at row with index 2 and rows between index 1 and last index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([8])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-3-mathematical-and-matrix-calculations-on-a-numpy-array&#34;&gt;6.3 Mathematical and matrix calculations on a Numpy array:&lt;/h2&gt;

&lt;p&gt;Numpy tables are very easy to manipulate: concatenate, add, multiply, transpose with a single line of code.
Below you will find some examples of various arithmetic and multiplicative operations with Numpy tables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 = np.arange(9).reshape(3,3)
array1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2 = np.random.randint(50, size=(3,3))
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[47, 20, 49],
       [40, 15,  7],
       [ 4, 35, 14]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic arithmetic operations: addition, subtraction, multiplication, division
Here a list of mathematical functions provided by numpy in: &lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/routines.math.html&#34; target=&#34;_blank&#34;&gt;https://docs.scipy.org/doc/numpy/reference/routines.math.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 + 10 # add a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[10, 11, 12],
       [13, 14, 15],
       [16, 17, 18]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 - 10 # substract value to each element 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[-10,  -9,  -8],
       [ -7,  -6,  -5],
       [ -4,  -3,  -2]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 * 100 # multiply value to each element 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[  0, 100, 200],
       [300, 400, 500],
       [600, 700, 800]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1[:,0] * 10 # we multiply by 10 all elements at column with index 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 0, 30, 60])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 / 2 # we divide a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[0. , 0.5, 1. ],
       [1.5, 2. , 2.5],
       [3. , 3.5, 4. ]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;some Numpy functions and methods applicable on Numpy tables:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.all.html#numpy.all&#34; title=&#34;numpy.all&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;all&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.any.html#numpy.any&#34; title=&#34;numpy.any&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;any&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis&#34; title=&#34;numpy.apply_along_axis&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;apply_along_axis&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmax.html#numpy.argmax&#34; title=&#34;numpy.argmax&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argmax&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmin.html#numpy.argmin&#34; title=&#34;numpy.argmin&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argmin&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argsort.html#numpy.argsort&#34; title=&#34;numpy.argsort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argsort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.average.html#numpy.average&#34; title=&#34;numpy.average&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;average&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.bincount.html#numpy.bincount&#34; title=&#34;numpy.bincount&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;bincount&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ceil.html#numpy.ceil&#34; title=&#34;numpy.ceil&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ceil&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.clip.html#numpy.clip&#34; title=&#34;numpy.clip&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;clip&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.conj.html#numpy.conj&#34; title=&#34;numpy.conj&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;conj&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.corrcoef.html#numpy.corrcoef&#34; title=&#34;numpy.corrcoef&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;corrcoef&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cov.html#numpy.cov&#34; title=&#34;numpy.cov&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cov&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cross.html#numpy.cross&#34; title=&#34;numpy.cross&#34;&gt;
&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cross&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cumprod.html#numpy.cumprod&#34; title=&#34;numpy.cumprod&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cumprod&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cumsum.html#numpy.cumsum&#34; title=&#34;numpy.cumsum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cumsum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.diff.html#numpy.diff&#34; title=&#34;numpy.diff&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;diff&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.dot.html#numpy.dot&#34; title=&#34;numpy.dot&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;dot&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.floor.html#numpy.floor&#34; title=&#34;numpy.floor&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;floor&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.inner.html#numpy.inner&#34; title=&#34;numpy.inner&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;inner&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.lexsort.html#numpy.lexsort&#34; title=&#34;numpy.lexsort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;lexsort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#max&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;max&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.maximum.html#numpy.maximum&#34; title=&#34;numpy.maximum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;maximum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.mean.html#numpy.mean&#34; title=&#34;numpy.mean&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;mean&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.median.html#numpy.median&#34; title=&#34;numpy.median&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;median&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#min&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;min&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.minimum.html#numpy.minimum&#34; title=&#34;numpy.minimum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;minimum&lt;/span&gt;
&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.nonzero.html#numpy.nonzero&#34; title=&#34;numpy.nonzero&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;nonzero&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.outer.html#numpy.outer&#34; title=&#34;numpy.outer&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;outer&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/re.html#module-re&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;re&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#round&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;round&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.sort.html#numpy.sort&#34; title=&#34;numpy.sort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;sort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.std.html#numpy.std&#34; title=&#34;numpy.std&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;std&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.sum.html#numpy.sum&#34; title=&#34;numpy.sum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;sum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.trace.html#numpy.trace&#34; title=&#34;numpy.trace&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;trace&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.transpose.html#numpy.transpose&#34; title=&#34;numpy.transpose&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;transpose&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.var.html#numpy.var&#34; title=&#34;numpy.var&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;var&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vdot.html#numpy.vdot&#34; title=&#34;numpy.vdot&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vdot&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vectorize.html#numpy.vectorize&#34; title=&#34;numpy.vectorize&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vectorize&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.where.html#numpy.where&#34; title=&#34;numpy.where&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;where&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.add(array1,10) # add a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[10, 11, 12],
       [13, 14, 15],
       [16, 17, 18]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.subtract(array1,10) # substract a value to each element 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[-10,  -9,  -8],
       [ -7,  -6,  -5],
       [ -4,  -3,  -2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.multiply(array1,100) # multiply a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  0, 100, 200],
       [300, 400, 500],
       [600, 700, 800]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.divide(array1, 2) # divide a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0. , 0.5, 1. ],
       [1.5, 2. , 2.5],
       [3. , 3.5, 4. ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1) # computing the Numpy table average using the mean() function
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.mean()  #  computing the Numpy table average using the mean() method
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.min()  #  computing the Numpy table mimimum using the min() method
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.max()  # computing the Numpy table maximum using the max() method
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1, axis=0)  # we apply mean() function only over columns 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([3., 4., 5.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1, axis=1) # we apply mean() function only over rows 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1., 4., 7.])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Operations between several tables&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(array1 +1) * array2     # multiplication of 2 tables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 47,  40, 147],
       [160,  75,  42],
       [ 28, 280, 126]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 + array2 # sum of 2 tables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[47, 21, 51],
       [43, 19, 12],
       [10, 42, 22]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.dot(array1, array2) # dot product of 2 tables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 48,  85,  35],
       [321, 295, 245],
       [594, 505, 455]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-4-update-numpy-array&#34;&gt;6.4 Update Numpy array:&lt;/h2&gt;

&lt;p&gt;Other interesting features include concatenation, splitting, transposition (changing elements from one row to another and vice versa) and obtaining elements diagonally.&lt;/p&gt;

&lt;h3 id=&#34;a-to-manipulate-modify-the-dimensions-of-a-numpy-array&#34;&gt;a) - To manipulate / modify the dimensions of a Numpy array:&lt;/h3&gt;

&lt;p&gt;The dimension of a table is given by the number of elements following each axis. We have specific methods and attributes specific to ndarray ():&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ndim&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tool to know Numpy array dimension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;shape&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tool to know Numpy array shape &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;dtype&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tool to know Numpy array type &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;size&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tool to know Numpy array size&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.floor(10*np.random.random((3,4)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1., 5., 5., 0.],
       [5., 5., 4., 4.],
       [6., 2., 5., 2.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.floor(10*np.random.random((3,4)))
print(a, a.shape, a.ndim)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[3. 5. 5. 6.]
 [0. 7. 1. 6.]
 [4. 8. 2. 5.]] (3, 4) 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on our programming needs, we can change the size of a table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.ravel() # ravel() function to write over table on 1 dimension (flattened)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([3., 5., 5., 6., 0., 7., 1., 6., 4., 8., 2., 5.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.reshape(6,2)  # reshape() function to change the dimension of our array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[3., 5.],
       [5., 6.],
       [0., 7.],
       [1., 6.],
       [4., 8.],
       [2., 5.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.T  #T method to calculate the transpose of our array.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[3., 0., 4.],
       [5., 7., 8.],
       [5., 1., 2.],
       [6., 6., 5.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(a.T.shape, a.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(4, 3) (3, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reshape function returns its argument with a modified form, while the ndarray.resize method modifies the array itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.resize((2,6))
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[3., 5., 5., 6., 0., 7.],
       [1., 6., 4., 8., 2., 5.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a dimension is set to -1 in a resizing operation, the other dimensions are automatically calculated:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.reshape(4,-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[3., 5., 5.],
       [6., 0., 7.],
       [1., 6., 4.],
       [8., 2., 5.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;b-working-with-a-subset-of-a-numpy-table&#34;&gt;b) - Working with a subset of a Numpy table:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table = np.array([[1,2,3], [4,5,6], [7,8,9]])
my_table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will select a subset of our ndarray with selecting the first row.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;subset = my_table[0]
subset
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to change the first element of our subset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;subset[0] = 100
subset
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([100,   2,   3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But by modifying our sub-table, we realize that we have modified our initial table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[100,   2,   3],
       [  4,   5,   6],
       [  7,   8,   9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A modification of the subset causes a modification of the initial table.
Our subset array is a view of our initial table. Reason: saving memory when working with large volumes of data.&lt;/p&gt;

&lt;p&gt;If you really want to work with a subset without modifying the original array, you must make a copy with the &lt;b&gt; copy () &amp;lt;/ b&amp;gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table = np.array([[1,2,3], [4,5,6], [7,8,9]])
subset = my_table[0].copy()
subset[0]=101
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;subset
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([101,   2,   3])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;### c)- To concatenate Numpy array:&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vstack.html#numpy.vstack&#34; title=&#34;numpy.vstack&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vstack&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.column_stack.html#numpy.column_stack&#34; title=&#34;numpy.column_stack&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;column_stack&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.concatenate.html#numpy.concatenate&#34; title=&#34;numpy.concatenate&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;concatenate&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;concatenate()&lt;/b&gt; function to join a sequence of arrays along an existing axis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concatenate function can take two or more arrays of the same shape and by default it concatenates row-wise i.e. axis=0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1=np.array([[1,2,3],[4,5,6],[7,8,9]])
array1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2=np.array([[2,5,6],[9,10,11],[5,6,9]])
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 2,  5,  6],
       [ 9, 10, 11],
       [ 5,  6,  9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.concatenate([array1,array2], axis=0)   # to join a sequence of arrays along rows  (axis = 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [ 2,  5,  6],
       [ 9, 10, 11],
       [ 5,  6,  9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.concatenate([array1,array2], axis=1)    # to join a sequence of arrays along columns  (axis = 1) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3,  2,  5,  6],
       [ 4,  5,  6,  9, 10, 11],
       [ 7,  8,  9,  5,  6,  9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the concatenate function, NumPy also offers two convenient functions hstack and vstack to stack/combine arrays horizontally or vertically.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;vstack()&lt;/b&gt; function stacks arrays in sequence vertically i.e. row wise. And the result is the same as using concatenate with axis=0.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;hstack()&lt;/b&gt; function stacks arrays horizontally i.e. column wise. And the result is the same as using concatenate with axis=1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array3=np.array([10,20,30]) # 1D Numpy array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([10, 20, 30])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array4=np.array([[1,2,3],[4,5,6],[7,8,9]]) # bi-dimentionnal Numpy array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.vstack([array4,array3])    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 20, 30]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array5=np.array([[10],[20],[30]]) 
array5.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(3, 1)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.hstack([array4,array5]) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 1,  2,  3, 10],
       [ 4,  5,  6, 20],
       [ 7,  8,  9, 30]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;### d)- To split Numpy arrays:&lt;/p&gt;

&lt;p&gt;This is the opposite of concatenation.
We have the split (), hsplit () and vsplit () functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array=np.array([15,16,17,12,49,52,12,14,36]) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(array) # array size
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.split(array,3) # we split the array into 3 arrays
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[array([15, 16, 17]), array([12, 49, 52]), array([12, 14, 36])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can split our numpy array using breaking point with index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.split(array,[2,6]) # we want to cut our table into 3 tables, the numbers between [] are the breakpoints.
                      # corresponds to the indexes where we cut
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[array([15, 16]), array([17, 12, 49, 52]), array([12, 14, 36])]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array2,array3=np.split(array,[2,6]) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(array1,array2,array3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[15 16] [17 12 49 52] [12 14 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array2,array3,array4=np.split(array,[2,4,6]) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(array1,array2,array3,array4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[15 16] [17 12] [49 52] [12 14 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To break 2-dimensional tables. we use hsplit or vsplit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2=np.array([[1,2,3],[4,5,6],[7,8,9]])
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array1bis=np.vsplit(array2, [2]) 
print(array1,array1bis)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1 2 3]
 [4 5 6]] [[7 8 9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array1bis=np.hsplit(array2,[2]) 
print(array1,array1bis)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1 2]
 [4 5]
 [7 8]] [[3]
 [6]
 [9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;e-to-delete-rows-and-columns-in-a-numpy-array-b-delete-b-function&#34;&gt;e)- To delete rows and  columns in a Numpy array: &lt;b&gt;delete()&lt;/b&gt; function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array=np.array([[1,2,3],[4,5,6],[7,8,9]])
array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.delete(array,2,axis=0) # to delete row with index 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.delete(array2,2,axis=1)  # to delete column with index 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2],
       [4, 5],
       [7, 8]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;f-to-calculate-the-transpose-of-a-numpy-table-b-transpose-b-function&#34;&gt;f)- To calculate the transpose of a Numpy table: &lt;b&gt;transpose()&lt;/b&gt; function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.transpose(array)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 4, 7],
       [2, 5, 8],
       [3, 6, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;g-to-get-the-values-of-the-diagonal-of-a-numpy-table-b-diagonal-b-function&#34;&gt;g)- To get the values of the diagonal of a Numpy table: &lt;b&gt;diagonal()&lt;/b&gt; function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array.diagonal() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 5, 9])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-5-comparisons-and-masks&#34;&gt;6.5 Comparisons and masks :&lt;/h2&gt;

&lt;p&gt;With Numpy arrays, you can use a boolean matrix to filter and compare Numpy arrays.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table = np.random.randint(100,size=(6,6))  #  4*3 Numpy array with random values between 0 and 100 
table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[62, 72, 26, 37, 76, 39],
       [38, 66, 42, 78, 15, 97],
       [81, 19, 83, 89, 87, 66],
       [11, 49, 53, 71, 63, 25],
       [75, 87, 68, 88, 30, 12],
       [95, 61, 14, 40, 61, 31]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask = table&amp;gt;50 # we generate here a mask with same dimension than our original table but with Boolean values
mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ True,  True, False, False,  True, False],
       [False,  True, False,  True, False,  True],
       [ True, False,  True,  True,  True,  True],
       [False, False,  True,  True,  True, False],
       [ True,  True,  True,  True, False, False],
       [ True,  True, False, False,  True, False]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Being both of the same size, we can use this Boolean matrix to our advantage. In other words, we can do Boolean masking. With this Boolean matrix as a mask, we can use it to select the particular subset of data that interests us.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table[mask] 
#table[table&amp;gt;50]  # same job
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([62, 72, 76, 66, 78, 97, 81, 83, 89, 87, 66, 53, 71, 63, 75, 87, 68,
       88, 95, 61, 61])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table[table&amp;gt;50]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([62, 72, 76, 66, 78, 97, 81, 83, 89, 87, 66, 53, 71, 63, 75, 87, 68,
       88, 95, 61, 61])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have many other comparison operators to compare two arrays such as == (equality),! = (No equality), &amp;lt;= (less than or equal to). We can even combine two Boolean statements &amp;amp; (for &amp;ldquo;AND&amp;rdquo; conditions) or | (for the &amp;ldquo;OR&amp;rdquo; conditions).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#table[table&amp;gt;=50]                 
#table[table&amp;lt;50]                     
#table[table!=50]                    
#table[table==50]                     
#table[(table &amp;gt;=50) &amp;amp; (table &amp;lt;=70)]  
table[(table&amp;gt;=50) | (table&amp;lt;=40)]     
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([62, 72, 26, 37, 76, 39, 38, 66, 78, 15, 97, 81, 19, 83, 89, 87, 66,
       11, 53, 71, 63, 25, 75, 87, 68, 88, 30, 12, 95, 61, 14, 40, 61, 31])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise-using-numpy-library&#34;&gt;Exercise using Numpy library:&lt;/h2&gt;

&lt;h3 id=&#34;we-will-work-on-data-station-using-numpy-library&#34;&gt;we will work on data station using Numpy library.&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;read the file containing the daily precipitation and temperature data for the Ottawa station for the year 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1- Create a Numpy table with a column for temperature and a column for precipitation. (With two Numpy 1D tables, create a 2D array (365 rows and 2 columns).&lt;/p&gt;

&lt;p&gt;2- Convert the temperature data into Celcius (T [Celcius] = T [Kelvin] - 273.15).&lt;/p&gt;

&lt;p&gt;3- How many days have an accumulation greater than 25mm?&lt;/p&gt;

&lt;p&gt;4- What temperature was recorded for the day with the greatest accumulation?&lt;/p&gt;

&lt;p&gt;5- Calculate the number of degree days (&amp;gt; 0degC) for the year 2017.&lt;/p&gt;

&lt;p&gt;6- Calculate the daily precipitation totals for the year 2017 and assign this variable to the cumul_recipitation table. Add the cumul_recipitation table to the table.&lt;/p&gt;

&lt;p&gt;7- Just for the exercise, split the array into 2 arrays, then concatenate them again to get the initial array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
# to read a csv file with numpy, we can use genfromtxt() function. 
temperature = np.genfromtxt(&amp;quot;./DATA/OTTAWA_tasmoy_2017.csv&amp;quot;, dtype=float)
precipitation = np.genfromtxt(&amp;quot;./DATA/OTTAWA_PrecTOT_2017.csv&amp;quot;, dtype=float)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(temperature.shape, precipitation.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(365,) (365,)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;correction&#34;&gt;Correction&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1- 

tableau = np.column_stack([temperature,precipitation])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tableau = np.hstack([temperature,precipitation])
tableau = np.hstack([temperature.reshape(len(temperature),-1),precipitation.reshape(len(precipitation),-1)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tableau.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(365, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2- 
tableau[:,0]=tableau[:,0]-273.15  
``

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
len(tableau[tableau[:,1]&amp;gt;=25])&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    10

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
 4-
precipitation_max = np.nanmax(tableau[:,1])
print(precipitation_max)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    45.01
    


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
tableau[tableau[:,1] == precipitation_max]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    array([[15.8 , 45.01]])




&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
 5-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
sum(tableau[:,1][tableau[:,1]&amp;gt;0])&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;



    1328.5300000000002




&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
 6-
cumul_precipitation = np.nancumsum(tableau[:,1])&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python&lt;/p&gt;

&lt;p&gt;tableau = np.column_stack([tableau, cumul_precipitation])&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;



    array([[-6.50000e+00,  1.10000e-01,  1.10000e-01],
           [-6.80000e+00,  3.03000e+00,  3.14000e+00],
           [-1.80000e+00,  2.65700e+01,  2.97100e+01],
           ...,
           [         nan,  0.00000e+00,  1.32726e+03],
           [-2.15000e+01,  1.27000e+00,  1.32853e+03],
           [-2.20000e+01,  0.00000e+00,  1.32853e+03]])


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
 7.&lt;/p&gt;

&lt;p&gt;temperature2,precipitation2,cumul2 = np.hsplit(tableau, 3)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
tableau_original=np.concatenate([temperature2+273.15, precipitation2], axis = 1)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
print(tableau_original)
```&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7 Pandas library</title>
      <link>/courses/tutorial_python/7-pandas_library/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/7-pandas_library/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pandas.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pandas is a library specialized in data manipulation. This library contains a set of optimized functions for handling large datasets. It allows to create and export tables of data from text files (separators, .csv, fixed format, compressed), binary (HDF5 with Pytable), HTML, XML, JSON, MongoDB, SQL &amp;hellip;&lt;/p&gt;

&lt;p&gt;A new data structure is used with this library: the DataFrame. There are two types of data with pandas: &lt;b&gt;series&lt;/b&gt; and &lt;b&gt;dataframes&lt;/b&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a dataframe is an array that is created with dictionaries or lists&lt;/li&gt;
&lt;li&gt;they are based on Numpy or ndarray tables&lt;/li&gt;
&lt;li&gt;they can have column and line names&lt;/li&gt;

&lt;li&gt;&lt;p&gt;they have the particularity of being able to mix the types of data: str, float, Nan, Int &amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;they can be viewed as an excel sheet but with a larger number of data volumes and a larger number of functions and attributes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-1-series-introduction&#34;&gt;7.1 Series introduction  -&lt;/h2&gt;

&lt;p&gt;Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects, etc.). The axis labels are collectively called index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# first, we must import Pandas library
import pandas as pd      # aliasing as pd
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A pandas Series can be created using the following constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie = pd.Series([11,15,12,13,14])
print(serie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    11
1    15
2    12
3    13
4    14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have in series, indexes and values. These indexes can be replaced by text with the index option. Be careful, the number of indexes must correspond to the number of values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie = pd.Series([11,15,12,13,14], index=[&amp;quot;Montreal&amp;quot;, &amp;quot;Ottawa&amp;quot;, &amp;quot;Toronto&amp;quot;, &amp;quot;Gatineau&amp;quot;, &amp;quot;Quebec&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(serie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montreal    11
Ottawa      15
Toronto     12
Gatineau    13
Quebec      14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The describe() method computes a summary of statistic&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count     5.000000
mean     13.000000
std       1.581139
min      11.000000
25%      12.000000
50%      13.000000
75%      14.000000
max      15.000000
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use index to access to an element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[&amp;quot;Montreal&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use index number.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[3]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use several indexes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[[&amp;quot;Montreal&amp;quot;, &amp;quot;Quebec&amp;quot;, &amp;quot;Toronto&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montreal    11
Quebec      14
Toronto     12
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are large number of methods collectively compute descriptive statistics such as min(), max(), sum() &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.min()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.max()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can apply comparison operators.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[serie&amp;gt;12]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Ottawa      15
Gatineau    13
Québec      14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie&amp;gt;12 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montréal    False
Ottawa       True
Toronto     False
Gatineau     True
Québec       True
dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;7-2-pandas-dataframes&#34;&gt;7.2 Pandas Dataframes&lt;/h2&gt;

&lt;p&gt;Pandas DataFrame is two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. Pandas DataFrame consists of three principal components, the data, rows, and columns.&lt;/p&gt;

&lt;h3 id=&#34;7-2-1-create-a-dataframe&#34;&gt;7.2.1  Create a  Dataframe&lt;/h3&gt;

&lt;p&gt;In the real world, a Pandas DataFrame will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, and Excel file. Pandas DataFrame can be created from the lists, dictionary, and from a list of dictionary etc. Dataframe can be created in different ways here are some ways by which we create a dataframe:&lt;/p&gt;

&lt;p&gt;### - a) Using a Numpy array&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np  
stations = np.genfromtxt(&amp;quot;./DATA/DATA_Barrage_1963_2017_5.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;, dtype=&#39;float&#39;)   
stations
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  39.7       ,   39.09      ,   39.55645161,   23.23      ,
          22.5       ,   22.85903226, 2390.52612903, 3164.97      ,
        1673.8       ],
       [  41.16      ,   40.96      ,   41.08806452,   23.22      ,
          22.43      ,   22.7583871 , 2227.28290323, 3008.18      ,
        1697.87      ],
       [  41.15      ,   41.05      ,   41.11322581,   23.35      ,
          22.87      ,   23.15548387, 2851.27419355, 3231.8       ,
        2367.85      ],
       [  41.09      ,   40.61      ,   40.9683871 ,   23.78      ,
          22.7       ,   23.03258065, 2635.03774194, 3967.33      ,
        2069.65      ],
       [  41.09      ,   39.6       ,   40.26967742,   24.24      ,
          22.87      ,   23.64580645, 3924.23451613, 5407.32      ,
        2417.89      ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create the dataframe, we use the Pandas &lt;b&gt; DataFrame () &lt;/b&gt; function. It is at this stage that we define the names of our columns. In input we put the table Numpy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.DataFrame(stations, columns=[&amp;quot;Amont Max&amp;quot;, &amp;quot;Amont Min&amp;quot;, &amp;quot;Amont Mean&amp;quot;, &amp;quot;Aval Max&amp;quot;, &amp;quot;Aval Max&amp;quot;, &amp;quot;Aval Mean&amp;quot;, &amp;quot;Debit Mean&amp;quot;, &amp;quot;Debit Max&amp;quot;,&amp;quot;Debit Min&amp;quot;])
dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont Max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont Min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont Mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval Max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval Max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval Mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit Mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit Max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit Min&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.5565&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.859&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2390.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3164.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1673.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.0881&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.7584&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2227.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3008.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1697.87&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.1132&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1555&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2851.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3231.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2367.85&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.9684&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.0326&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2635.04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3967.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2069.65&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.2697&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.24&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6458&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3924.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5407.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2417.89&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;b-create-dataframe-loading-csv-file-b-read-table-b-or-b-read-csv-b-function&#34;&gt;- b) Create Dataframe loading csv file: &lt;b&gt;read_table()&lt;/b&gt; or &lt;b&gt;read_csv()&lt;/b&gt; function&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt; read_table () &lt;/b&gt; and &lt;b&gt; read_csv () &lt;/b&gt; are the most useful functions under Pandas for reading text files and generating a DataFrame.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will work with a dataset from a hydraulic dam.
Our csv file has 9 variables, the first line gives us the names of the variables (or labels).&lt;/p&gt;

&lt;p&gt;A csv document can be read with the &lt;b&gt; read_table () &lt;/b&gt; function, with the separator attribute &amp;ldquo;,&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barrage = pd.read_table(&amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;, sep=&amp;quot;,&amp;quot;)
barrage.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont_max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont_min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont_moyen&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval_max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval_min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval_moyen&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit_Moyen&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit_max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit_min&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.5565&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.859&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2390.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3164.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1673.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.0881&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.7584&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2227.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3008.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1697.87&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.1132&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1555&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2851.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3231.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2367.85&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.9684&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.0326&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2635.04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3967.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2069.65&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.2697&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.24&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6458&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3924.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5407.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2417.89&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However, if we know that our file to read is a csv, we can use a simpler function of Pandas which is &lt;b&gt; read_csv () &lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;No need to use sep=&amp;rdquo; option. He will find the separator by default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(pd.read_csv)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Several options are available to the read_csv () function. It is important to know the list of possibilities and options offered by this simple command.&lt;/p&gt;

&lt;p&gt;|  |  |
|&amp;ndash;|&amp;ndash;|
| &lt;b&gt;path&lt;/b&gt; | Path to our file |
| &lt;b&gt;sep&lt;/b&gt;| Delimiter like , ; \t or \s+ for a variable number of spaces |
| &lt;b&gt;header&lt;/b&gt;| default 0, the first line contains the name of the variables; if None the names are generated or defined later |
| &lt;b&gt;index_col&lt;/b&gt;| Names or numbers of columns defining the indexes of lines, indexes which can be hierarchized |
| &lt;b&gt;names&lt;/b&gt;| If header = None, list of variable names |
| &lt;b&gt;nrows&lt;/b&gt;| Useful for testing and limiting the number of lines to read |
| &lt;b&gt;skiprow&lt;/b&gt;| List of lines to jump in reading |
| &lt;b&gt;skip_footer&lt;/b&gt;| Number of lines to jump at the end of file |
| &lt;b&gt;na_values&lt;/b&gt;| Definition of the code or codes signaling missing values. They can be defined in a dictionary to associate variables and codes specific missing values |
| &lt;b&gt;usecols&lt;/b&gt;| Selects a list of variables to read to avoid reading large or unnecessary fields or variables |
| &lt;b&gt;skip_blank_lines&lt;/b&gt;| If &lt;b&gt; True &lt;/b&gt;, we skip the white lines |
| &lt;b&gt;thousand&lt;/b&gt;| Separator: &amp;ldquo;.&amp;rdquo; or &amp;ldquo;,&amp;rdquo; |&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Using example

file1 = &amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;
col_names = [&#39;Variable1&#39;, &#39;Variable2&#39;, &#39;Variable3&#39;]
df2 = pd.read_csv(file1, skiprows=1, usecols=[0, 1, 3], names=col_names)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Variable1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Variable2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Variable3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.22&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.35&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.78&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;b-c-b-create-dataframe-loading-ascii-file&#34;&gt;&lt;b&gt;- c)&lt;/b&gt; Create Dataframe loading ascii file:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;./DATA/Daily_Precipitation_1963-2017.txt&#39;, &#39;r&#39;) as file:
        rows = file.read() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;./DATA/Daily_Precipitation_1963-2017.txt&#39;, &#39;r&#39;) as file:
        rows = file.read()      
dataset = [float(row) for row in rows.split()]   
df3 = pd.DataFrame({&amp;quot;Precipitation&amp;quot; : dataset})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;b-d-b-create-dataframe-loading-excell-xls-file-b-read-excel-b-function&#34;&gt;&lt;b&gt;- d)&lt;/b&gt; Create Dataframe loading excell (.xls) file: &lt;b&gt;read_excel()&lt;/b&gt; function&lt;/h3&gt;

&lt;p&gt;We will open here an excel file (.xls extension). This file is a database containing information on all homogenized Environmental and Climate Change Canada temperature stations.&lt;/p&gt;

&lt;p&gt;This database has 11 columns with data starting at the 4 th line.&lt;/p&gt;

&lt;p&gt;We will define the &amp;ldquo;Province&amp;rdquo; column as index of our DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df4 = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, index_col=0,skiprows = range(0, 3))
df4.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-2-access-data-from-dataframes&#34;&gt;7.2.2  Access data from DataFrames&lt;/h3&gt;

&lt;p&gt;The first thing to do when opening a new dataset is print out a few rows. We accomplish this with &lt;b&gt;.head()&lt;/b&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To see the last five rows use  &lt;b&gt;.tail()&lt;/b&gt; method. tail() also accepts a number, and in this case we printing the bottom two rows.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;332&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PLUM POINT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8402958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1972&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-56.88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;333&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PORT AUXBASQUES&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8402975&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1909&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;334&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST ANTHONY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8403389&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-55.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;335&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST JOHN&amp;rsquo;S&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8403505&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1874&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;141&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;336&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;STEPHENVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8403801&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;337&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WABUSH LAKE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8504177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-66.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;551&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Before exploring a Dataframe, you can modify the index to make it easier to analyze the dataset. For this, we use the &lt;b&gt; .set_index () &lt;/b&gt; function. We must create a new object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index = dataframe.set_index(&amp;quot;Prov&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can directly select a column from a Dataframe:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index[&#39;Nom de station&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
BC        AGASSIZ
BC          ATLIN
BC    BARKERVILLE
BC     BEAVERDELL
BC    BELLA COOLA
Name: Nom de station, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pandas supports Multi-axes indexing to get the subset of pandas object.
Then, to access an element in a dataframe, there are two methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;b&gt; iloc () &lt;/b&gt; method to access data from index numbers&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the &lt;b&gt; loc () &lt;/b&gt; method to access data from labels&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#### a- &lt;b&gt; iloc () &lt;/b&gt; method:&lt;/p&gt;

&lt;p&gt;We can access data from Dataframe using index integer. Like numpy, this method is 0-based indexing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example1: select specific row and specific column
dataframe_Prov_index.iloc[0,0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;AGASSIZ&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example2: iloc: # select first 4 rows f and all columns
dataframe_Prov_index.iloc[0:4,:]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example3: iloc: # select all rows and 4 specific columns 
dataframe_Prov_index.iloc[:,0:4].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example4: iloc:# Slicing through list of values
print(dataframe_Prov_index.iloc[[1, 3, 5], [1, 3]])
print(dataframe_Prov_index.iloc[1:3, :])
dataframe_Prov_index.iloc[:,1:3].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;        stnid  mois déb.
Prov                    
BC    1200560          8
BC    1130771          1
BC    1021480          7
     Nom de station    stnid  année déb.  mois déb.  année fin.  mois fin.  \
Prov                                                                         
BC            ATLIN  1200560        1905          8        2017         12   
BC      BARKERVILLE  1090660        1888          2        2015          3   

      lat (deg)  long (deg)  élév (m) stns jointes  
Prov                                                
BC        59.57     -133.70       674            N  
BC        53.07     -121.52      1265            N  
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#### b- La méthode loc():&lt;/p&gt;

&lt;p&gt;This method has purely label based indexing.&lt;/p&gt;

&lt;p&gt;.loc() has multiple access methods like −&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    -single scalar label

    -list of labels

    -slice object

    -Boolean array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.loc takes two single/list/range operator separated by &amp;lsquo;,&amp;rsquo;. The first one indicates the row and the second one indicates columns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example1: loc: select all rows for a specific column
dataframe_Prov_index.loc[:,&amp;quot;Nom de station&amp;quot;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
BC        AGASSIZ
BC          ATLIN
BC    BARKERVILLE
BC     BEAVERDELL
BC    BELLA COOLA
Name: Nom de station, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example2: loc: select all rows for a specific index name
dataframe_Prov_index.loc[&amp;quot;QC&amp;quot;,:].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AMOS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;709CEE9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;305&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAGOTVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7060400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;159&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAIE COMEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;704S001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1965&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;130&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAUCEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7027283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-70.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLETERRE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7080600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2004&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.38&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;322&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example3: Select all rows for multiple columns, say list[]

dataframe_Prov_index.loc[:,[&amp;quot;Nom de station&amp;quot;, &amp;quot;année déb.&amp;quot;, &amp;quot;année fin.&amp;quot;]].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example4: Select few rows for multiple columns, say list[]
dataframe_Prov_index.loc[[&#39;BC&#39;,&#39;QC&#39;],[&amp;quot;Nom de station&amp;quot;, &amp;quot;année déb.&amp;quot;, &amp;quot;année fin.&amp;quot;]].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example 5: # for getting values with a boolean array

(dataframe_Prov_index.loc[&#39;BC&#39;,[&amp;quot;année déb.&amp;quot;]]&amp;gt;1900).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example 6: # for getting values with a boolean array
dataframe_Prov_index.loc[dataframe_Prov_index[&amp;quot;année fin.&amp;quot;]&amp;gt;2015,:].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLUE RIVER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1160899&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;683&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example 7: # for getting values with a boolean array
df2 = dataframe_Prov_index.loc[&amp;quot;QC&amp;quot;,:]
df2.loc[df2[&amp;quot;année fin.&amp;quot;]==2017,:].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AMOS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;709CEE9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;305&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAGOTVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7060400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;159&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAIE COMEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;704S001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1965&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;130&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAUCEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7027283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-70.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-3-change-a-dataframe&#34;&gt;7.2.3  Change a Dataframe&lt;/h3&gt;

&lt;p&gt;### 7.2.3.1 Column Selection/Addition/Deletion-&lt;/p&gt;

&lt;p&gt;We will use here our previous Dataframe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;a-create-a-new-variable&#34;&gt;a- Create a new variable&lt;/h4&gt;

&lt;p&gt;We can select columns from our Dataframe to create a new one. In this example, we will calculate the number of recording years for each station.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delta_year = (dataframe_Prov_index[&amp;quot;année fin.&amp;quot;] - dataframe_Prov_index[&amp;quot;année déb.&amp;quot;]) + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delta_year.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
BC    125
BC    113
BC    128
BC     68
BC    123
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#### b- Column Addition in  a DataFrame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index[&amp;quot;total année&amp;quot;] = delta_year
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total année&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;113&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;128&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#### c- Column Deletion in a DataFrame&lt;/p&gt;

&lt;p&gt;Columns from a Dataframe can be deleted or popped; let us take an example to understand how.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# using del function
print (&amp;quot;Deleting &#39;stns jointes&#39; column using DEL function:&amp;quot;)
del dataframe[&#39;stns jointes&#39;]
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Deleting &#39;stns jointes&#39; column using DEL function:
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# using pop function
print (&amp;quot;Deleting &#39;stnid&#39; column using POP function:&amp;quot;)
dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.pop(&#39;stnid&#39;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Deleting &#39;stnid&#39; column using POP function:
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# using drop method
dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.drop([&amp;quot;stns jointes&amp;quot;], axis=1).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;### 7.2.3.2  Row Selection/Addition/Deletion-&lt;/p&gt;

&lt;p&gt;We will now understand row selection, addition and deletion through examples. Let us begin with the concept of selection.&lt;/p&gt;

&lt;p&gt;#### a-  Row Selection&lt;/p&gt;

&lt;p&gt;Selection by Label
Rows can be selected by passing row label to a loc function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3)).set_index(&amp;quot;Prov&amp;quot;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.loc[&#39;BC&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Rows can be selected by passing integer location to an iloc function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.iloc[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Nom de station    AGASSIZ
stnid             1100120
année déb.           1893
mois déb.               1
année fin.           2017
mois fin.              12
lat (deg)           49.25
long (deg)        -121.77
élév (m)               15
stns jointes            N
Name: BC, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple rows can be selected using ‘ : ’ operator.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[2:4]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;b-row-addition&#34;&gt;b-  Row Addition&lt;/h4&gt;

&lt;p&gt;Add new rows to a DataFrame using function &lt;b&gt;append()&lt;/b&gt; function. This function will append the rows at the end.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3)).set_index(&amp;quot;Prov&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_new = pd.DataFrame({&#39;Nom de station&#39;: [&#39;station1&#39;, &#39;station2&#39;], &#39;stnid&#39;: [8888, 9999], &#39;Prov&#39;: [&#39;BC&#39;, &#39;QC&#39;]}).set_index(&amp;quot;Prov&amp;quot;)
df_new
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;station1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8888&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;station2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = dataframe.append(df_new)
dataframe.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST JOHN&amp;rsquo;S&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1874&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403505&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;141&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;STEPHENVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403801&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WABUSH LAKE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-66.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8504177&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;551&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;station1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8888&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;station2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9999&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;c-row-deletion&#34;&gt;c-  Row Deletion&lt;/h4&gt;

&lt;p&gt;Use index label to delete or drop rows from a DataFrame. If label is duplicated, then multiple rows will be dropped.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3)).set_index(&amp;quot;Prov&amp;quot;)
dataframe.head()

&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Drop rows with label &#39;BC&#39;
dataframe = dataframe.drop(&#39;BC&#39;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BURWASH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100181&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1966&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;61.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-139.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;807&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;DAWSON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100LRP&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1901&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-139.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;370&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;N   YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HAINES JUNCTIO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100630&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1944&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-137.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;596&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KOMAKUK BEACH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100682&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-140.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MAYO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100701&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1924&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-135.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;504&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3)).set_index(&amp;quot;Prov&amp;quot;)
dataframe.loc[&#39;ON&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATIKOKAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6020LPQ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-91.58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;442&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEATRICE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6110607&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1878&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-79.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;297&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6150689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1921&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-77.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;76&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BIG TROUT LAKE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6010735&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-89.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;224&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BROCKVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6100971&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1915&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-75.67&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;96&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-2-3-3-merging-joining-dataframe&#34;&gt;7.2.3.3 Merging/Joining Dataframe-&lt;/h3&gt;

&lt;p&gt;Pandas has full-featured, high performance in-memory join operations idiomatically very similar to relational databases like SQL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left, right, how=&#39;inner&#39;, on=None, left_on=None, right_on=None,left_index=False, right_index=False, sort=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;|  |  |
|&amp;ndash;|&amp;ndash;|
| &lt;b&gt;left&lt;/b&gt; | DataFrame object |
| &lt;b&gt;right&lt;/b&gt; | Another DataFrame object |
| &lt;b&gt;on&lt;/b&gt; | Columns (names) to join on. Must be found in both the left and right DataFrame objects |
| &lt;b&gt;left_on&lt;/b&gt; |Columns from the left DataFrame to use as keys. Can either be column names or arrays with length equal to the length of the DataFrame |
| &lt;b&gt;right_on&lt;/b&gt; |Columns from the right DataFrame to use as keys. Can either be column names or arrays with length equal to the length of the DataFrame |
| &lt;b&gt;left_index&lt;/b&gt; |If True, use the index (row labels) from the left DataFrame as its join key(s). In case of a DataFrame with a MultiIndex (hierarchical), the number of levels must match the number of join keys from the right DataFrame |
| &lt;b&gt;right_index&lt;/b&gt; |Same usage as left_index for the right DataFrame |
| &lt;b&gt;how&lt;/b&gt; |One of &amp;lsquo;left&amp;rsquo;, &amp;lsquo;right&amp;rsquo;, &amp;lsquo;outer&amp;rsquo;, &amp;lsquo;inner&amp;rsquo;. Defaults to inner. Each method has been described below |
| &lt;b&gt;sort&lt;/b&gt; |Sort the result DataFrame by the join keys in lexicographical order. Defaults to True, setting to False will improve the performance substantially in many cases |&lt;/p&gt;

&lt;p&gt;Let us now create two different DataFrames and perform the merging operations on it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left_dataframe = pd.DataFrame({
   &#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;MONTREAL TAVISH&#39;, &#39;QUEBEC&#39;, &#39;TADOUSSAC&#39;,&#39;OKA&#39;],
   &#39;variable&#39;:[&#39;var1&#39;,&#39;var2&#39;,&#39;var6&#39;,&#39;var5&#39;]})

right_dataframe = pd.DataFrame(
   {&#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;TORONTO&#39;, &#39;OTTAWA&#39;, &#39;KINGSTON&#39;,&#39;CHAPLEAU&#39;],
   &#39;variable&#39;:[&#39;var3&#39;,&#39;var1&#39;,&#39;var6&#39;,&#39;var5&#39;]})
left_dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;right_dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;a-merge-two-dataframes-on-a-key&#34;&gt;a-  Merge Two DataFrames on a Key&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left_dataframe,right_dataframe,on=&#39;id&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;b-merge-two-dataframes-on-a-key&#34;&gt;b-  Merge Two DataFrames on a Key&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left_dataframe,right_dataframe,on=[&#39;id&#39;,&#39;variable&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;c-merge-two-dataframes-using-how-argument&#34;&gt;c-  Merge Two DataFrames Using &amp;lsquo;How&amp;rsquo; argument&lt;/h4&gt;

&lt;p&gt;The how argument to merge specifies how to determine which keys are to be included in the resulting table. If a key combination does not appear in either the left or the right tables, the values in the joined table will be NA.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Left Join
pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;left&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# right Join
pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;right&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# outer Join
pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;outer&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# inner Join
pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;inner&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-3-4-dataframe-concatenation&#34;&gt;7.2.3.4  Dataframe Concatenation-&lt;/h3&gt;

&lt;p&gt;Pandas provides various facilities for easily combining together DataFrame objects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pd.concat(objs,axis=0,join=&#39;outer&#39;,join_axes=None,ignore_index=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;|  |  |
|&amp;ndash;|&amp;ndash;|
| &lt;b&gt;objs&lt;/b&gt; | This is a sequence or mapping of Series, DataFrame objects |
| &lt;b&gt;axis&lt;/b&gt; |  {0, 1, &amp;hellip;}, default 0. This is the axis to concatenate along |
| &lt;b&gt;join&lt;/b&gt; |  {‘inner’, ‘outer’}, default ‘outer’. How to handle indexes on other axis(es). Outer for union and inner for intersection |
| &lt;b&gt;ignore_index&lt;/b&gt; |boolean, default False. If True, do not use the index values on the concatenation axis. The resulting axis will be labeled 0, &amp;hellip;, n - 1 |
| &lt;b&gt;join_axes&lt;/b&gt; |This is the list of Index objects. Specific indexes to use for the other (n-1) axes instead of performing inner/outer set logic |&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe1 = pd.DataFrame({
   &#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;MONTREAL TAVISH&#39;, &#39;QUEBEC&#39;, &#39;TADOUSSAC&#39;,&#39;OKA&#39;],
   &#39;variable&#39;:[&#39;var1&#39;,&#39;var2&#39;,&#39;var6&#39;,&#39;var5&#39;]})

dataframe2 = pd.DataFrame(
   {&#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;TORONTO&#39;, &#39;OTTAWA&#39;, &#39;KINGSTON&#39;,&#39;CHAPLEAU&#39;],
   &#39;variable&#39;:[&#39;var3&#39;,&#39;var1&#39;,&#39;var6&#39;,&#39;var5&#39;]})

pd.concat([dataframe1,dataframe2])
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Suppose we wanted to associate specific keys with each of the pieces of the chopped up DataFrame. We can do this by using the keys argument −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.concat([dataframe1,dataframe2],keys=[&#39;QC&#39;,&#39;ON&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;QC&amp;rsquo;, 0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;QC&amp;rsquo;, 1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;QC&amp;rsquo;, 2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;QC&amp;rsquo;, 3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;ON&amp;rsquo;, 0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;ON&amp;rsquo;, 1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;ON&amp;rsquo;, 2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;ON&amp;rsquo;, 3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If we don&amp;rsquo;t want the index being duplicated, set ignore_index to True.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.concat([dataframe1,dataframe2],keys=[&#39;QC&#39;,&#39;ON&#39;],ignore_index=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If the two Dataframes need to be added along axis=1, then the new columns will be appended.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.concat([dataframe1,dataframe2],axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;concatenating-using-append&#34;&gt;Concatenating Using append&lt;/h4&gt;

&lt;p&gt;A useful shortcut to concat are the append instance methods on DataFrame. They concatenate along axis=0, namely the index&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe1.append(dataframe2)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-4-basic-functionality-on-dataframe&#34;&gt;7.2.4  Basic Functionality on DataFrame&lt;/h3&gt;

&lt;p&gt;There are many built-in functions and methods:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will present some useful functions with exploring a dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.shape&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns a tuple representing the dimensionality of the DataFrame. Tuple (a,b), where a represents the number of rows and b represents the number of columns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.shape 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(289, 17)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.columns&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns names of the columns in our Dataframe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Index([&#39;Unnamed: 0&#39;, &#39;Prov&#39;, &#39;Nom de station&#39;, &#39;stnid&#39;, &#39;année déb.&#39;,
       &#39;mois déb.&#39;, &#39;année fin.&#39;, &#39;mois fin.&#39;, &#39;lat (deg)&#39;, &#39;long (deg)&#39;,
       &#39;élév (m)&#39;, &#39;stns jointes&#39;, &#39;Tmax&#39;, &#39;Tmax90p&#39;, &#39;Tmin&#39;, &#39;Tmin10p&#39;,
       &#39;DG0&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.empty&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns the Boolean value saying whether the Object is empty or not; True indicates that the object is empty.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.empty
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.isnull&lt;/b&gt; method:
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To detect missing values easier (and across different array dtypes), Pandas provides the isnull() and notnull() functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Tmax&#39;].isnull().head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0     True
1    False
2     True
3    False
4    False
Name: Tmax, dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We combine this method with .sum() to know the number of missing values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Tmax&#39;].isnull().sum() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;117
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.dropna&lt;/b&gt; method:
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to exclude the missing values, then use the dropna function along with the axis argument. By default, axis=0, i.e., along row, which means that if any value within a row is NA then the whole row is excluded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_sans_NaN = dataframe.dropna() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_sans_NaN[&#39;Tmax&#39;].isnull().sum() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_sans_NaN.shape # nouvelle dimension de notre tableau 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(169, 17)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;sort_values&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sort_values() is the method for sorting by values. It accepts a &amp;lsquo;by&amp;rsquo; argument which will use the column name of the DataFrame with which the values are to be sorted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted = dataframe.sort_values(by=&amp;quot;Prov&amp;quot;)
df_label_sorted.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;127&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;127&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SLAVE LAKE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3065995&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1922&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-114.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;583&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.48137&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.4643&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.42227&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.3803&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1131.03&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;EDMONTON&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3012216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;723&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.328&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.11709&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.1907&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1095.93&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;104&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;104&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;COLD LAKE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3081680&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1925&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-110.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;541&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.72448&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.2737&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.03759&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.2037&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1303.95&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;103&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;103&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CARWAY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3031402&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1914&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1354&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1397&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.925&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.61886&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;956.837&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;102&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAMROSE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3011240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-112.82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;739&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.96497&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.1757&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.71442&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.588&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1048.13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The argument could takes a list of column values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted = dataframe.sort_values(by=[&#39;Prov&#39;,&#39;année déb.&#39;])
df_label_sorted.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;EDMONTON&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3012216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;723&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.328&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.11709&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.1907&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1095.93&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FORT CHIPEWYAN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3072655&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-111.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;238&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.28219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.566&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.54421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-28.6297&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1135.11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;121&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MEDICINE HAT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3034485&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-110.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;717&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6489&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.4973&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1559&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.7833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1563.87&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;99&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;99&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CALGARY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3031092&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1885&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-114.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1084&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.835&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.4673&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.44461&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1172.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BANFF&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3050519&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1887&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-115.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1397&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.90652&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.132&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.08488&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.8583&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;750.37&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;sort_index()&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the sort_index() method, by passing the axis arguments and the order of sorting, DataFrame can be sorted. By default, sorting is done on row labels in ascending order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted.sort_index().head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted.sort_index(ascending=False).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WABUSH LAKE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8504177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-66.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;551&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.33974&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.6937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.02478&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-29.4537&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;792.913&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;287&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;287&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;STEPHENVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403801&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.80653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.614&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.81275&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.582&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1710.17&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;286&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;286&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST JOHN&amp;rsquo;S&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403505&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1874&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;141&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.07367&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.6237&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.54977&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.919&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1474.82&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;285&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;285&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST ANTHONY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403389&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-55.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;284&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;284&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PORT AUXBASQUES&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8402975&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1909&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted.sort_index(axis=1).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1095.93&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;EDMONTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.328&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.11709&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.1907&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3012216&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;723&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1135.11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FORT CHIPEWYAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.28219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.566&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.54421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-28.6297&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-111.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3072655&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;238&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1563.87&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MEDICINE HAT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6489&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.4973&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1559&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.7833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-110.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3034485&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;717&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;99&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1172.05&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CALGARY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.835&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.4673&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.44461&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;99&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1885&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-114.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3031092&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1084&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;750.37&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BANFF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.90652&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.132&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.08488&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.8583&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1887&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-115.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3050519&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1397&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.describe()&lt;/b&gt; method:&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generates descriptive statistics that summarize the central tendency, dispersion and shape of a dataset’s distribution, excluding NaN values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Tmax&#39;].describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count    172.000000
mean       7.916314
std        5.524630
min      -15.366463
25%        7.364646
50%        8.988052
75%       11.018241
max       16.105511
Name: Tmax, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.dtypes()&lt;/b&gt; method:&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns the dtypes in this object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Unnamed: 0          int64
Prov               object
Nom de station     object
stnid              object
année déb.          int64
mois déb.           int64
année fin.          int64
mois fin.           int64
lat (deg)         float64
long (deg)        float64
élév (m)            int64
stns jointes       object
Tmax              float64
Tmax90p           float64
Tmin              float64
Tmin10p           float64
DG0               float64
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-2-5-dataframe-function-application&#34;&gt;7.2.5  DataFrame Function Application&lt;/h3&gt;

&lt;p&gt;To apply your own or another library’s functions to Pandas objects, you should be aware of the three important methods. The methods have been discussed below. The appropriate method to use depends on whether your function expects to operate on an entire DataFrame, row- or column-wise, or element wise.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Table wise Function Application: &lt;b&gt;.pipe()&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Row or Column Wise Function Application: &lt;b&gt;.apply()&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Element wise Function Application: &lt;b&gt;.applymap()&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.apply()&lt;/b&gt; method:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arbitrary functions can be applied along the axes of a DataFrame or Panel using the apply() method, which, like the descriptive statistics methods, takes an optional axis argument. By default, the operation performs column wise, taking each column as an array-like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
dataframe[&amp;quot;stns jointes&amp;quot;]=dataframe[&amp;quot;stns jointes&amp;quot;].apply(lambda x: x.replace(&amp;quot;N&amp;quot;, &amp;quot;NaN&amp;quot;))
dataframe[&amp;quot;stns jointes&amp;quot;]=dataframe[&amp;quot;stns jointes&amp;quot;].apply(lambda x: x.replace(&amp;quot;Y&amp;quot;, &amp;quot;1&amp;quot;))
dataframe = dataframe.dropna() 
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLUE RIVER&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1160899&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.4408&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.12501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.5823&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;987.363&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;COMOX&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021830&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-124.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.7376&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1023&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.42485&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.526&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2444.39&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&amp;quot;Tmin&amp;quot;]=dataframe[&amp;quot;Tmin&amp;quot;].apply(lambda x: round(x,2))
dataframe[&amp;quot;Tmax&amp;quot;]=dataframe[&amp;quot;Tmax&amp;quot;].apply(lambda x: int(x))
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLUE RIVER&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1160899&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.5823&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;987.363&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;COMOX&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021830&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-124.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1023&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.526&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2444.39&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-6-dataframe-groupby-method&#34;&gt;7.2.6  DataFrame GroupBY method&lt;/h3&gt;

&lt;p&gt;Any groupby operation involves one of the following operations on the original object. They are −&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Splitting the Object&lt;/li&gt;
&lt;li&gt;Applying a function&lt;/li&gt;
&lt;li&gt;Combining the results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In many situations, we split the data into sets and we apply some functionality on each subset. In the apply functionality, we can perform the following operations −&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aggregation − computing a summary statistic&lt;/li&gt;
&lt;li&gt;Transformation − perform some group-specific operation&lt;/li&gt;
&lt;li&gt;Filtration − discarding the data with some condition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us now create a DataFrame object and perform all the operations on it −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Looking at the DataFrame above, we see that there are at least 3 variables that we can use to group our dataset. For example, we can group our data by province (Prov), by year of beginning of recording or year of end of recording.&lt;/p&gt;

&lt;p&gt;We will use the Pandas groupby module to group our data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.unique()&lt;/b&gt; method :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns the unique values of a column.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&amp;quot;Prov&amp;quot;].unique() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([&#39;BC&#39;, &#39;YT&#39;, &#39;N   YT&#39;, &#39;NT&#39;, &#39;NU&#39;, &#39;AB&#39;, &#39;SK&#39;, &#39;MB&#39;, &#39;ON&#39;, &#39;QC&#39;,
       &#39;NB&#39;, &#39;NS&#39;, &#39;PE&#39;, &#39;NL&#39;], dtype=object)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;split-data-into-groups&#34;&gt;Split Data into Groups:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.groupby(&#39;Prov&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000000008D35860&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To view groups:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.groupby(&#39;Prov&#39;).groups
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;AB&amp;rsquo;: Int64Index([ 96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
             109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
             122, 123, 124, 125, 126, 127, 128, 129, 130],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;BC&amp;rsquo;: Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
             17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
             34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;MB&amp;rsquo;: Int64Index([156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
             169, 170, 171, 172, 173, 174, 175],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;N   YT&amp;rsquo;: Int64Index([52], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NB&amp;rsquo;: Int64Index([254, 255, 256, 257, 258, 259, 260, 261], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NL&amp;rsquo;: Int64Index([275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
             288],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NS&amp;rsquo;: Int64Index([262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NT&amp;rsquo;: Int64Index([61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NU&amp;rsquo;: Int64Index([74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
             91, 92, 93, 94, 95],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;ON&amp;rsquo;: Int64Index([176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
             189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
             202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
             215],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;PE&amp;rsquo;: Int64Index([274], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;QC&amp;rsquo;: Int64Index([216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
             229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
             242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;SK&amp;rsquo;: Int64Index([131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
             144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;YT&amp;rsquo;: Int64Index([51, 53, 54, 55, 56, 57, 58, 59, 60], dtype=&amp;lsquo;int64&amp;rsquo;)}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Group by with multiple columns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.groupby([&#39;Prov&#39;,&#39;année fin.&#39;]).groups
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{(&amp;lsquo;AB&amp;rsquo;, 2011): Int64Index([116], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;AB&amp;rsquo;, 2013): Int64Index([101], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;AB&amp;rsquo;, 2016): Int64Index([100, 130], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;AB&amp;rsquo;,
  2017): Int64Index([ 96,  97,  98,  99, 102, 103, 104, 105, 106, 107, 108, 109, 110,
             111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
             125, 126, 127, 128, 129],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2006): Int64Index([3], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2013): Int64Index([20], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2014): Int64Index([21, 25], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2015): Int64Index([2, 8, 11, 16], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2016): Int64Index([4, 6, 41], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;,
  2017): Int64Index([ 0,  1,  5,  7,  9, 10, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 26,
             27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44,
             45, 46, 47, 48, 49, 50],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;MB&amp;rsquo;, 2016): Int64Index([156], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;MB&amp;rsquo;,
  2017): Int64Index([157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
             170, 171, 172, 173, 174, 175],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;N   YT&amp;rsquo;, 2017): Int64Index([52], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;NB&amp;rsquo;,
  2017): Int64Index([254, 255, 256, 257, 258, 259, 260, 261], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;NL&amp;rsquo;, 2011): Int64Index([282], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;NL&amp;rsquo;, 2015): Int64Index([276], dtype=&amp;lsquo;int64&amp;rsquo;)}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;iterating-through-groups&#34;&gt;Iterating through Groups:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped = dataframe.groupby(&#39;Prov&#39;)

for name,group in grouped:
   print(name)
   print(group)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;AB
     Unnamed: 0 Prov   Nom de station    stnid  année déb.  mois déb.  \
96           96   AB        ATHABASCA  3060L20        1918          6   
97           97   AB            BANFF  3050519        1887         11   
98           98   AB      BEAVERLODGE  3070600        1913          4   
99           99   AB          CALGARY  3031092        1885          1   


     année fin.  mois fin.  lat (deg)  long (deg)  élév (m) stns jointes  \
96         2017         12      54.82     -113.53       626            Y   
97         2017         12      51.20     -115.55      1397            Y   
98         2017         12      55.20     -119.40       745            Y   
99         2017         12      51.12     -114.02      1084            Y   
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;select-a-group&#34;&gt;Select a group:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.get_group()&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can select a single group.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped.get_group(&#39;QC&#39;).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AMOS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;709CEE9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;305&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAGOTVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7060400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;159&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.28139&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.2973&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.83359&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8117&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1528.41&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;218&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;218&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAUCEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7027283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-70.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.5515&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0783&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.37634&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.6283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1509.36&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;219&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BROME&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7020840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1890&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2014&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-72.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;206&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1409&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.1767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.294151&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1676.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;220&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;220&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;aggregations&#34;&gt;Aggregations&lt;/h4&gt;

&lt;p&gt;An aggregated function returns a single aggregated value for each group. Once the group by object is created, several aggregation operations can be performed on the grouped data.&lt;/p&gt;

&lt;p&gt;An obvious one is aggregation via the aggregate or equivalent agg method −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
grouped = dataframe.groupby(&#39;Prov&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped[&#39;Tmin&#39;].agg(np.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
AB        -3.050928
BC         1.578024
MB        -4.493900
N   YT          NaN
NB         0.341750
NL        -1.324334
NS         2.542629
NT        -8.518655
NU       -16.522658
ON         0.031970
PE         1.986827
QC        -1.992695
SK        -3.208984
YT        -8.995421
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;applying-multiple-aggregation-functions-at-once&#34;&gt;Applying Multiple Aggregation Functions at Once&lt;/h4&gt;

&lt;p&gt;With grouped Series, you can also pass a list or dict of functions to do aggregation with, and generate DataFrame as output −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped[&#39;Tmin&#39;].agg([np.min, np.mean, np.max, np.std])
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;std&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.54421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.05093&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1559&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.40133&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.06858&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.57802&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.01629&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.89638&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.0943&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.4939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.98027&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.61835&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;N   YT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.491043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.34175&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.840796&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.598429&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.02478&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.32433&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.81275&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42585&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.21413&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.54263&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.75946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.982653&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.4518&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.51865&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.68323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.16937&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NU&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.9351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.5227&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.2332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.0491&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.48484&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0319696&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.91872&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.64788&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;PE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.98683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.98683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.98683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.76805&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.99269&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.62212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.70668&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SK&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.01656&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.20898&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.42885&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.03055&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.2177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.99542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.77313&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.72858&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;transformations&#34;&gt;Transformations&lt;/h4&gt;

&lt;p&gt;Transformation on a group or a column returns an object that is indexed the same size of that is being grouped. Thus, the transform should return a result that is the same size as that of a group chunk.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped = dataframe.groupby(&#39;Prov&#39;)
and_stand = lambda x: (x - x.mean()) / x.std()
grouped[&#39;Tmin&#39;].transform(and_stand).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0         NaN
1   -1.293133
2         NaN
3    0.626082
4    1.334280
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;filtration&#34;&gt;Filtration&lt;/h4&gt;

&lt;p&gt;Filtration filters the data on a defined criteria and returns the subset of data. The filter() function is used to filter the data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.groupby(&#39;Prov&#39;).filter(lambda x: len(x) == 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N   YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HAINES JUNCTIO&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2100630&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1944&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-137.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;596&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;274&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;274&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHARLOTTETOWN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8300301&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1872&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-63.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.0063&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.7683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.98683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.0367&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1912.16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In the above filter condition, we are asking to return the Provinces which have only one station.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-2-7-save-a-dataframe&#34;&gt;7.2.7  Save a DataFrame:&lt;/h3&gt;

&lt;p&gt;For writing a DataFrame, use the &lt;b&gt; .to_csv &lt;/b&gt; or &lt;b&gt; _table &lt;/b&gt; functions with similar options as read_csv () seen previously.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.to_csv(&amp;quot;./DATA/My_new_DataFrame.csv&amp;quot;, index = False, header = True, sep = &#39;,&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-3-date-functionality&#34;&gt;7.3 Date Functionality:&lt;/h3&gt;

&lt;p&gt;Using the &lt;b&gt;date.range()&lt;/b&gt; function by specifying the periods and the frequency, we can create the date series. By default, the frequency of range is Days.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.date_range(&#39;1/1/2011&#39;, periods=5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-01&#39;, &#39;2011-01-02&#39;, &#39;2011-01-03&#39;, &#39;2011-01-04&#39;,
               &#39;2011-01-05&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can change the date frequency:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.date_range(&#39;1/1/2011&#39;, periods=5,freq=&#39;M&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-31&#39;, &#39;2011-02-28&#39;, &#39;2011-03-31&#39;, &#39;2011-04-30&#39;,
               &#39;2011-05-31&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;M&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;bdate_range()&lt;/b&gt; stands for business date ranges. Unlike date_range(), it excludes Saturday and Sunday.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.bdate_range(&#39;1/1/2011&#39;, periods=10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-03&#39;, &#39;2011-01-04&#39;, &#39;2011-01-05&#39;, &#39;2011-01-06&#39;,
               &#39;2011-01-07&#39;, &#39;2011-01-10&#39;, &#39;2011-01-11&#39;, &#39;2011-01-12&#39;,
               &#39;2011-01-13&#39;, &#39;2011-01-14&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;B&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Convenience functions like date_range and bdate_range utilize a variety of frequency aliases. The default frequency for date_range is a calendar day while the default for bdate_range is a business day.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;start = pd.datetime(2011, 1, 1)
end = pd.datetime(2011, 1, 5)
pd.date_range(start, end)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-01&#39;, &#39;2011-01-02&#39;, &#39;2011-01-03&#39;, &#39;2011-01-04&#39;,
               &#39;2011-01-05&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-4-format-dates-with-the-datetime-module&#34;&gt;7.4 Format dates with the Datetime module:&lt;/h3&gt;

&lt;p&gt;Python provides many features to work with dates and time.&lt;/p&gt;

&lt;p&gt;Datetime is a module that allows you to manipulate dates and times as objects. The idea is simple: you manipulate the object to do all your calculations, and when you need to display it, you format the object into a string.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/datetime.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/library/datetime.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can artificially create a datetime object with the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    datetime (year, month, day, hour, minute, second, microsecond, timezone)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters &amp;ldquo;year&amp;rdquo;, &amp;ldquo;month&amp;rdquo; and &amp;ldquo;day&amp;rdquo; are mandatory.&lt;/p&gt;

&lt;p&gt;The datetime module provides the following classes:&lt;/p&gt;

&lt;p&gt;| Class | Description |
|&amp;ndash;|&amp;ndash;|
| &lt;b&gt;datetime.date&lt;/b&gt; | A date instance represents a date |
| &lt;b&gt;datetime.datetime&lt;/b&gt; |  An instance of datetime represents a date and time according to the Gregorian calendar |
| &lt;b&gt;datetime.time&lt;/b&gt; |  An instance of time represents the time, except for the date |
| &lt;b&gt;datetime.timedelta&lt;/b&gt; |The timedelta class is used to keep the differences between two temporal or dated objects |
| &lt;b&gt;datetime.tzinfo&lt;/b&gt; |The tzinfo class is used to implement time zone support for time and datetime objects |&lt;/p&gt;

&lt;p&gt;We will see some examples of using DateTime and its classe.&lt;/p&gt;

&lt;h4 id=&#34;1-the-b-datetime-b-class-of-the-datetime-module&#34;&gt;1-  The &lt;b&gt; datetime &lt;/b&gt; class of the datetime module&lt;/h4&gt;

&lt;p&gt;&lt;b&gt;-a Creating a datetime object&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
datetime(2019, 3, 1)       # instance of datetime
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 0, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now = datetime.now()
now
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 10, 24, 14, 8, 0, 512783)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now = now.today()
now
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 10, 24, 14, 8, 0, 531785)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now = datetime.utcnow()
now
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 10, 24, 18, 8, 0, 546785)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When opening a csv or text file, we have information about the date and time of the measurements but in the form of strings: &amp;ldquo;2018-11-01 15:20&amp;rdquo; or &amp;ldquo;2017/12/1 16:35:22 &amp;ldquo;&amp;hellip;&lt;/p&gt;

&lt;p&gt;It is possible during the reading to convert these strings into a datetime object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;2018/11/01 15:20&amp;quot;, &amp;quot;%Y/%m/%d %H:%M&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2018, 11, 1, 15, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;2017/12/1 16:35:22&amp;quot;, &amp;quot;%Y/%m/%d %H:%M:%S&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2017, 12, 1, 16, 35, 22)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;01/11/19 10-35:22&amp;quot;, &amp;quot;%d/%m/%y %H-%M:%S&amp;quot;)
dt

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 11, 1, 10, 35, 22)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;1Mar 2019 à 09h35&amp;quot;, &amp;quot;%d%b %Y à %Hh%M&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 9, 35)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;b- Manipulate datetime object&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;From an object or instance of datetime, you can retrieve the time and date.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#now.year
#now.month
#now.day
#maintenant.hour
now.minute
#now.second
#now.microsecond
#now
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can change datetime instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now.replace(year=1995) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(1995, 10, 24, 18, 8, 0, 546785)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now.replace(month=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 1, 24, 18, 8, 0, 546785)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then convert datetime instance to string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = datetime.now(); print(d)
d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2019-10-24 14:08:00.720795





datetime.datetime(2019, 10, 24, 14, 8, 0, 720795)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.strftime(&amp;quot;%H:%M&amp;quot;), d.strftime(&amp;quot;%Hh%Mmin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(&#39;14:08&#39;, &#39;14h08min&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.strftime(&amp;quot;%Y-%m %H:%M&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;2019-10 14:08&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;The day today is {0:%d} {0:%B} and it s  {0:%Hh%Mmin} &#39;.format(d, &amp;quot;day&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;time&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;The day today is 24 October and it s  14h08min &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;date&lt;/b&gt; et &lt;b&gt;time&lt;/b&gt; class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two classes can be used to create a datetime instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime, date, time
d = date(2005, 7, 14)
t = time(12, 30)
t
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.time(12, 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.combine(d, t)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2005, 7, 14, 12, 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now = datetime.utcnow()
now.date()
now.time()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.time(18, 8, 0, 855803)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;b&gt; timedelta &lt;/b&gt; class of the datetime module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import timedelta
delta = timedelta(days=3, seconds=100)    # we create our own timedelta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;datetime.datetime(2019, 10, 24, 14, 8, 0, 899806)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now() + delta
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;datetime.datetime(2019, 10, 27, 14, 9, 40, 935808)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now() + timedelta(days=2, hours=4, minutes=3, seconds=12)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;datetime.datetime(2019, 10, 26, 18, 11, 12, 966809)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;time_range = datetime(2010, 12, 31) - datetime(1981, 12, 31)
time_range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;datetime.timedelta(days=10592)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Example1: Calculate the year of birth from a given age&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
 
old = 25
month = 10
 
actual_year = datetime.today().year
actual_month = datetime.today().month
 
result = actual_year - old - (1 if month &amp;gt; actual_month else 0)
print(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1994&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Example2: Calculate the year of birth from a given age&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can  generate dates for time series with an arbitrary time step:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import timedelta
dt = timedelta(days = 5, hours = 6, minutes = 25)
d0 = datetime(2000, 2, 21)
[str(d0 + i * dt) for i in range(10)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;2000-02-21 00:00:00&#39;,
 &#39;2000-02-26 06:25:00&#39;,
 &#39;2000-03-02 12:50:00&#39;,
 &#39;2000-03-07 19:15:00&#39;,
 &#39;2000-03-13 01:40:00&#39;,
 &#39;2000-03-18 08:05:00&#39;,
 &#39;2000-03-23 14:30:00&#39;,
 &#39;2000-03-28 20:55:00&#39;,
 &#39;2000-04-03 03:20:00&#39;,
 &#39;2000-04-08 09:45:00&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>8 Matplotlib library</title>
      <link>/courses/tutorial_python/8-matplotlib_library/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/8-matplotlib_library/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/matplotlib.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Matplotlib library is one of the most used libraries for plotting data in Python.&lt;/p&gt;

&lt;p&gt;Many types of graphics can be developed with this library:
&lt;a href=&#34;https://matplotlib.org/gallery/index.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/gallery/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To illustrate some features of the Python matplotlib.pyplot module (which provides a plotting system similar to that of MATLAB), we will use a database from the UQAM station.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
import numpy as np
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)

dataframe_UQAM = pd.read_csv(&#39;./DATA/UQAM_DATA_STATION_2018.csv&#39;)
dataframe_UQAM[&#39;Date&#39;]=pd.to_datetime(dataframe_UQAM[&#39;Date&#39;])
dataframe_UQAM = dataframe_UQAM.set_index(&amp;quot;Date&amp;quot;, drop=True)
dataframe_UQAM.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature minimale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature maximale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature moyenne&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation totale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dir_wind&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mod_wind&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;244&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;163&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;255&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;148&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;261&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;8-1-introduction-to-matplotlib&#34;&gt;8.1 Introduction to Matplotlib&lt;/h2&gt;

&lt;h3 id=&#34;conda-install-matplotlib&#34;&gt;conda install matplotlib&lt;/h3&gt;

&lt;p&gt;By running this special iPython command, we will be displaying plots inline:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot() # you create an empty graph or instance and then add layers.
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_6_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-2-add-data-to-our-charts&#34;&gt;8.2 Add data to our charts&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_UQAM[&#39;2015&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature minimale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature maximale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature moyenne&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation totale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dir_wind&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mod_wind&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;254&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;231&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;282&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;178&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_9_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], marker=&#39;x&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_10_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;marker&lt;/b&gt; option :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://matplotlib.org/api/markers_api.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/api/markers_api.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;linestyle&lt;/b&gt; option: to delete or not the lines&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], marker=&#39;x&#39;, linestyle=&amp;quot;--&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_12_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;scatter &lt;/b&gt; fonction: function allows you to create scatter plot&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.rcParams&lt;/b&gt; method is used to enlarge the graphic window&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]  
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_14_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to use the scatter color option, python wants an input list and not a dictionary&lt;/li&gt;

&lt;li&gt;&lt;p&gt;color option : c=list()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], c=list(year_to_plot[&#39;Temperature moyenne&#39;]))
plt.xlabel(&amp;quot;Temps&amp;quot;)
plt.ylabel(&amp;quot;Température&amp;quot;)
plt.title(&amp;quot;Temperature&amp;quot;, y=1.05)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_16_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We used default scatter color ()&lt;/li&gt;
&lt;li&gt;with the &lt;b&gt; cmap &lt;/b&gt; option, we can choose our color panel: &lt;a href=&#34;https://matplotlib.org/examples/color/colormaps_reference.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/examples/color/colormaps_reference.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;we will for example choose the color palette &amp;ldquo;seismic&amp;rdquo; via the option &lt;b&gt; cmap &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;to change the shape and size of the points: use the &lt;b&gt; marker &lt;/b&gt; and &lt;b&gt; s &lt;/b&gt; options&lt;/li&gt;
&lt;li&gt;to save a graph: pyplot function: &lt;b&gt; savefig () &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;To add a color bar: &lt;b&gt; colorbar () &lt;/b&gt; function&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To rotate the labels in x: function &lt;b&gt; xticks () &lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], c=list(year_to_plot[&#39;Temperature moyenne&#39;]),
        cmap=&amp;quot;seismic&amp;quot;,
        marker=&amp;quot;D&amp;quot;, 
        s=100)
plt.xlabel(&amp;quot;Time&amp;quot;)
plt.ylabel(&amp;quot;Temperature&amp;quot;)
plt.title(&amp;quot;Temperature&amp;quot;, y=1.05)
plt.colorbar()
plt.xticks(rotation=45)
plt.show()
plt.savefig(&amp;quot;figures/my_graph.png&amp;quot;, bbox_inches=&amp;quot;tight&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_18_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Figure size 1152x648 with 0 Axes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-3-matplotlib-classes&#34;&gt;8.3 Matplotlib classes&lt;/h2&gt;

&lt;p&gt;When creating a graph, matplotlib:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stores a container for all the graphics&lt;/li&gt;
&lt;li&gt;stores a container so that the graphic is positioned on a grid&lt;/li&gt;
&lt;li&gt;stores visual symbols on the graph&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can plot different things in the same figure using the subplot function. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()
ax1 = fig.add_subplot(2,2,1) # up and left 
ax2 = fig.add_subplot(2,2,2) # up and right 
ax3 = fig.add_subplot(2,2,3) # down and left 
ax4 = fig.add_subplot(2,2,4) # down and right
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_21_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a documentation on subplot:
&lt;a href=&#34;https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-4-add-data&#34;&gt;8.4 Add data&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()
ax1 = fig.add_subplot(2,1,1) 
ax2 = fig.add_subplot(2,1,2)

ax1.plot(dataframe_UQAM[&#39;2017&#39;].index,dataframe_UQAM[&#39;2017&#39;][&#39;Temperature moyenne&#39;])
ax2.plot(dataframe_UQAM[&#39;2016&#39;].index,dataframe_UQAM[&#39;2016&#39;][&#39;Temperature moyenne&#39;])

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0xa516dd8&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_24_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-5-improvement-of-the-graph&#34;&gt;8.5 Improvement of the graph&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(15, 8))
colors = [&#39;green&#39;, &#39;blue&#39;, &#39;red&#39;]
for i in range(3):
    ax = fig.add_subplot(3,1,i+1)
    year = str(2014+i)
    label=year
    plt.plot(dataframe_UQAM[year].index,dataframe_UQAM[year][&#39;Temperature moyenne&#39;], c=colors[i], label = label)
    plt.legend(loc=&#39;upper left&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_26_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-6-example&#34;&gt;8.6 Example&lt;/h2&gt;

&lt;h3 id=&#34;objectives-to-draw-a-meteogram-of-the-uqam-station-for-the-day-of-14-12-2018&#34;&gt;Objectives: to draw a meteogram of the UQAM station for the day of 14/12/2018&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
dataframe_UQAM = pd.read_csv(&#39;./DATA/UQAM_DATA_STATION.csv&#39;)
print(dataframe_UQAM.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;          Time  Precipitation  pressure  humidex  Rosee  Temperature  Chill  \
0  18-12-09_09           0.14    1038.0     -8.0   -7.8         -5.1   -8.0   
1  18-12-09_10           0.00    1039.0     -7.0   -6.7         -3.9   -7.0   
2  18-12-09_11           0.00    1033.0     -5.0   -6.0         -2.7   -5.0   
3  18-12-09_12           0.00    1018.0     -2.0   -5.8         -0.2   -3.0   
4  18-12-09_13           0.00    1106.0     -2.0   -6.0          0.0   -5.0   

   Humidite  Dir_wind  Mod_wind  
0      81.0     208.0       6.0  
1      81.0     201.0       6.0  
2      78.0     184.0       5.0  
3      66.0     208.0       8.0  
4      64.0     268.0      18.0  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_UQAM2 = pd.read_csv(&#39;./DATA/UQAM_DATA_STATION.csv&#39;, parse_dates=[&amp;quot;Time&amp;quot;],date_parser=lambda x: pd.to_datetime(x, format=&amp;quot;%y-%m-%d_%H&amp;quot;))
dataframe_UQAM2.head()

&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Time&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;pressure&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;humidex&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Rosee&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Chill&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Humidite&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dir_wind&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mod_wind&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 09:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1038&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;81&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;208&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 10:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1039&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;81&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 11:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;184&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 12:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;66&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;208&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 13:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;268&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We just want data for 14/12/2018
start_date = &#39;2018-12-14&#39;
end_date = &#39;2018-12-15&#39;
df= dataframe_UQAM2
mask = (df[&#39;Time&#39;] &amp;gt; start_date) &amp;amp; (df[&#39;Time&#39;] &amp;lt;= end_date)


dataframe_jour = dataframe_UQAM2.loc[mask]
print(dataframe_jour.head())
print(len(dataframe_jour))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                   Time  Precipitation  pressure  humidex  Rosee  Temperature  \
112 2018-12-14 01:00:00            0.0    1039.0    -10.0  -10.0         -6.3   
113 2018-12-14 02:00:00            0.0    1039.0     -9.0   -9.0         -5.8   
114 2018-12-14 03:00:00            0.0    1036.0     -9.0   -8.5         -5.4   
115 2018-12-14 04:00:00            0.0    1036.0     -9.0   -8.4         -5.3   
116 2018-12-14 05:00:00            0.0    1037.0     -8.0   -7.5         -4.8   

     Chill  Humidite  Dir_wind  Mod_wind  
112   -8.0      75.0     208.0       4.0  
113   -8.0      78.0     117.0       4.0  
114   -7.0      79.0      89.0       4.0  
115   -7.0      79.0      79.0       3.0  
116   -7.0      81.0      92.0       4.0  
24
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from matplotlib.font_manager import FontProperties
import matplotlib.dates as mdates
from datetime import datetime
from datetime import timedelta as td


daylabels = []
i = 0 
for index, row in dataframe_jour.iterrows():
    daylabels.append(dataframe_jour.iloc[i][0].replace(minute=0, second=0, microsecond=0).strftime(&#39;%Hh&#39;))
    i += 1
print(daylabels)

start_date = &#39;2018-12-14&#39;
end_date = &#39;2018-12-15&#39;
fig = plt.figure(figsize=(20, 8))
fontP = FontProperties()
fontP.set_size(&#39;xx-small&#39;)
t = np.arange(0, 24, 1)
##### on trace les températures
ax1 = plt.subplot(411)
ax1.grid(True)
plt.plot(t, dataframe_jour[&#39;Temperature&#39;], &#39;r-&#39;, label=&#39;Temperature de l\&#39;air&#39;, linewidth=2)
plt.plot(t, dataframe_jour[&#39;Rosee&#39;], &#39;r--&#39;,label=&#39;Temperature du point de rosee&#39;, linewidth=2)
plt.plot(t, dataframe_jour[&#39;Chill&#39;], &#39;g--&#39;,label=&#39;Wind Chill&#39;, linewidth=2)
plt.legend(loc=&#39;upper left&#39;, ncol=1, bbox_to_anchor=(0, 1, 1, 0),fontsize =15)
plt.ylabel(&#39;Température ($^\circ$C)&#39;, {&#39;color&#39;: &#39;black&#39;, &#39;fontsize&#39;: 15})

plt.setp(ax1.get_xticklabels(), fontsize=15)
plt.title(&#39;Meteogram station UQAM:&#39;+ start_date + &#39; / &#39; + end_date, weight=&#39;bold&#39;).set_fontsize(&#39;20&#39;)
plt.setp(ax1.get_xticklabels(), visible=False)

##########  TRACE DES ACCUMULATIONS PRECIPITATION  ##########  
# share x only
ax2 = plt.subplot(412, sharex=ax1)
ax2.grid(True)
t = np.arange(0, 24, 1)
width=1
ax2.bar(t,dataframe_jour[&#39;Precipitation&#39;].values,width,color=&#39;b&#39;, label=&#39;Pluie&#39;, linewidth=2)
plt.setp(ax2.get_xticklabels(), visible=False)
plt.ylim(0,  np.round(dataframe_jour[&#39;Precipitation&#39;].max() ) +1)
plt.ylabel(&#39;Accumulation (mm)&#39;, {&#39;color&#39;: &#39;black&#39;, &#39;fontsize&#39;: 15})
plt.legend(loc=&#39;upper left&#39;, ncol=1, bbox_to_anchor=(0, 0, 1, 1), fontsize =15)

# share x only
##### on trace l humidite
ax2 = plt.subplot(413, sharex=ax1)
ax2.grid(True)
plt.plot(t, dataframe_jour[&#39;Humidite&#39;], &#39;b-&#39;, linewidth=2)
plt.setp(ax2.get_xticklabels(), visible=False)
plt.ylabel(&#39;Humidite relative (%)&#39;, {&#39;color&#39;: &#39;black&#39;, &#39;fontsize&#39;: 15})
plt.legend(loc=&#39;upper left&#39;, ncol=1, bbox_to_anchor=(0, 0, 1, 1), fontsize =15)

##### on trace la pression
ax3 = plt.subplot(414, sharex=ax1)
plt.plot(t, dataframe_jour[&#39;pressure&#39;], &#39;g-&#39;, linewidth=2)
plt.xlim(0.01, 24)
plt.ylim(np.round(min(dataframe_jour[&#39;pressure&#39;])) - 2, np.round(max(dataframe_jour[&#39;pressure&#39;])) + 2)
plt.ylabel(&#39;Pression (hPa)&#39;, {&#39;color&#39;: &#39;black&#39;, &#39;fontsize&#39;: 15})
plt.legend(loc=&#39;upper left&#39;, ncol=1, bbox_to_anchor=(0, 0, 1, 1), fontsize =15)
ax3.grid(True)

for label in ax3.get_yticklabels():
    label.set_color(&amp;quot;black&amp;quot;)

ax3.set(xticks=np.arange(0,len(daylabels),1), xticklabels=daylabels) #Same as plt.xticks
spacing = 1
visible = ax3.xaxis.get_ticklabels()[::spacing]
for label in ax3.xaxis.get_ticklabels():
    if label not in visible:
        label.set_visible(False)


fig.autofmt_xdate()
fig.set_size_inches(18.5, 10.5)
fileout=&#39;figures/Meteogram_UQAM.png&#39;
plt.savefig(fileout)
fig.autofmt_xdate()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;01h&#39;, &#39;02h&#39;, &#39;03h&#39;, &#39;04h&#39;, &#39;05h&#39;, &#39;06h&#39;, &#39;07h&#39;, &#39;08h&#39;, &#39;09h&#39;, &#39;10h&#39;, &#39;11h&#39;, &#39;12h&#39;, &#39;13h&#39;, &#39;14h&#39;, &#39;15h&#39;, &#39;16h&#39;, &#39;17h&#39;, &#39;18h&#39;, &#39;19h&#39;, &#39;20h&#39;, &#39;21h&#39;, &#39;22h&#39;, &#39;23h&#39;, &#39;00h&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_31_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Project 1 ECCC temperature data</title>
      <link>/courses/tutorial_python/project1-eccc_temperature/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/project1-eccc_temperature/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-eccc-temperature-data&#34;&gt;1: ECCC temperature data&lt;/h3&gt;

&lt;p&gt;In previous sections, we presented how to use the Pandas library which allowed us to process and manipulate data sets. Combining this with Python&amp;rsquo;s Datetime and Matplotlib libraries, we were able to quickly visualize our data.&lt;/p&gt;

&lt;p&gt;We will continue to discover the functionality of these libraries in a practical case by analyzing the daily temperature data recorded by one of the Environment and Climate Change Canada stations located in Montreal / McTavish between the period 1948 and 2017 (file named &amp;lsquo;MONTREAL_tasmoy_1948_2017.txt&amp;rsquo; in ./DATA directory)&lt;/p&gt;

&lt;p&gt;To complete and enrich our analysis, a new Python library will be presented: &lt;b&gt; Seaborn &lt;/b&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Seaborn library is based on matplotlib.&lt;/li&gt;
&lt;li&gt;it allows to draw more complex graphs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&#34; target=&#34;_blank&#34;&gt;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This link presents a gallery of chart types to be realized with Seaborn:
&lt;a href=&#34;https://seaborn.pydata.org/examples/index.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/examples/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-opening-and-reading-our-time-series&#34;&gt;1- Opening and reading our time series&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
import datetime
from datetime import date
import numpy as np 
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)

df = pd.DataFrame()

# We open ascii file and store information in a new DataFrame
with open(&#39;./DATA/MONTREAL_tasmoy_1948_2017.txt&#39;, &#39;r&#39;) as file:
     rows = file.read()
data_EC_Montreal = [float(row) for row in rows.split()]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have created a 1D field but we have no temporal information in our file.
Knowing that our registration covers the period 1948 - 2017, we will format our dates with the &lt;b&gt; datetime &lt;/b&gt; module of Python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We know that the time series starts on January 1, 1948 and ends on December 31, 2017 inclusively
# We create a Datetime object instance to complete our DataFrame
start = date(1948, 1, 1)
end = date(2017, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)

# We will use DateTime object as DataFrame index
df[&#39;datetime&#39;] = rng
df.index = df[&#39;datetime&#39;] 

df[&#39;Temperature Montreal&#39;] = data_EC_Montreal
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature Montreal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(df) # the dir () function allows to list the functions that are applicable to our DataFrame object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We assigned our time series in a Pandas DataFrame and then formatted the date as a Datetime object.&lt;/p&gt;

&lt;p&gt;It is now easy to manipulate the dataset and apply some simple functions.&lt;/p&gt;

&lt;h3 id=&#34;2-calculation-of-indices-on-the-temperature-data&#34;&gt;2- Calculation of indices on the temperature data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We will develop and apply a function to calculate the quantiles of our distribution&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;By resampling our series with the &lt;b&gt; .resample () &lt;/b&gt; method of Pandas, we will see how to apply native functions of numpy and apply our own function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Creating our index that calculates the quantile of the distribution
# We use the numpy .percentile () function
def percentile(n):
def percentile_(x):
    return np.nanpercentile(x, n)
percentile_.__name__ = &#39;percentile_%s&#39; % n
return percentile_         
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt; .resample () &lt;/b&gt; and &lt;b&gt; .agg () &lt;/b&gt; methods of Pandas&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;b&gt; .resample () &lt;/b&gt; method is very useful for frequency conversion and time series resampling. The object (here DataFrame) must have a data / time index (DatetimeIndex) in order to be used.
Several resampling frequencies are available (time, week, month, season, year &amp;hellip;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.resample.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.resample.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;b&gt; .agg () &lt;/b&gt; method is used for aggregation of data according to a list of functions to be applied to each column, resulting in an aggregated result with a hierarchical index.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.agg.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.agg.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our example, we will resample our data set by month and calculate for each month the average, the minimum, the maximum and the 90th and 95th quantiles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal = df.resample(&#39;M&#39;).agg([np.mean, np.min, np.max, percentile(90), percentile(95)])
resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# simple step to remove the row &#39;Temperature Montreal&#39; 
resamp_Montreal = resamp_Montreal.loc[:,&#39;Temperature Montreal&#39;] 
resamp_Montreal.head() 
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;3-some-examples-of-graphics-with-the-seaborn-library&#34;&gt;3- Some examples of graphics with the Seaborn library&lt;/h3&gt;

&lt;p&gt;Now that we have some statistics on our DataFrame, we will use Python&amp;rsquo;s Seaborn library to visualize them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/seaborn.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example: Heatmap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.heatmap.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.heatmap.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, we would like to observe the variation of the average temperature for all the months of the year and all the years. We are going to define two new columns in our DataFrame in which will be assigned only the years and the months respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal[&#39;year&#39;]  = resamp_Montreal.index.year
resamp_Montreal[&#39;MonthNo&#39;] = resamp_Montreal.index.month
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Before we plot our heatmap, we need to reorganize our dataframe.
- The &lt;b&gt; .pivot_table () &lt;/b&gt; method: this method allows you to cross tables dynamically.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would like to visualize only the average monthly temperatures, so work with the &amp;lsquo;mean&amp;rsquo; column, put the year in Index and have one month per column. The &lt;b&gt; .pivot_table () &lt;/b&gt; method allows us to do this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Montreal_pivot = resamp_Montreal.pivot_table(values=&#39;mean&#39;,index=&#39;year&#39;,columns=[&#39;MonthNo&#39;])
Montreal_pivot.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;11&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;12&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.7467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.4903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.1065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.98333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.52258&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1949&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.77419&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.69286&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.19677&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.51667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.5129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.871&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.5452&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.0258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.193333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.21935&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1950&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.34839&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.79643&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.89355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.1161&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9567&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.3258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.1129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.6167&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.95667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.83548&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.35484&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.48571&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.490323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.29667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.4097&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.3129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.6677&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.1333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.371&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.3129&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1952&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.80323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.27241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.987097&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.99667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.4065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.0806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.7323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.67419&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.65667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.18387&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We then apply &lt;b&gt;.heatmap()&lt;/b&gt; function on our DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns 
import matplotlib.pyplot as plt 
ax = plt.axes()
sns.heatmap(Montreal_pivot)
figure = ax.get_figure()    
figure.set_size_inches(15, 10) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_20_0.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can improve our display.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.heatmap(Montreal_pivot, cmap=&#39;RdYlGn_r&#39;, linewidths=0.5, annot=True , ax = ax,vmin=-30, vmax=30,center=0, fmt=&#39;.1f&#39;,yticklabels=True, cbar_kws={&#39;label&#39;: &#39;Celcius&#39;})
ax.set_title(&#39;Mean temperature&#39;, weight=&#39;bold&#39;, fontsize=&amp;quot;x-large&amp;quot;)
figure = ax.get_figure()    
figure.set_size_inches(22, 15) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_20_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Other examples: Boxplot,  violin plot, line plot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.boxplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.boxplot.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.violinplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.violinplot.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.lineplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.lineplot.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first, we create a new variable containing the months but in string of characters. For this we apply the &lt;b&gt; .strftime () &lt;/b&gt; method of datetime.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal[&#39;month&#39;] = resamp_Montreal.index.strftime(&amp;quot;%b&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Boxplot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;Set1&amp;quot;)  
figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_26_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Violin plot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.violinplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;Set1&amp;quot;)  
figure = ax.get_figure()    
figure.set_size_inches(12, 8)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_28_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Line plot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.lineplot(x=resamp_Montreal.index.year, y=&amp;quot;mean&amp;quot;,
         hue=&amp;quot;month&amp;quot;,
         data=resamp_Montreal,
         palette=&amp;quot;tab10&amp;quot;)
figure = ax.get_figure()    
figure.set_size_inches(12, 8)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_30_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.catplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;percentile_90&amp;quot;, data=resamp_Montreal, kind=&amp;quot;swarm&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_31_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We can combine several Seaborn charts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
ax1 = plt.subplot2grid((2, 2), (0, 0), colspan=2)
sns.lineplot(x=resamp_Montreal.index.year, y=&amp;quot;mean&amp;quot;, hue=&amp;quot;month&amp;quot;, data=resamp_Montreal, palette=&amp;quot;tab10&amp;quot;)
ax2 = plt.subplot2grid((2, 2), (1, 0), colspan=1)
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;tab10&amp;quot;) 
ax3 = plt.subplot2grid((2, 2), (1, 1), colspan=1)
sns.violinplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;tab10&amp;quot;) 
figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_33_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-fonction-groupby&#34;&gt;4- Fonction groupby&lt;/h3&gt;

&lt;p&gt;We previously see  &lt;b&gt;.groupby()&lt;/b&gt;  method from Pandas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.tutorialspoint.com/python_pandas/python_pandas_groupby.htm&#34; target=&#34;_blank&#34;&gt;https://www.tutorialspoint.com/python_pandas/python_pandas_groupby.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method is very useful using datetime objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We want to group our dataframe by month  with  &lt;b&gt;.groupeby()&lt;/b&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal_grouped  = resamp_Montreal.groupby(&amp;quot;month&amp;quot;) 
resamp_Montreal_grouped.groups     # Pour voir les groupes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Apr&#39;: DatetimeIndex([&#39;1948-04-30&#39;, &#39;1949-04-30&#39;, &#39;1950-04-30&#39;, &#39;1951-04-30&#39;,
                &#39;1952-04-30&#39;, &#39;1953-04-30&#39;, &#39;1954-04-30&#39;, &#39;1955-04-30&#39;,
                &#39;1956-04-30&#39;, &#39;1957-04-30&#39;, &#39;1958-04-30&#39;, &#39;1959-04-30&#39;,
                &#39;1960-04-30&#39;, &#39;1961-04-30&#39;, &#39;1962-04-30&#39;, &#39;1963-04-30&#39;,
                &#39;1964-04-30&#39;, &#39;1965-04-30&#39;, &#39;1966-04-30&#39;, &#39;1967-04-30&#39;,
                &#39;1968-04-30&#39;, &#39;1969-04-30&#39;, &#39;1970-04-30&#39;, &#39;1971-04-30&#39;,
                &#39;1972-04-30&#39;, &#39;1973-04-30&#39;, &#39;1974-04-30&#39;, &#39;1975-04-30&#39;,
                &#39;1976-04-30&#39;, &#39;1977-04-30&#39;, &#39;1978-04-30&#39;, &#39;1979-04-30&#39;,
                &#39;1980-04-30&#39;, &#39;1981-04-30&#39;, &#39;1982-04-30&#39;, &#39;1983-04-30&#39;,
                &#39;1984-04-30&#39;, &#39;1985-04-30&#39;, &#39;1986-04-30&#39;, &#39;1987-04-30&#39;,
                &#39;1988-04-30&#39;, &#39;1989-04-30&#39;, &#39;1990-04-30&#39;, &#39;1991-04-30&#39;,
                &#39;1992-04-30&#39;, &#39;1993-04-30&#39;, &#39;1994-04-30&#39;, &#39;1995-04-30&#39;,
                &#39;1996-04-30&#39;, &#39;1997-04-30&#39;, &#39;1998-04-30&#39;, &#39;1999-04-30&#39;,
                &#39;2000-04-30&#39;, &#39;2001-04-30&#39;, &#39;2002-04-30&#39;, &#39;2003-04-30&#39;,
                &#39;2004-04-30&#39;, &#39;2005-04-30&#39;, &#39;2006-04-30&#39;, &#39;2007-04-30&#39;,
                &#39;2008-04-30&#39;, &#39;2009-04-30&#39;, &#39;2010-04-30&#39;, &#39;2011-04-30&#39;,
                &#39;2012-04-30&#39;, &#39;2013-04-30&#39;, &#39;2014-04-30&#39;, &#39;2015-04-30&#39;,
                &#39;2016-04-30&#39;, &#39;2017-04-30&#39;],
               dtype=&#39;datetime64[ns]&#39;, name=&#39;datetime&#39;, freq=&#39;12M&#39;),
 &#39;Aug&#39;: DatetimeIndex([&#39;1948-08-31&#39;, &#39;1949-08-31&#39;, &#39;1950-08-31&#39;, &#39;1951-08-31&#39;,
                &#39;1952-08-31&#39;, &#39;1953-08-31&#39;, &#39;1954-08-31&#39;, &#39;1955-08-31&#39;,
                &#39;1956-08-31&#39;, &#39;1957-08-31&#39;, &#39;1958-08-31&#39;, &#39;1959-08-31&#39;,
                &#39;1960-08-31&#39;, &#39;1961-08-31&#39;, &#39;1962-08-31&#39;, &#39;1963-08-31&#39;,
                &#39;1964-08-31&#39;, &#39;1965-08-31&#39;, &#39;1966-08-31&#39;, &#39;1967-08-31&#39;,
                &#39;1968-08-31&#39;, &#39;1969-08-31&#39;, &#39;1970-08-31&#39;, &#39;1971-08-31&#39;,
                &#39;1972-08-31&#39;, &#39;1973-08-31&#39;, &#39;1974-08-31&#39;, &#39;1975-08-31&#39;,
                &#39;1976-08-31&#39;, &#39;1977-08-31&#39;, &#39;1978-08-31&#39;, &#39;1979-08-31&#39;,
                &#39;1980-08-31&#39;, &#39;1981-08-31&#39;, &#39;1982-08-31&#39;, &#39;1983-08-31&#39;,
                &#39;1984-08-31&#39;, &#39;1985-08-31&#39;, &#39;1986-08-31&#39;, &#39;1987-08-31&#39;,
                &#39;1988-08-31&#39;, &#39;1989-08-31&#39;, &#39;1990-08-31&#39;, &#39;1991-08-31&#39;,
                &#39;1992-08-31&#39;, &#39;1993-08-31&#39;, &#39;1994-08-31&#39;, &#39;1995-08-31&#39;,
                &#39;1996-08-31&#39;, &#39;1997-08-31&#39;, &#39;1998-08-31&#39;, &#39;1999-08-31&#39;,
                &#39;2000-08-31&#39;, &#39;2001-08-31&#39;, &#39;2002-08-31&#39;, &#39;2003-08-31&#39;,
                &#39;2004-08-31&#39;, &#39;2005-08-31&#39;, &#39;2006-08-31&#39;, &#39;2007-08-31&#39;,
                &#39;2008-08-31&#39;, &#39;2009-08-31&#39;, &#39;2010-08-31&#39;, &#39;2011-08-31&#39;,
                &#39;2012-08-31&#39;, &#39;2013-08-31&#39;, &#39;2014-08-31&#39;, &#39;2015-08-31&#39;,
                &#39;2016-08-31&#39;, &#39;2017-08-31&#39;],
             ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To iterate through groups:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for MonthNo,group in resamp_Montreal_grouped :                              
print(MonthNo)
print(group)
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apr
                 mean  amin  amax  percentile_90  percentile_95  year  &lt;br /&gt;
datetime&lt;br /&gt;
1948-04-30   6.640000  -1.7  14.5          12.08         13.130  1948&lt;br /&gt;
1949-04-30   7.516667   2.0  15.8          12.43         14.370  1949&lt;br /&gt;
1950-04-30   4.710000  -4.2  11.7           8.56         10.770  1950&lt;br /&gt;
1951-04-30   7.296667   1.4  15.0          11.78         13.105  1951&lt;br /&gt;
1952-04-30   7.996667  -1.4  15.3          14.01         15.000  1952&lt;br /&gt;
&amp;hellip;&lt;/p&gt;

&lt;p&gt;[70 rows x 8 columns]
Aug
                 mean  amin  amax  percentile_90  percentile_95  year  &lt;br /&gt;
datetime&lt;br /&gt;
1948-08-31  21.106452  15.0  27.8          26.40         27.400  1948&lt;br /&gt;
1949-08-31  21.545161  15.0  27.0          25.60         26.700  1949&lt;br /&gt;
1950-08-31  19.112903  12.5  23.4          22.50         23.050  1950&lt;br /&gt;
1951-08-31  18.667742  13.1  23.4          22.00         22.950  1951&lt;br /&gt;
1952-08-31  20.732258  14.2  25.6          23.40         25.300  1952&lt;br /&gt;
1953-08-31  20.480645  15.6  27.2          25.00         27.000  1953&lt;br /&gt;
1954-08-31  19.312903  12.8  24.5          22.00         23.350  1954&lt;br /&gt;
&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To select a group: get_group()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we grouped our dataframe using month index
resamp_Montreal_grouped.get_group(&#39;Dec&#39;).head()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.52258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1949-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.21935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1949&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1950-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.83548&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.95&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1950&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1951-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.3129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1952-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.18387&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1952&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Aggregation:
Python has several methods are available to perform aggregations on data. It is done using the pandas and numpy libraries. The data must be available or converted to a dataframe to apply the aggregation functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# to calculate &#39;percentile_90&#39; in each  group. 
resamp_Montreal_grouped[&#39;percentile_90&#39;].agg(np.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;month
Apr    12.434848
Aug    24.283582
Dec     1.790000
Feb    -0.098529
Jan    -1.046324
Jul    25.119242
Jun    23.557385
Mar     5.021493
May    19.483846
Nov     8.615147
Oct    15.280294
Sep    21.236765
Name: percentile_90, dtype: float64&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal_grouped[&#39;percentile_90&#39;].agg(np.size)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;month
Apr    70.0
Aug    70.0
Dec    70.0
Feb    70.0
Jan    70.0
Jul    70.0
Jun    70.0
Mar    70.0
May    70.0
Nov    70.0
Oct    70.0
Sep    70.0
Name: percentile_90, dtype: float64&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exercice&#34;&gt;Exercice :&lt;/h2&gt;

&lt;h2 id=&#34;compute-day-degres-index-for-montreal-station&#34;&gt;Compute day degres index for Montreal station&lt;/h2&gt;

&lt;p&gt;1- open and read file &amp;ldquo;MONTREAL_tasmoy_1948_2017.txt&amp;rdquo;&lt;/p&gt;

&lt;p&gt;2- Define datetime index (time range: 01/01/1948 : 31/12/2017 )&lt;/p&gt;

&lt;p&gt;3- Write a function to compute the index&lt;/p&gt;

&lt;p&gt;4- For each year, compute temperature mean, min , max and DG0 index&lt;/p&gt;

&lt;p&gt;5- Make a plot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
with open(&#39;./data/MONTREAL_tasmoy_1948_2017.txt&#39;, &#39;r&#39;) as file:
     rows = file.read()
data_EC_Montreal = [float(row) for row in rows.split()]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import datetime
from datetime import date
df = pd.DataFrame()

start = date(1948, 1, 1)
end = date(2017, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)

df[&#39;datetime&#39;] = rng
df.index = df[&#39;datetime&#39;] 
df[&#39;Temperature Montreal&#39;] = data_EC_Montreal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def DG0(S):  
     ind_DGO=[]
     ind_DGO = sum(x for x in S if x &amp;gt;= 0)
     return ind_DGO  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp = df.resample(&#39;AS&#39;)
dataset = resamp.agg([np.mean, np.min, np.max, DG0])
dataset.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;amin&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;amax&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;DG0&amp;rsquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.23388&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3506.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1949-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.04767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3602.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1950-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.84877&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3318.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1951-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.24521&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-24.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3404.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1952-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.85546&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3474.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;5-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.columns = dataset.columns.droplevel(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[&#39;DG0&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime
1948-01-01    3506.1
1949-01-01    3602.9
1950-01-01    3318.9
1951-01-01    3404.9
1952-01-01    3474.2
Freq: AS-JAN, Name: DG0, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
dataset[&#39;DG0&#39;].plot(figsize=(12,5))
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_58_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we must filter missing values
def DG0bis(S):  
     ind_DGObis=[]      
     S_no_nan = S[~np.isnan(S)]
     N = len(S)
     N2 = len(S_no_nan)
     if ((N2/N) &amp;lt; 0.8): 
         ind_DGObis = np.empty(1)
         ind_DGObis = np.nan
     else:       
         ind_DGObis = sum(x for x in S if x &amp;gt;= 0)
     return ind_DGObis 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = resamp.agg([np.mean, np.min, np.max, DG0, DG0bis])
dataset.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;amin&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;amax&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;DG0&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;DG0bis&amp;rsquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.23388&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3506.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3506.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1949-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.04767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3602.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3602.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1950-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.84877&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3318.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3318.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1951-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.24521&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-24.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3404.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3404.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1952-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.85546&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3474.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3474.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.columns = dataset.columns.droplevel(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[&#39;DG0&#39;].plot(figsize=(12,5))
dataset[&#39;DG0bis&#39;].plot(figsize=(12,5))
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_62_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project 2 ECCC precipitation data</title>
      <link>/courses/tutorial_python/project2-eccc_precipitation/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/project2-eccc_precipitation/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;eccc-precipitation-data&#34;&gt;ECCC Precipitation Data&lt;/h2&gt;

&lt;p&gt;We will continue to discover the functionality of these libraries in a practical case by now analyzing the daily precipitation data recorded by the ECCC stations located at the Montreal Trudeau Airport between the period 1961 and 2010.&lt;/p&gt;

&lt;p&gt;We will use &amp;lsquo;MONTREAL_preacc_1961_2010.dat&amp;rsquo; file in .data/ directory.&lt;/p&gt;

&lt;h3 id=&#34;1-opening-and-reading-our-time-series&#34;&gt;1- Opening and reading our time series&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
import datetime
from datetime import date
import numpy as np 
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)

df_Precipitation = pd.DataFrame()
# Ouverture du fichier text  
with open(&#39;./DATA/MONTREAL_preacc_1961_2010.dat&#39;, &#39;r&#39;) as file:
     rows = file.read()
data_EC_Montreal = [float(row) for row in rows.split()]  

# We know that the time series begins on January 1, 1961
# and ends on December 31, 2010
# We can rebuild the index of Dataframes

start = date(1961, 1, 1)
end = date(2010, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)

# Create a column from the datetime datatype
df_Precipitation[&#39;datetime&#39;] = rng
# Set the datetime column as the index
df_Precipitation.index = df_Precipitation[&#39;datetime&#39;] 

# Create a column from the numeric score variable
df_Precipitation[&#39;Precipitation Montreal&#39;] = data_EC_Montreal
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation Montreal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;2-applying-functions-to-datafram-precipitation-indices&#34;&gt;2- Applying functions to DataFram:  precipitation indices:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CDD: calculation of the maximum number of consecutive dry days (Precipitation &amp;lt;1mm)&lt;/li&gt;
&lt;li&gt;CWD: calculation of the maximum number of consecutive wet days (Precipitation&amp;gt; 1mm)&lt;/li&gt;
&lt;li&gt;Prcp1: calculation of the percentage of precipitation days (Precipitation&amp;gt; 1mm)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SDII: calculation of the precipitation intensity average for wet days (Precipitation&amp;gt; 1mm&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# calculation of the maximum number of consecutive dry days (inf to 1mm) 
# on the incoming signal (less than 20% of missing values) 
def CDD(S):
 import numpy as np
 ind_CDD=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if ((N2/N) &amp;lt; 0.8): 
     ind_CDD = np.empty(1)
     ind_CDD = np.nan
 else:
     temp = 0
     ind_CDD = 0 
     j =0
     while (j &amp;lt; N2):
         while (j &amp;lt; N2 ) and (S_no_nan[j] &amp;lt; 1.0 ):
             j += 1
             temp +=1
         if ind_CDD &amp;lt; temp:
             ind_CDD = temp
         temp = 0
         j += 1 
 return ind_CDD      
 
# calculation of the maximum number of consecutive wet days (sup to 1mm) 
# on the incoming signal (less than 20% of missing values) 
def CWD(S):
 import numpy as np
 ind_CWD=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if ((N2/N) &amp;lt; 0.8): 
     ind_CWD = np.empty(1)
     ind_CWD = np.nan
 else:
     temp = 0
     ind_CWD = 0 
     j =0
     while (j &amp;lt; N2):
         while (j &amp;lt; N2 ) and (S_no_nan[j] &amp;gt; 1.0 ):
             j += 1
             temp +=1
         if ind_CWD &amp;lt; temp:
             ind_CWD = temp
         temp = 0
         j += 1 
 return ind_CWD  

# Calculation of the percentage of precipitation days 
# on the incoming signal (less than 20% of missing values)
def Prcp1(S):
 import numpy as np
 ind_Prcp1=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if (N2 == 0):
     N2=1
         
 if ((N2/N) &amp;lt; 0.8): 
     ind_Prcp1 = np.empty(1)
     ind_Prcp1 = np.nan
 else:
     ind_Prcp1 = 0
     for row in S_no_nan:
         if row &amp;gt;= 1 :
             ind_Prcp1 += 1 
                 
     ind_Prcp1 = 100 * (ind_Prcp1/N2)
 return ind_Prcp1     

# average precipitation intensity for wet days (PR greater than 1mm) (less than 20% missing values)

def SDII(S):
 import numpy as np
 ind_SDII=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if ((N2/N) &amp;lt; 0.8): 
     ind_SDII = np.empty(1)
     ind_SDII = np.nan
 else:
     SS = S[S &amp;gt; 1]        
     ind_SDII = np.nanmean(SS)
 return ind_SDII      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The previous functions make it possible to calculate precipitation indices on a daily signal. We want to apply these functions per month.&lt;/p&gt;

&lt;p&gt;So we have to work with a subset of our &lt;b&gt; df_Precipitation &lt;/b&gt; dataframe grouped by month.&lt;/p&gt;

&lt;p&gt;In the same way as the previous section on temperatures, we will apply the &lt;b&gt; .resample (&amp;rsquo;M&amp;rsquo;) &lt;/b&gt; method: &amp;ldquo;M&amp;rdquo; for months (it&amp;rsquo;s possible here to work at week , season or year scale)
As a reminder, at this stage there is no calculation, the data are simply sorted on a monthly basis.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Precipitation_resamp = df_Precipitation.resample(&#39;M&#39;)
df_Precipitation_resamp.count().head()            
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation Montreal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can now apply our functions defined previously for each month of our DataFrame. For this, we will use the &lt;b&gt; .agg () &lt;/b&gt; method on our subset grouped by month.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation = df_Precipitation_resamp.agg([CDD, CWD, Prcp1, SDII, np.sum, np.mean])
indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;CDD&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;CWD&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;Prcp1&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;SDII&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;sum&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;3-filter-the-data-directly-on-a-dataframe&#34;&gt;3- Filter the data directly on a dataframe&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;the data can be filtered according to a condition on a column.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will for example only extract precipitation data greater than or equal to 1mm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SDII2=df_Precipitation[df_Precipitation[&amp;quot;Precipitation Montreal&amp;quot;]&amp;gt;=1.0]
SDII2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation Montreal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-06 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-06 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.65&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-07 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-07 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.05&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We first created a Boolean type mask on the column &amp;lsquo;Precipitation Montreal&amp;rsquo; which was then applied to our DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(df_Precipitation[&amp;quot;Precipitation Montreal&amp;quot;]&amp;gt;1.0).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime
1961-01-01     True
1961-01-02     True
1961-01-03     True
1961-01-04    False
1961-01-05    False
Name: Precipitation Montreal, dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then group our DataFrame by month and we apply a function by calling .agg() method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SDII2 = SDII2.resample(&#39;M&#39;).agg({&#39;SDII2&#39;: lambda x: x.mean()})
SDII2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;SDII2&amp;rsquo;, &amp;lsquo;Precipitation Montreal&amp;rsquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;4-updating-our-initial-dataframe&#34;&gt;4- Updating our initial DataFrame&lt;/h3&gt;

&lt;p&gt;We want to add to our initial DataFrame the variable SDII2 previously created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation[&amp;quot;SDII2&amp;quot;]=SDII2[:].values
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;CDD&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;CWD&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;Prcp1&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;SDII&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;sum&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;SDII2&amp;rsquo;, &amp;ldquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.columns = indice_precipitation.columns.droplevel(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Using index datetime column, we want to create new columns with year and month.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation[&#39;year&#39;]  = indice_precipitation.index.year
indice_precipitation[&#39;month&#39;]  = indice_precipitation.index.month
indice_precipitation[&#39;month&#39;] = indice_precipitation.index.strftime(&#39;%b&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We want to save our Dataframe &lt;b&gt;indice_precipitation&lt;/b&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.to_csv(&#39;indice_precipitation.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-viewing-the-results&#34;&gt;4- Viewing the results&lt;/h3&gt;

&lt;p&gt;We will visualize our final dataframe &lt;b&gt; index_precipitation &lt;/b&gt; with the Seaborn library.
&lt;img src = &#34;./figures/seaborn.png&#34; alt = &#34;Seaborn&#34; width = &#34;60%&#34; height = &#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;However, we will see some examples with multi-dimensional graphics.
- Boxplot: &lt;b&gt;boxplot()&lt;/b&gt; function&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use our precipitation DataFrame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We want to visualize the nomber of days with precipitation by month. We will then plot Prcp1 variable from our DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
import matplotlib.pyplot as plt 
ax = plt.axes()
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;Prcp1&amp;quot;, data=indice_precipitation, palette=&amp;quot;Set1&amp;quot;) 

ax.set_title(&#39;Number of days with precipitation in Montreal from 1948 to 2017&#39;)
ax.set_ylabel(&#39;%&#39;)

figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_29_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Histogram: &lt;b&gt;barplot()&lt;/b&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this example, we will plot the mean accumulation of prepicipitation by month, to do this we must use &amp;lsquo;sum&amp;rsquo; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.barplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;sum&amp;quot;, data=indice_precipitation)
ax.set_title(&#39;Monthly mean of cumulated precipitation in Montréal from 1948 to 2017&#39;)
ax.set_ylabel(&#39;mm&#39;)

figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_31_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bivariate graph: &lt;b&gt;jointplot()&lt;/b&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jointplot displays a relationship between 2 variables (bivariate)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.jointplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.jointplot.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(x=&amp;quot;Prcp1&amp;quot;, y=&amp;quot;sum&amp;quot;, data=indice_precipitation,kind=&#39;reg&#39;,
                   space=0, height=6, ratio=4)
plt.show()

# kind = &#39;kde&#39; 
# kind=&amp;quot;hex&amp;quot;
# kind=&amp;quot;reg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_33_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bivariate graph: &lt;b&gt;pairplot()&lt;/b&gt; function
&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.pairplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.pairplot.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Attributes of interest
cols = [&#39;CWD&#39;, 
    &#39;SDII&#39;, 
    &#39;sum&#39;, 
    &#39;Prcp1&#39;, 
    &#39;mean&#39;]

pp = sns.pairplot(indice_precipitation[cols], 
              height=1.8, aspect=1.2, markers=&amp;quot;+&amp;quot;,
              plot_kws=dict(edgecolor=&amp;quot;k&amp;quot;, linewidth=0.5),
              diag_kws=dict(shade=True), # &amp;quot;diag&amp;quot; adjusts/tunes the diagonal plots
              diag_kind=&amp;quot;kde&amp;quot;) # use &amp;quot;kde&amp;quot; for diagonal plots

fig = pp.fig 
fig.subplots_adjust(top=0.93, wspace=0.3)
fig.suptitle(&#39;Indice de précipitation Pairwise Plots&#39;, 
          fontsize=14, fontweight=&#39;bold&#39;)
plt.show()



&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_35_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Correlation matrix:
The Pandas library has a method for calculating the correlations between each column of a DataFrame.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We first drop &amp;lsquo;year&amp;rsquo; column and then apply .corr() method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation2 = indice_precipitation.drop([&amp;quot;year&amp;quot;], axis=1)
corr_matrix = indice_precipitation2.corr()
corr_matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CDD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.288579&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.687758&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0253577&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.480416&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.481019&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0251715&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CWD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.288579&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.631665&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0400715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.41894&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.417954&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0396542&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Prcp1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.687758&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.631665&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0645136&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661685&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.663935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0645538&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SDII&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0253577&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0400715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0645136&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.659944&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.999642&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;sum&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.480416&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.41894&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661685&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.659944&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.997694&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.660287&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.481019&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.417954&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.663935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.997694&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661422&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0251715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0396542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0645538&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.999642&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.660287&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661422&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can call the &lt;b&gt; .heatmap () &lt;/b&gt; function to visualize our correlation matrix and thus facilitate our interpretations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, (ax) = plt.subplots(1, 1, figsize=(10,6))
hm = sns.heatmap(corr_matrix, 
                 ax=ax,           # Axes in which to draw the plot, otherwise use the currently-active Axes.
                 cmap=&amp;quot;coolwarm&amp;quot;, # Color Map.
                 #square=True,    # If True, set the Axes aspect to “equal” so each cell will be square-shaped.
                 annot=True, 
                 fmt=&#39;.2f&#39;,       # String formatting code to use when adding annotations.
                 #annot_kws={&amp;quot;size&amp;quot;: 14},
                 linewidths=.05)

fig.subplots_adjust(top=0.93)
fig.suptitle(&#39;Correlation Matrix: Precipitation Indices Montreal Station&#39;, 
              fontsize=14, 
              fontweight=&#39;bold&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_41_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Graphiques 3D:&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bonus-add-correlation-indices-with-the-scipy-library&#34;&gt;Bonus: add correlation indices with the scipy library&lt;/h3&gt;

&lt;p&gt;The &lt;b&gt; stats &lt;/b&gt; module of the &lt;b&gt; Scipy library &lt;/b&gt; has many statistical functions.
&lt;a href=&#34;https://docs.scipy.org/doc/scipy/reference/stats.html&#34; target=&#34;_blank&#34;&gt;https://docs.scipy.org/doc/scipy/reference/stats.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def corr_pearson(x, y, **kws):
    r, p = stats.pearsonr(x, y)
    p_stars = &#39;&#39;
    if p &amp;lt;= 0.05:
        p_stars = &#39;*&#39;
    if p &amp;lt;= 0.01:
        p_stars = &#39;**&#39;
    if p &amp;lt;= 0.001:
        p_stars = &#39;***&#39;
   # r, _ = stats.spearmanr(x, y)
    ax = plt.gca()   
    pos = (0, .9) 
    color2=&#39;red&#39;                                                                   
    ax.annotate(&amp;quot;Pearson = {:.2f}&amp;quot;.format(r) + p_stars,
                xy=pos, xycoords=ax.transAxes, color=color2, fontweight=&#39;bold&#39;)
    

def corr_spearman(x, y, **kws):
    r, p = stats.spearmanr(x, y)
    p_stars = &#39;&#39;
    if p &amp;lt;= 0.05:
        p_stars = &#39;*&#39;
    if p &amp;lt;= 0.01:
        p_stars = &#39;**&#39;
    if p &amp;lt;= 0.001:
        p_stars = &#39;***&#39;
   # r, _ = stats.spearmanr(x, y)
    ax = plt.gca()  
    pos = (0, .6) 
    color2=&#39;darkgreen&#39; 
    ax.annotate(&amp;quot;Spearman = {:.2f}&amp;quot;.format(r) + p_stars,
                xy=pos, xycoords=ax.transAxes, color=color2, fontweight=&#39;bold&#39;)

def corr_kendall(x, y, **kws):
    r, p = stats.kendalltau(x, y)
    p_stars = &#39;&#39;
    if p &amp;lt;= 0.05:
        p_stars = &#39;*&#39;
    if p &amp;lt;= 0.01:
        p_stars = &#39;**&#39;
    if p &amp;lt;= 0.001:
        p_stars = &#39;***&#39;
   # r, _ = stats.spearmanr(x, y)
    ax = plt.gca()   
    pos = (0, .3) 
    color2=&#39;darkorange&#39; 
    ax.annotate(&amp;quot;Kendall = {:.2f}&amp;quot;.format(r) + p_stars,
                xy=pos, xycoords=ax.transAxes, color=color2, fontweight=&#39;bold&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_month=indice_precipitation[[&amp;quot;CWD&amp;quot;, &amp;quot;SDII&amp;quot;, &amp;quot;sum&amp;quot;, &amp;quot;Prcp1&amp;quot;]].loc[(indice_precipitation[&amp;quot;month&amp;quot;]==&amp;quot;Jan&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from scipy import stats
import seaborn as sns; sns.set()

g = sns.PairGrid(indice_month[[&amp;quot;CWD&amp;quot;, &amp;quot;SDII&amp;quot;, &amp;quot;sum&amp;quot;, &amp;quot;Prcp1&amp;quot;g]]) 

g.map_upper(corr_pearson) 
g.map_upper(corr_spearman) 
g.map_upper(corr_kendall) 
g.map_lower(sns.regplot) 
g.map_diag(plt.hist) 
g.set(alpha=0.5)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_47_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
