<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Formation en Python | GDueymes</title>
    <link>/courses/formation_python/</link>
      <atom:link href="/courses/formation_python/index.xml" rel="self" type="application/rss+xml" />
    <description>Formation en Python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 09 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Formation en Python</title>
      <link>/courses/formation_python/</link>
    </image>
    
    <item>
      <title>1- Introduction</title>
      <link>/courses/formation_python/1-introduction/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/1-introduction/</guid>
      <description>&lt;h1&gt;Objectifs&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Tout préparer pour commencer le tutoriel&lt;/li&gt;
&lt;li&gt;Présentation et installation de l’environnement de travail&lt;/li&gt;
&lt;li&gt;Présentation de Jupyter&lt;/li&gt;
&lt;li&gt;Maitrise de jupyter notebook 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Qu’est-ce qu’Anaconda ?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/&#34; target=&#34;_blank&#34;&gt;https://www.anaconda.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Anaconda est une distribution Python, c&amp;rsquo;est à dire une configuration particulière (bonne version Python, bon packages, les bonnes versions)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pourquoi Anaconda ? C’est le plus répandue (6M) , open source, que vous allez retrouver partout, adapté à la data science machine learning &amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt; Comment installer Anaconda ? &lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chercher ‘anaconda’ sur Google&lt;/li&gt;
&lt;li&gt;Aller dans download (25% utilisent encore Python 2). Prendre Python 3&lt;/li&gt;
&lt;li&gt;Suivre les processus d’installation classique (tout laisser par défaut)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; L&#39;interface anaconda&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Lancer anaconda&lt;/li&gt;
&lt;li&gt;Présentation Home&lt;/li&gt;
&lt;li&gt;Présentation Environnements (noyaux avec packages autour) : chercher pandas, Seaborn. Cherchez plotly&lt;/li&gt;
&lt;li&gt;Lancer Jupyter  via anaconda&lt;/li&gt;
&lt;li&gt;Lancer jupyter via cortana&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; Maitrise du notebook jupyter 1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;3 onglets : documents (vos dossiers), Running (notbook en cours), Clusters (parrallelisation de calcul)&lt;/li&gt;
&lt;li&gt;Création d’un nouveau dossier&lt;/li&gt;
&lt;li&gt;Création d’un nouveau notebook&lt;/li&gt;
&lt;li&gt;Renomer&lt;/li&gt;
&lt;li&gt;Print(‘Data science’)&lt;/li&gt;
&lt;li&gt;Ajouter une nouvelle cellule print(‘Machine learnin’)&lt;/li&gt;
&lt;li&gt;Changer valeur, rerun cell print(‘Machine learning’)&lt;/li&gt;
&lt;li&gt;Changer ordre (flèches)&lt;/li&gt;
&lt;li&gt;Supprimer&lt;/li&gt;
&lt;li&gt;Copy past&lt;/li&gt;
&lt;li&gt;Ajouter markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;h1&gt; jupyter introduction &lt;/h1&gt;
&lt;h2&gt; session 1 &lt;/h2&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sinon &lt;a href=&#34;https://wordtohtml.net/&#34; target=&#34;_blank&#34;&gt;https://wordtohtml.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pour cela qu’on parle de notebook !
&lt;a href=&#34;https://www.kaggle.com/pavansanagapati/a-simple-tutorial-on-exploratory-data-analysis&#34; target=&#34;_blank&#34;&gt;https://www.kaggle.com/pavansanagapati/a-simple-tutorial-on-exploratory-data-analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Première erreur (passer markdown en python)&lt;/li&gt;
&lt;li&gt;Restart &amp;amp; clear output&lt;/li&gt;
&lt;li&gt;Cells &amp;gt; Run all&lt;/li&gt;
&lt;li&gt;Save&lt;/li&gt;
&lt;li&gt;Print preview&lt;/li&gt;
&lt;li&gt;Download as&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2- Les bases du language Python - Cours</title>
      <link>/courses/formation_python/2-les_bases/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/2-les_bases/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-bases-du-langage-python&#34;&gt;Les Bases du langage Python:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une variable&lt;/li&gt;
&lt;li&gt;Les règles de nommage d&amp;rsquo;une variable&lt;/li&gt;
&lt;li&gt;Les premiers types de variables&lt;/li&gt;
&lt;li&gt;Réaliser des opération entre des variables&lt;/li&gt;
&lt;li&gt;Vérifier et modifier le type d’une variable&lt;/li&gt;
&lt;li&gt;Maîtrise de jupyter notebook 2 : execution du code à travers les cellules&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-les-variables&#34;&gt;2- Les variables&lt;/h2&gt;

&lt;p&gt;Une variable est un identificateur ou un nom pour stocker des informations ou des résultats.&lt;/p&gt;

&lt;p&gt;Tous les programmes Python font appel à des variables. Il est important de garder en mémoire que chaque type d&amp;rsquo;information est enregistré dans un type spécial de variable.&lt;/p&gt;

&lt;p&gt;Un type de variable est une information sur le contenu de la variable. Le type de variable va signifier à l&amp;rsquo;interpreteur python ce qu&amp;rsquo;il peut faire ou ne pas faire avec cette variable.&lt;/p&gt;

&lt;p&gt;Quelques remarques:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python est sensible à la Casse: il distingue les Majuscules et les minuscules&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;On ne peut pas commencer une variable par un chiffre&lt;/li&gt;
&lt;li&gt;Ne pas utiliser d&amp;rsquo;accents dans les noms de variables.&lt;/li&gt;
&lt;li&gt;fonction type(): permet de connaitre le type de notre variable.&lt;/li&gt;
&lt;li&gt;Pas d’espace (underscore)&lt;/li&gt;
&lt;li&gt;Mots interdits (se mets en vert) : &lt;a href=&#34;https://www.programiz.com/python-programming/keywords-identifier&#34; target=&#34;_blank&#34;&gt;https://www.programiz.com/python-programming/keywords-identifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Soyez brefs mais clairs (allez l’écrire souvent, un code peut faire des 100aines de ligne)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; Concept de variable et déclaration d’une variable dans Jupyter &lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Se retrouve dans pratiquement tous les langages&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Données que vous stockez dans votre programme enregistré sous un nom. On pourra ensuite l’utiliser, faire des calculs et la modifier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;job = &#39;data scientist&#39; # on stocke une valeur dans une variable 
print(job)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;data scientist&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Une variable déclarée est accessible depuis d’autres cellules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(job)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;data scientist
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-1-les-type-des-variables-concept&#34;&gt;2.1 Les type des variables (concept)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Très important (fondamental comme dans tout type de langage)&lt;/li&gt;
&lt;li&gt;La manière dont python va comprendre la nature de l’information stockée et permettre certaines actions (ou en bloquer d&amp;rsquo;autres)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-1-1-les-types-numériques&#34;&gt;2.1.1- Les types numériques&lt;/h3&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Les entiers: int()&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;1 est un nombre entier, 1.0 n&#39;en est pas un&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Les décimaux: float()&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;nombre qui comprend une partie décimale &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Les nombres complexes&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;association entre un nombre réel et un nombre imaginaire&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m=3.2
type(m)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;float
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m=3
type(m)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;int
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-2-les-types-booléens&#34;&gt;2.1.2- Les types booléens&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;variable contenant des valeurs binaires: True ou False&lt;/li&gt;
&lt;li&gt;des types de données  résultent d&amp;rsquo;opérations logiques&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Très utile dans les confitions if().&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3&amp;gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3&amp;lt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-3-les-chaînes-de-caractère&#34;&gt;2.1.3- Les chaînes de caractère&lt;/h3&gt;

&lt;p&gt;Suite finie de caractères qu&amp;rsquo;on peut considérer comme du texte qu&amp;rsquo;on définit entre deux (&amp;lsquo;&amp;hellip;&amp;rsquo;) ou (&amp;ldquo;&amp;hellip;&amp;rdquo;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gestion des apostrohpes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;job = &#39;data science&#39;
job
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lsquo;data science&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;darkVador = &#39;Luke, I&#39;m your father&#39;
print(darkVador)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;File &amp;ldquo;&lt;ipython-input-34-24a0388f6afa&gt;&amp;rdquo;, line 1
    darkVador = &amp;lsquo;Luke, I&amp;rsquo;m your father&amp;rsquo;
                         ^
SyntaxError: invalid syntax&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;darkVador = &amp;quot;Luke, I&#39;m your father&amp;quot;
print(darkVador)
# ou 

darkVador = &#39;Luke, I\&#39;m your father&#39;
print(darkVador)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luke, I&amp;rsquo;m your father
Luke, I&amp;rsquo;m your father&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Si texte trop long (marche aussi pour du code classique)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;luke = &#39;no…That\&#39;s impossible….Noooooooooooooooooooooooooo\
oooooooooooo&#39;
print(luke)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;no…That&amp;rsquo;s impossible….Noooooooooooooooooooooooooooooooooooooo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Possible de concatener 2 variables&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;start = &#39;luke, I\&#39;m&#39;
end = &#39;your father&#39;
darkVador = start+end
print(darkVador)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;luke, I&amp;rsquo;myour father&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;darkVador = start+&#39; &#39;+end
print(darkVador)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;luke, I&amp;rsquo;m your father&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Possible de répèter une chaine de caractère&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;luke = &#39;N&#39;+(&#39;o&#39;*10)
print(luke)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Noooooooooo&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-1-4-vérifier-et-modifier-le-type-d-une-variable&#34;&gt;2.1.4- Vérifier et modifier le type d’une variable&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exemple (règle : on ne mix pas chiffres et strings dans une concaténation)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;finalMotivationScore = 90
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test = job + &#39;learning motivation ?&#39; + finalMotivationScore + &#39;% !&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;TypeError                                 Traceback (most recent call last)&lt;/p&gt;

&lt;p&gt;&lt;ipython-input-41-77bbac5d7b73&gt; in &lt;module&gt;
&amp;mdash;-&amp;gt; 1 test = job + &amp;lsquo;learning motivation ?&amp;rsquo; + finalMotivationScore + &amp;lsquo;% !&amp;rsquo;&lt;/p&gt;

&lt;p&gt;TypeError: can only concatenate str (not &amp;ldquo;int&amp;rdquo;) to str&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verifier le type d’une variable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(type(finalMotivationScore))
print(type(&#39;test&#39;))
print(type(1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;class &#39;int&#39;&gt;
&lt;class &#39;str&#39;&gt;
&lt;class &#39;int&#39;&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;modifier le type d&amp;rsquo;une variable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;float(1)
int(1.3)
str(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lsquo;1&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test = job + &#39; learning motivation ? &#39; + str(finalMotivationScore) + &#39;% !&#39;
print(test)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;data science learning motivation ? 90% !&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-2-les-opérateurs-arithmétiques&#34;&gt;2.2- Les opérateurs arithmétiques&lt;/h2&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;thead valign=&#34;bottom&#34;&gt;
&lt;tr&gt;&lt;th class=&#34;head&#34;&gt;Opérateurs&lt;/th&gt;
&lt;th class=&#34;head&#34;&gt;Signification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;+&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Ajoute deux valeurs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;-&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Soustrait l&#39;opérande droit de l&#39;opérande gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;#42;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Multiplie deux valeurs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;/&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise l&#39;opérande gauche par l&#39;opérande droit &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;%&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise l&#39;opérande gauche par l&#39;opérande droit et retourne le reste (opérateur modulo)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;#42;&amp;#42;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Calcule de la valeur exponentielle de l&#39;opératde gauche par l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;//&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise l&#39;opérande gauche par l&#39;opérande droit et retourne la partie entière&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5-3 # soustraction 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5+3 # addition 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5*3 # multiplication
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5/3 # division  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1.6666666666666667
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5//3 # le chiffre entier de ma division 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5%3 # récupérer le reste de ma division ou modulo  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5**3 # exponentielle ou puissance
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;125
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-3-les-opérateurs-relationnels&#34;&gt;2.3- Les opérateurs relationnels&lt;/h2&gt;

&lt;p&gt;Les opérateurs relationnels comparent une valeur avec une autre et vous disent si la relation fournie est vraie.&lt;/p&gt;

&lt;p&gt;La valeur vraie des relations est souvent utilisée pour prendre des décisions en s&amp;rsquo;assurant que des conditions sont réunies pour effectuer une certaine tâche.&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;thead valign=&#34;bottom&#34;&gt;
&lt;tr&gt;&lt;th class=&#34;head&#34;&gt;Opérateurs&lt;/th&gt;
&lt;th class=&#34;head&#34;&gt;Signification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;==&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Détermine si deux valeurs sont égales&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;!=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Détermine si deux valeurs sont différentes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Vérifie que l&#39;opérande gauche est plus grand que l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Vérifie que l&#39;opérande gauche est plus petit que l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Vérifie que l&#39;opérande gauche est supérieur ou égal à l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Vérifie que l&#39;opérande gauche est inférieur ou égal à l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;is&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Indentité&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;pre&#34;&gt;not&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Négation&lt;/td&gt;

&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# premier opérateur de comparaison : == 
1 == 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1==2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2ème opérateur de comparaison : != 
1!=2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3ème opérateur de comparaison : &amp;gt; et &amp;lt; 
1&amp;gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;lt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;=1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a=1 # Attention !!!! c&#39;est un opérateur d&#39;assignation de valeur à la variable 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-4-les-opérateurs-logiques&#34;&gt;2.4- Les opérateurs logiques&lt;/h2&gt;

&lt;p&gt;Les opérateurs logiques comparent des expressions booléennes et non  plus des valeurs comme dans le point précédent.&lt;/p&gt;

&lt;p&gt;Ils servent à créer des expressions booléennes qui nous aident à savoir si une certaine tâche doit ou non être réalisée.&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;thead valign=&#34;bottom&#34;&gt;
&lt;tr&gt;&lt;th class=&#34;head&#34;&gt;Opérateurs&lt;/th&gt;
&lt;th class=&#34;head&#34;&gt;Signification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;and (et)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Détermine si les deux opérandes sont vrais&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;or (ou)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Détermine si l&#39;un des deux opérandes est vrai&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;not(non)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Inverse la valeur logique de l&#39;opérande&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# premier opérateur logique : and
(3==3) and (4==4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(3==3) and (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# deuxième opérateur logique : or
(3==3) or (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(3!=3) or (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3ème opérateur logique : not
not((3!=3) or (4==5))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-5-les-opérateurs-d-affectation&#34;&gt;2.5- Les opérateurs d&amp;rsquo;affectation&lt;/h2&gt;

&lt;p&gt;Les opérateurs d&amp;rsquo;affectation placent une valeur dans une variable. Nous aovns déjà vu le cas le plus simple (=), mais python offre bien d&amp;rsquo;autres opérateurs de ce type, afin nottamment de réaliser une opération aithmétique en même temps que l&amp;rsquo;affectation.
&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;thead valign=&#34;bottom&#34;&gt;
&lt;tr&gt;&lt;th class=&#34;head&#34;&gt;Opérateurs&lt;/th&gt;
&lt;th class=&#34;head&#34;&gt;Signification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&#34;top&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Affecte la valeur de l&amp;rsquo;opérande droit à l&amp;rsquo;opérande de gauche &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;+=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Ajoute la valeur de l&amp;rsquo;opérande droit à l&amp;rsquo;opérande de gauche et place le résultat dans l&amp;rsquo;opérande gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;-=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Soustrait la valeur de l&amp;rsquo;opérande droit de l&amp;rsquo;opérande gauche et place le résultat dans l&amp;rsquo;opérande gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;*=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Multiplie la valeur de l&amp;rsquo;opérande droit par celle de l&amp;rsquo;opérande gauche et place le résultat dans l&amp;rsquo;opérande de gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;/=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise la valeur de l&amp;rsquo;opérande gauche par celle de l&amp;rsquo;opérande droit et place le résultat dans l&amp;rsquo;opérande de gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;%=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise la valeur de l&amp;rsquo;opérande gauche par celle de l&amp;rsquo;opérande droit et place le reste dans l&amp;rsquo;opérande de gauche&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;

&lt;p&gt;&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;**=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Calcule la valeur exponentielle de l&amp;rsquo;opérande de gauche par celle de l&amp;rsquo;opérande droit et place le résultat dans l&amp;rsquo;opérande gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;//=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise la valeur de l&amp;rsquo;opérande gauche par celle de l&amp;rsquo;opérande droit et place le résultat entier dans l&amp;rsquo;opérande gauche&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 2
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable += 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable -= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable **= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;25
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-6-maitrise-de-jupyter-notebook-execution-du-code-à-travers-les-cellules-commentaires&#34;&gt;2.6- Maitrise de jupyter notebook: execution du code à travers les cellules &amp;amp; commentaires&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Modification de la variable au fil du script (la dernière valeur est conservé)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 1.1
print(number)
print(type(number))

number = 1
print(number)
print(type(number))

number = &#39;1&#39;
print(number)
print(type(number))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.1
&lt;class &#39;float&#39;&gt;
1
&lt;class &#39;int&#39;&gt;
1
&lt;class &#39;str&#39;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(number)
print(type(number))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1
&lt;class &#39;str&#39;&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ordre d&amp;rsquo;execution des cellules important (erreur fréquente)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 1
print(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 2
print(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Les commentaires&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;&#39;&#39; Premier 
commentaire &#39;&#39;&#39;
print(number) #Deuxième commentaire
print(&#39;voici un #commentaire&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2
voici un #commentaire&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exercices + corrections&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2- Les bases du language Python - Exercices</title>
      <link>/courses/formation_python/2-les_bases-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/2-les_bases-exercice/</guid>
      <description>&lt;h1&gt; Exercices &lt;/h1&gt;

&lt;p&gt;1) Debuggez cette erreur et expliquer brievement le problème en commentaire&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Nom = &#39;Sebastien&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;mon nom est &#39;Nom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-3-965d76a6ded8&amp;gt;&amp;quot;, line 1
    print(&#39;mon nom est &#39;Nom)
                          ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;mon nom est &#39; + Nom) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mon nom est Sebastien
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Faites en sorte que la cellule ci-dessous retourne &amp;lsquo;J&amp;rsquo;apprends la data Science&amp;rsquo; à partir des variables à disposition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;debutPhrase = &#39;J&#39;apprends la &#39;
finPhrase = &#39;Data science&#39;
print()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;debutPhrase = &amp;quot;J&#39;apprends la &amp;quot;
finPhrase = &#39;Data science&#39;
print(debutPhrase + finPhrase)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;J&#39;apprends la Data science
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Debugguez le code ci-dessous en modifiant uniquement ce qu&amp;rsquo;il se trouve dans print(&amp;hellip;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;heuresPassees = 2
debutPhrase = &#39;j\&#39;apprends Python depuis &#39;
finPhrase = &#39; heures.&#39;

print(debutPhrase + heuresPassees + finPhrase)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-8-54124c40b75b&amp;gt; in &amp;lt;module&amp;gt;
      3 finPhrase = &#39; heures.&#39;
      4 
----&amp;gt; 5 print(debutPhrase + heuresPassees + finPhrase)


TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;heuresPassees = 2
debutPhrase = &#39;j\&#39;apprends Python depuis &#39;
finPhrase = &#39; heures.&#39;

print(debutPhrase + str(heuresPassees) + finPhrase)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;j&#39;apprends Python depuis 2 heures.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) quelle sera la valeur de varAge dans le code ci-dessous ? Expliquez en commentaire la raison&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;varAge = 28
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;varAge = 30
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(varAge)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5) a) A partir des variables mises à disposition, calculez le taux de conversion et stockez le dans la variable &amp;ldquo;tauxConversion&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Définition : Le taux de conversion d’un site web désigne le plus souvent le ratio [conversions/visites] donnant le pourcentage de visiteurs réalisant un achat au cours de la visite d’un site&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombreDeVisites = 26736352
nombredeConversions = 973520
#tauxConversion=...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tauxConversion= 973520/26736352
print(tauxConversion)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.036411848557349934
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b) Verifiez le type de la variable en l&amp;rsquo;imprimant à l&amp;rsquo;execution de la cellule&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#print(...)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(type(tauxConversion))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;float&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c) faites en sorte que le taux soit en base 100 plutôt qu&amp;rsquo;en base 1 (ex : avoir 62 plutot que 0.62)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tauxConversion=...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tauxConversion= (973520/26736352) * 100
print(tauxConversion)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.6411848557349935
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d) trouvez un moyen d&amp;rsquo;arrondir la variable tauxConversion à 2 chiffres après la virgule. Ne cherchez pas dans le cours, ça n&amp;rsquo;y est pas :)&lt;/p&gt;

&lt;p&gt;Aide : round()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tauxConversion=...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tauxConversion= round((973520/26736352) * 100,2)
print(tauxConversion)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e) Imprimez la phrase suivante &amp;ldquo;Le taux de conversion est (valeur tauxConversion) %&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#print(...)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Le taux de conversion est &amp;quot;+ str(tauxConversion) +&amp;quot; %&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le taux de conversion est 3.64 %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;f) Rassemblez toutes vos manipulations dans une cellule pour faire le travail en une seule fois. Commentez votre code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombreDeVisites = 26736352
nombredeConversions = 973520
#tauxConversion=...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombreDeVisites = 26736352
nombredeConversions = 973520
tauxConversion= round((nombredeConversions/nombreDeVisites) * 100,2)
print(&amp;quot;Le taux de conversion est &amp;quot;+ str(tauxConversion) +&amp;quot; %&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le taux de conversion est 3.64 %
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>3- Les listes en Python - Cours</title>
      <link>/courses/formation_python/3-les_listes/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/3-les_listes/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-les-listes-en-python&#34;&gt;3- Les listes en Python:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une liste&lt;/li&gt;
&lt;li&gt;Savoir consulter et analyser une liste&lt;/li&gt;
&lt;li&gt;Savoir manipuler une liste&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Concept et déclaration d&#39;une liste en Python&lt;/h2&gt;

&lt;p&gt;La struture dite &amp;ldquo;liste&amp;rdquo; est fondamentale dans la programmation Python.&lt;/p&gt;

&lt;p&gt;Les listes permettent de regrouper un ensemble de valeurs sous forme ordonnée et modifiable accessible via des index.&lt;/p&gt;

&lt;p&gt;On écrit tous les éléments de la liste en les séparant par des virgules et le tout encadré par des crochets :
             - ma_liste = [ , , , , ]&lt;/p&gt;

&lt;p&gt;Python est un langage orienté-objet, les listes sont associées à des méthodes: objet.method()&lt;/p&gt;

&lt;p&gt;On peut appliquer des fonctions sur les listes&lt;/p&gt;

&lt;h2 id=&#34;3-1-créer-une-liste&#34;&gt;3.1- Créer une liste&lt;/h2&gt;

&lt;p&gt;Pour crée une lixte, on écrit tous les éléments de la liste en les séparant par des virgules et le tout encadré par des crochets&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)  # fonction pour voir ce qui compose notre liste 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut aussi utiliser la fonction &lt;b&gt;range()&lt;/b&gt; pour générer une liste composée d&amp;rsquo;une simple suite arithmétique.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=list(range(10))
ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=list(range(1981,1985,1))
ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1981, 1982, 1983, 1984]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lorsque l&amp;rsquo;on travaille avec un objet sous Python, la commande dir() nous montre toujours les tâches que nous pouvons réaliser avec cet objet: dir(ma_liste)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;In&#39;,
 &#39;Out&#39;,
 &#39;_&#39;,
 &#39;_3&#39;,
 &#39;_4&#39;,
 &#39;__&#39;,
 &#39;___&#39;,
 &#39;__builtin__&#39;,
 &#39;__builtins__&#39;,
 &#39;__doc__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;_dh&#39;,
 &#39;_i&#39;,
 &#39;_i1&#39;,
 &#39;_i2&#39;,
 &#39;_i3&#39;,
 &#39;_i4&#39;,
 &#39;_i5&#39;,
 &#39;_ih&#39;,
 &#39;_ii&#39;,
 &#39;_iii&#39;,
 &#39;_oh&#39;,
 &#39;exit&#39;,
 &#39;get_ipython&#39;,
 &#39;ma_liste&#39;,
 &#39;quit&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-2-parcourir-des-listes&#34;&gt;3.2- Parcourir des listes&lt;/h2&gt;

&lt;p&gt;Une fois la liste crée, nous pouvons accéder aux éléments de notre liste en utilisant les index de cette dernière.&lt;/p&gt;

&lt;p&gt;Le premier item commence toujours avec l&amp;rsquo;index 0. Pour lire la premier item on utilise la valeur 0, le deuxième on utilise la valeur 1, etc.&lt;/p&gt;

&lt;p&gt;Il est d&amp;rsquo;ailleurs possible de modifier une valeur avec son index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
ma_liste[:] # Affiche toutes les occurences
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[1] # pour accéder à un élement de la liste: ici on prend le deuxième élément. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[2:4] # slicing: pour accéder aux éléments entre la 3ème position et la 4ème
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[:4] # slicing: pour accéder tous les éléments jusqu&#39;à l&#39;index 4 ou 4ème position 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[3:] # slicing: pour accéder tous les éléments à partir de l&#39;index 3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[0:2],ma_liste[4],ma_liste[5:7] # pour choisir plusieurs éléments, on fait plusieurs listes
# on crée ici un tuple: qui contient des listes 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;([1, 2], 5, [6, 7])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[-2] # pour récupérer la 2ème valeur à partir de la fin , avec les index négatifs, on ne part plus de 0 . 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[1:-4] # on part de l&#39;index 1, avec le slicing , on s&#39;arrête une 4 fois avant 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[::2] # pour extraire les éléments avec un incrément: ici on extrait les index pairs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 3, 5, 7, &#39;hello&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[1::2] # pour extraire les éléments avec un incrément: ici on extrait les indexs impairs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 4, 6, 8, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-3-modifier-des-listes&#34;&gt;3.3-  Modifier des listes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pour &lt;b&gt;ajouter&lt;/b&gt; un élément: on utilise une méthode append&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste.append(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1981, 1982, 1983, 1984, 2]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pour &lt;b&gt;insérer&lt;/b&gt;  un élement dans notre liste à un index choisi: méthode insert()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste.insert(5,&amp;quot;nouvelle&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[1981, 1982, 1983, 1984, 2, &amp;lsquo;nouvelle&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pour &lt;b&gt;modifier&lt;/b&gt; une valeur dans notre liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[0]=&amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&amp;lsquo;a&amp;rsquo;, 1982, 1983, 1984, 2, &amp;lsquo;nouvelle&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pour &lt;b&gt;modifier&lt;/b&gt; plusieurs éléments de notre liste: slicing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[3:5]=[8,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&amp;lsquo;a&amp;rsquo;, 1982, 1983, 8, 10, &amp;lsquo;nouvelle&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pour &lt;b&gt;supprimer&lt;/b&gt; des valeurs d&amp;rsquo;une liste: 2 méthodes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[0:2]=[]  # supprimer avec du slicing 
print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1983, 8, 10, &amp;lsquo;nouvelle&amp;rsquo;]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del ma_liste[3] # supprimer avec des mots clefs :https://fr.wikibooks.org/wiki/Programmation_Python/Tableau_des_mots_r%C3%A9serv%C3%A9s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1983, 8, 10]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; 3.4-  Opérations utiles sur les listes  &lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pour &lt;b&gt;concatener&lt;/b&gt; deux listes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste1=[1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste2=[6,7,8,9,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste3=ma_liste1+ma_liste2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pour &lt;b&gt;duppliquer&lt;/b&gt; une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste1=[1,2,3,4,5]
ma_liste1*3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.reverse()&lt;/b&gt; pour &lt;b&gt;inverser&lt;/b&gt; les éléments d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste1=[1,2,3,4,5]
print(ma_liste1)
ma_liste1.reverse()
print(ma_liste1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5]
[5, 4, 3, 2, 1]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.count()&lt;/b&gt; pour &lt;b&gt;compter&lt;/b&gt; le nombre d&amp;rsquo;occurence dans une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste2=liste = [&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;]
ma_liste2.count(&amp;quot;a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.index()&lt;/b&gt; pour &lt;b&gt;trouver l&amp;rsquo;index&lt;/b&gt; d&amp;rsquo;une valeur dans une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste2=liste = [&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;]
ma_liste2.index(&amp;quot;c&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonction &lt;b&gt;sum()&lt;/b&gt; pour &lt;b&gt;sommer&lt;/b&gt; les éléments d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste1=[1,2,3,4,5]
sum(ma_liste1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonction &lt;b&gt;.len()&lt;/b&gt; pour connaitre &lt;b&gt;le nombre d&amp;rsquo;items&lt;/b&gt; d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(ma_liste1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.sort()&lt;/b&gt; pour &lt;b&gt;trier&lt;/b&gt; les items d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste = [90,3,8,4,1,10,25,99]
ma_liste.sort() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 3, 4, 8, 10, 25, 90, 99]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonctions &lt;b&gt;min()&lt;/b&gt; et &lt;b&gt;max()&lt;/b&gt; pour extraire le &lt;b&gt;minimum&lt;/b&gt; ou le &lt;b&gt;maximum&lt;/b&gt; d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 3, 4, 8, 10, 25, 90, 99]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(ma_liste) # fonction pour extraire le minimum de notre liste 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(ma_liste) # fonction pour extraire le maximum de notre liste 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;99&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;association d&amp;rsquo;une boucle &lt;b&gt;for&lt;/b&gt; et de la fonction &lt;b&gt;print()&lt;/b&gt; pour afficher les valeurs d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_mois = [&amp;quot;jan&amp;quot;,&amp;quot;fev&amp;quot;,&amp;quot;mar&amp;quot;]
for mois in list_mois:
print(mois)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jan
fev
mar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonction &lt;b&gt;enumerate()&lt;/b&gt; pour afficher les valeurs d&amp;rsquo;une liste ainsi que son index associé&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_mois = [&amp;quot;jan&amp;quot;,&amp;quot;fev&amp;quot;,&amp;quot;mar&amp;quot;]
for mois in enumerate(list_mois):
 print(mois)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(0, &amp;lsquo;jan&amp;rsquo;)
(1, &amp;lsquo;fev&amp;rsquo;)
(2, &amp;lsquo;mar&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.split()&lt;/b&gt; pour transformer une chaîne de caractère en liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_chaine = &amp;quot;Janvier:Fevrier:Mars&amp;quot;
ma_chaine.split(&amp;quot;:&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&amp;lsquo;Janvier&amp;rsquo;, &amp;lsquo;Fevrier&amp;rsquo;, &amp;lsquo;Mars&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.join()&lt;/b&gt; pour transformer une liste en chaîne de caractères&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;liste = [&#39;Janvier&#39;, &#39;Fevrier&#39;, &#39;Mars&#39;]
&amp;quot;:&amp;quot;.join(liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lsquo;Janvier:Fevrier:Mars&amp;rsquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-5-les-tuples&#34;&gt;3.5- Les tuples&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1 tuple est une liste, soit ensemble de valeur stockée, mais à la différence qu&amp;rsquo;un tuple n&amp;rsquo;est pas modifiable comme dans une liste.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;l&amp;rsquo;intérêt d&amp;rsquo;un tuple est ce qui est rangé dans un tuble ne sera jamais modifiable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On écrit tous les éléments d&amp;rsquo;un tuple en les séparant par des virgules et le tout encadré par des parenthèses :
         - mon_tuple = ( , , , , )&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On utilisera un tuple pour définir des sortes de constantes qui n&amp;rsquo;ont donc pas vocation à changer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1=(1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1, 2, 3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1[0]=0 # on ne peut pas modifier un tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-48-af300b8325d6&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 tuple1[0]=0 # on ne peut pas modifier un tuple


TypeError: &#39;tuple&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1[1]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>3- Les listes en Python - Exercice</title>
      <link>/courses/formation_python/3-les_listes-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/3-les_listes-exercice/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;tp-analyse-des-données-brutes-des-passagers-du-titanic-1-3&#34;&gt;TP : Analyse des données brutes des passagers du Titanic (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)&lt;/h2&gt;

&lt;p&gt;Votre mission est de parvenir à extraire les données suivantes
- 1) le nombre de passagers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2) le nombre de femmes et d&amp;rsquo;hommes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;3) le pourcentage de survit des passagers (dans la liste survided, 1 correspond à survecu, 0 à mort)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;4) l&amp;rsquo;age moyen sur le bateau&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il y a ensuite quelques manipulations à réaliser&lt;/p&gt;

&lt;p&gt;5) trouver un système permettant de vérifier la présence d&amp;rsquo;une personne à partir de son nom.
- &amp;lsquo;Levy, Mr. Rene Jacques&amp;rsquo; était il présent ?
- &amp;lsquo;Pinsky, Mrs. (Carla)&amp;rsquo; était-elle présente ?&lt;/p&gt;

&lt;p&gt;6) il y a une erreur sur le nom d&amp;rsquo;un des passagers
- trouver l&amp;rsquo;emplacement dans la liste de &amp;lsquo;Panula, Mr. Ernesti Arvid&amp;rsquo;
- Supprimer le passager et mettre à la place &amp;lsquo;Tanula, Mr. Ernesto Arvad&amp;rsquo;
- Vérifier avec le système trouvé en exercice 5 si la correction a bien été réalisée en recherchant l&amp;rsquo;ancien et le nouveau nom&lt;/p&gt;

&lt;p&gt;Aller plus loin : &lt;a href=&#34;https://www.kaggle.com/c/titanic&#34; target=&#34;_blank&#34;&gt;https://www.kaggle.com/c/titanic&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;survided = [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]
age = [22.0, 38.0, 26.0, 35.0, 35.0, 23.0, 54.0, 2.0, 27.0, 14.0, 4.0, 58.0, 20.0, 39.0, 14.0, 55.0, 2.0, 23.0, 31.0, 23.0, 35.0, 34.0, 15.0, 28.0, 8.0, 38.0, 23.0, 19.0, 23.0, 23.0, 40.0, 23.0, 23.0, 66.0, 28.0, 42.0, 23.0, 21.0, 18.0, 14.0, 40.0, 27.0, 23.0, 3.0, 19.0, 23.0, 23.0, 23.0, 23.0, 18.0, 7.0, 21.0, 49.0, 29.0, 65.0, 23.0, 21.0, 28.5, 5.0, 11.0, 22.0, 38.0, 45.0, 4.0, 23.0, 23.0, 29.0, 19.0, 17.0, 26.0, 32.0, 16.0, 21.0, 26.0, 32.0, 25.0, 23.0, 23.0, 0.82999999999999996, 30.0, 22.0, 29.0, 23.0, 28.0, 17.0, 33.0, 16.0, 23.0, 23.0, 24.0, 29.0, 20.0, 46.0, 26.0, 59.0, 23.0, 71.0, 23.0, 34.0, 34.0, 28.0, 23.0, 21.0, 33.0, 37.0, 28.0, 21.0, 23.0, 38.0, 23.0, 47.0, 14.5, 22.0, 20.0, 17.0, 21.0, 70.5, 29.0, 24.0, 2.0, 21.0, 23.0, 32.5, 32.5, 54.0, 12.0, 23.0, 24.0, 23.0, 45.0, 33.0, 20.0, 47.0, 29.0, 25.0, 23.0, 19.0, 37.0, 16.0, 24.0, 23.0, 22.0, 24.0, 19.0, 18.0, 19.0, 27.0, 9.0, 36.5, 42.0, 51.0, 22.0, 55.5, 40.5, 23.0, 51.0, 16.0, 30.0, 23.0, 23.0, 44.0, 40.0, 26.0, 17.0, 1.0, 9.0, 23.0, 45.0, 23.0, 28.0, 61.0, 4.0, 1.0, 21.0, 56.0, 18.0, 23.0, 50.0, 30.0, 36.0, 23.0, 23.0, 9.0, 1.0, 4.0, 23.0, 23.0, 45.0, 40.0, 36.0, 32.0, 19.0, 19.0, 3.0, 44.0, 58.0, 23.0, 42.0, 23.0, 24.0, 28.0, 23.0, 34.0, 45.5, 18.0, 2.0, 32.0, 26.0, 16.0, 40.0, 24.0, 35.0, 22.0, 30.0, 23.0, 31.0, 27.0, 42.0, 32.0, 30.0, 16.0, 27.0, 51.0, 23.0, 38.0, 22.0, 19.0, 20.5, 18.0, 23.0, 35.0, 29.0, 59.0, 5.0, 24.0, 23.0, 44.0, 8.0, 19.0, 33.0, 23.0, 23.0, 29.0, 22.0, 30.0, 44.0, 25.0, 24.0, 37.0, 54.0, 23.0, 29.0, 62.0, 30.0, 41.0, 29.0, 23.0, 30.0, 35.0, 50.0, 23.0, 3.0, 52.0, 40.0, 23.0, 36.0, 16.0, 25.0, 58.0, 35.0, 23.0, 25.0, 41.0, 37.0, 23.0, 63.0, 45.0, 23.0, 7.0, 35.0, 65.0, 28.0, 16.0, 19.0, 23.0, 33.0, 30.0, 22.0, 42.0, 22.0, 26.0, 19.0, 36.0, 24.0, 24.0, 23.0, 23.5, 2.0, 23.0, 50.0, 23.0, 23.0, 19.0, 23.0, 23.0, 0.92000000000000004, 23.0, 17.0, 30.0, 30.0, 24.0, 18.0, 26.0, 28.0, 43.0, 26.0, 24.0, 54.0, 31.0, 40.0, 22.0, 27.0, 30.0, 22.0, 23.0, 36.0, 61.0, 36.0, 31.0, 16.0, 23.0, 45.5, 38.0, 16.0, 23.0, 23.0, 29.0, 41.0, 45.0, 45.0, 2.0, 24.0, 28.0, 25.0, 36.0, 24.0, 40.0, 23.0, 3.0, 42.0, 23.0, 23.0, 15.0, 25.0, 23.0, 28.0, 22.0, 38.0, 23.0, 23.0, 40.0, 29.0, 45.0, 35.0, 23.0, 30.0, 60.0, 23.0, 23.0, 24.0, 25.0, 18.0, 19.0, 22.0, 3.0, 23.0, 22.0, 27.0, 20.0, 19.0, 42.0, 1.0, 32.0, 35.0, 23.0, 18.0, 1.0, 36.0, 23.0, 17.0, 36.0, 21.0, 28.0, 23.0, 24.0, 22.0, 31.0, 46.0, 23.0, 28.0, 39.0, 26.0, 21.0, 28.0, 20.0, 34.0, 51.0, 3.0, 21.0, 23.0, 23.0, 23.0, 33.0, 23.0, 44.0, 23.0, 34.0, 18.0, 30.0, 10.0, 23.0, 21.0, 29.0, 28.0, 18.0, 23.0, 28.0, 19.0, 23.0, 32.0, 28.0, 23.0, 42.0, 17.0, 50.0, 14.0, 21.0, 24.0, 64.0, 31.0, 45.0, 20.0, 25.0, 28.0, 23.0, 4.0, 13.0, 34.0, 5.0, 52.0, 36.0, 23.0, 30.0, 49.0, 23.0, 29.0, 65.0, 23.0, 50.0, 23.0, 48.0, 34.0, 47.0, 48.0, 23.0, 38.0, 23.0, 56.0, 23.0, 0.75, 23.0, 38.0, 33.0, 23.0, 22.0, 23.0, 34.0, 29.0, 22.0, 2.0, 9.0, 23.0, 50.0, 63.0, 25.0, 23.0, 35.0, 58.0, 30.0, 9.0, 23.0, 21.0, 55.0, 71.0, 21.0, 23.0, 54.0, 23.0, 25.0, 24.0, 17.0, 21.0, 23.0, 37.0, 16.0, 18.0, 33.0, 23.0, 28.0, 26.0, 29.0, 23.0, 36.0, 54.0, 24.0, 47.0, 34.0, 23.0, 36.0, 32.0, 30.0, 22.0, 23.0, 44.0, 23.0, 40.5, 50.0, 23.0, 39.0, 23.0, 2.0, 23.0, 17.0, 23.0, 30.0, 7.0, 45.0, 30.0, 23.0, 22.0, 36.0, 9.0, 11.0, 32.0, 50.0, 64.0, 19.0, 23.0, 33.0, 8.0, 17.0, 27.0, 23.0, 22.0, 22.0, 62.0, 48.0, 23.0, 39.0, 36.0, 23.0, 40.0, 28.0, 23.0, 23.0, 24.0, 19.0, 29.0, 23.0, 32.0, 62.0, 53.0, 36.0, 23.0, 16.0, 19.0, 34.0, 39.0, 23.0, 32.0, 25.0, 39.0, 54.0, 36.0, 23.0, 18.0, 47.0, 60.0, 22.0, 23.0, 35.0, 52.0, 47.0, 23.0, 37.0, 36.0, 23.0, 49.0, 23.0, 49.0, 24.0, 23.0, 23.0, 44.0, 35.0, 36.0, 30.0, 27.0, 22.0, 40.0, 39.0, 23.0, 23.0, 23.0, 35.0, 24.0, 34.0, 26.0, 4.0, 26.0, 27.0, 42.0, 20.0, 21.0, 21.0, 61.0, 57.0, 21.0, 26.0, 23.0, 80.0, 51.0, 32.0, 23.0, 9.0, 28.0, 32.0, 31.0, 41.0, 23.0, 20.0, 24.0, 2.0, 23.0, 0.75, 48.0, 19.0, 56.0, 23.0, 23.0, 23.0, 18.0, 21.0, 23.0, 18.0, 24.0, 23.0, 32.0, 23.0, 58.0, 50.0, 40.0, 47.0, 36.0, 20.0, 32.0, 25.0, 23.0, 43.0, 23.0, 40.0, 31.0, 70.0, 31.0, 23.0, 18.0, 24.5, 18.0, 43.0, 36.0, 23.0, 27.0, 20.0, 14.0, 60.0, 25.0, 14.0, 19.0, 18.0, 15.0, 31.0, 4.0, 23.0, 25.0, 60.0, 52.0, 44.0, 23.0, 49.0, 42.0, 18.0, 35.0, 18.0, 25.0, 26.0, 39.0, 45.0, 42.0, 22.0, 23.0, 24.0, 23.0, 48.0, 29.0, 52.0, 19.0, 38.0, 27.0, 23.0, 33.0, 6.0, 17.0, 34.0, 50.0, 27.0, 20.0, 30.0, 23.0, 25.0, 25.0, 29.0, 11.0, 23.0, 23.0, 23.0, 28.5, 48.0, 35.0, 23.0, 23.0, 23.0, 36.0, 21.0, 24.0, 31.0, 70.0, 16.0, 30.0, 19.0, 31.0, 4.0, 6.0, 33.0, 23.0, 48.0, 0.67000000000000004, 28.0, 18.0, 34.0, 33.0, 23.0, 41.0, 20.0, 36.0, 16.0, 51.0, 23.0, 30.5, 23.0, 32.0, 24.0, 48.0, 57.0, 23.0, 54.0, 18.0, 23.0, 5.0, 23.0, 43.0, 13.0, 17.0, 29.0, 23.0, 25.0, 25.0, 18.0, 8.0, 1.0, 46.0, 23.0, 16.0, 23.0, 23.0, 25.0, 39.0, 49.0, 31.0, 30.0, 30.0, 34.0, 31.0, 11.0, 0.41999999999999998, 27.0, 31.0, 39.0, 18.0, 39.0, 33.0, 26.0, 39.0, 35.0, 6.0, 30.5, 23.0, 23.0, 31.0, 43.0, 10.0, 52.0, 27.0, 38.0, 27.0, 2.0, 23.0, 23.0, 1.0, 23.0, 62.0, 15.0, 0.82999999999999996, 23.0, 23.0, 18.0, 39.0, 21.0, 23.0, 32.0, 23.0, 20.0, 16.0, 30.0, 34.5, 17.0, 42.0, 23.0, 35.0, 28.0, 23.0, 4.0, 74.0, 9.0, 16.0, 44.0, 18.0, 45.0, 51.0, 24.0, 23.0, 41.0, 21.0, 48.0, 23.0, 24.0, 42.0, 27.0, 31.0, 23.0, 4.0, 26.0, 47.0, 33.0, 47.0, 28.0, 15.0, 20.0, 19.0, 23.0, 56.0, 25.0, 33.0, 22.0, 28.0, 25.0, 39.0, 27.0, 19.0, 23.0, 26.0, 32.0]
name = [&#39;Braund, Mr. Owen Harris&#39;, &#39;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&#39;, &#39;Heikkinen, Miss. Laina&#39;, &#39;Futrelle, Mrs. Jacques Heath (Lily May Peel)&#39;, &#39;Allen, Mr. William Henry&#39;, &#39;Moran, Mr. James&#39;, &#39;McCarthy, Mr. Timothy J&#39;, &#39;Palsson, Master. Gosta Leonard&#39;, &#39;Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)&#39;, &#39;Nasser, Mrs. Nicholas (Adele Achem)&#39;, &#39;Sandstrom, Miss. Marguerite Rut&#39;, &#39;Bonnell, Miss. Elizabeth&#39;, &#39;Saundercock, Mr. William Henry&#39;, &#39;Andersson, Mr. Anders Johan&#39;, &#39;Vestrom, Miss. Hulda Amanda Adolfina&#39;, &#39;Hewlett, Mrs. (Mary D Kingcome) &#39;, &#39;Rice, Master. Eugene&#39;, &#39;Williams, Mr. Charles Eugene&#39;, &#39;Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)&#39;, &#39;Masselmani, Mrs. Fatima&#39;, &#39;Fynney, Mr. Joseph J&#39;, &#39;Beesley, Mr. Lawrence&#39;, &#39;McGowan, Miss. Anna &amp;quot;Annie&amp;quot;&#39;, &#39;Sloper, Mr. William Thompson&#39;, &#39;Palsson, Miss. Torborg Danira&#39;, &#39;Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)&#39;, &#39;Emir, Mr. Farred Chehab&#39;, &#39;Fortune, Mr. Charles Alexander&#39;, &#39;O\&#39;Dwyer, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;, &#39;Todoroff, Mr. Lalio&#39;, &#39;Uruchurtu, Don. Manuel E&#39;, &#39;Spencer, Mrs. William Augustus (Marie Eugenie)&#39;, &#39;Glynn, Miss. Mary Agatha&#39;, &#39;Wheadon, Mr. Edward H&#39;, &#39;Meyer, Mr. Edgar Joseph&#39;, &#39;Holverson, Mr. Alexander Oskar&#39;, &#39;Mamee, Mr. Hanna&#39;, &#39;Cann, Mr. Ernest Charles&#39;, &#39;Vander Planke, Miss. Augusta Maria&#39;, &#39;Nicola-Yarred, Miss. Jamila&#39;, &#39;Ahlin, Mrs. Johan (Johanna Persdotter Larsson)&#39;, &#39;Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott)&#39;, &#39;Kraeff, Mr. Theodor&#39;, &#39;Laroche, Miss. Simonne Marie Anne Andree&#39;, &#39;Devaney, Miss. Margaret Delia&#39;, &#39;Rogers, Mr. William John&#39;, &#39;Lennon, Mr. Denis&#39;, &amp;quot;O&#39;Driscoll, Miss. Bridget&amp;quot;, &#39;Samaan, Mr. Youssef&#39;, &#39;Arnold-Franchi, Mrs. Josef (Josefine Franchi)&#39;, &#39;Panula, Master. Juha Niilo&#39;, &#39;Nosworthy, Mr. Richard Cater&#39;, &#39;Harper, Mrs. Henry Sleeper (Myna Haxtun)&#39;, &#39;Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson)&#39;, &#39;Ostby, Mr. Engelhart Cornelius&#39;, &#39;Woolner, Mr. Hugh&#39;, &#39;Rugg, Miss. Emily&#39;, &#39;Novel, Mr. Mansouer&#39;, &#39;West, Miss. Constance Mirium&#39;, &#39;Goodwin, Master. William Frederick&#39;, &#39;Sirayanian, Mr. Orsen&#39;, &#39;Icard, Miss. Amelie&#39;, &#39;Harris, Mr. Henry Birkhardt&#39;, &#39;Skoog, Master. Harald&#39;, &#39;Stewart, Mr. Albert A&#39;, &#39;Moubarek, Master. Gerios&#39;, &#39;Nye, Mrs. (Elizabeth Ramell)&#39;, &#39;Crease, Mr. Ernest James&#39;, &#39;Andersson, Miss. Erna Alexandra&#39;, &#39;Kink, Mr. Vincenz&#39;, &#39;Jenkin, Mr. Stephen Curnow&#39;, &#39;Goodwin, Miss. Lillian Amy&#39;, &#39;Hood, Mr. Ambrose Jr&#39;, &#39;Chronopoulos, Mr. Apostolos&#39;, &#39;Bing, Mr. Lee&#39;, &#39;Moen, Mr. Sigurd Hansen&#39;, &#39;Staneff, Mr. Ivan&#39;, &#39;Moutal, Mr. Rahamin Haim&#39;, &#39;Caldwell, Master. Alden Gates&#39;, &#39;Dowdell, Miss. Elizabeth&#39;, &#39;Waelens, Mr. Achille&#39;, &#39;Sheerlinck, Mr. Jan Baptist&#39;, &#39;McDermott, Miss. Brigdet Delia&#39;, &#39;Carrau, Mr. Francisco M&#39;, &#39;Ilett, Miss. Bertha&#39;, &#39;Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson)&#39;, &#39;Ford, Mr. William Neal&#39;, &#39;Slocovski, Mr. Selman Francis&#39;, &#39;Fortune, Miss. Mabel Helen&#39;, &#39;Celotti, Mr. Francesco&#39;, &#39;Christmann, Mr. Emil&#39;, &#39;Andreasson, Mr. Paul Edvin&#39;, &#39;Chaffee, Mr. Herbert Fuller&#39;, &#39;Dean, Mr. Bertram Frank&#39;, &#39;Coxon, Mr. Daniel&#39;, &#39;Shorney, Mr. Charles Joseph&#39;, &#39;Goldschmidt, Mr. George B&#39;, &#39;Greenfield, Mr. William Bertram&#39;, &#39;Doling, Mrs. John T (Ada Julia Bone)&#39;, &#39;Kantor, Mr. Sinai&#39;, &#39;Petranec, Miss. Matilda&#39;, &#39;Petroff, Mr. Pastcho (&amp;quot;Pentcho&amp;quot;)&#39;, &#39;White, Mr. Richard Frasar&#39;, &#39;Johansson, Mr. Gustaf Joel&#39;, &#39;Gustafsson, Mr. Anders Vilhelm&#39;, &#39;Mionoff, Mr. Stoytcho&#39;, &#39;Salkjelsvik, Miss. Anna Kristine&#39;, &#39;Moss, Mr. Albert Johan&#39;, &#39;Rekic, Mr. Tido&#39;, &#39;Moran, Miss. Bertha&#39;, &#39;Porter, Mr. Walter Chamberlain&#39;, &#39;Zabour, Miss. Hileni&#39;, &#39;Barton, Mr. David John&#39;, &#39;Jussila, Miss. Katriina&#39;, &#39;Attalah, Miss. Malake&#39;, &#39;Pekoniemi, Mr. Edvard&#39;, &#39;Connors, Mr. Patrick&#39;, &#39;Turpin, Mr. William John Robert&#39;, &#39;Baxter, Mr. Quigg Edmond&#39;, &#39;Andersson, Miss. Ellis Anna Maria&#39;, &#39;Hickman, Mr. Stanley George&#39;, &#39;Moore, Mr. Leonard Charles&#39;, &#39;Nasser, Mr. Nicholas&#39;, &#39;Webber, Miss. Susan&#39;, &#39;White, Mr. Percival Wayland&#39;, &#39;Nicola-Yarred, Master. Elias&#39;, &#39;McMahon, Mr. Martin&#39;, &#39;Madsen, Mr. Fridtjof Arne&#39;, &#39;Peter, Miss. Anna&#39;, &#39;Ekstrom, Mr. Johan&#39;, &#39;Drazenoic, Mr. Jozef&#39;, &#39;Coelho, Mr. Domingos Fernandeo&#39;, &#39;Robins, Mrs. Alexander A (Grace Charity Laury)&#39;, &#39;Weisz, Mrs. Leopold (Mathilde Francoise Pede)&#39;, &#39;Sobey, Mr. Samuel James Hayden&#39;, &#39;Richard, Mr. Emile&#39;, &#39;Newsom, Miss. Helen Monypeny&#39;, &#39;Futrelle, Mr. Jacques Heath&#39;, &#39;Osen, Mr. Olaf Elon&#39;, &#39;Giglio, Mr. Victor&#39;, &#39;Boulos, Mrs. Joseph (Sultana)&#39;, &#39;Nysten, Miss. Anna Sofia&#39;, &#39;Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck)&#39;, &#39;Burke, Mr. Jeremiah&#39;, &#39;Andrew, Mr. Edgardo Samuel&#39;, &#39;Nicholls, Mr. Joseph Charles&#39;, &#39;Andersson, Mr. August Edvard (&amp;quot;Wennerstrom&amp;quot;)&#39;, &#39;Ford, Miss. Robina Maggie &amp;quot;Ruby&amp;quot;&#39;, &#39;Navratil, Mr. Michel (&amp;quot;Louis M Hoffman&amp;quot;)&#39;, &#39;Byles, Rev. Thomas Roussel Davids&#39;, &#39;Bateman, Rev. Robert James&#39;, &#39;Pears, Mrs. Thomas (Edith Wearne)&#39;, &#39;Meo, Mr. Alfonzo&#39;, &#39;van Billiard, Mr. Austin Blyler&#39;, &#39;Olsen, Mr. Ole Martin&#39;, &#39;Williams, Mr. Charles Duane&#39;, &#39;Gilnagh, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;, &#39;Corn, Mr. Harry&#39;, &#39;Smiljanic, Mr. Mile&#39;, &#39;Sage, Master. Thomas Henry&#39;, &#39;Cribb, Mr. John Hatfield&#39;, &#39;Watt, Mrs. James (Elizabeth &amp;quot;Bessie&amp;quot; Inglis Milne)&#39;, &#39;Bengtsson, Mr. John Viktor&#39;, &#39;Calic, Mr. Jovo&#39;, &#39;Panula, Master. Eino Viljami&#39;, &#39;Goldsmith, Master. Frank John William &amp;quot;Frankie&amp;quot;&#39;, &#39;Chibnall, Mrs. (Edith Martha Bowerman)&#39;, &#39;Skoog, Mrs. William (Anna Bernhardina Karlsson)&#39;, &#39;Baumann, Mr. John D&#39;, &#39;Ling, Mr. Lee&#39;, &#39;Van der hoef, Mr. Wyckoff&#39;, &#39;Rice, Master. Arthur&#39;, &#39;Johnson, Miss. Eleanor Ileen&#39;, &#39;Sivola, Mr. Antti Wilhelm&#39;, &#39;Smith, Mr. James Clinch&#39;, &#39;Klasen, Mr. Klas Albin&#39;, &#39;Lefebre, Master. Henry Forbes&#39;, &#39;Isham, Miss. Ann Elizabeth&#39;, &#39;Hale, Mr. Reginald&#39;, &#39;Leonard, Mr. Lionel&#39;, &#39;Sage, Miss. Constance Gladys&#39;, &#39;Pernot, Mr. Rene&#39;, &#39;Asplund, Master. Clarence Gustaf Hugo&#39;, &#39;Becker, Master. Richard F&#39;, &#39;Kink-Heilmann, Miss. Luise Gretchen&#39;, &#39;Rood, Mr. Hugh Roscoe&#39;, &#39;O\&#39;Brien, Mrs. Thomas (Johanna &amp;quot;Hannah&amp;quot; Godfrey)&#39;, &#39;Romaine, Mr. Charles Hallace (&amp;quot;Mr C Rolmane&amp;quot;)&#39;, &#39;Bourke, Mr. John&#39;, &#39;Turcin, Mr. Stjepan&#39;, &#39;Pinsky, Mrs. (Rosa)&#39;, &#39;Carbines, Mr. William&#39;, &#39;Andersen-Jensen, Miss. Carla Christine Nielsine&#39;, &#39;Navratil, Master. Michel M&#39;, &#39;Brown, Mrs. James Joseph (Margaret Tobin)&#39;, &#39;Lurette, Miss. Elise&#39;, &#39;Mernagh, Mr. Robert&#39;, &#39;Olsen, Mr. Karl Siegwart Andreas&#39;, &#39;Madigan, Miss. Margaret &amp;quot;Maggie&amp;quot;&#39;, &#39;Yrois, Miss. Henriette (&amp;quot;Mrs Harbeck&amp;quot;)&#39;, &#39;Vande Walle, Mr. Nestor Cyriel&#39;, &#39;Sage, Mr. Frederick&#39;, &#39;Johanson, Mr. Jakob Alfred&#39;, &#39;Youseff, Mr. Gerious&#39;, &#39;Cohen, Mr. Gurshon &amp;quot;Gus&amp;quot;&#39;, &#39;Strom, Miss. Telma Matilda&#39;, &#39;Backstrom, Mr. Karl Alfred&#39;, &#39;Albimona, Mr. Nassef Cassem&#39;, &#39;Carr, Miss. Helen &amp;quot;Ellen&amp;quot;&#39;, &#39;Blank, Mr. Henry&#39;, &#39;Ali, Mr. Ahmed&#39;, &#39;Cameron, Miss. Clear Annie&#39;, &#39;Perkin, Mr. John Henry&#39;, &#39;Givard, Mr. Hans Kristensen&#39;, &#39;Kiernan, Mr. Philip&#39;, &#39;Newell, Miss. Madeleine&#39;, &#39;Honkanen, Miss. Eliina&#39;, &#39;Jacobsohn, Mr. Sidney Samuel&#39;, &#39;Bazzani, Miss. Albina&#39;, &#39;Harris, Mr. Walter&#39;, &#39;Sunderland, Mr. Victor Francis&#39;, &#39;Bracken, Mr. James H&#39;, &#39;Green, Mr. George Henry&#39;, &#39;Nenkoff, Mr. Christo&#39;, &#39;Hoyt, Mr. Frederick Maxfield&#39;, &#39;Berglund, Mr. Karl Ivar Sven&#39;, &#39;Mellors, Mr. William John&#39;, &#39;Lovell, Mr. John Hall (&amp;quot;Henry&amp;quot;)&#39;, &#39;Fahlstrom, Mr. Arne Jonas&#39;, &#39;Lefebre, Miss. Mathilde&#39;, &#39;Harris, Mrs. Henry Birkhardt (Irene Wallach)&#39;, &#39;Larsson, Mr. Bengt Edvin&#39;, &#39;Sjostedt, Mr. Ernst Adolf&#39;, &#39;Asplund, Miss. Lillian Gertrud&#39;, &#39;Leyson, Mr. Robert William Norman&#39;, &#39;Harknett, Miss. Alice Phoebe&#39;, &#39;Hold, Mr. Stephen&#39;, &#39;Collyer, Miss. Marjorie &amp;quot;Lottie&amp;quot;&#39;, &#39;Pengelly, Mr. Frederick William&#39;, &#39;Hunt, Mr. George Henry&#39;, &#39;Zabour, Miss. Thamine&#39;, &#39;Murphy, Miss. Katherine &amp;quot;Kate&amp;quot;&#39;, &#39;Coleridge, Mr. Reginald Charles&#39;, &#39;Maenpaa, Mr. Matti Alexanteri&#39;, &#39;Attalah, Mr. Sleiman&#39;, &#39;Minahan, Dr. William Edward&#39;, &#39;Lindahl, Miss. Agda Thorilda Viktoria&#39;, &#39;Hamalainen, Mrs. William (Anna)&#39;, &#39;Beckwith, Mr. Richard Leonard&#39;, &#39;Carter, Rev. Ernest Courtenay&#39;, &#39;Reed, Mr. James George&#39;, &#39;Strom, Mrs. Wilhelm (Elna Matilda Persson)&#39;, &#39;Stead, Mr. William Thomas&#39;, &#39;Lobb, Mr. William Arthur&#39;, &#39;Rosblom, Mrs. Viktor (Helena Wilhelmina)&#39;, &#39;Touma, Mrs. Darwis (Hanne Youssef Razi)&#39;, &#39;Thorne, Mrs. Gertrude Maybelle&#39;, &#39;Cherry, Miss. Gladys&#39;, &#39;Ward, Miss. Anna&#39;, &#39;Parrish, Mrs. (Lutie Davis)&#39;, &#39;Smith, Mr. Thomas&#39;, &#39;Asplund, Master. Edvin Rojj Felix&#39;, &#39;Taussig, Mr. Emil&#39;, &#39;Harrison, Mr. William&#39;, &#39;Henry, Miss. Delia&#39;, &#39;Reeves, Mr. David&#39;, &#39;Panula, Mr. Ernesti Arvid&#39;, &#39;Persson, Mr. Ernst Ulrik&#39;, &#39;Graham, Mrs. William Thompson (Edith Junkins)&#39;, &#39;Bissette, Miss. Amelia&#39;, &#39;Cairns, Mr. Alexander&#39;, &#39;Tornquist, Mr. William Henry&#39;, &#39;Mellinger, Mrs. (Elizabeth Anne Maidment)&#39;, &#39;Natsch, Mr. Charles H&#39;, &#39;Healy, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;, &#39;Andrews, Miss. Kornelia Theodosia&#39;, &#39;Lindblom, Miss. Augusta Charlotta&#39;, &#39;Parkes, Mr. Francis &amp;quot;Frank&amp;quot;&#39;, &#39;Rice, Master. Eric&#39;, &#39;Abbott, Mrs. Stanton (Rosa Hunt)&#39;, &#39;Duane, Mr. Frank&#39;, &#39;Olsson, Mr. Nils Johan Goransson&#39;, &#39;de Pelsmaeker, Mr. Alfons&#39;, &#39;Dorking, Mr. Edward Arthur&#39;, &#39;Smith, Mr. Richard William&#39;, &#39;Stankovic, Mr. Ivan&#39;, &#39;de Mulder, Mr. Theodore&#39;, &#39;Naidenoff, Mr. Penko&#39;, &#39;Hosono, Mr. Masabumi&#39;, &#39;Connolly, Miss. Kate&#39;, &#39;Barber, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;, &#39;Bishop, Mrs. Dickinson H (Helen Walton)&#39;, &#39;Levy, Mr. Rene Jacques&#39;, &#39;Haas, Miss. Aloisia&#39;, &#39;Mineff, Mr. Ivan&#39;, &#39;Lewy, Mr. Ervin G&#39;, &#39;Hanna, Mr. Mansour&#39;, &#39;Allison, Miss. Helen Loraine&#39;, &#39;Saalfeld, Mr. Adolphe&#39;, &#39;Baxter, Mrs. James (Helene DeLaudeniere Chaput)&#39;, &#39;Kelly, Miss. Anna Katherine &amp;quot;Annie Kate&amp;quot;&#39;, &#39;McCoy, Mr. Bernard&#39;, &#39;Johnson, Mr. William Cahoone Jr&#39;, &#39;Keane, Miss. Nora A&#39;, &#39;Williams, Mr. Howard Hugh &amp;quot;Harry&amp;quot;&#39;, &#39;Allison, Master. Hudson Trevor&#39;, &#39;Fleming, Miss. Margaret&#39;, &#39;Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo)&#39;, &#39;Abelson, Mr. Samuel&#39;, &#39;Francatelli, Miss. Laura Mabel&#39;, &#39;Hays, Miss. Margaret Bechstein&#39;, &#39;Ryerson, Miss. Emily Borie&#39;, &#39;Lahtinen, Mrs. William (Anna Sylfven)&#39;, &#39;Hendekovic, Mr. Ignjac&#39;, &#39;Hart, Mr. Benjamin&#39;, &#39;Nilsson, Miss. Helmina Josefina&#39;, &#39;Kantor, Mrs. Sinai (Miriam Sternin)&#39;, &#39;Moraweck, Dr. Ernest&#39;, &#39;Wick, Miss. Mary Natalie&#39;, &#39;Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone)&#39;, &#39;Dennis, Mr. Samuel&#39;, &#39;Danoff, Mr. Yoto&#39;, &#39;Slayter, Miss. Hilda Mary&#39;, &#39;Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh)&#39;, &#39;Sage, Mr. George John Jr&#39;, &#39;Young, Miss. Marie Grice&#39;, &#39;Nysveen, Mr. Johan Hansen&#39;, &#39;Ball, Mrs. (Ada E Hall)&#39;, &#39;Goldsmith, Mrs. Frank John (Emily Alice Brown)&#39;, &#39;Hippach, Miss. Jean Gertrude&#39;, &#39;McCoy, Miss. Agnes&#39;, &#39;Partner, Mr. Austen&#39;, &#39;Graham, Mr. George Edward&#39;, &#39;Vander Planke, Mr. Leo Edmondus&#39;, &#39;Frauenthal, Mrs. Henry William (Clara Heinsheimer)&#39;, &#39;Denkoff, Mr. Mitto&#39;, &#39;Pears, Mr. Thomas Clinton&#39;, &#39;Burns, Miss. Elizabeth Margaret&#39;, &#39;Dahl, Mr. Karl Edwart&#39;, &#39;Blackwell, Mr. Stephen Weart&#39;, &#39;Navratil, Master. Edmond Roger&#39;, &#39;Fortune, Miss. Alice Elizabeth&#39;, &#39;Collander, Mr. Erik Gustaf&#39;, &#39;Sedgwick, Mr. Charles Frederick Waddington&#39;, &#39;Fox, Mr. Stanley Hubert&#39;, &#39;Brown, Miss. Amelia &amp;quot;Mildred&amp;quot;&#39;, &#39;Smith, Miss. Marion Elsie&#39;, &#39;Davison, Mrs. Thomas Henry (Mary E Finck)&#39;, &#39;Coutts, Master. William Loch &amp;quot;William&amp;quot;&#39;, &#39;Dimic, Mr. Jovan&#39;, &#39;Odahl, Mr. Nils Martin&#39;, &#39;Williams-Lambert, Mr. Fletcher Fellows&#39;, &#39;Elias, Mr. Tannous&#39;, &#39;Arnold-Franchi, Mr. Josef&#39;, &#39;Yousif, Mr. Wazli&#39;, &#39;Vanden Steen, Mr. Leo Peter&#39;, &#39;Bowerman, Miss. Elsie Edith&#39;, &#39;Funk, Miss. Annie Clemmer&#39;, &#39;McGovern, Miss. Mary&#39;, &#39;Mockler, Miss. Helen Mary &amp;quot;Ellie&amp;quot;&#39;, &#39;Skoog, Mr. Wilhelm&#39;, &#39;del Carlo, Mr. Sebastiano&#39;, &#39;Barbara, Mrs. (Catherine David)&#39;, &#39;Asim, Mr. Adola&#39;, &amp;quot;O&#39;Brien, Mr. Thomas&amp;quot;, &#39;Adahl, Mr. Mauritz Nils Martin&#39;, &#39;Warren, Mrs. Frank Manley (Anna Sophia Atkinson)&#39;, &#39;Moussa, Mrs. (Mantoura Boulos)&#39;, &#39;Jermyn, Miss. Annie&#39;, &#39;Aubart, Mme. Leontine Pauline&#39;, &#39;Harder, Mr. George Achilles&#39;, &#39;Wiklund, Mr. Jakob Alfred&#39;, &#39;Beavan, Mr. William Thomas&#39;, &#39;Ringhini, Mr. Sante&#39;, &#39;Palsson, Miss. Stina Viola&#39;, &#39;Meyer, Mrs. Edgar Joseph (Leila Saks)&#39;, &#39;Landergren, Miss. Aurora Adelia&#39;, &#39;Widener, Mr. Harry Elkins&#39;, &#39;Betros, Mr. Tannous&#39;, &#39;Gustafsson, Mr. Karl Gideon&#39;, &#39;Bidois, Miss. Rosalie&#39;, &#39;Nakid, Miss. Maria (&amp;quot;Mary&amp;quot;)&#39;, &#39;Tikkanen, Mr. Juho&#39;, &#39;Holverson, Mrs. Alexander Oskar (Mary Aline Towner)&#39;, &#39;Plotcharsky, Mr. Vasil&#39;, &#39;Davies, Mr. Charles Henry&#39;, &#39;Goodwin, Master. Sidney Leonard&#39;, &#39;Buss, Miss. Kate&#39;, &#39;Sadlier, Mr. Matthew&#39;, &#39;Lehmann, Miss. Bertha&#39;, &#39;Carter, Mr. William Ernest&#39;, &#39;Jansson, Mr. Carl Olof&#39;, &#39;Gustafsson, Mr. Johan Birger&#39;, &#39;Newell, Miss. Marjorie&#39;, &#39;Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson)&#39;, &#39;Johansson, Mr. Erik&#39;, &#39;Olsson, Miss. Elina&#39;, &#39;McKane, Mr. Peter David&#39;, &#39;Pain, Dr. Alfred&#39;, &#39;Trout, Mrs. William H (Jessie L)&#39;, &#39;Niskanen, Mr. Juha&#39;, &#39;Adams, Mr. John&#39;, &#39;Jussila, Miss. Mari Aina&#39;, &#39;Hakkarainen, Mr. Pekka Pietari&#39;, &#39;Oreskovic, Miss. Marija&#39;, &#39;Gale, Mr. Shadrach&#39;, &#39;Widegren, Mr. Carl/Charles Peter&#39;, &#39;Richards, Master. William Rowe&#39;, &#39;Birkeland, Mr. Hans Martin Monsen&#39;, &#39;Lefebre, Miss. Ida&#39;, &#39;Sdycoff, Mr. Todor&#39;, &#39;Hart, Mr. Henry&#39;, &#39;Minahan, Miss. Daisy E&#39;, &#39;Cunningham, Mr. Alfred Fleming&#39;, &#39;Sundman, Mr. Johan Julian&#39;, &#39;Meek, Mrs. Thomas (Annie Louise Rowley)&#39;, &#39;Drew, Mrs. James Vivian (Lulu Thorne Christian)&#39;, &#39;Silven, Miss. Lyyli Karoliina&#39;, &#39;Matthews, Mr. William John&#39;, &#39;Van Impe, Miss. Catharina&#39;, &#39;Gheorgheff, Mr. Stanio&#39;, &#39;Charters, Mr. David&#39;, &#39;Zimmerman, Mr. Leo&#39;, &#39;Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren)&#39;, &#39;Rosblom, Mr. Viktor Richard&#39;, &#39;Wiseman, Mr. Phillippe&#39;, &#39;Clarke, Mrs. Charles V (Ada Maria Winfield)&#39;, &#39;Phillips, Miss. Kate Florence (&amp;quot;Mrs Kate Louise Phillips Marshall&amp;quot;)&#39;, &#39;Flynn, Mr. James&#39;, &#39;Pickard, Mr. Berk (Berk Trembisky)&#39;, &#39;Bjornstrom-Steffansson, Mr. Mauritz Hakan&#39;, &#39;Thorneycroft, Mrs. Percival (Florence Kate White)&#39;, &#39;Louch, Mrs. Charles Alexander (Alice Adelaide Slow)&#39;, &#39;Kallio, Mr. Nikolai Erland&#39;, &#39;Silvey, Mr. William Baird&#39;, &#39;Carter, Miss. Lucile Polk&#39;, &#39;Ford, Miss. Doolina Margaret &amp;quot;Daisy&amp;quot;&#39;, &#39;Richards, Mrs. Sidney (Emily Hocking)&#39;, &#39;Fortune, Mr. Mark&#39;, &#39;Kvillner, Mr. Johan Henrik Johannesson&#39;, &#39;Hart, Mrs. Benjamin (Esther Ada Bloomfield)&#39;, &#39;Hampe, Mr. Leon&#39;, &#39;Petterson, Mr. Johan Emil&#39;, &#39;Reynaldo, Ms. Encarnacion&#39;, &#39;Johannesen-Bratthammer, Mr. Bernt&#39;, &#39;Dodge, Master. Washington&#39;, &#39;Mellinger, Miss. Madeleine Violet&#39;, &#39;Seward, Mr. Frederic Kimber&#39;, &#39;Baclini, Miss. Marie Catherine&#39;, &#39;Peuchen, Major. Arthur Godfrey&#39;, &#39;West, Mr. Edwy Arthur&#39;, &#39;Hagland, Mr. Ingvald Olai Olsen&#39;, &#39;Foreman, Mr. Benjamin Laventall&#39;, &#39;Goldenberg, Mr. Samuel L&#39;, &#39;Peduzzi, Mr. Joseph&#39;, &#39;Jalsevac, Mr. Ivan&#39;, &#39;Millet, Mr. Francis Davis&#39;, &#39;Kenyon, Mrs. Frederick R (Marion)&#39;, &#39;Toomey, Miss. Ellen&#39;, &amp;quot;O&#39;Connor, Mr. Maurice&amp;quot;, &#39;Anderson, Mr. Harry&#39;, &#39;Morley, Mr. William&#39;, &#39;Gee, Mr. Arthur H&#39;, &#39;Milling, Mr. Jacob Christian&#39;, &#39;Maisner, Mr. Simon&#39;, &#39;Goncalves, Mr. Manuel Estanslas&#39;, &#39;Campbell, Mr. William&#39;, &#39;Smart, Mr. John Montgomery&#39;, &#39;Scanlan, Mr. James&#39;, &#39;Baclini, Miss. Helene Barbara&#39;, &#39;Keefe, Mr. Arthur&#39;, &#39;Cacic, Mr. Luka&#39;, &#39;West, Mrs. Edwy Arthur (Ada Mary Worth)&#39;, &#39;Jerwan, Mrs. Amin S (Marie Marthe Thuillard)&#39;, &#39;Strandberg, Miss. Ida Sofia&#39;, &#39;Clifford, Mr. George Quincy&#39;, &#39;Renouf, Mr. Peter Henry&#39;, &#39;Braund, Mr. Lewis Richard&#39;, &#39;Karlsson, Mr. Nils August&#39;, &#39;Hirvonen, Miss. Hildur E&#39;, &#39;Goodwin, Master. Harold Victor&#39;, &#39;Frost, Mr. Anthony Wood &amp;quot;Archie&amp;quot;&#39;, &#39;Rouse, Mr. Richard Henry&#39;, &#39;Turkula, Mrs. (Hedwig)&#39;, &#39;Bishop, Mr. Dickinson H&#39;, &#39;Lefebre, Miss. Jeannie&#39;, &#39;Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby)&#39;, &#39;Kent, Mr. Edward Austin&#39;, &#39;Somerton, Mr. Francis William&#39;, &#39;Coutts, Master. Eden Leslie &amp;quot;Neville&amp;quot;&#39;, &#39;Hagland, Mr. Konrad Mathias Reiersen&#39;, &#39;Windelov, Mr. Einar&#39;, &#39;Molson, Mr. Harry Markland&#39;, &#39;Artagaveytia, Mr. Ramon&#39;, &#39;Stanley, Mr. Edward Roland&#39;, &#39;Yousseff, Mr. Gerious&#39;, &#39;Eustis, Miss. Elizabeth Mussey&#39;, &#39;Shellard, Mr. Frederick William&#39;, &#39;Allison, Mrs. Hudson J C (Bessie Waldo Daniels)&#39;, &#39;Svensson, Mr. Olof&#39;, &#39;Calic, Mr. Petar&#39;, &#39;Canavan, Miss. Mary&#39;, &amp;quot;O&#39;Sullivan, Miss. Bridget Mary&amp;quot;, &#39;Laitinen, Miss. Kristina Sofia&#39;, &#39;Maioni, Miss. Roberta&#39;, &#39;Penasco y Castellana, Mr. Victor de Satode&#39;, &#39;Quick, Mrs. Frederick Charles (Jane Richards)&#39;, &#39;Bradley, Mr. George (&amp;quot;George Arthur Brayton&amp;quot;)&#39;, &#39;Olsen, Mr. Henry Margido&#39;, &#39;Lang, Mr. Fang&#39;, &#39;Daly, Mr. Eugene Patrick&#39;, &#39;Webber, Mr. James&#39;, &#39;McGough, Mr. James Robert&#39;, &#39;Rothschild, Mrs. Martin (Elizabeth L. Barrett)&#39;, &#39;Coleff, Mr. Satio&#39;, &#39;Walker, Mr. William Anderson&#39;, &#39;Lemore, Mrs. (Amelia Milley)&#39;, &#39;Ryan, Mr. Patrick&#39;, &#39;Angle, Mrs. William A (Florence &amp;quot;Mary&amp;quot; Agnes Hughes)&#39;, &#39;Pavlovic, Mr. Stefo&#39;, &#39;Perreault, Miss. Anne&#39;, &#39;Vovk, Mr. Janko&#39;, &#39;Lahoud, Mr. Sarkis&#39;, &#39;Hippach, Mrs. Louis Albert (Ida Sophia Fischer)&#39;, &#39;Kassem, Mr. Fared&#39;, &#39;Farrell, Mr. James&#39;, &#39;Ridsdale, Miss. Lucy&#39;, &#39;Farthing, Mr. John&#39;, &#39;Salonen, Mr. Johan Werner&#39;, &#39;Hocking, Mr. Richard George&#39;, &#39;Quick, Miss. Phyllis May&#39;, &#39;Toufik, Mr. Nakli&#39;, &#39;Elias, Mr. Joseph Jr&#39;, &#39;Peter, Mrs. Catherine (Catherine Rizk)&#39;, &#39;Cacic, Miss. Marija&#39;, &#39;Hart, Miss. Eva Miriam&#39;, &#39;Butt, Major. Archibald Willingham&#39;, &#39;LeRoy, Miss. Bertha&#39;, &#39;Risien, Mr. Samuel Beard&#39;, &#39;Frolicher, Miss. Hedwig Margaritha&#39;, &#39;Crosby, Miss. Harriet R&#39;, &#39;Andersson, Miss. Ingeborg Constanzia&#39;, &#39;Andersson, Miss. Sigrid Elisabeth&#39;, &#39;Beane, Mr. Edward&#39;, &#39;Douglas, Mr. Walter Donald&#39;, &#39;Nicholson, Mr. Arthur Ernest&#39;, &#39;Beane, Mrs. Edward (Ethel Clarke)&#39;, &#39;Padro y Manent, Mr. Julian&#39;, &#39;Goldsmith, Mr. Frank John&#39;, &#39;Davies, Master. John Morgan Jr&#39;, &#39;Thayer, Mr. John Borland Jr&#39;, &#39;Sharp, Mr. Percival James R&#39;, &amp;quot;O&#39;Brien, Mr. Timothy&amp;quot;, &#39;Leeni, Mr. Fahim (&amp;quot;Philip Zenni&amp;quot;)&#39;, &#39;Ohman, Miss. Velin&#39;, &#39;Wright, Mr. George&#39;, &#39;Duff Gordon, Lady. (Lucille Christiana Sutherland) (&amp;quot;Mrs Morgan&amp;quot;)&#39;, &#39;Robbins, Mr. Victor&#39;, &#39;Taussig, Mrs. Emil (Tillie Mandelbaum)&#39;, &#39;de Messemaeker, Mrs. Guillaume Joseph (Emma)&#39;, &#39;Morrow, Mr. Thomas Rowan&#39;, &#39;Sivic, Mr. Husein&#39;, &#39;Norman, Mr. Robert Douglas&#39;, &#39;Simmons, Mr. John&#39;, &#39;Meanwell, Miss. (Marion Ogden)&#39;, &#39;Davies, Mr. Alfred J&#39;, &#39;Stoytcheff, Mr. Ilia&#39;, &#39;Palsson, Mrs. Nils (Alma Cornelia Berglund)&#39;, &#39;Doharr, Mr. Tannous&#39;, &#39;Jonsson, Mr. Carl&#39;, &#39;Harris, Mr. George&#39;, &#39;Appleton, Mrs. Edward Dale (Charlotte Lamson)&#39;, &#39;Flynn, Mr. John Irwin (&amp;quot;Irving&amp;quot;)&#39;, &#39;Kelly, Miss. Mary&#39;, &#39;Rush, Mr. Alfred George John&#39;, &#39;Patchett, Mr. George&#39;, &#39;Garside, Miss. Ethel&#39;, &#39;Silvey, Mrs. William Baird (Alice Munger)&#39;, &#39;Caram, Mrs. Joseph (Maria Elias)&#39;, &#39;Jussila, Mr. Eiriik&#39;, &#39;Christy, Miss. Julie Rachel&#39;, &#39;Thayer, Mrs. John Borland (Marian Longstreth Morris)&#39;, &#39;Downton, Mr. William James&#39;, &#39;Ross, Mr. John Hugo&#39;, &#39;Paulner, Mr. Uscher&#39;, &#39;Taussig, Miss. Ruth&#39;, &#39;Jarvis, Mr. John Denzil&#39;, &#39;Frolicher-Stehli, Mr. Maxmillian&#39;, &#39;Gilinski, Mr. Eliezer&#39;, &#39;Murdlin, Mr. Joseph&#39;, &#39;Rintamaki, Mr. Matti&#39;, &#39;Stephenson, Mrs. Walter Bertram (Martha Eustis)&#39;, &#39;Elsbury, Mr. William James&#39;, &#39;Bourke, Miss. Mary&#39;, &#39;Chapman, Mr. John Henry&#39;, &#39;Van Impe, Mr. Jean Baptiste&#39;, &#39;Leitch, Miss. Jessie Wills&#39;, &#39;Johnson, Mr. Alfred&#39;, &#39;Boulos, Mr. Hanna&#39;, &#39;Duff Gordon, Sir. Cosmo Edmund (&amp;quot;Mr Morgan&amp;quot;)&#39;, &#39;Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy)&#39;, &#39;Slabenoff, Mr. Petco&#39;, &#39;Harrington, Mr. Charles H&#39;, &#39;Torber, Mr. Ernst William&#39;, &#39;Homer, Mr. Harry (&amp;quot;Mr E Haven&amp;quot;)&#39;, &#39;Lindell, Mr. Edvard Bengtsson&#39;, &#39;Karaic, Mr. Milan&#39;, &#39;Daniel, Mr. Robert Williams&#39;, &#39;Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue)&#39;, &#39;Shutes, Miss. Elizabeth W&#39;, &#39;Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren)&#39;, &#39;Jardin, Mr. Jose Neto&#39;, &#39;Murphy, Miss. Margaret Jane&#39;, &#39;Horgan, Mr. John&#39;, &#39;Brocklebank, Mr. William Alfred&#39;, &#39;Herman, Miss. Alice&#39;, &#39;Danbom, Mr. Ernst Gilbert&#39;, &#39;Lobb, Mrs. William Arthur (Cordelia K Stanlick)&#39;, &#39;Becker, Miss. Marion Louise&#39;, &#39;Gavey, Mr. Lawrence&#39;, &#39;Yasbeck, Mr. Antoni&#39;, &#39;Kimball, Mr. Edwin Nelson Jr&#39;, &#39;Nakid, Mr. Sahid&#39;, &#39;Hansen, Mr. Henry Damsgaard&#39;, &#39;Bowen, Mr. David John &amp;quot;Dai&amp;quot;&#39;, &#39;Sutton, Mr. Frederick&#39;, &#39;Kirkland, Rev. Charles Leonard&#39;, &#39;Longley, Miss. Gretchen Fiske&#39;, &#39;Bostandyeff, Mr. Guentcho&#39;, &amp;quot;O&#39;Connell, Mr. Patrick D&amp;quot;, &#39;Barkworth, Mr. Algernon Henry Wilson&#39;, &#39;Lundahl, Mr. Johan Svensson&#39;, &#39;Stahelin-Maeglin, Dr. Max&#39;, &#39;Parr, Mr. William Henry Marsh&#39;, &#39;Skoog, Miss. Mabel&#39;, &#39;Davis, Miss. Mary&#39;, &#39;Leinonen, Mr. Antti Gustaf&#39;, &#39;Collyer, Mr. Harvey&#39;, &#39;Panula, Mrs. Juha (Maria Emilia Ojala)&#39;, &#39;Thorneycroft, Mr. Percival&#39;, &#39;Jensen, Mr. Hans Peder&#39;, &#39;Sagesser, Mlle. Emma&#39;, &#39;Skoog, Miss. Margit Elizabeth&#39;, &#39;Foo, Mr. Choong&#39;, &#39;Baclini, Miss. Eugenie&#39;, &#39;Harper, Mr. Henry Sleeper&#39;, &#39;Cor, Mr. Liudevit&#39;, &#39;Simonius-Blumer, Col. Oberst Alfons&#39;, &#39;Willey, Mr. Edward&#39;, &#39;Stanley, Miss. Amy Zillah Elsie&#39;, &#39;Mitkoff, Mr. Mito&#39;, &#39;Doling, Miss. Elsie&#39;, &#39;Kalvik, Mr. Johannes Halvorsen&#39;, &#39;O\&#39;Leary, Miss. Hanora &amp;quot;Norah&amp;quot;&#39;, &#39;Hegarty, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;, &#39;Hickman, Mr. Leonard Mark&#39;, &#39;Radeff, Mr. Alexander&#39;, &#39;Bourke, Mrs. John (Catherine)&#39;, &#39;Eitemiller, Mr. George Floyd&#39;, &#39;Newell, Mr. Arthur Webster&#39;, &#39;Frauenthal, Dr. Henry William&#39;, &#39;Badt, Mr. Mohamed&#39;, &#39;Colley, Mr. Edward Pomeroy&#39;, &#39;Coleff, Mr. Peju&#39;, &#39;Lindqvist, Mr. Eino William&#39;, &#39;Hickman, Mr. Lewis&#39;, &#39;Butler, Mr. Reginald Fenton&#39;, &#39;Rommetvedt, Mr. Knud Paust&#39;, &#39;Cook, Mr. Jacob&#39;, &#39;Taylor, Mrs. Elmer Zebley (Juliet Cummins Wright)&#39;, &#39;Brown, Mrs. Thomas William Solomon (Elizabeth Catherine Ford)&#39;, &#39;Davidson, Mr. Thornton&#39;, &#39;Mitchell, Mr. Henry Michael&#39;, &#39;Wilhelms, Mr. Charles&#39;, &#39;Watson, Mr. Ennis Hastings&#39;, &#39;Edvardsson, Mr. Gustaf Hjalmar&#39;, &#39;Sawyer, Mr. Frederick Charles&#39;, &#39;Turja, Miss. Anna Sofia&#39;, &#39;Goodwin, Mrs. Frederick (Augusta Tyler)&#39;, &#39;Cardeza, Mr. Thomas Drake Martinez&#39;, &#39;Peters, Miss. Katie&#39;, &#39;Hassab, Mr. Hammad&#39;, &#39;Olsvigen, Mr. Thor Anderson&#39;, &#39;Goodwin, Mr. Charles Edward&#39;, &#39;Brown, Mr. Thomas William Solomon&#39;, &#39;Laroche, Mr. Joseph Philippe Lemercier&#39;, &#39;Panula, Mr. Jaako Arnold&#39;, &#39;Dakic, Mr. Branko&#39;, &#39;Fischer, Mr. Eberhard Thelander&#39;, &#39;Madill, Miss. Georgette Alexandra&#39;, &#39;Dick, Mr. Albert Adrian&#39;, &#39;Karun, Miss. Manca&#39;, &#39;Lam, Mr. Ali&#39;, &#39;Saad, Mr. Khalil&#39;, &#39;Weir, Col. John&#39;, &#39;Chapman, Mr. Charles Henry&#39;, &#39;Kelly, Mr. James&#39;, &#39;Mullens, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;, &#39;Thayer, Mr. John Borland&#39;, &#39;Humblen, Mr. Adolf Mathias Nicolai Olsen&#39;, &#39;Astor, Mrs. John Jacob (Madeleine Talmadge Force)&#39;, &#39;Silverthorne, Mr. Spencer Victor&#39;, &#39;Barbara, Miss. Saiide&#39;, &#39;Gallagher, Mr. Martin&#39;, &#39;Hansen, Mr. Henrik Juul&#39;, &#39;Morley, Mr. Henry Samuel (&amp;quot;Mr Henry Marshall&amp;quot;)&#39;, &#39;Kelly, Mrs. Florence &amp;quot;Fannie&amp;quot;&#39;, &#39;Calderhead, Mr. Edward Pennington&#39;, &#39;Cleaver, Miss. Alice&#39;, &#39;Moubarek, Master. Halim Gonios (&amp;quot;William George&amp;quot;)&#39;, &#39;Mayne, Mlle. Berthe Antonine (&amp;quot;Mrs de Villiers&amp;quot;)&#39;, &#39;Klaber, Mr. Herman&#39;, &#39;Taylor, Mr. Elmer Zebley&#39;, &#39;Larsson, Mr. August Viktor&#39;, &#39;Greenberg, Mr. Samuel&#39;, &#39;Soholt, Mr. Peter Andreas Lauritz Andersen&#39;, &#39;Endres, Miss. Caroline Louise&#39;, &#39;Troutt, Miss. Edwina Celia &amp;quot;Winnie&amp;quot;&#39;, &#39;McEvoy, Mr. Michael&#39;, &#39;Johnson, Mr. Malkolm Joackim&#39;, &#39;Harper, Miss. Annie Jessie &amp;quot;Nina&amp;quot;&#39;, &#39;Jensen, Mr. Svend Lauritz&#39;, &#39;Gillespie, Mr. William Henry&#39;, &#39;Hodges, Mr. Henry Price&#39;, &#39;Chambers, Mr. Norman Campbell&#39;, &#39;Oreskovic, Mr. Luka&#39;, &#39;Renouf, Mrs. Peter Henry (Lillian Jefferys)&#39;, &#39;Mannion, Miss. Margareth&#39;, &#39;Bryhl, Mr. Kurt Arnold Gottfrid&#39;, &#39;Ilmakangas, Miss. Pieta Sofia&#39;, &#39;Allen, Miss. Elisabeth Walton&#39;, &#39;Hassan, Mr. Houssein G N&#39;, &#39;Knight, Mr. Robert J&#39;, &#39;Berriman, Mr. William John&#39;, &#39;Troupiansky, Mr. Moses Aaron&#39;, &#39;Williams, Mr. Leslie&#39;, &#39;Ford, Mrs. Edward (Margaret Ann Watson)&#39;, &#39;Lesurer, Mr. Gustave J&#39;, &#39;Ivanoff, Mr. Kanio&#39;, &#39;Nankoff, Mr. Minko&#39;, &#39;Hawksford, Mr. Walter James&#39;, &#39;Cavendish, Mr. Tyrell William&#39;, &#39;Ryerson, Miss. Susan Parker &amp;quot;Suzette&amp;quot;&#39;, &#39;McNamee, Mr. Neal&#39;, &#39;Stranden, Mr. Juho&#39;, &#39;Crosby, Capt. Edward Gifford&#39;, &#39;Abbott, Mr. Rossmore Edward&#39;, &#39;Sinkkonen, Miss. Anna&#39;, &#39;Marvin, Mr. Daniel Warner&#39;, &#39;Connaghton, Mr. Michael&#39;, &#39;Wells, Miss. Joan&#39;, &#39;Moor, Master. Meier&#39;, &#39;Vande Velde, Mr. Johannes Joseph&#39;, &#39;Jonkoff, Mr. Lalio&#39;, &#39;Herman, Mrs. Samuel (Jane Laver)&#39;, &#39;Hamalainen, Master. Viljo&#39;, &#39;Carlsson, Mr. August Sigfrid&#39;, &#39;Bailey, Mr. Percy Andrew&#39;, &#39;Theobald, Mr. Thomas Leonard&#39;, &#39;Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards)&#39;, &#39;Garfirth, Mr. John&#39;, &#39;Nirva, Mr. Iisakki Antino Aijo&#39;, &#39;Barah, Mr. Hanna Assi&#39;, &#39;Carter, Mrs. William Ernest (Lucile Polk)&#39;, &#39;Eklund, Mr. Hans Linus&#39;, &#39;Hogeboom, Mrs. John C (Anna Andrews)&#39;, &#39;Brewe, Dr. Arthur Jackson&#39;, &#39;Mangan, Miss. Mary&#39;, &#39;Moran, Mr. Daniel J&#39;, &#39;Gronnestad, Mr. Daniel Danielsen&#39;, &#39;Lievens, Mr. Rene Aime&#39;, &#39;Jensen, Mr. Niels Peder&#39;, &#39;Mack, Mrs. (Mary)&#39;, &#39;Elias, Mr. Dibo&#39;, &#39;Hocking, Mrs. Elizabeth (Eliza Needs)&#39;, &#39;Myhrman, Mr. Pehr Fabian Oliver Malkolm&#39;, &#39;Tobin, Mr. Roger&#39;, &#39;Emanuel, Miss. Virginia Ethel&#39;, &#39;Kilgannon, Mr. Thomas J&#39;, &#39;Robert, Mrs. Edward Scott (Elisabeth Walton McMillan)&#39;, &#39;Ayoub, Miss. Banoura&#39;, &#39;Dick, Mrs. Albert Adrian (Vera Gillespie)&#39;, &#39;Long, Mr. Milton Clyde&#39;, &#39;Johnston, Mr. Andrew G&#39;, &#39;Ali, Mr. William&#39;, &#39;Harmer, Mr. Abraham (David Lishin)&#39;, &#39;Sjoblom, Miss. Anna Sofia&#39;, &#39;Rice, Master. George Hugh&#39;, &#39;Dean, Master. Bertram Vere&#39;, &#39;Guggenheim, Mr. Benjamin&#39;, &#39;Keane, Mr. Andrew &amp;quot;Andy&amp;quot;&#39;, &#39;Gaskell, Mr. Alfred&#39;, &#39;Sage, Miss. Stella Anna&#39;, &#39;Hoyt, Mr. William Fisher&#39;, &#39;Dantcheff, Mr. Ristiu&#39;, &#39;Otter, Mr. Richard&#39;, &#39;Leader, Dr. Alice (Farnham)&#39;, &#39;Osman, Mrs. Mara&#39;, &#39;Ibrahim Shawah, Mr. Yousseff&#39;, &#39;Van Impe, Mrs. Jean Baptiste (Rosalie Paula Govaert)&#39;, &#39;Ponesell, Mr. Martin&#39;, &#39;Collyer, Mrs. Harvey (Charlotte Annie Tate)&#39;, &#39;Carter, Master. William Thornton II&#39;, &#39;Thomas, Master. Assad Alexander&#39;, &#39;Hedman, Mr. Oskar Arvid&#39;, &#39;Johansson, Mr. Karl Johan&#39;, &#39;Andrews, Mr. Thomas Jr&#39;, &#39;Pettersson, Miss. Ellen Natalia&#39;, &#39;Meyer, Mr. August&#39;, &#39;Chambers, Mrs. Norman Campbell (Bertha Griggs)&#39;, &#39;Alexander, Mr. William&#39;, &#39;Lester, Mr. James&#39;, &#39;Slemen, Mr. Richard James&#39;, &#39;Andersson, Miss. Ebba Iris Alfrida&#39;, &#39;Tomlin, Mr. Ernest Portage&#39;, &#39;Fry, Mr. Richard&#39;, &#39;Heininen, Miss. Wendla Maria&#39;, &#39;Mallet, Mr. Albert&#39;, &#39;Holm, Mr. John Fredrik Alexander&#39;, &#39;Skoog, Master. Karl Thorsten&#39;, &#39;Hays, Mrs. Charles Melville (Clara Jennings Gregg)&#39;, &#39;Lulic, Mr. Nikola&#39;, &#39;Reuchlin, Jonkheer. John George&#39;, &#39;Moor, Mrs. (Beila)&#39;, &#39;Panula, Master. Urho Abraham&#39;, &#39;Flynn, Mr. John&#39;, &#39;Lam, Mr. Len&#39;, &#39;Mallet, Master. Andre&#39;, &#39;McCormack, Mr. Thomas Joseph&#39;, &#39;Stone, Mrs. George Nelson (Martha Evelyn)&#39;, &#39;Yasbeck, Mrs. Antoni (Selini Alexander)&#39;, &#39;Richards, Master. George Sibley&#39;, &#39;Saad, Mr. Amin&#39;, &#39;Augustsson, Mr. Albert&#39;, &#39;Allum, Mr. Owen George&#39;, &#39;Compton, Miss. Sara Rebecca&#39;, &#39;Pasic, Mr. Jakob&#39;, &#39;Sirota, Mr. Maurice&#39;, &#39;Chip, Mr. Chang&#39;, &#39;Marechal, Mr. Pierre&#39;, &#39;Alhomaki, Mr. Ilmari Rudolf&#39;, &#39;Mudd, Mr. Thomas Charles&#39;, &#39;Serepeca, Miss. Augusta&#39;, &#39;Lemberopolous, Mr. Peter L&#39;, &#39;Culumovic, Mr. Jeso&#39;, &#39;Abbing, Mr. Anthony&#39;, &#39;Sage, Mr. Douglas Bullen&#39;, &#39;Markoff, Mr. Marin&#39;, &#39;Harper, Rev. John&#39;, &#39;Goldenberg, Mrs. Samuel L (Edwiga Grabowska)&#39;, &#39;Andersson, Master. Sigvard Harald Elias&#39;, &#39;Svensson, Mr. Johan&#39;, &#39;Boulos, Miss. Nourelain&#39;, &#39;Lines, Miss. Mary Conover&#39;, &#39;Carter, Mrs. Ernest Courtenay (Lilian Hughes)&#39;, &#39;Aks, Mrs. Sam (Leah Rosen)&#39;, &#39;Wick, Mrs. George Dennick (Mary Hitchcock)&#39;, &#39;Daly, Mr. Peter Denis &#39;, &#39;Baclini, Mrs. Solomon (Latifa Qurban)&#39;, &#39;Razi, Mr. Raihed&#39;, &#39;Hansen, Mr. Claus Peter&#39;, &#39;Giles, Mr. Frederick Edward&#39;, &#39;Swift, Mrs. Frederick Joel (Margaret Welles Barron)&#39;, &#39;Sage, Miss. Dorothy Edith &amp;quot;Dolly&amp;quot;&#39;, &#39;Gill, Mr. John William&#39;, &#39;Bystrom, Mrs. (Karolina)&#39;, &#39;Duran y More, Miss. Asuncion&#39;, &#39;Roebling, Mr. Washington Augustus II&#39;, &#39;van Melkebeke, Mr. Philemon&#39;, &#39;Johnson, Master. Harold Theodor&#39;, &#39;Balkic, Mr. Cerin&#39;, &#39;Beckwith, Mrs. Richard Leonard (Sallie Monypeny)&#39;, &#39;Carlsson, Mr. Frans Olof&#39;, &#39;Vander Cruyssen, Mr. Victor&#39;, &#39;Abelson, Mrs. Samuel (Hannah Wizosky)&#39;, &#39;Najib, Miss. Adele Kiamie &amp;quot;Jane&amp;quot;&#39;, &#39;Gustafsson, Mr. Alfred Ossian&#39;, &#39;Petroff, Mr. Nedelio&#39;, &#39;Laleff, Mr. Kristo&#39;, &#39;Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)&#39;, &#39;Shelley, Mrs. William (Imanita Parrish Hall)&#39;, &#39;Markun, Mr. Johann&#39;, &#39;Dahlberg, Miss. Gerda Ulrika&#39;, &#39;Banfield, Mr. Frederick James&#39;, &#39;Sutehall, Mr. Henry Jr&#39;, &#39;Rice, Mrs. William (Margaret Norton)&#39;, &#39;Montvila, Rev. Juozas&#39;, &#39;Graham, Miss. Margaret Edith&#39;, &#39;Johnston, Miss. Catherine Helen &amp;quot;Carrie&amp;quot;&#39;, &#39;Behr, Mr. Karl Howell&#39;, &#39;Dooley, Mr. Patrick&#39;]
sexe = [&#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1) le nombre de passagers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;891&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2) le nombre de femmes et d&amp;rsquo;hommes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;count = 0 
for sex in sexe:
if sex == &#39;male&#39;:
    count +=1
print(&#39;Le nombre de femmes est: &#39; + str(len(name) - count))
print(&amp;quot;Le nombre d&#39;hommes est: &amp;quot;+ str(count))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le nombre de femmes est: 314
Le nombre d&amp;rsquo;hommes est: 577&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sexe.count(&#39;male&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;577&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sexe.count(&#39;female&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;314&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;3) le pourcentage de survit des passagers (dans la liste survided, 1 correspond à survecu, 0 à mort)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(str(survided.count(1)/len(survided)*100) + &#39; %&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;38.38383838383838 %&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;4) l&amp;rsquo;age moyen sur le bateau&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(age)/len(age)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;28.368316498316496&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5) trouver un système permettant de vérifier la présence d&amp;rsquo;une personne à partir de son nom.
- &amp;lsquo;Levy, Mr. Rene Jacques&amp;rsquo; était il présent ?
- &amp;lsquo;Pinsky, Mrs. (Carla)&amp;rsquo; était-elle présente ?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Levy, Mr. Rene Jacques&#39; in name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Pinsky, Mrs. (Carla)&#39; in name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6) il y a une erreur sur le nom d&amp;rsquo;un des passagers
- trouver l&amp;rsquo;emplacement dans la liste de &amp;lsquo;Panula, Mr. Ernesti Arvid&amp;rsquo;
- Supprimer le passager et mettre à la place &amp;lsquo;Tanula, Mr. Ernesto Arvad&amp;rsquo;
- Vérifier avec le système trouvé en exercice 5 si la correction a bien été réalisée en recherchant l&amp;rsquo;ancien et le nouveau nom&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name.index(&#39;Panula, Mr. Ernesti Arvid&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;266
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name.pop(266)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Panula, Mr. Ernesti Arvid&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name.insert(266, &#39;Tanula, Mr. Ernesto Arvad&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Tanula, Mr. Ernesto Arvad&#39; in name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Panula, Mr. Ernesti Arvid&#39; in name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>4- Les dictionnaires en Python - Cours</title>
      <link>/courses/formation_python/4-les_dictionnaires/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/4-les_dictionnaires/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-dictionnaires-en-python&#34;&gt;Les dictionnaires en Python:&lt;/h2&gt;

&lt;h2&gt; Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est un dictionnaire&lt;/li&gt;
&lt;li&gt;Savoir consulter et analyser un dictonnaire&lt;/li&gt;
&lt;li&gt;Savoir manipuler un dictionnaire&lt;/li&gt;
&lt;li&gt;créer un dictionnaire multi-propriétés&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-les-dictionnaires-python&#34;&gt;4- Les dictionnaires Python&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Le dictionnaire est une structure où l&amp;rsquo;on stocke des clés associées à des valeurs&lt;/li&gt;
&lt;li&gt;Les dictionnaires sont des structures de données non-ordonnées&lt;/li&gt;
&lt;li&gt;On peut les modifier et les indexer&lt;/li&gt;
&lt;li&gt;Principe: on peut lier une clef à une valeur&lt;/li&gt;
&lt;li&gt;Les dictionnaires s&amp;rsquo;écrivent avec des {  }&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-1-concept-et-déclaration-d-un-dictionnaire-en-python&#34;&gt;4.1-Concept et déclaration d&amp;rsquo;un dictionnaire en Python&lt;/h2&gt;

&lt;p&gt;Pour créer un dictionnaire, on écrit tous les éléments en les séparant par des virgules et le tout encadré par des accolades {}.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsPrix = [[&#39;smartphone&#39;,1000],[&#39;chaussures&#39;,100],[&#39;console&#39;,400]]
print(produitsPrix[1][1])      
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et si un des produits est supprimé ? Ou si l&amp;rsquo;ordre est différent la fois suivante ? &lt;br&gt; Ce stockage n&amp;rsquo;est pas optimal. Un stockage sous la forme d&amp;rsquo;un dictionnaire est beaucoup plus adapté :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsDict = {&#39;smartphone&#39;:1000,&#39;chaussures&#39;:100,&#39;console&#39;:400}
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;smartphone&#39;: 1000, &#39;chaussures&#39;: 100, &#39;console&#39;: 400}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-2-modifier-un-dictionnaire&#34;&gt;4.2-Modifier un dictionnaire&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pour &lt;b&gt;ajouter&lt;/b&gt; une valeur&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Ajouter un nouveau couple ( clef : valeur ) dans un dictionnaire 
produitsDict[&amp;quot;tele&amp;quot;]=100
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;smartphone&amp;rsquo;: 1000, &amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pour &lt;b&gt;modifier&lt;/b&gt; une valeur avec une clef existant&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On peut modifier une valeur dans un dictionnaire avec une clef existante 
produitsDict[&amp;quot;smartphone&amp;quot;]=999
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;smartphone&amp;rsquo;: 999, &amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Un dictionnaire ne peut pas avoir deux fois la même clef, une clef est unique!
produitsDict[&amp;quot;smartphone&amp;quot;]=888
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;smartphone&amp;rsquo;: 888, &amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pour &lt;b&gt;supprimer&lt;/b&gt; une valeur avec une clef existantE&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On peut supprimer une valeur dans un dictionnaire 
del produitsDict[&amp;quot;smartphone&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Supprimer un item
print(produitsDict)
produitsDict.pop(&amp;quot;tele&amp;quot;)
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}
{&amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#vider un dictionnaire
print(produitsDict)
produitsDict.clear()
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400}
{}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-3-parcourir-un-dictionnaire&#34;&gt;4.3- Parcourir un dictionnaire&lt;/h2&gt;

&lt;p&gt;Une fois le dictionnaire crée, nous pouvons accéder aux éléments en utilisant les clefs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsDict = {&#39;smartphone&#39;:1000,&#39;chaussures&#39;:100,&#39;console&#39;:400}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#trouver la valeur d&#39;un item
print(produitsDict[&#39;console&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;400
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On peut parcourir un dictionnaire suivant 3 méthodes utilisant la boucle &lt;b&gt;FOR&lt;/b&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;par valeur&lt;/li&gt;
&lt;li&gt;par clef&lt;/li&gt;

&lt;li&gt;&lt;p&gt;par clef + valeur&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour connaitre les clefs d&#39;un dictionnaire: méthode .keys()
produitsDict.keys()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dict_keys([&amp;lsquo;smartphone&amp;rsquo;, &amp;lsquo;chaussures&amp;rsquo;, &amp;lsquo;console&amp;rsquo;])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour connaitre les valeurs d&#39;un dictionnaire: méthode .values()
produitsDict.values()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_values([1000, 100, 400])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour parcourir les clefs d&#39;un dictionnaire 
for cle in produitsDict.keys():
print(cle)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;smartphone
chaussures
console&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour parcourir les valeurs d&#39;un dictionnaire
for valeur in produitsDict.values():
print(valeur)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1000
100
400&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour connaitre les couples clef, valeur: méthode .items()
produitsDict.items()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_items([(&amp;lsquo;smartphone&amp;rsquo;, 1000), (&amp;lsquo;chaussures&amp;rsquo;, 100), (&amp;lsquo;console&amp;rsquo;, 400)])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ici on a des listes contenant des tuples.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour parcourir les couples clefs,valeurs 
for cle,valeur in produitsDict.items(): # la boucle for obtient un tuple à chaque itération
    print(cle,valeur)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;smartphone 1000
chaussures 100
console 400
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#vérifier si un item est présent
print(&#39;smartphone&#39; in produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#vérifier la longueur d&#39;un dictionnaire
print(len(produitsDict))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#obtenir à nouveau une liste d&#39;items
print(produitsDict.keys())
print(list(produitsDict.keys()))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;dict_keys([&#39;smartphone&#39;, &#39;chaussures&#39;, &#39;console&#39;])
[&#39;smartphone&#39;, &#39;chaussures&#39;, &#39;console&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-4-créer-un-dictionnaire-multi-propriétés&#34;&gt;4.4- Créer un dictionnaire multi-propriétés&lt;/h2&gt;

&lt;p&gt;En plus du produit, je veux savoir s&amp;rsquo;il est en stock ou non.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsDictPrix = {&#39;smartphone&#39;:1000,&#39;chaussures&#39;:100,&#39;console&#39;:400}
produitsDictStock = {&#39;smartphone&#39;:True,&#39;chaussures&#39;:False,&#39;console&#39;:True}
print(produitsDictPrix)
print(produitsDictStock)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;smartphone&#39;: 1000, &#39;chaussures&#39;: 100, &#39;console&#39;: 400}
{&#39;smartphone&#39;: True, &#39;chaussures&#39;: False, &#39;console&#39;: True}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsDict = {
    &#39;smartphone&#39;:{&#39;prix&#39;:1000,&#39;enStock&#39;:True},
    &#39;chaussures&#39;:{&#39;prix&#39;:100,&#39;enStock&#39;:False},
    &#39;console&#39;:{&#39;prix&#39;:400,&#39;enStock&#39;:True}
}
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;smartphone&#39;: {&#39;prix&#39;: 1000, &#39;enStock&#39;: True}, &#39;chaussures&#39;: {&#39;prix&#39;: 100, &#39;enStock&#39;: False}, &#39;console&#39;: {&#39;prix&#39;: 400, &#39;enStock&#39;: True}}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(produitsDict[&#39;smartphone&#39;][&#39;prix&#39;])
print(produitsDict[&#39;console&#39;][&#39;enStock&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1000
True
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>4- Les dictionnaires en Python - Exercice</title>
      <link>/courses/formation_python/4-les_dictionnaires-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/4-les_dictionnaires-exercice/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-dictionnaires-en-python&#34;&gt;Les dictionnaires en Python:&lt;/h2&gt;

&lt;h2 id=&#34;tp-analyse-des-données-brutes-des-passagers-du-titanic-2-3&#34;&gt;TP : Analyse des données brutes des passagers du Titanic (&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)&lt;/h2&gt;

&lt;p&gt;Nous allons analyser 2 nouvelles informations :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pclass, qui indique la classe du passage (1 = première classe, 2 = deuxième classe, 3 = troisième classe)&lt;/li&gt;
&lt;li&gt;SibSp, qui donne le nombre de personne de la même famille que le passager présentes à bord (frères, femmes etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Celles-ci sont stockées dans un dictionnaire de la manière suivante :
{Passager1:{&amp;lsquo;Pclass&amp;rsquo;: X, &amp;lsquo;SibSp&amp;rsquo;: X},&lt;br&gt;
Passager2:{&amp;lsquo;Pclass&amp;rsquo;: X, &amp;lsquo;SibSp&amp;rsquo;: X},&lt;br&gt;
&amp;hellip;
}&lt;/p&gt;

&lt;p&gt;1) quel était la classe de &amp;lsquo;Flynn, Mr. James&amp;rsquo; ?&lt;br&gt;
2) &amp;lsquo;Todoroff, Mr. Lalio&amp;rsquo; avait-il des proches à bord ?&lt;br&gt;
3) &amp;lsquo;Nicola-Yarred, Miss. Jamila&amp;rsquo; était elle à bord ?&lt;br&gt;
4) &amp;lsquo;Mamee, Mr. Hanna&amp;rsquo; étaient en 1ière classe et non en troisième classe. Merci de corriger cela&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic = {&#39;Braund, Mr. Owen Harris&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Heikkinen, Miss. Laina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Futrelle, Mrs. Jacques Heath (Lily May Peel)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Allen, Mr. William Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moran, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McCarthy, Mr. Timothy J&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Palsson, Master. Gosta Leonard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nasser, Mrs. Nicholas (Adele Achem)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Sandstrom, Miss. Marguerite Rut&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Bonnell, Miss. Elizabeth&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Saundercock, Mr. William Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andersson, Mr. Anders Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Vestrom, Miss. Hulda Amanda Adolfina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hewlett, Mrs. (Mary D Kingcome) &#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Rice, Master. Eugene&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Williams, Mr. Charles Eugene&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Masselmani, Mrs. Fatima&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fynney, Mr. Joseph J&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Beesley, Mr. Lawrence&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;McGowan, Miss. Anna &amp;quot;Annie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sloper, Mr. William Thompson&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Palsson, Miss. Torborg Danira&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Emir, Mr. Farred Chehab&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fortune, Mr. Charles Alexander&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 3}, &#39;O\&#39;Dwyer, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Todoroff, Mr. Lalio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Uruchurtu, Don. Manuel E&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Spencer, Mrs. William Augustus (Marie Eugenie)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Glynn, Miss. Mary Agatha&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Wheadon, Mr. Edward H&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Meyer, Mr. Edgar Joseph&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Holverson, Mr. Alexander Oskar&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Mamee, Mr. Hanna&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cann, Mr. Ernest Charles&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Vander Planke, Miss. Augusta Maria&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Nicola-Yarred, Miss. Jamila&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Ahlin, Mrs. Johan (Johanna Persdotter Larsson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Kraeff, Mr. Theodor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Laroche, Miss. Simonne Marie Anne Andree&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Devaney, Miss. Margaret Delia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rogers, Mr. William John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lennon, Mr. Denis&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &amp;quot;O&#39;Driscoll, Miss. Bridget&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Samaan, Mr. Youssef&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Arnold-Franchi, Mrs. Josef (Josefine Franchi)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Panula, Master. Juha Niilo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Nosworthy, Mr. Richard Cater&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harper, Mrs. Henry Sleeper (Myna Haxtun)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Ostby, Mr. Engelhart Cornelius&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Woolner, Mr. Hugh&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Rugg, Miss. Emily&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Novel, Mr. Mansouer&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;West, Miss. Constance Mirium&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Goodwin, Master. William Frederick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Sirayanian, Mr. Orsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Icard, Miss. Amelie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Harris, Mr. Henry Birkhardt&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Skoog, Master. Harald&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Stewart, Mr. Albert A&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Moubarek, Master. Gerios&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Nye, Mrs. (Elizabeth Ramell)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Crease, Mr. Ernest James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andersson, Miss. Erna Alexandra&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Kink, Mr. Vincenz&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Jenkin, Mr. Stephen Curnow&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goodwin, Miss. Lillian Amy&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Hood, Mr. Ambrose Jr&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Chronopoulos, Mr. Apostolos&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Bing, Mr. Lee&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moen, Mr. Sigurd Hansen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Staneff, Mr. Ivan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moutal, Mr. Rahamin Haim&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Caldwell, Master. Alden Gates&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Dowdell, Miss. Elizabeth&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Waelens, Mr. Achille&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sheerlinck, Mr. Jan Baptist&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McDermott, Miss. Brigdet Delia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Carrau, Mr. Francisco M&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ilett, Miss. Bertha&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Ford, Mr. William Neal&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Slocovski, Mr. Selman Francis&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fortune, Miss. Mabel Helen&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 3}, &#39;Celotti, Mr. Francesco&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Christmann, Mr. Emil&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andreasson, Mr. Paul Edvin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Chaffee, Mr. Herbert Fuller&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Dean, Mr. Bertram Frank&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Coxon, Mr. Daniel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Shorney, Mr. Charles Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goldschmidt, Mr. George B&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Greenfield, Mr. William Bertram&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Doling, Mrs. John T (Ada Julia Bone)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kantor, Mr. Sinai&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Petranec, Miss. Matilda&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Petroff, Mr. Pastcho (&amp;quot;Pentcho&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;White, Mr. Richard Frasar&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Johansson, Mr. Gustaf Joel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gustafsson, Mr. Anders Vilhelm&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Mionoff, Mr. Stoytcho&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Salkjelsvik, Miss. Anna Kristine&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moss, Mr. Albert Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rekic, Mr. Tido&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moran, Miss. Bertha&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Porter, Mr. Walter Chamberlain&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Zabour, Miss. Hileni&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Barton, Mr. David John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jussila, Miss. Katriina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Attalah, Miss. Malake&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Pekoniemi, Mr. Edvard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Connors, Mr. Patrick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Turpin, Mr. William John Robert&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Baxter, Mr. Quigg Edmond&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Andersson, Miss. Ellis Anna Maria&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Hickman, Mr. Stanley George&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Moore, Mr. Leonard Charles&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nasser, Mr. Nicholas&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Webber, Miss. Susan&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;White, Mr. Percival Wayland&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Nicola-Yarred, Master. Elias&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;McMahon, Mr. Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Madsen, Mr. Fridtjof Arne&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Peter, Miss. Anna&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Ekstrom, Mr. Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Drazenoic, Mr. Jozef&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Coelho, Mr. Domingos Fernandeo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Robins, Mrs. Alexander A (Grace Charity Laury)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Weisz, Mrs. Leopold (Mathilde Francoise Pede)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Sobey, Mr. Samuel James Hayden&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Richard, Mr. Emile&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Newsom, Miss. Helen Monypeny&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Futrelle, Mr. Jacques Heath&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Osen, Mr. Olaf Elon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Giglio, Mr. Victor&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Boulos, Mrs. Joseph (Sultana)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nysten, Miss. Anna Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Burke, Mr. Jeremiah&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andrew, Mr. Edgardo Samuel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Nicholls, Mr. Joseph Charles&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Andersson, Mr. August Edvard (&amp;quot;Wennerstrom&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ford, Miss. Robina Maggie &amp;quot;Ruby&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Navratil, Mr. Michel (&amp;quot;Louis M Hoffman&amp;quot;)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Byles, Rev. Thomas Roussel Davids&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Bateman, Rev. Robert James&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Pears, Mrs. Thomas (Edith Wearne)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Meo, Mr. Alfonzo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;van Billiard, Mr. Austin Blyler&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Olsen, Mr. Ole Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Williams, Mr. Charles Duane&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Gilnagh, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Corn, Mr. Harry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Smiljanic, Mr. Mile&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sage, Master. Thomas Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Cribb, Mr. John Hatfield&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Watt, Mrs. James (Elizabeth &amp;quot;Bessie&amp;quot; Inglis Milne)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Bengtsson, Mr. John Viktor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Calic, Mr. Jovo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Panula, Master. Eino Viljami&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Goldsmith, Master. Frank John William &amp;quot;Frankie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Chibnall, Mrs. (Edith Martha Bowerman)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Skoog, Mrs. William (Anna Bernhardina Karlsson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Baumann, Mr. John D&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ling, Mr. Lee&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Van der hoef, Mr. Wyckoff&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Rice, Master. Arthur&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Johnson, Miss. Eleanor Ileen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Sivola, Mr. Antti Wilhelm&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Smith, Mr. James Clinch&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Klasen, Mr. Klas Albin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Lefebre, Master. Henry Forbes&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Isham, Miss. Ann Elizabeth&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Hale, Mr. Reginald&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Leonard, Mr. Lionel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sage, Miss. Constance Gladys&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Pernot, Mr. Rene&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Asplund, Master. Clarence Gustaf Hugo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Becker, Master. Richard F&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Kink-Heilmann, Miss. Luise Gretchen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rood, Mr. Hugh Roscoe&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;O\&#39;Brien, Mrs. Thomas (Johanna &amp;quot;Hannah&amp;quot; Godfrey)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Romaine, Mr. Charles Hallace (&amp;quot;Mr C Rolmane&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Bourke, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Turcin, Mr. Stjepan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Pinsky, Mrs. (Rosa)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Carbines, Mr. William&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Andersen-Jensen, Miss. Carla Christine Nielsine&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Navratil, Master. Michel M&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Brown, Mrs. James Joseph (Margaret Tobin)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lurette, Miss. Elise&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Mernagh, Mr. Robert&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Olsen, Mr. Karl Siegwart Andreas&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Madigan, Miss. Margaret &amp;quot;Maggie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Yrois, Miss. Henriette (&amp;quot;Mrs Harbeck&amp;quot;)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Vande Walle, Mr. Nestor Cyriel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sage, Mr. Frederick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Johanson, Mr. Jakob Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Youseff, Mr. Gerious&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cohen, Mr. Gurshon &amp;quot;Gus&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Strom, Miss. Telma Matilda&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Backstrom, Mr. Karl Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Albimona, Mr. Nassef Cassem&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Carr, Miss. Helen &amp;quot;Ellen&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Blank, Mr. Henry&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ali, Mr. Ahmed&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cameron, Miss. Clear Annie&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Perkin, Mr. John Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Givard, Mr. Hans Kristensen&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kiernan, Mr. Philip&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Newell, Miss. Madeleine&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Honkanen, Miss. Eliina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jacobsohn, Mr. Sidney Samuel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Bazzani, Miss. Albina&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Harris, Mr. Walter&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sunderland, Mr. Victor Francis&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bracken, Mr. James H&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Green, Mr. George Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nenkoff, Mr. Christo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hoyt, Mr. Frederick Maxfield&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Berglund, Mr. Karl Ivar Sven&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mellors, Mr. William John&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Lovell, Mr. John Hall (&amp;quot;Henry&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fahlstrom, Mr. Arne Jonas&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Lefebre, Miss. Mathilde&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Harris, Mrs. Henry Birkhardt (Irene Wallach)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Larsson, Mr. Bengt Edvin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sjostedt, Mr. Ernst Adolf&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Asplund, Miss. Lillian Gertrud&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Leyson, Mr. Robert William Norman&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Harknett, Miss. Alice Phoebe&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hold, Mr. Stephen&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Collyer, Miss. Marjorie &amp;quot;Lottie&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Pengelly, Mr. Frederick William&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Hunt, Mr. George Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Zabour, Miss. Thamine&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Murphy, Miss. Katherine &amp;quot;Kate&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Coleridge, Mr. Reginald Charles&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Maenpaa, Mr. Matti Alexanteri&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Attalah, Mr. Sleiman&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Minahan, Dr. William Edward&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;Lindahl, Miss. Agda Thorilda Viktoria&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hamalainen, Mrs. William (Anna)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Beckwith, Mr. Richard Leonard&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Carter, Rev. Ernest Courtenay&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Reed, Mr. James George&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Strom, Mrs. Wilhelm (Elna Matilda Persson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Stead, Mr. William Thomas&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lobb, Mr. William Arthur&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Rosblom, Mrs. Viktor (Helena Wilhelmina)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Touma, Mrs. Darwis (Hanne Youssef Razi)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Thorne, Mrs. Gertrude Maybelle&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Cherry, Miss. Gladys&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ward, Miss. Anna&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Parrish, Mrs. (Lutie Davis)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Smith, Mr. Thomas&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Asplund, Master. Edvin Rojj Felix&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Taussig, Mr. Emil&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Harrison, Mr. William&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Henry, Miss. Delia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Reeves, Mr. David&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Panula, Mr. Ernesti Arvid&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Persson, Mr. Ernst Ulrik&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Graham, Mrs. William Thompson (Edith Junkins)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Bissette, Miss. Amelia&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Cairns, Mr. Alexander&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Tornquist, Mr. William Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mellinger, Mrs. (Elizabeth Anne Maidment)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Natsch, Mr. Charles H&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Healy, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andrews, Miss. Kornelia Theodosia&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Lindblom, Miss. Augusta Charlotta&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Parkes, Mr. Francis &amp;quot;Frank&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Rice, Master. Eric&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Abbott, Mrs. Stanton (Rosa Hunt)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Duane, Mr. Frank&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Olsson, Mr. Nils Johan Goransson&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;de Pelsmaeker, Mr. Alfons&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Dorking, Mr. Edward Arthur&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Smith, Mr. Richard William&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Stankovic, Mr. Ivan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;de Mulder, Mr. Theodore&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Naidenoff, Mr. Penko&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hosono, Mr. Masabumi&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Connolly, Miss. Kate&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Barber, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Bishop, Mrs. Dickinson H (Helen Walton)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Levy, Mr. Rene Jacques&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Haas, Miss. Aloisia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mineff, Mr. Ivan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lewy, Mr. Ervin G&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Hanna, Mr. Mansour&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Allison, Miss. Helen Loraine&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Saalfeld, Mr. Adolphe&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Baxter, Mrs. James (Helene DeLaudeniere Chaput)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kelly, Miss. Anna Katherine &amp;quot;Annie Kate&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McCoy, Mr. Bernard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Johnson, Mr. William Cahoone Jr&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Keane, Miss. Nora A&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Williams, Mr. Howard Hugh &amp;quot;Harry&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Allison, Master. Hudson Trevor&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Fleming, Miss. Margaret&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Abelson, Mr. Samuel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Francatelli, Miss. Laura Mabel&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Hays, Miss. Margaret Bechstein&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ryerson, Miss. Emily Borie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;Lahtinen, Mrs. William (Anna Sylfven)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Hendekovic, Mr. Ignjac&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hart, Mr. Benjamin&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Nilsson, Miss. Helmina Josefina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Kantor, Mrs. Sinai (Miriam Sternin)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Moraweck, Dr. Ernest&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Wick, Miss. Mary Natalie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Dennis, Mr. Samuel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Danoff, Mr. Yoto&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Slayter, Miss. Hilda Mary&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Sage, Mr. George John Jr&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Young, Miss. Marie Grice&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Nysveen, Mr. Johan Hansen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ball, Mrs. (Ada E Hall)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goldsmith, Mrs. Frank John (Emily Alice Brown)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hippach, Miss. Jean Gertrude&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;McCoy, Miss. Agnes&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Partner, Mr. Austen&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Graham, Mr. George Edward&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Vander Planke, Mr. Leo Edmondus&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Frauenthal, Mrs. Henry William (Clara Heinsheimer)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Denkoff, Mr. Mitto&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Pears, Mr. Thomas Clinton&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Burns, Miss. Elizabeth Margaret&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Dahl, Mr. Karl Edwart&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Blackwell, Mr. Stephen Weart&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Navratil, Master. Edmond Roger&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Fortune, Miss. Alice Elizabeth&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 3}, &#39;Collander, Mr. Erik Gustaf&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sedgwick, Mr. Charles Frederick Waddington&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Fox, Mr. Stanley Hubert&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Brown, Miss. Amelia &amp;quot;Mildred&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Smith, Miss. Marion Elsie&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Davison, Mrs. Thomas Henry (Mary E Finck)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Coutts, Master. William Loch &amp;quot;William&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Dimic, Mr. Jovan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Odahl, Mr. Nils Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Williams-Lambert, Mr. Fletcher Fellows&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Elias, Mr. Tannous&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Arnold-Franchi, Mr. Josef&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Yousif, Mr. Wazli&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Vanden Steen, Mr. Leo Peter&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bowerman, Miss. Elsie Edith&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Funk, Miss. Annie Clemmer&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;McGovern, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mockler, Miss. Helen Mary &amp;quot;Ellie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Skoog, Mr. Wilhelm&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;del Carlo, Mr. Sebastiano&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Barbara, Mrs. (Catherine David)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Asim, Mr. Adola&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Brien, Mr. Thomas&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Adahl, Mr. Mauritz Nils Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Warren, Mrs. Frank Manley (Anna Sophia Atkinson)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Moussa, Mrs. (Mantoura Boulos)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jermyn, Miss. Annie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Aubart, Mme. Leontine Pauline&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Harder, Mr. George Achilles&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Wiklund, Mr. Jakob Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Beavan, Mr. William Thomas&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ringhini, Mr. Sante&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Palsson, Miss. Stina Viola&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Meyer, Mrs. Edgar Joseph (Leila Saks)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Landergren, Miss. Aurora Adelia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Widener, Mr. Harry Elkins&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Betros, Mr. Tannous&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gustafsson, Mr. Karl Gideon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bidois, Miss. Rosalie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Nakid, Miss. Maria (&amp;quot;Mary&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Tikkanen, Mr. Juho&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Holverson, Mrs. Alexander Oskar (Mary Aline Towner)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Plotcharsky, Mr. Vasil&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Davies, Mr. Charles Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goodwin, Master. Sidney Leonard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Buss, Miss. Kate&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sadlier, Mr. Matthew&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lehmann, Miss. Bertha&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Carter, Mr. William Ernest&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Jansson, Mr. Carl Olof&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gustafsson, Mr. Johan Birger&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Newell, Miss. Marjorie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Johansson, Mr. Erik&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Olsson, Miss. Elina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McKane, Mr. Peter David&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Pain, Dr. Alfred&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Trout, Mrs. William H (Jessie L)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Niskanen, Mr. Juha&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Adams, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jussila, Miss. Mari Aina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hakkarainen, Mr. Pekka Pietari&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Oreskovic, Miss. Marija&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gale, Mr. Shadrach&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Widegren, Mr. Carl/Charles Peter&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Richards, Master. William Rowe&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Birkeland, Mr. Hans Martin Monsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lefebre, Miss. Ida&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Sdycoff, Mr. Todor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hart, Mr. Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Minahan, Miss. Daisy E&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Cunningham, Mr. Alfred Fleming&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sundman, Mr. Johan Julian&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Meek, Mrs. Thomas (Annie Louise Rowley)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Drew, Mrs. James Vivian (Lulu Thorne Christian)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Silven, Miss. Lyyli Karoliina&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Matthews, Mr. William John&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Van Impe, Miss. Catharina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gheorgheff, Mr. Stanio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Charters, Mr. David&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Zimmerman, Mr. Leo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Rosblom, Mr. Viktor Richard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Wiseman, Mr. Phillippe&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Clarke, Mrs. Charles V (Ada Maria Winfield)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Phillips, Miss. Kate Florence (&amp;quot;Mrs Kate Louise Phillips Marshall&amp;quot;)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Flynn, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Pickard, Mr. Berk (Berk Trembisky)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bjornstrom-Steffansson, Mr. Mauritz Hakan&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Thorneycroft, Mrs. Percival (Florence Kate White)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Louch, Mrs. Charles Alexander (Alice Adelaide Slow)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Kallio, Mr. Nikolai Erland&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Silvey, Mr. William Baird&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Carter, Miss. Lucile Polk&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Ford, Miss. Doolina Margaret &amp;quot;Daisy&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Richards, Mrs. Sidney (Emily Hocking)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Fortune, Mr. Mark&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Kvillner, Mr. Johan Henrik Johannesson&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Hart, Mrs. Benjamin (Esther Ada Bloomfield)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Hampe, Mr. Leon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Petterson, Mr. Johan Emil&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Reynaldo, Ms. Encarnacion&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Johannesen-Bratthammer, Mr. Bernt&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Dodge, Master. Washington&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Mellinger, Miss. Madeleine Violet&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Seward, Mr. Frederic Kimber&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Baclini, Miss. Marie Catherine&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Peuchen, Major. Arthur Godfrey&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;West, Mr. Edwy Arthur&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Hagland, Mr. Ingvald Olai Olsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Foreman, Mr. Benjamin Laventall&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Goldenberg, Mr. Samuel L&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Peduzzi, Mr. Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jalsevac, Mr. Ivan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Millet, Mr. Francis Davis&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kenyon, Mrs. Frederick R (Marion)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Toomey, Miss. Ellen&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Connor, Mr. Maurice&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Anderson, Mr. Harry&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Morley, Mr. William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gee, Mr. Arthur H&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Milling, Mr. Jacob Christian&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Maisner, Mr. Simon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goncalves, Mr. Manuel Estanslas&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Campbell, Mr. William&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Smart, Mr. John Montgomery&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Scanlan, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Baclini, Miss. Helene Barbara&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Keefe, Mr. Arthur&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cacic, Mr. Luka&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;West, Mrs. Edwy Arthur (Ada Mary Worth)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Jerwan, Mrs. Amin S (Marie Marthe Thuillard)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Strandberg, Miss. Ida Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Clifford, Mr. George Quincy&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Renouf, Mr. Peter Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Braund, Mr. Lewis Richard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Karlsson, Mr. Nils August&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hirvonen, Miss. Hildur E&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goodwin, Master. Harold Victor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Frost, Mr. Anthony Wood &amp;quot;Archie&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Rouse, Mr. Richard Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Turkula, Mrs. (Hedwig)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bishop, Mr. Dickinson H&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Lefebre, Miss. Jeannie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Kent, Mr. Edward Austin&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Somerton, Mr. Francis William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Coutts, Master. Eden Leslie &amp;quot;Neville&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hagland, Mr. Konrad Mathias Reiersen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Windelov, Mr. Einar&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Molson, Mr. Harry Markland&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Artagaveytia, Mr. Ramon&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Stanley, Mr. Edward Roland&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Yousseff, Mr. Gerious&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Eustis, Miss. Elizabeth Mussey&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Shellard, Mr. Frederick William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Allison, Mrs. Hudson J C (Bessie Waldo Daniels)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Svensson, Mr. Olof&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Calic, Mr. Petar&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Canavan, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Sullivan, Miss. Bridget Mary&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Laitinen, Miss. Kristina Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Maioni, Miss. Roberta&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Penasco y Castellana, Mr. Victor de Satode&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Quick, Mrs. Frederick Charles (Jane Richards)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Bradley, Mr. George (&amp;quot;George Arthur Brayton&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Olsen, Mr. Henry Margido&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lang, Mr. Fang&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Daly, Mr. Eugene Patrick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Webber, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McGough, Mr. James Robert&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Rothschild, Mrs. Martin (Elizabeth L. Barrett)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Coleff, Mr. Satio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Walker, Mr. William Anderson&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lemore, Mrs. (Amelia Milley)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Ryan, Mr. Patrick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Angle, Mrs. William A (Florence &amp;quot;Mary&amp;quot; Agnes Hughes)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Pavlovic, Mr. Stefo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Perreault, Miss. Anne&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Vovk, Mr. Janko&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lahoud, Mr. Sarkis&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hippach, Mrs. Louis Albert (Ida Sophia Fischer)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kassem, Mr. Fared&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Farrell, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ridsdale, Miss. Lucy&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Farthing, Mr. John&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Salonen, Mr. Johan Werner&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hocking, Mr. Richard George&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Quick, Miss. Phyllis May&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Toufik, Mr. Nakli&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Elias, Mr. Joseph Jr&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Peter, Mrs. Catherine (Catherine Rizk)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cacic, Miss. Marija&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hart, Miss. Eva Miriam&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Butt, Major. Archibald Willingham&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;LeRoy, Miss. Bertha&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Risien, Mr. Samuel Beard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Frolicher, Miss. Hedwig Margaritha&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Crosby, Miss. Harriet R&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Andersson, Miss. Ingeborg Constanzia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Andersson, Miss. Sigrid Elisabeth&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Beane, Mr. Edward&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Douglas, Mr. Walter Donald&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Nicholson, Mr. Arthur Ernest&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Beane, Mrs. Edward (Ethel Clarke)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Padro y Manent, Mr. Julian&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goldsmith, Mr. Frank John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Davies, Master. John Morgan Jr&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Thayer, Mr. John Borland Jr&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Sharp, Mr. Percival James R&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Brien, Mr. Timothy&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Leeni, Mr. Fahim (&amp;quot;Philip Zenni&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ohman, Miss. Velin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Wright, Mr. George&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Duff Gordon, Lady. (Lucille Christiana Sutherland) (&amp;quot;Mrs Morgan&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Robbins, Mr. Victor&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Taussig, Mrs. Emil (Tillie Mandelbaum)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;de Messemaeker, Mrs. Guillaume Joseph (Emma)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Morrow, Mr. Thomas Rowan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sivic, Mr. Husein&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Norman, Mr. Robert Douglas&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Simmons, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Meanwell, Miss. (Marion Ogden)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Davies, Mr. Alfred J&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Stoytcheff, Mr. Ilia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Palsson, Mrs. Nils (Alma Cornelia Berglund)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Doharr, Mr. Tannous&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jonsson, Mr. Carl&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harris, Mr. George&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Appleton, Mrs. Edward Dale (Charlotte Lamson)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;Flynn, Mr. John Irwin (&amp;quot;Irving&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kelly, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rush, Mr. Alfred George John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Patchett, Mr. George&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Garside, Miss. Ethel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Silvey, Mrs. William Baird (Alice Munger)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Caram, Mrs. Joseph (Maria Elias)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Jussila, Mr. Eiriik&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Christy, Miss. Julie Rachel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Thayer, Mrs. John Borland (Marian Longstreth Morris)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Downton, Mr. William James&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Ross, Mr. John Hugo&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Paulner, Mr. Uscher&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Taussig, Miss. Ruth&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Jarvis, Mr. John Denzil&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Frolicher-Stehli, Mr. Maxmillian&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Gilinski, Mr. Eliezer&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Murdlin, Mr. Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rintamaki, Mr. Matti&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Stephenson, Mrs. Walter Bertram (Martha Eustis)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Elsbury, Mr. William James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bourke, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Chapman, Mr. John Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Van Impe, Mr. Jean Baptiste&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Leitch, Miss. Jessie Wills&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Johnson, Mr. Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Boulos, Mr. Hanna&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Duff Gordon, Sir. Cosmo Edmund (&amp;quot;Mr Morgan&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Slabenoff, Mr. Petco&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harrington, Mr. Charles H&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Torber, Mr. Ernst William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Homer, Mr. Harry (&amp;quot;Mr E Haven&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lindell, Mr. Edvard Bengtsson&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Karaic, Mr. Milan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Daniel, Mr. Robert Williams&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Shutes, Miss. Elizabeth W&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Jardin, Mr. Jose Neto&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Murphy, Miss. Margaret Jane&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Horgan, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Brocklebank, Mr. William Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Herman, Miss. Alice&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Danbom, Mr. Ernst Gilbert&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Lobb, Mrs. William Arthur (Cordelia K Stanlick)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Becker, Miss. Marion Louise&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Gavey, Mr. Lawrence&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Yasbeck, Mr. Antoni&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Kimball, Mr. Edwin Nelson Jr&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Nakid, Mr. Sahid&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hansen, Mr. Henry Damsgaard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bowen, Mr. David John &amp;quot;Dai&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sutton, Mr. Frederick&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kirkland, Rev. Charles Leonard&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Longley, Miss. Gretchen Fiske&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Bostandyeff, Mr. Guentcho&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Connell, Mr. Patrick D&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Barkworth, Mr. Algernon Henry Wilson&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lundahl, Mr. Johan Svensson&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Stahelin-Maeglin, Dr. Max&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Parr, Mr. William Henry Marsh&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Skoog, Miss. Mabel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Davis, Miss. Mary&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Leinonen, Mr. Antti Gustaf&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Collyer, Mr. Harvey&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Panula, Mrs. Juha (Maria Emilia Ojala)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Thorneycroft, Mr. Percival&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Jensen, Mr. Hans Peder&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sagesser, Mlle. Emma&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Skoog, Miss. Margit Elizabeth&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Foo, Mr. Choong&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Baclini, Miss. Eugenie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Harper, Mr. Henry Sleeper&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Cor, Mr. Liudevit&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Simonius-Blumer, Col. Oberst Alfons&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Willey, Mr. Edward&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Stanley, Miss. Amy Zillah Elsie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mitkoff, Mr. Mito&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Doling, Miss. Elsie&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kalvik, Mr. Johannes Halvorsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;O\&#39;Leary, Miss. Hanora &amp;quot;Norah&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hegarty, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hickman, Mr. Leonard Mark&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Radeff, Mr. Alexander&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bourke, Mrs. John (Catherine)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Eitemiller, Mr. George Floyd&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Newell, Mr. Arthur Webster&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Frauenthal, Dr. Henry William&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;Badt, Mr. Mohamed&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Colley, Mr. Edward Pomeroy&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Coleff, Mr. Peju&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lindqvist, Mr. Eino William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hickman, Mr. Lewis&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Butler, Mr. Reginald Fenton&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Rommetvedt, Mr. Knud Paust&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cook, Mr. Jacob&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Taylor, Mrs. Elmer Zebley (Juliet Cummins Wright)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Brown, Mrs. Thomas William Solomon (Elizabeth Catherine Ford)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Davidson, Mr. Thornton&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Mitchell, Mr. Henry Michael&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Wilhelms, Mr. Charles&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Watson, Mr. Ennis Hastings&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Edvardsson, Mr. Gustaf Hjalmar&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sawyer, Mr. Frederick Charles&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Turja, Miss. Anna Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goodwin, Mrs. Frederick (Augusta Tyler)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Cardeza, Mr. Thomas Drake Martinez&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Peters, Miss. Katie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hassab, Mr. Hammad&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Olsvigen, Mr. Thor Anderson&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goodwin, Mr. Charles Edward&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Brown, Mr. Thomas William Solomon&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Laroche, Mr. Joseph Philippe Lemercier&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Panula, Mr. Jaako Arnold&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Dakic, Mr. Branko&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fischer, Mr. Eberhard Thelander&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Madill, Miss. Georgette Alexandra&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Dick, Mr. Albert Adrian&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Karun, Miss. Manca&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lam, Mr. Ali&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Saad, Mr. Khalil&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Weir, Col. John&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Chapman, Mr. Charles Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kelly, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mullens, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Thayer, Mr. John Borland&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Humblen, Mr. Adolf Mathias Nicolai Olsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Astor, Mrs. John Jacob (Madeleine Talmadge Force)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Silverthorne, Mr. Spencer Victor&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Barbara, Miss. Saiide&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gallagher, Mr. Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hansen, Mr. Henrik Juul&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Morley, Mr. Henry Samuel (&amp;quot;Mr Henry Marshall&amp;quot;)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kelly, Mrs. Florence &amp;quot;Fannie&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Calderhead, Mr. Edward Pennington&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Cleaver, Miss. Alice&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Moubarek, Master. Halim Gonios (&amp;quot;William George&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Mayne, Mlle. Berthe Antonine (&amp;quot;Mrs de Villiers&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Klaber, Mr. Herman&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Taylor, Mr. Elmer Zebley&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Larsson, Mr. August Viktor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Greenberg, Mr. Samuel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Soholt, Mr. Peter Andreas Lauritz Andersen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Endres, Miss. Caroline Louise&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Troutt, Miss. Edwina Celia &amp;quot;Winnie&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;McEvoy, Mr. Michael&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Johnson, Mr. Malkolm Joackim&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harper, Miss. Annie Jessie &amp;quot;Nina&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Jensen, Mr. Svend Lauritz&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Gillespie, Mr. William Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Hodges, Mr. Henry Price&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Chambers, Mr. Norman Campbell&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Oreskovic, Mr. Luka&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Renouf, Mrs. Peter Henry (Lillian Jefferys)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 3}, &#39;Mannion, Miss. Margareth&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bryhl, Mr. Kurt Arnold Gottfrid&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Ilmakangas, Miss. Pieta Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Allen, Miss. Elisabeth Walton&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Hassan, Mr. Houssein G N&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Knight, Mr. Robert J&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Berriman, Mr. William John&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Troupiansky, Mr. Moses Aaron&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Williams, Mr. Leslie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ford, Mrs. Edward (Margaret Ann Watson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Lesurer, Mr. Gustave J&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ivanoff, Mr. Kanio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nankoff, Mr. Minko&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hawksford, Mr. Walter James&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Cavendish, Mr. Tyrell William&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Ryerson, Miss. Susan Parker &amp;quot;Suzette&amp;quot;&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;McNamee, Mr. Neal&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Stranden, Mr. Juho&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Crosby, Capt. Edward Gifford&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Abbott, Mr. Rossmore Edward&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Sinkkonen, Miss. Anna&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Marvin, Mr. Daniel Warner&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Connaghton, Mr. Michael&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Wells, Miss. Joan&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Moor, Master. Meier&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Vande Velde, Mr. Johannes Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jonkoff, Mr. Lalio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Herman, Mrs. Samuel (Jane Laver)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Hamalainen, Master. Viljo&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Carlsson, Mr. August Sigfrid&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bailey, Mr. Percy Andrew&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Theobald, Mr. Thomas Leonard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Garfirth, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nirva, Mr. Iisakki Antino Aijo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Barah, Mr. Hanna Assi&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Carter, Mrs. William Ernest (Lucile Polk)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Eklund, Mr. Hans Linus&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hogeboom, Mrs. John C (Anna Andrews)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Brewe, Dr. Arthur Jackson&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Mangan, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moran, Mr. Daniel J&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Gronnestad, Mr. Daniel Danielsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lievens, Mr. Rene Aime&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jensen, Mr. Niels Peder&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mack, Mrs. (Mary)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Elias, Mr. Dibo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hocking, Mrs. Elizabeth (Eliza Needs)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Myhrman, Mr. Pehr Fabian Oliver Malkolm&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Tobin, Mr. Roger&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Emanuel, Miss. Virginia Ethel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Kilgannon, Mr. Thomas J&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Robert, Mrs. Edward Scott (Elisabeth Walton McMillan)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ayoub, Miss. Banoura&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Dick, Mrs. Albert Adrian (Vera Gillespie)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Long, Mr. Milton Clyde&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Johnston, Mr. Andrew G&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Ali, Mr. William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harmer, Mr. Abraham (David Lishin)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sjoblom, Miss. Anna Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rice, Master. George Hugh&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Dean, Master. Bertram Vere&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Guggenheim, Mr. Benjamin&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Keane, Mr. Andrew &amp;quot;Andy&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gaskell, Mr. Alfred&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sage, Miss. Stella Anna&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Hoyt, Mr. William Fisher&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Dantcheff, Mr. Ristiu&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Otter, Mr. Richard&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Leader, Dr. Alice (Farnham)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Osman, Mrs. Mara&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ibrahim Shawah, Mr. Yousseff&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Van Impe, Mrs. Jean Baptiste (Rosalie Paula Govaert)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Ponesell, Mr. Martin&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Collyer, Mrs. Harvey (Charlotte Annie Tate)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Carter, Master. William Thornton II&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Thomas, Master. Assad Alexander&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hedman, Mr. Oskar Arvid&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Johansson, Mr. Karl Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andrews, Mr. Thomas Jr&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Pettersson, Miss. Ellen Natalia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Meyer, Mr. August&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Chambers, Mrs. Norman Campbell (Bertha Griggs)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Alexander, Mr. William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lester, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Slemen, Mr. Richard James&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Andersson, Miss. Ebba Iris Alfrida&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Tomlin, Mr. Ernest Portage&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fry, Mr. Richard&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Heininen, Miss. Wendla Maria&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mallet, Mr. Albert&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Holm, Mr. John Fredrik Alexander&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Skoog, Master. Karl Thorsten&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Hays, Mrs. Charles Melville (Clara Jennings Gregg)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Lulic, Mr. Nikola&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Reuchlin, Jonkheer. John George&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Moor, Mrs. (Beila)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Panula, Master. Urho Abraham&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Flynn, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lam, Mr. Len&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mallet, Master. Andre&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;McCormack, Mr. Thomas Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Stone, Mrs. George Nelson (Martha Evelyn)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Yasbeck, Mrs. Antoni (Selini Alexander)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Richards, Master. George Sibley&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Saad, Mr. Amin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Augustsson, Mr. Albert&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Allum, Mr. Owen George&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Compton, Miss. Sara Rebecca&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Pasic, Mr. Jakob&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sirota, Mr. Maurice&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Chip, Mr. Chang&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Marechal, Mr. Pierre&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Alhomaki, Mr. Ilmari Rudolf&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mudd, Mr. Thomas Charles&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Serepeca, Miss. Augusta&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lemberopolous, Mr. Peter L&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Culumovic, Mr. Jeso&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Abbing, Mr. Anthony&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sage, Mr. Douglas Bullen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Markoff, Mr. Marin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harper, Rev. John&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goldenberg, Mrs. Samuel L (Edwiga Grabowska)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Andersson, Master. Sigvard Harald Elias&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Svensson, Mr. Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Boulos, Miss. Nourelain&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Lines, Miss. Mary Conover&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Carter, Mrs. Ernest Courtenay (Lilian Hughes)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Aks, Mrs. Sam (Leah Rosen)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Wick, Mrs. George Dennick (Mary Hitchcock)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Daly, Mr. Peter Denis &#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Baclini, Mrs. Solomon (Latifa Qurban)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Razi, Mr. Raihed&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hansen, Mr. Claus Peter&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Giles, Mr. Frederick Edward&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Swift, Mrs. Frederick Joel (Margaret Welles Barron)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Sage, Miss. Dorothy Edith &amp;quot;Dolly&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Gill, Mr. John William&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Bystrom, Mrs. (Karolina)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Duran y More, Miss. Asuncion&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Roebling, Mr. Washington Augustus II&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;van Melkebeke, Mr. Philemon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Johnson, Master. Harold Theodor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Balkic, Mr. Cerin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Beckwith, Mrs. Richard Leonard (Sallie Monypeny)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Carlsson, Mr. Frans Olof&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Vander Cruyssen, Mr. Victor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Abelson, Mrs. Samuel (Hannah Wizosky)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Najib, Miss. Adele Kiamie &amp;quot;Jane&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gustafsson, Mr. Alfred Ossian&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Petroff, Mr. Nedelio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Laleff, Mr. Kristo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Shelley, Mrs. William (Imanita Parrish Hall)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Markun, Mr. Johann&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Dahlberg, Miss. Gerda Ulrika&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Banfield, Mr. Frederick James&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sutehall, Mr. Henry Jr&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rice, Mrs. William (Margaret Norton)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Montvila, Rev. Juozas&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Graham, Miss. Margaret Edith&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Johnston, Miss. Catherine Helen &amp;quot;Carrie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Behr, Mr. Karl Howell&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Dooley, Mr. Patrick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1) quel était la classe de &amp;lsquo;Flynn, Mr. James&amp;rsquo; ?&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Flynn, Mr. James&#39;][&#39;Pclass&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) &amp;lsquo;Todoroff, Mr. Lalio&amp;rsquo; avait-il des proches à bord ?&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Todoroff, Mr. Lalio&#39;][&#39;SibSp&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) &amp;lsquo;Nicola-Yarred, Miss. Jamila&amp;rsquo; était elle à bord ?&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Nicola-Yarred, Miss. Jamila&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; &#39;Nicola-Yarred, Miss. Jamila&#39;  in dictTitanic
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) &amp;lsquo;Mamee, Mr. Hanna&amp;rsquo; étaient en 1ière classe et non en troisième classe. Merci de corriger cela&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Mamee, Mr. Hanna&#39;][&#39;Pclass&#39;] = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Mamee, Mr. Hanna&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5- Les boucles en Python - Cours</title>
      <link>/courses/formation_python/5-les_boucles/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/5-les_boucles/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-les-boucles-ou-contrôles-de-flux-en-python&#34;&gt;5- Les boucles ou contrôles de flux en Python:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre les structures conditionnelles&lt;/li&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une boucle&lt;/li&gt;
&lt;li&gt;Savoir créer une boucle While&lt;/li&gt;
&lt;li&gt;Savoir créer une boucle For&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-1-la-struture-conditionnelle-if-else&#34;&gt;5.1- La struture conditionnelle : If, else&lt;/h2&gt;

&lt;p&gt;Les structures de contrôle de flux peuvent être classées en structure conditionnelle et structure d&amp;rsquo;itération.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Les instructions conditionnelles sélectionnent un ensemble particulier d&amp;rsquo;instructions à exécuter en fonction d&amp;rsquo;une condition spécifiée.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;L&amp;rsquo;instruction de contrôle conditionnelle la plus populaire est «if else».&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cette contruction de langage nous permet de décrire des branches possibles que prendra notre programme python en fonction des conditions données:
                          Syntaxe IF:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                                 if condition:
                                     action 1
                                 elif:
                                     action 2
                                 else:
                                     action 3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ATTENTION: python travaille en indentation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/indentation.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On peut affecter des tâches multiples dans des structures conditionnelles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_variable = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (ma_variable &amp;gt; 5 ):
ma_variable = ma_variable + 1 
ma_variable    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (ma_variable &amp;gt; 5 ):
ma_variable = ma_variable + 1 
else:
ma_variable = ma_variable - 1 
ma_variable   

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (ma_variable &amp;gt; 5 ):
ma_variable = ma_variable + 1 
elif (ma_variable == 5) :
ma_variable = ma_variable * 10 
else:
ma_variable = ma_variable - 1 
ma_variable   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-2-la-boucle-for&#34;&gt;5.2- La boucle for&lt;/h2&gt;

&lt;p&gt;Une boucle vous permet de répéter des instructions selon vos besoins.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                         Syntaxe FOR:  
                                     items = [1,2,3]
                                     for i in items:
                                         print(i) # 1,2,3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attention une fois de plus à bien respecter l&amp;rsquo;indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for ma_valeur in ma_liste:
    print(ma_valeur*2)
    print(&amp;quot;---&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
---
4
---
6
---
8
---
10
---
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for ma_valeur in ma_liste:
    ma_nouvelle_variable=ma_valeur*2
    print(&amp;quot;La multiplication de 2 * %d = %d&amp;quot; % (ma_valeur,ma_nouvelle_variable))  # pour concatener du texte et une variable
                               # %d: python sait qu&#39;on va afficher un variable en entier
                               # %s: python sait qu&#39;on va afficher un variable mot 
                               # %f: python sait qu&#39;on va afficher une variable décimale
                               # on donne un tuple à afficher
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;La multiplication de 2 * 1 = 2
La multiplication de 2 * 2 = 4
La multiplication de 2 * 3 = 6
La multiplication de 2 * 4 = 8
La multiplication de 2 * 5 = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-3-la-boucle-while&#34;&gt;5.3- La boucle  while()&lt;/h2&gt;

&lt;p&gt;Même principe que la structure conditionnelle if mais répétée:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                        Syntaxe WHILE:
                                       run = True
                                       while run:
                                           print(&#39;running&#39;)
                                           if &amp;lt;condition&amp;gt;:
                                               run = False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tant que la condition est respectée, l&amp;rsquo;iterration dans la boucle continue.
Attention à bien respecter l&amp;rsquo;indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5]
compteur=0
while (compteur &amp;lt; 5):
    print(&amp;quot;Mon compteur = %d&amp;quot; % (compteur))
    print(&amp;quot;Ma valeur = %d&amp;quot; % (ma_liste[compteur]))   # dans le tuple, on veut la valeur de notre liste
    compteur=compteur+1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Mon compteur = 0
Ma valeur = 1
Mon compteur = 1
Ma valeur = 2
Mon compteur = 2
Ma valeur = 3
Mon compteur = 3
Ma valeur = 4
Mon compteur = 4
Ma valeur = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut imbriquer des conditions dans une boucle while. En reprennant la structure précédente, on va par exemple extraire uniquement les valeurs paires. Si modulo de la valeur = 0 =&amp;gt; nombre pair&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;compteur=0
compteur_resultat_vrai=0
while (compteur &amp;lt; 5):
    if ma_liste[compteur] % 2 == 0:
        print(&amp;quot;Mon compteur = %d&amp;quot; % (compteur))
        print(&amp;quot;Ma valeur = %d&amp;quot; % (ma_liste[compteur]))  
        compteur_resultat_vrai=compteur_resultat_vrai+1
    compteur=compteur+1
print(compteur_resultat_vrai)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Mon compteur = 1
Ma valeur = 2
Mon compteur = 3
Ma valeur = 4
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avec les structures while(), on peut facilement faire une boucle infine et faire planter son code.
i= 0
while i == 0:
    print(&amp;lsquo;boucle infiniiiiiiie&amp;rsquo;)&lt;/p&gt;

&lt;h2 id=&#34;5-4-création-de-listes-de-chiffres-la-boucle-range&#34;&gt;5.4- Création de listes de chiffres: la boucle  range()&lt;/h2&gt;

&lt;p&gt;Si on a besoin d&amp;rsquo;avoir une liste de chiffres et qu&amp;rsquo;on souhaite éviter une structure while(), il est possible de créer une boucle facilement avec range():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5):
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
1
2
3
4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(2,7):
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
3
4
5
6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(0,10,2):
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
2
4
6
8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5,-5,-1):
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
4
3
2
1
0
-1
-2
-3
-4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produits = [&#39;smartphone&#39;,&#39;chaussures&#39;,&#39;console&#39;]
caParJour = [10000,15000,12000]

for i in range(len(produits)):
    print(produits[i])
    print(caParJour[i])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;smartphone
10000
chaussures
15000
console
12000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-5-interrompre-une-boucle&#34;&gt;5.5- Interrompre une boucle&lt;/h2&gt;

&lt;p&gt;Il est possible de stopper une boucle avec la commande break.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5,6,7,8,9,10]
for i in ma_liste:
     if i &amp;gt; 5:
             print(&amp;quot;On stoppe la boucle: les valeurs qui suivent sont supérieures à 5.&amp;quot;)
             break
     print(i)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
2
3
4
5
On stoppe la boucle: les valeurs qui suivent sont supérieures à 5.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produits = [&#39;smartphone&#39;,&#39;chaussures&#39;,&#39;console&#39;]
for i in produits:
    if i ==&#39;chaussures&#39;:
        break
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;smartphone
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut  lire la suite du code et passer directement à la boucle suivante avec continue&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#ne pas lire la suite du code et passer directement à la boucle suivante avec continue
for i in produits:
    if i ==&#39;chaussures&#39;:
        continue
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;smartphone
console
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5- Les boucles en Python - Exercice</title>
      <link>/courses/formation_python/5-les_boucles-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/5-les_boucles-exercice/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h1&gt; TP : Manipuler une liste contenant les prix de 58 maisons&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;    1- Créer de la liste &amp;quot;prix_de_58_maisons&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;prix_de_58_maisons=list(range(125000,700000,10000))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    2- Combien de maisons ont un prix supérieur ou égal à 300000 euros ?

    3- Combien de maisons ont un prix compris entre 250000 et 400000 euros ?

    4- Combien de maisons ont un prix qui n’est pas supérieur à 600000 euros ?

    5- Combien de maisons ont un prix inférieur à 150000 euros ou supérieur à 650000 euros ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Indice: parcourir la liste avec une boucle, utiliser des instructions de condition if et un compteur pour compter les résultats vrais.&lt;/p&gt;

&lt;p&gt;1 Création de la liste &amp;ldquo;prix_de_58_maisons&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;prix_de_58_maisons=list(range(125000,700000,10000))  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2. Combien de maisons ont un prix supérieur à 300000 euros ?
# on définit notre compteur
nombre_maisons=0
for prix in prix_de_58_maisons:    # on va parcours notre liste avec une boucle for 
    if prix &amp;gt;= 300000:             # si notre condition est rencontrée, on incrémente notre compteur 
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Le nombre de maisons avec un prix supérieur ou égal à 300000 euros est de : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le nombre de maisons avec un prix supérieur ou égal à 300000 euros est de : 40
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2. Combien de maisons ont un prix compris entre 250000 et 400000 euros ?
# on définit notre compteur
nombre_maisons=0
for prix in prix_de_58_maisons:  # on va parcours notre liste avec une boucle for    
    if (prix &amp;gt;= 250000) and (prix &amp;lt;= 400000): # si notre condition est rencontrée, on incrémente notre compteur
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Le nombre de maisons qui ont un prix compris entre 250000 et 400000 euros est de : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le nombre de maisons qui ont un prix compris entre 250000 et 400000 euros est de : 15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3. Combien de maisons ont un prix qui n&#39;est pas supérieur à 600000 euros ?
nombre_maisons=0
for prix in prix_de_58_maisons:
    if not(prix &amp;gt; 600000):
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Le nombre de maisons qui ont un prix qui n&#39;est pas supérieur à 600000 euros est de : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le nombre de maisons qui ont un prix qui n&#39;est pas supérieur à 600000 euros est de : 48
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 4. Combien de maisons ont un prix inférieur à 150000 euros OU supérieur à 650000 euros ?
nombre_maisons=0
for prix in prix_de_58_maisons:
    if (prix &amp;lt; 150000) or (prix &amp;gt; 650000):
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Le nombre de maisons qui ont un prix inférieur à 150000 euros OU supérieur à 650000 euros est de : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le nombre de maisons qui ont un prix inférieur à 150000 euros OU supérieur à 650000 euros est de : 8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>6- Les fonctions en Python - Cours</title>
      <link>/courses/formation_python/6-les_fonctions/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/6-les_fonctions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-fonctions-en-python&#34;&gt;Les fonctions en Python:&lt;/h2&gt;

&lt;h2 id=&#34;6-1-les-librairies&#34;&gt;6.1- Les librairies:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une librairie&lt;/li&gt;
&lt;li&gt;Importer une librairie&lt;/li&gt;
&lt;li&gt;Importer un module précis d&amp;rsquo;une librairie&lt;/li&gt;
&lt;li&gt;Utiliser les alias&lt;/li&gt;
&lt;li&gt;Utiliser la librairie math&lt;/li&gt;
&lt;li&gt;Installer, mettre à jour et vérifier la config d&amp;rsquo;une librairie avec PIP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-1-1-les-bibliothèques-python&#34;&gt;6.1.1-  Les bibliothèques Python:&lt;/h2&gt;

&lt;p&gt;Pour faciliter le traitement, la manipulation et la visualisation des données, Python possède de nombreuses librairies.&lt;/p&gt;

&lt;p&gt;Les bibliothèques de Python permettent d&amp;rsquo;importer des codes et fonctions qui faciliteront nos analyses.&lt;/p&gt;

&lt;p&gt;Voici les bibliothèques les plus populaires:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;numpy, math: mathématique ou calculs scientifiques : &lt;a href=&#34;http://www.numpy.org/&#34; target=&#34;_blank&#34;&gt;http://www.numpy.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pandas: manipulations de données: &lt;a href=&#34;http://pandas.pydata.org/&#34; target=&#34;_blank&#34;&gt;http://pandas.pydata.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;matplotlib, seaborn, Plotly: visualisation des données: &lt;a href=&#34;https://matplotlib.org/&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;scikit-learn: machine learning: &lt;a href=&#34;https://scikit-learn.org&#34; target=&#34;_blank&#34;&gt;https://scikit-learn.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Datetime: formatage de dates:&lt;a href=&#34;https://docs.python.org/2/library/datetime.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/library/datetime.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keras, Tensorflow: deep learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour importer une librairie sous Python, on utilise la fonction : &lt;b&gt;import&lt;/b&gt; + nom_bibliothèque&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;liste_1=[1,2,3,4,5,6,7,8,9,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;liste_1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous allons importer la librairie mathématie Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En dehors des tutoriels en ligne, chaque librairie importée sous python possède une aide.&lt;/p&gt;

&lt;p&gt;Pour savoir ce que contient une librairie, on utilise la fonction: dir()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Exemple: dir(numpy)    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(numpy)   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une fois une fonction ciblée, La fonction &lt;b&gt;help()&lt;/b&gt; permet d&amp;rsquo;obtenir une aide sur une fonction de la librairie&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Exemple: help(numpy.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(numpy.mean)    # pour obtenir une aide sur une fonction d&#39;une librairie         
# on peut distinguer les arguments optionnels et obligatoires
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Help on function mean in module numpy:

mean(a, axis=None, dtype=None, out=None, keepdims=&amp;lt;no value&amp;gt;)
    Compute the arithmetic mean along the specified axis.

    Returns the average of the array elements.  The average is taken over
    the flattened array by default, otherwise over the specified axis.
    `float64` intermediate and return values are used for integer inputs.

    Parameters
    ----------
    a : array_like
        Array containing numbers whose mean is desired. If `a` is not an
        array, a conversion is attempted.
    axis : None or int or tuple of ints, optional
        Axis or axes along which the means are computed. The default is to
        compute the mean of the flattened array.

        .. versionadded:: 1.7.0

        If this is a tuple of ints, a mean is performed over multiple axes,
        instead of a single axis or all the axes as before.
    dtype : data-type, optional
        Type to use in computing the mean.  For integer inputs, the default
        is `float64`; for floating point inputs, it is the same as the
        input dtype.
    out : ndarray, optional
        Alternate output array in which to place the result.  The default
        is ``None``; if provided, it must have the same shape as the
        expected output, but the type will be cast if necessary.
        See `doc.ufuncs` for details.

    keepdims : bool, optional
        If this is set to True, the axes which are reduced are left
        in the result as dimensions with size one. With this option,
        the result will broadcast correctly against the input array.

        If the default value is passed, then `keepdims` will not be
        passed through to the `mean` method of sub-classes of
        `ndarray`, however any non-default value will be.  If the
        sub-class&#39; method does not implement `keepdims` any
        exceptions will be raised.

    Returns
    -------
    m : ndarray, see dtype parameter above
        If `out=None`, returns a new array containing the mean values,
        otherwise a reference to the output array is returned.

    See Also
    --------
    average : Weighted average
    std, var, nanmean, nanstd, nanvar

    Notes
    -----
    The arithmetic mean is the sum of the elements along the axis divided
    by the number of elements.

    Note that for floating-point input, the mean is computed using the
    same precision the input has.  Depending on the input data, this can
    cause the results to be inaccurate, especially for `float32` (see
    example below).  Specifying a higher-precision accumulator using the
    `dtype` keyword can alleviate this issue.

    By default, `float16` results are computed using `float32` intermediates
    for extra precision.

    Examples
    --------
    &amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2], [3, 4]])
    &amp;gt;&amp;gt;&amp;gt; np.mean(a)
    2.5
    &amp;gt;&amp;gt;&amp;gt; np.mean(a, axis=0)
    array([ 2.,  3.])
    &amp;gt;&amp;gt;&amp;gt; np.mean(a, axis=1)
    array([ 1.5,  3.5])

    In single precision, `mean` can be inaccurate:

    &amp;gt;&amp;gt;&amp;gt; a = np.zeros((2, 512*512), dtype=np.float32)
    &amp;gt;&amp;gt;&amp;gt; a[0, :] = 1.0
    &amp;gt;&amp;gt;&amp;gt; a[1, :] = 0.1
    &amp;gt;&amp;gt;&amp;gt; np.mean(a)
    0.54999924

    Computing the mean in float64 is more accurate:

    &amp;gt;&amp;gt;&amp;gt; np.mean(a, dtype=np.float64)
    0.55000000074505806
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numpy.mean(liste_1)  # nom de la biliothèque + nom de la fonction pour appeller la fonction 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numpy.max(liste_1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from math import sqrt 
sqrt(25)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from math import pi as p
p
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.141592653589793
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-1-2-la-librairie-pip&#34;&gt;6.1.2-  La librairie PIP:&lt;/h2&gt;

&lt;p&gt;PiP est un gestionnaire de librairie très important à connaitre. il permet d&amp;rsquo;installer, de désinstaler et de mettre à jour vos librairies&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;! pip list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Package                            Version    
---------------------------------- -----------
affine                             2.3.0      
alabaster                          0.7.12     
anaconda-client                    1.7.2      
anaconda-navigator                 1.9.12     
anaconda-project                   0.8.2      
asn1crypto                         0.24.0     
astroid                            2.2.5      
...   
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;! pip show pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Name: pandas
Version: 0.24.2
Summary: Powerful data structures for data analysis, time series, and statistics
Home-page: http://pandas.pydata.org
Author: None
Author-email: None
License: BSD
Location: d:\utilisateurs\guillaume\anaconda3\lib\site-packages
Requires: python-dateutil, pytz, numpy
Required-by: xshape, xarray, seaborn, geopandas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour installer une librairie:
! pip install plotly
Pour mettre à jour une librairie:
! pip install plotly &amp;ndash;upgrade&lt;/p&gt;

&lt;h2 id=&#34;6-2-les-fonctions&#34;&gt;6.2- Les fonctions:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une fonction&lt;/li&gt;
&lt;li&gt;Créer sa première fonction&lt;/li&gt;
&lt;li&gt;Intégrer des paramètres à une fonction&lt;/li&gt;
&lt;li&gt;Ajouter des paramètres optionnels&lt;/li&gt;
&lt;li&gt;Ajouter une nomenclature à vos paramètres&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-2-1-les-fonctions-natives&#34;&gt;6.2.1- Les fonctions natives:&lt;/h2&gt;

&lt;p&gt;Il existe des fonctions natives à python (ou built-in). Elles n&amp;rsquo;ont donc pas besoin d&amp;rsquo;être importées.&lt;/p&gt;

&lt;p&gt;Voici une liste de ces fonctions: &lt;a href=&#34;https://docs.python.org/3/library/functions.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/3/library/functions.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;en-voici-quelques-exemples&#34;&gt;En voici quelques exemples:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;abs(-1)  # abs(x) Retourne une valeur absolue 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len([1,2,3]) # len(s) Retourne le nombre d&#39;items d&#39;un objet.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max([1,3,2,6,99,1])    #Retourne la valeur la plus élévée pour max() et la plus basse pour min()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;99
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;round(1.2)  # Arrondi un nombre.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = [&amp;quot;olivier&amp;quot;, &amp;quot;bruce&amp;quot;, &amp;quot;john&amp;quot;]
b = [&amp;quot;engel&amp;quot;, &amp;quot;wayne&amp;quot;, &amp;quot;Wayne&amp;quot;]
zip(a,b)                         # Permet de regrouper sous la forme d&#39;un tuple les items de listes.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;zip at 0x5fd5048&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-2-création-de-notre-première-fonction-en-python&#34;&gt;6.2.2- Création de notre première fonction en python:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;une fonction permet de rendre notre code plus fluide et lisible:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Syntaxe: pour écrire une fonction, on commence par le mot clef Python def()&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;def sum(a, b):        # on definit les paramètres
    return a+b       # mot clef return pour retourner la variable résultat&lt;br /&gt;
- On ne précise pas le type de retour, il est dynamiquement résolu au moment de l&amp;rsquo;exécution du programme.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Appel de la fonction : result = sum(12,4)   # result = 16&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def ma_fonction():
print(&amp;quot;ma première fonction&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_fonction()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ma première fonction&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-2-3-les-paramètres-des-fonctions&#34;&gt;6.2.3- Les paramètres des fonctions:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def bienvenue(userName):
    print(&#39;Bienvenue &#39;+userName)

nom = input(&#39;votre nom:&#39;)
bienvenue(nom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;votre nom:Guillaume
Bienvenue Guillaume
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def bienvenue(userName):
    print(&#39;Bienvenue &#39;+userName+ &#39; ! &#39; )
    humeur = input(&#39;comment allez-vous ? &#39;)
    print(&#39;votre humeur : &#39;+humeur)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nom = input(&#39;votre nom&#39;)
bienvenue(nom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;votre nomGuillaume 
Bienvenue Guillaume  ! 
comment allez-vous ? Bien 
votre humeur : Bien 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-4-retourner-une-ou-plusieurs-valeurs-avec-une-fonction&#34;&gt;6.2.4- Retourner une ou plusieurs valeurs avec une fonction:&lt;/h2&gt;

&lt;p&gt;Pour retourner une valeur:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calculPrixTTC(prixht,TVA):
    prixttc = prixht*(1+TVA)
    return prixttc

prixPdt = calculPrixTTC(10,0.20)
prixPdt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;12.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour retourner plusieurs valeurs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calculPrixTTC(prixht,TVA):
    prixttc = prixht*(1+TVA)
    coutTVA = prixttc - prixht
    return prixttc, coutTVA

prixPdt = calculPrixTTC(20,0.20)
prixPdt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(24.0, 4.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut stocker ce retour de valeurs dans deux variables disctinctes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;prixPdt, coutTVA = calculPrixTTC(20,0.20)
print(prixPdt)
print(coutTVA)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;24.0
4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-5-les-options-sur-les-paramètres&#34;&gt;6.2.5- Les options sur les paramètres:&lt;/h2&gt;

&lt;p&gt;Si on oublie un paramètre dans une fonction à deux paramètres :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# et si on oubli un paramètre ?
test = calculPrixTTC(20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-25-6633a6f65415&amp;gt; in &amp;lt;module&amp;gt;
      1 # et si on oubli un paramètre ?
----&amp;gt; 2 test = calculPrixTTC(20)


TypeError: calculPrixTTC() missing 1 required positional argument: &#39;TVA&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python supporte pour cela  les arguments mot clef (keyword argument).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                def sum(a, b):        # on definit les paramètres 
                    return a+b       # mot clef return pour retourner la variable résultat 
                result = sum(12,b=4)
            -----------------------------
                def sum(a, b=4):        # on definit les paramètres 
                      return a+b       # mot clef return pour retourner la variable résultat
                result = sum(12)                    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calculPrixTTC(prixht,TVA=0.20):
    prixttc = prixht*(1+TVA)
    coutTVA = prixttc - prixht
    return prixttc, coutTVA

test1 = calculPrixTTC(20)
print(test1)
test2 = calculPrixTTC(20,0.05)
print(test2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(24.0, 4.0)
(21.0, 1.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-6-définition-d-args&#34;&gt;6.2.6- Définition d&amp;rsquo;*args:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Syntaxe spéciale en python qui permet de gérer un nombre de paramètres variable en appel d&amp;rsquo;une fonction&lt;/li&gt;
&lt;li&gt;C&amp;rsquo;est le * qui compte&lt;/li&gt;
&lt;li&gt;args est une convention&lt;/li&gt;
&lt;li&gt;*args est une liste de paramètres contenant les paramètres d&amp;rsquo;une fonction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntaxe *args:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def print_ingredients(*args):
            for ingredient in args: 
                print(ingredient)

        print_ingredients(&#39;Tomatoes&#39;)
        print_ingredients(&#39;Tomatoes&#39;,Banana)
        print_ingredients(&#39;Tomatoes&#39;,Banana,apple)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sum(*args):
    total = 0 
    for number in args: 
        total += number 
    print(total)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(2,3)
sum(2,3,10,90,23)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
128
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def second_sum(*args):    
    def real_sum(*nums):
        total=0
        for number in nums:
            total += number
        return total
    
    print(real_sum(*args))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;second_sum(10,20,30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;60
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-7-définition-d-kwargs&#34;&gt;6.2.7- Définition d&amp;rsquo;**kwargs:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comme *args, mais pour les arguments mot-clé (keyword arguments)&lt;/li&gt;
&lt;li&gt;C&amp;rsquo;est le * qui compte&lt;/li&gt;
&lt;li&gt;**kwargs est un dictionnaire python contenant les clés/valeurs des paramètres d&amp;rsquo;une fonction&lt;/li&gt;
&lt;li&gt;il doit toujours être présent en dernier dans la liste des paramètres d&amp;rsquo;une fonction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntaxe **kwargs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def print_languages(**args):
            for language, definition in kwargs.items():
                print(&#39;{} is {}&#39;.format(language, definition))  

        print_languages(Python=&#39;awesome&#39;)
        print_languages(Python=&#39;awesome&#39;,Java=&#39;verbose&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def capitals(**kwargs):
    for country, capital in kwargs.items():
        print(&amp;quot;The capital of {} in {}&amp;quot;.format(country, capital))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;capitals(France = &#39;Paris&#39;, Germany=&#39;Berlin&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The capital of France in Paris
The capital of Germany in Berlin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def capitals(title, ending=&#39;&#39;,  **kwargs):
    print(title)
    for country, capital in kwargs.items():
        print(&amp;quot;The capital of {} in {}&amp;quot;.format(country, capital))
    if ending:
        print(ending)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;capitals(&amp;quot;List of countries&amp;quot;,
    France = &#39;Paris&#39;, Germany=&#39;Berlin&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;List of countries
The capital of France in Paris
The capital of Germany in Berlin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;keywords = {&#39;france&#39;: &#39;Paris&#39;, &#39;Germany&#39; : &#39;Allemage&#39;}
capitals(&amp;quot;List of countries 2 &amp;quot;, **keywords)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;List of countries 2 
The capital of france in Paris
The capital of Germany in Allemage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-3-importer-ses-propres-fonctions&#34;&gt;6.3-Importer ses propres fonctions:&lt;/h2&gt;

&lt;p&gt;Les modules font référence à un fichier contenant des instructions et des définitions Python.&lt;/p&gt;

&lt;p&gt;Un fichier contenant du code Python, par exemple: example.py, est appelé un module et son nom de module serait un exemple.&lt;/p&gt;

&lt;p&gt;Nous utilisons des modules pour décomposer de gros programmes en petits fichiers gérables et organisés. De plus, les modules assurent la réutilisation du code.&lt;/p&gt;

&lt;p&gt;Nous pouvons définir nos fonctions les plus utilisées dans un module et l&amp;rsquo;importer, au lieu de copier leurs définitions dans différents programmes.&lt;/p&gt;

&lt;p&gt;Ici, nous avons défini différentes fonctions à l&amp;rsquo;intérieur d&amp;rsquo;un module nommé my_functions.&lt;/p&gt;

&lt;p&gt;Nous utilisons le mot-clé import pour importer notre module puis nos fonctions. Pour importer notre exemple de module précédemment défini, nous tapons ce qui suit dans l&amp;rsquo;invite Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import my_functions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;def addition(a, b):
   &amp;ldquo;&amp;rdquo;&amp;ldquo;This program adds two
   numbers and return the result&amp;rdquo;&amp;ldquo;&amp;rdquo;
   result = a + b
   return result&lt;/p&gt;

&lt;p&gt;def substraction(a, b):
   &amp;ldquo;&amp;rdquo;&amp;ldquo;This program subs two
   numbers and return the result&amp;rdquo;&amp;ldquo;&amp;rdquo;
   result = a - b
   return result&lt;/p&gt;

&lt;p&gt;def multiplication(a, b):
   &amp;ldquo;&amp;rdquo;&amp;ldquo;This program multiplies two
   numbers and return the result&amp;rdquo;&amp;ldquo;&amp;rdquo;
   result = a * b
   return result&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(my_functions)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;__builtins__&#39;,
 &#39;__cached__&#39;,
 &#39;__doc__&#39;,
 &#39;__file__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;addition&#39;,
 &#39;multiplication&#39;,
 &#39;substraction&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En utilisant le nom du module, nous pouvons accéder à la fonction en utilisant le point. opérateur. Par exemple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_functions.substraction(4,6)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(my_functions.substraction)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Help on function substraction in module my_functions:

substraction(a, b)
    This program subs two
    numbers and return the result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>6- Les fonctions en Python - Exercice</title>
      <link>/courses/formation_python/6-les_fonctions-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/6-les_fonctions-exercice/</guid>
      <description>&lt;h1&gt;TP : Analyse des données brutes des passagers du Titanic (3/3)&lt;/h1&gt;

&lt;p&gt;Dans ce TP, l&amp;rsquo;objectif va être de créer pas à pas une fonction donnant le pourcentage de survie pour un certain type de passagers !
Exemple : quel est le taux de survie des hommes par rapport à celui des femmes ? &lt;br&gt; &lt;br&gt;
Pour cela, nous allons utiliser les listes vues lors d&amp;rsquo;une session précédente. &lt;br&gt;
Pour rappel toutes les listes font la même longueur et correspondent au nombre de passagers.&lt;br&gt;
Chaque numéros d&amp;rsquo;emplacements dans les listes correspondent à la même personne. &lt;br&gt; Exemple ci-dessous :
Heikkinen, Miss. Laina était une femme de 35 ans, qui a survecue.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;survided = [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]
age = [22.0, 38.0, 26.0, 35.0, 35.0, 23.0, 54.0, 2.0, 27.0, 14.0, 4.0, 58.0, 20.0, 39.0, 14.0, 55.0, 2.0, 23.0, 31.0, 23.0, 35.0, 34.0, 15.0, 28.0, 8.0, 38.0, 23.0, 19.0, 23.0, 23.0, 40.0, 23.0, 23.0, 66.0, 28.0, 42.0, 23.0, 21.0, 18.0, 14.0, 40.0, 27.0, 23.0, 3.0, 19.0, 23.0, 23.0, 23.0, 23.0, 18.0, 7.0, 21.0, 49.0, 29.0, 65.0, 23.0, 21.0, 28.5, 5.0, 11.0, 22.0, 38.0, 45.0, 4.0, 23.0, 23.0, 29.0, 19.0, 17.0, 26.0, 32.0, 16.0, 21.0, 26.0, 32.0, 25.0, 23.0, 23.0, 0.82999999999999996, 30.0, 22.0, 29.0, 23.0, 28.0, 17.0, 33.0, 16.0, 23.0, 23.0, 24.0, 29.0, 20.0, 46.0, 26.0, 59.0, 23.0, 71.0, 23.0, 34.0, 34.0, 28.0, 23.0, 21.0, 33.0, 37.0, 28.0, 21.0, 23.0, 38.0, 23.0, 47.0, 14.5, 22.0, 20.0, 17.0, 21.0, 70.5, 29.0, 24.0, 2.0, 21.0, 23.0, 32.5, 32.5, 54.0, 12.0, 23.0, 24.0, 23.0, 45.0, 33.0, 20.0, 47.0, 29.0, 25.0, 23.0, 19.0, 37.0, 16.0, 24.0, 23.0, 22.0, 24.0, 19.0, 18.0, 19.0, 27.0, 9.0, 36.5, 42.0, 51.0, 22.0, 55.5, 40.5, 23.0, 51.0, 16.0, 30.0, 23.0, 23.0, 44.0, 40.0, 26.0, 17.0, 1.0, 9.0, 23.0, 45.0, 23.0, 28.0, 61.0, 4.0, 1.0, 21.0, 56.0, 18.0, 23.0, 50.0, 30.0, 36.0, 23.0, 23.0, 9.0, 1.0, 4.0, 23.0, 23.0, 45.0, 40.0, 36.0, 32.0, 19.0, 19.0, 3.0, 44.0, 58.0, 23.0, 42.0, 23.0, 24.0, 28.0, 23.0, 34.0, 45.5, 18.0, 2.0, 32.0, 26.0, 16.0, 40.0, 24.0, 35.0, 22.0, 30.0, 23.0, 31.0, 27.0, 42.0, 32.0, 30.0, 16.0, 27.0, 51.0, 23.0, 38.0, 22.0, 19.0, 20.5, 18.0, 23.0, 35.0, 29.0, 59.0, 5.0, 24.0, 23.0, 44.0, 8.0, 19.0, 33.0, 23.0, 23.0, 29.0, 22.0, 30.0, 44.0, 25.0, 24.0, 37.0, 54.0, 23.0, 29.0, 62.0, 30.0, 41.0, 29.0, 23.0, 30.0, 35.0, 50.0, 23.0, 3.0, 52.0, 40.0, 23.0, 36.0, 16.0, 25.0, 58.0, 35.0, 23.0, 25.0, 41.0, 37.0, 23.0, 63.0, 45.0, 23.0, 7.0, 35.0, 65.0, 28.0, 16.0, 19.0, 23.0, 33.0, 30.0, 22.0, 42.0, 22.0, 26.0, 19.0, 36.0, 24.0, 24.0, 23.0, 23.5, 2.0, 23.0, 50.0, 23.0, 23.0, 19.0, 23.0, 23.0, 0.92000000000000004, 23.0, 17.0, 30.0, 30.0, 24.0, 18.0, 26.0, 28.0, 43.0, 26.0, 24.0, 54.0, 31.0, 40.0, 22.0, 27.0, 30.0, 22.0, 23.0, 36.0, 61.0, 36.0, 31.0, 16.0, 23.0, 45.5, 38.0, 16.0, 23.0, 23.0, 29.0, 41.0, 45.0, 45.0, 2.0, 24.0, 28.0, 25.0, 36.0, 24.0, 40.0, 23.0, 3.0, 42.0, 23.0, 23.0, 15.0, 25.0, 23.0, 28.0, 22.0, 38.0, 23.0, 23.0, 40.0, 29.0, 45.0, 35.0, 23.0, 30.0, 60.0, 23.0, 23.0, 24.0, 25.0, 18.0, 19.0, 22.0, 3.0, 23.0, 22.0, 27.0, 20.0, 19.0, 42.0, 1.0, 32.0, 35.0, 23.0, 18.0, 1.0, 36.0, 23.0, 17.0, 36.0, 21.0, 28.0, 23.0, 24.0, 22.0, 31.0, 46.0, 23.0, 28.0, 39.0, 26.0, 21.0, 28.0, 20.0, 34.0, 51.0, 3.0, 21.0, 23.0, 23.0, 23.0, 33.0, 23.0, 44.0, 23.0, 34.0, 18.0, 30.0, 10.0, 23.0, 21.0, 29.0, 28.0, 18.0, 23.0, 28.0, 19.0, 23.0, 32.0, 28.0, 23.0, 42.0, 17.0, 50.0, 14.0, 21.0, 24.0, 64.0, 31.0, 45.0, 20.0, 25.0, 28.0, 23.0, 4.0, 13.0, 34.0, 5.0, 52.0, 36.0, 23.0, 30.0, 49.0, 23.0, 29.0, 65.0, 23.0, 50.0, 23.0, 48.0, 34.0, 47.0, 48.0, 23.0, 38.0, 23.0, 56.0, 23.0, 0.75, 23.0, 38.0, 33.0, 23.0, 22.0, 23.0, 34.0, 29.0, 22.0, 2.0, 9.0, 23.0, 50.0, 63.0, 25.0, 23.0, 35.0, 58.0, 30.0, 9.0, 23.0, 21.0, 55.0, 71.0, 21.0, 23.0, 54.0, 23.0, 25.0, 24.0, 17.0, 21.0, 23.0, 37.0, 16.0, 18.0, 33.0, 23.0, 28.0, 26.0, 29.0, 23.0, 36.0, 54.0, 24.0, 47.0, 34.0, 23.0, 36.0, 32.0, 30.0, 22.0, 23.0, 44.0, 23.0, 40.5, 50.0, 23.0, 39.0, 23.0, 2.0, 23.0, 17.0, 23.0, 30.0, 7.0, 45.0, 30.0, 23.0, 22.0, 36.0, 9.0, 11.0, 32.0, 50.0, 64.0, 19.0, 23.0, 33.0, 8.0, 17.0, 27.0, 23.0, 22.0, 22.0, 62.0, 48.0, 23.0, 39.0, 36.0, 23.0, 40.0, 28.0, 23.0, 23.0, 24.0, 19.0, 29.0, 23.0, 32.0, 62.0, 53.0, 36.0, 23.0, 16.0, 19.0, 34.0, 39.0, 23.0, 32.0, 25.0, 39.0, 54.0, 36.0, 23.0, 18.0, 47.0, 60.0, 22.0, 23.0, 35.0, 52.0, 47.0, 23.0, 37.0, 36.0, 23.0, 49.0, 23.0, 49.0, 24.0, 23.0, 23.0, 44.0, 35.0, 36.0, 30.0, 27.0, 22.0, 40.0, 39.0, 23.0, 23.0, 23.0, 35.0, 24.0, 34.0, 26.0, 4.0, 26.0, 27.0, 42.0, 20.0, 21.0, 21.0, 61.0, 57.0, 21.0, 26.0, 23.0, 80.0, 51.0, 32.0, 23.0, 9.0, 28.0, 32.0, 31.0, 41.0, 23.0, 20.0, 24.0, 2.0, 23.0, 0.75, 48.0, 19.0, 56.0, 23.0, 23.0, 23.0, 18.0, 21.0, 23.0, 18.0, 24.0, 23.0, 32.0, 23.0, 58.0, 50.0, 40.0, 47.0, 36.0, 20.0, 32.0, 25.0, 23.0, 43.0, 23.0, 40.0, 31.0, 70.0, 31.0, 23.0, 18.0, 24.5, 18.0, 43.0, 36.0, 23.0, 27.0, 20.0, 14.0, 60.0, 25.0, 14.0, 19.0, 18.0, 15.0, 31.0, 4.0, 23.0, 25.0, 60.0, 52.0, 44.0, 23.0, 49.0, 42.0, 18.0, 35.0, 18.0, 25.0, 26.0, 39.0, 45.0, 42.0, 22.0, 23.0, 24.0, 23.0, 48.0, 29.0, 52.0, 19.0, 38.0, 27.0, 23.0, 33.0, 6.0, 17.0, 34.0, 50.0, 27.0, 20.0, 30.0, 23.0, 25.0, 25.0, 29.0, 11.0, 23.0, 23.0, 23.0, 28.5, 48.0, 35.0, 23.0, 23.0, 23.0, 36.0, 21.0, 24.0, 31.0, 70.0, 16.0, 30.0, 19.0, 31.0, 4.0, 6.0, 33.0, 23.0, 48.0, 0.67000000000000004, 28.0, 18.0, 34.0, 33.0, 23.0, 41.0, 20.0, 36.0, 16.0, 51.0, 23.0, 30.5, 23.0, 32.0, 24.0, 48.0, 57.0, 23.0, 54.0, 18.0, 23.0, 5.0, 23.0, 43.0, 13.0, 17.0, 29.0, 23.0, 25.0, 25.0, 18.0, 8.0, 1.0, 46.0, 23.0, 16.0, 23.0, 23.0, 25.0, 39.0, 49.0, 31.0, 30.0, 30.0, 34.0, 31.0, 11.0, 0.41999999999999998, 27.0, 31.0, 39.0, 18.0, 39.0, 33.0, 26.0, 39.0, 35.0, 6.0, 30.5, 23.0, 23.0, 31.0, 43.0, 10.0, 52.0, 27.0, 38.0, 27.0, 2.0, 23.0, 23.0, 1.0, 23.0, 62.0, 15.0, 0.82999999999999996, 23.0, 23.0, 18.0, 39.0, 21.0, 23.0, 32.0, 23.0, 20.0, 16.0, 30.0, 34.5, 17.0, 42.0, 23.0, 35.0, 28.0, 23.0, 4.0, 74.0, 9.0, 16.0, 44.0, 18.0, 45.0, 51.0, 24.0, 23.0, 41.0, 21.0, 48.0, 23.0, 24.0, 42.0, 27.0, 31.0, 23.0, 4.0, 26.0, 47.0, 33.0, 47.0, 28.0, 15.0, 20.0, 19.0, 23.0, 56.0, 25.0, 33.0, 22.0, 28.0, 25.0, 39.0, 27.0, 19.0, 23.0, 26.0, 32.0]
name = [&#39;Braund, Mr. Owen Harris&#39;, &#39;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&#39;, &#39;Heikkinen, Miss. Laina&#39;, &#39;Futrelle, Mrs. Jacques Heath (Lily May Peel)&#39;, &#39;Allen, Mr. William Henry&#39;, &#39;Moran, Mr. James&#39;, &#39;McCarthy, Mr. Timothy J&#39;, &#39;Palsson, Master. Gosta Leonard&#39;, &#39;Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)&#39;, &#39;Nasser, Mrs. Nicholas (Adele Achem)&#39;, &#39;Sandstrom, Miss. Marguerite Rut&#39;, &#39;Bonnell, Miss. Elizabeth&#39;, &#39;Saundercock, Mr. William Henry&#39;, &#39;Andersson, Mr. Anders Johan&#39;, &#39;Vestrom, Miss. Hulda Amanda Adolfina&#39;, &#39;Hewlett, Mrs. (Mary D Kingcome) &#39;, &#39;Rice, Master. Eugene&#39;, &#39;Williams, Mr. Charles Eugene&#39;, &#39;Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)&#39;, &#39;Masselmani, Mrs. Fatima&#39;, &#39;Fynney, Mr. Joseph J&#39;, &#39;Beesley, Mr. Lawrence&#39;, &#39;McGowan, Miss. Anna &amp;quot;Annie&amp;quot;&#39;, &#39;Sloper, Mr. William Thompson&#39;, &#39;Palsson, Miss. Torborg Danira&#39;, &#39;Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)&#39;, &#39;Emir, Mr. Farred Chehab&#39;, &#39;Fortune, Mr. Charles Alexander&#39;, &#39;O\&#39;Dwyer, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;, &#39;Todoroff, Mr. Lalio&#39;, &#39;Uruchurtu, Don. Manuel E&#39;, &#39;Spencer, Mrs. William Augustus (Marie Eugenie)&#39;, &#39;Glynn, Miss. Mary Agatha&#39;, &#39;Wheadon, Mr. Edward H&#39;, &#39;Meyer, Mr. Edgar Joseph&#39;, &#39;Holverson, Mr. Alexander Oskar&#39;, &#39;Mamee, Mr. Hanna&#39;, &#39;Cann, Mr. Ernest Charles&#39;, &#39;Vander Planke, Miss. Augusta Maria&#39;, &#39;Nicola-Yarred, Miss. Jamila&#39;, &#39;Ahlin, Mrs. Johan (Johanna Persdotter Larsson)&#39;, &#39;Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott)&#39;, &#39;Kraeff, Mr. Theodor&#39;, &#39;Laroche, Miss. Simonne Marie Anne Andree&#39;, &#39;Devaney, Miss. Margaret Delia&#39;, &#39;Rogers, Mr. William John&#39;, &#39;Lennon, Mr. Denis&#39;, &amp;quot;O&#39;Driscoll, Miss. Bridget&amp;quot;, &#39;Samaan, Mr. Youssef&#39;, &#39;Arnold-Franchi, Mrs. Josef (Josefine Franchi)&#39;, &#39;Panula, Master. Juha Niilo&#39;, &#39;Nosworthy, Mr. Richard Cater&#39;, &#39;Harper, Mrs. Henry Sleeper (Myna Haxtun)&#39;, &#39;Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson)&#39;, &#39;Ostby, Mr. Engelhart Cornelius&#39;, &#39;Woolner, Mr. Hugh&#39;, &#39;Rugg, Miss. Emily&#39;, &#39;Novel, Mr. Mansouer&#39;, &#39;West, Miss. Constance Mirium&#39;, &#39;Goodwin, Master. William Frederick&#39;, &#39;Sirayanian, Mr. Orsen&#39;, &#39;Icard, Miss. Amelie&#39;, &#39;Harris, Mr. Henry Birkhardt&#39;, &#39;Skoog, Master. Harald&#39;, &#39;Stewart, Mr. Albert A&#39;, &#39;Moubarek, Master. Gerios&#39;, &#39;Nye, Mrs. (Elizabeth Ramell)&#39;, &#39;Crease, Mr. Ernest James&#39;, &#39;Andersson, Miss. Erna Alexandra&#39;, &#39;Kink, Mr. Vincenz&#39;, &#39;Jenkin, Mr. Stephen Curnow&#39;, &#39;Goodwin, Miss. Lillian Amy&#39;, &#39;Hood, Mr. Ambrose Jr&#39;, &#39;Chronopoulos, Mr. Apostolos&#39;, &#39;Bing, Mr. Lee&#39;, &#39;Moen, Mr. Sigurd Hansen&#39;, &#39;Staneff, Mr. Ivan&#39;, &#39;Moutal, Mr. Rahamin Haim&#39;, &#39;Caldwell, Master. Alden Gates&#39;, &#39;Dowdell, Miss. Elizabeth&#39;, &#39;Waelens, Mr. Achille&#39;, &#39;Sheerlinck, Mr. Jan Baptist&#39;, &#39;McDermott, Miss. Brigdet Delia&#39;, &#39;Carrau, Mr. Francisco M&#39;, &#39;Ilett, Miss. Bertha&#39;, &#39;Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson)&#39;, &#39;Ford, Mr. William Neal&#39;, &#39;Slocovski, Mr. Selman Francis&#39;, &#39;Fortune, Miss. Mabel Helen&#39;, &#39;Celotti, Mr. Francesco&#39;, &#39;Christmann, Mr. Emil&#39;, &#39;Andreasson, Mr. Paul Edvin&#39;, &#39;Chaffee, Mr. Herbert Fuller&#39;, &#39;Dean, Mr. Bertram Frank&#39;, &#39;Coxon, Mr. Daniel&#39;, &#39;Shorney, Mr. Charles Joseph&#39;, &#39;Goldschmidt, Mr. George B&#39;, &#39;Greenfield, Mr. William Bertram&#39;, &#39;Doling, Mrs. John T (Ada Julia Bone)&#39;, &#39;Kantor, Mr. Sinai&#39;, &#39;Petranec, Miss. Matilda&#39;, &#39;Petroff, Mr. Pastcho (&amp;quot;Pentcho&amp;quot;)&#39;, &#39;White, Mr. Richard Frasar&#39;, &#39;Johansson, Mr. Gustaf Joel&#39;, &#39;Gustafsson, Mr. Anders Vilhelm&#39;, &#39;Mionoff, Mr. Stoytcho&#39;, &#39;Salkjelsvik, Miss. Anna Kristine&#39;, &#39;Moss, Mr. Albert Johan&#39;, &#39;Rekic, Mr. Tido&#39;, &#39;Moran, Miss. Bertha&#39;, &#39;Porter, Mr. Walter Chamberlain&#39;, &#39;Zabour, Miss. Hileni&#39;, &#39;Barton, Mr. David John&#39;, &#39;Jussila, Miss. Katriina&#39;, &#39;Attalah, Miss. Malake&#39;, &#39;Pekoniemi, Mr. Edvard&#39;, &#39;Connors, Mr. Patrick&#39;, &#39;Turpin, Mr. William John Robert&#39;, &#39;Baxter, Mr. Quigg Edmond&#39;, &#39;Andersson, Miss. Ellis Anna Maria&#39;, &#39;Hickman, Mr. Stanley George&#39;, &#39;Moore, Mr. Leonard Charles&#39;, &#39;Nasser, Mr. Nicholas&#39;, &#39;Webber, Miss. Susan&#39;, &#39;White, Mr. Percival Wayland&#39;, &#39;Nicola-Yarred, Master. Elias&#39;, &#39;McMahon, Mr. Martin&#39;, &#39;Madsen, Mr. Fridtjof Arne&#39;, &#39;Peter, Miss. Anna&#39;, &#39;Ekstrom, Mr. Johan&#39;, &#39;Drazenoic, Mr. Jozef&#39;, &#39;Coelho, Mr. Domingos Fernandeo&#39;, &#39;Robins, Mrs. Alexander A (Grace Charity Laury)&#39;, &#39;Weisz, Mrs. Leopold (Mathilde Francoise Pede)&#39;, &#39;Sobey, Mr. Samuel James Hayden&#39;, &#39;Richard, Mr. Emile&#39;, &#39;Newsom, Miss. Helen Monypeny&#39;, &#39;Futrelle, Mr. Jacques Heath&#39;, &#39;Osen, Mr. Olaf Elon&#39;, &#39;Giglio, Mr. Victor&#39;, &#39;Boulos, Mrs. Joseph (Sultana)&#39;, &#39;Nysten, Miss. Anna Sofia&#39;, &#39;Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck)&#39;, &#39;Burke, Mr. Jeremiah&#39;, &#39;Andrew, Mr. Edgardo Samuel&#39;, &#39;Nicholls, Mr. Joseph Charles&#39;, &#39;Andersson, Mr. August Edvard (&amp;quot;Wennerstrom&amp;quot;)&#39;, &#39;Ford, Miss. Robina Maggie &amp;quot;Ruby&amp;quot;&#39;, &#39;Navratil, Mr. Michel (&amp;quot;Louis M Hoffman&amp;quot;)&#39;, &#39;Byles, Rev. Thomas Roussel Davids&#39;, &#39;Bateman, Rev. Robert James&#39;, &#39;Pears, Mrs. Thomas (Edith Wearne)&#39;, &#39;Meo, Mr. Alfonzo&#39;, &#39;van Billiard, Mr. Austin Blyler&#39;, &#39;Olsen, Mr. Ole Martin&#39;, &#39;Williams, Mr. Charles Duane&#39;, &#39;Gilnagh, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;, &#39;Corn, Mr. Harry&#39;, &#39;Smiljanic, Mr. Mile&#39;, &#39;Sage, Master. Thomas Henry&#39;, &#39;Cribb, Mr. John Hatfield&#39;, &#39;Watt, Mrs. James (Elizabeth &amp;quot;Bessie&amp;quot; Inglis Milne)&#39;, &#39;Bengtsson, Mr. John Viktor&#39;, &#39;Calic, Mr. Jovo&#39;, &#39;Panula, Master. Eino Viljami&#39;, &#39;Goldsmith, Master. Frank John William &amp;quot;Frankie&amp;quot;&#39;, &#39;Chibnall, Mrs. (Edith Martha Bowerman)&#39;, &#39;Skoog, Mrs. William (Anna Bernhardina Karlsson)&#39;, &#39;Baumann, Mr. John D&#39;, &#39;Ling, Mr. Lee&#39;, &#39;Van der hoef, Mr. Wyckoff&#39;, &#39;Rice, Master. Arthur&#39;, &#39;Johnson, Miss. Eleanor Ileen&#39;, &#39;Sivola, Mr. Antti Wilhelm&#39;, &#39;Smith, Mr. James Clinch&#39;, &#39;Klasen, Mr. Klas Albin&#39;, &#39;Lefebre, Master. Henry Forbes&#39;, &#39;Isham, Miss. Ann Elizabeth&#39;, &#39;Hale, Mr. Reginald&#39;, &#39;Leonard, Mr. Lionel&#39;, &#39;Sage, Miss. Constance Gladys&#39;, &#39;Pernot, Mr. Rene&#39;, &#39;Asplund, Master. Clarence Gustaf Hugo&#39;, &#39;Becker, Master. Richard F&#39;, &#39;Kink-Heilmann, Miss. Luise Gretchen&#39;, &#39;Rood, Mr. Hugh Roscoe&#39;, &#39;O\&#39;Brien, Mrs. Thomas (Johanna &amp;quot;Hannah&amp;quot; Godfrey)&#39;, &#39;Romaine, Mr. Charles Hallace (&amp;quot;Mr C Rolmane&amp;quot;)&#39;, &#39;Bourke, Mr. John&#39;, &#39;Turcin, Mr. Stjepan&#39;, &#39;Pinsky, Mrs. (Rosa)&#39;, &#39;Carbines, Mr. William&#39;, &#39;Andersen-Jensen, Miss. Carla Christine Nielsine&#39;, &#39;Navratil, Master. Michel M&#39;, &#39;Brown, Mrs. James Joseph (Margaret Tobin)&#39;, &#39;Lurette, Miss. Elise&#39;, &#39;Mernagh, Mr. Robert&#39;, &#39;Olsen, Mr. Karl Siegwart Andreas&#39;, &#39;Madigan, Miss. Margaret &amp;quot;Maggie&amp;quot;&#39;, &#39;Yrois, Miss. Henriette (&amp;quot;Mrs Harbeck&amp;quot;)&#39;, &#39;Vande Walle, Mr. Nestor Cyriel&#39;, &#39;Sage, Mr. Frederick&#39;, &#39;Johanson, Mr. Jakob Alfred&#39;, &#39;Youseff, Mr. Gerious&#39;, &#39;Cohen, Mr. Gurshon &amp;quot;Gus&amp;quot;&#39;, &#39;Strom, Miss. Telma Matilda&#39;, &#39;Backstrom, Mr. Karl Alfred&#39;, &#39;Albimona, Mr. Nassef Cassem&#39;, &#39;Carr, Miss. Helen &amp;quot;Ellen&amp;quot;&#39;, &#39;Blank, Mr. Henry&#39;, &#39;Ali, Mr. Ahmed&#39;, &#39;Cameron, Miss. Clear Annie&#39;, &#39;Perkin, Mr. John Henry&#39;, &#39;Givard, Mr. Hans Kristensen&#39;, &#39;Kiernan, Mr. Philip&#39;, &#39;Newell, Miss. Madeleine&#39;, &#39;Honkanen, Miss. Eliina&#39;, &#39;Jacobsohn, Mr. Sidney Samuel&#39;, &#39;Bazzani, Miss. Albina&#39;, &#39;Harris, Mr. Walter&#39;, &#39;Sunderland, Mr. Victor Francis&#39;, &#39;Bracken, Mr. James H&#39;, &#39;Green, Mr. George Henry&#39;, &#39;Nenkoff, Mr. Christo&#39;, &#39;Hoyt, Mr. Frederick Maxfield&#39;, &#39;Berglund, Mr. Karl Ivar Sven&#39;, &#39;Mellors, Mr. William John&#39;, &#39;Lovell, Mr. John Hall (&amp;quot;Henry&amp;quot;)&#39;, &#39;Fahlstrom, Mr. Arne Jonas&#39;, &#39;Lefebre, Miss. Mathilde&#39;, &#39;Harris, Mrs. Henry Birkhardt (Irene Wallach)&#39;, &#39;Larsson, Mr. Bengt Edvin&#39;, &#39;Sjostedt, Mr. Ernst Adolf&#39;, &#39;Asplund, Miss. Lillian Gertrud&#39;, &#39;Leyson, Mr. Robert William Norman&#39;, &#39;Harknett, Miss. Alice Phoebe&#39;, &#39;Hold, Mr. Stephen&#39;, &#39;Collyer, Miss. Marjorie &amp;quot;Lottie&amp;quot;&#39;, &#39;Pengelly, Mr. Frederick William&#39;, &#39;Hunt, Mr. George Henry&#39;, &#39;Zabour, Miss. Thamine&#39;, &#39;Murphy, Miss. Katherine &amp;quot;Kate&amp;quot;&#39;, &#39;Coleridge, Mr. Reginald Charles&#39;, &#39;Maenpaa, Mr. Matti Alexanteri&#39;, &#39;Attalah, Mr. Sleiman&#39;, &#39;Minahan, Dr. William Edward&#39;, &#39;Lindahl, Miss. Agda Thorilda Viktoria&#39;, &#39;Hamalainen, Mrs. William (Anna)&#39;, &#39;Beckwith, Mr. Richard Leonard&#39;, &#39;Carter, Rev. Ernest Courtenay&#39;, &#39;Reed, Mr. James George&#39;, &#39;Strom, Mrs. Wilhelm (Elna Matilda Persson)&#39;, &#39;Stead, Mr. William Thomas&#39;, &#39;Lobb, Mr. William Arthur&#39;, &#39;Rosblom, Mrs. Viktor (Helena Wilhelmina)&#39;, &#39;Touma, Mrs. Darwis (Hanne Youssef Razi)&#39;, &#39;Thorne, Mrs. Gertrude Maybelle&#39;, &#39;Cherry, Miss. Gladys&#39;, &#39;Ward, Miss. Anna&#39;, &#39;Parrish, Mrs. (Lutie Davis)&#39;, &#39;Smith, Mr. Thomas&#39;, &#39;Asplund, Master. Edvin Rojj Felix&#39;, &#39;Taussig, Mr. Emil&#39;, &#39;Harrison, Mr. William&#39;, &#39;Henry, Miss. Delia&#39;, &#39;Reeves, Mr. David&#39;, &#39;Panula, Mr. Ernesti Arvid&#39;, &#39;Persson, Mr. Ernst Ulrik&#39;, &#39;Graham, Mrs. William Thompson (Edith Junkins)&#39;, &#39;Bissette, Miss. Amelia&#39;, &#39;Cairns, Mr. Alexander&#39;, &#39;Tornquist, Mr. William Henry&#39;, &#39;Mellinger, Mrs. (Elizabeth Anne Maidment)&#39;, &#39;Natsch, Mr. Charles H&#39;, &#39;Healy, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;, &#39;Andrews, Miss. Kornelia Theodosia&#39;, &#39;Lindblom, Miss. Augusta Charlotta&#39;, &#39;Parkes, Mr. Francis &amp;quot;Frank&amp;quot;&#39;, &#39;Rice, Master. Eric&#39;, &#39;Abbott, Mrs. Stanton (Rosa Hunt)&#39;, &#39;Duane, Mr. Frank&#39;, &#39;Olsson, Mr. Nils Johan Goransson&#39;, &#39;de Pelsmaeker, Mr. Alfons&#39;, &#39;Dorking, Mr. Edward Arthur&#39;, &#39;Smith, Mr. Richard William&#39;, &#39;Stankovic, Mr. Ivan&#39;, &#39;de Mulder, Mr. Theodore&#39;, &#39;Naidenoff, Mr. Penko&#39;, &#39;Hosono, Mr. Masabumi&#39;, &#39;Connolly, Miss. Kate&#39;, &#39;Barber, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;, &#39;Bishop, Mrs. Dickinson H (Helen Walton)&#39;, &#39;Levy, Mr. Rene Jacques&#39;, &#39;Haas, Miss. Aloisia&#39;, &#39;Mineff, Mr. Ivan&#39;, &#39;Lewy, Mr. Ervin G&#39;, &#39;Hanna, Mr. Mansour&#39;, &#39;Allison, Miss. Helen Loraine&#39;, &#39;Saalfeld, Mr. Adolphe&#39;, &#39;Baxter, Mrs. James (Helene DeLaudeniere Chaput)&#39;, &#39;Kelly, Miss. Anna Katherine &amp;quot;Annie Kate&amp;quot;&#39;, &#39;McCoy, Mr. Bernard&#39;, &#39;Johnson, Mr. William Cahoone Jr&#39;, &#39;Keane, Miss. Nora A&#39;, &#39;Williams, Mr. Howard Hugh &amp;quot;Harry&amp;quot;&#39;, &#39;Allison, Master. Hudson Trevor&#39;, &#39;Fleming, Miss. Margaret&#39;, &#39;Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo)&#39;, &#39;Abelson, Mr. Samuel&#39;, &#39;Francatelli, Miss. Laura Mabel&#39;, &#39;Hays, Miss. Margaret Bechstein&#39;, &#39;Ryerson, Miss. Emily Borie&#39;, &#39;Lahtinen, Mrs. William (Anna Sylfven)&#39;, &#39;Hendekovic, Mr. Ignjac&#39;, &#39;Hart, Mr. Benjamin&#39;, &#39;Nilsson, Miss. Helmina Josefina&#39;, &#39;Kantor, Mrs. Sinai (Miriam Sternin)&#39;, &#39;Moraweck, Dr. Ernest&#39;, &#39;Wick, Miss. Mary Natalie&#39;, &#39;Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone)&#39;, &#39;Dennis, Mr. Samuel&#39;, &#39;Danoff, Mr. Yoto&#39;, &#39;Slayter, Miss. Hilda Mary&#39;, &#39;Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh)&#39;, &#39;Sage, Mr. George John Jr&#39;, &#39;Young, Miss. Marie Grice&#39;, &#39;Nysveen, Mr. Johan Hansen&#39;, &#39;Ball, Mrs. (Ada E Hall)&#39;, &#39;Goldsmith, Mrs. Frank John (Emily Alice Brown)&#39;, &#39;Hippach, Miss. Jean Gertrude&#39;, &#39;McCoy, Miss. Agnes&#39;, &#39;Partner, Mr. Austen&#39;, &#39;Graham, Mr. George Edward&#39;, &#39;Vander Planke, Mr. Leo Edmondus&#39;, &#39;Frauenthal, Mrs. Henry William (Clara Heinsheimer)&#39;, &#39;Denkoff, Mr. Mitto&#39;, &#39;Pears, Mr. Thomas Clinton&#39;, &#39;Burns, Miss. Elizabeth Margaret&#39;, &#39;Dahl, Mr. Karl Edwart&#39;, &#39;Blackwell, Mr. Stephen Weart&#39;, &#39;Navratil, Master. Edmond Roger&#39;, &#39;Fortune, Miss. Alice Elizabeth&#39;, &#39;Collander, Mr. Erik Gustaf&#39;, &#39;Sedgwick, Mr. Charles Frederick Waddington&#39;, &#39;Fox, Mr. Stanley Hubert&#39;, &#39;Brown, Miss. Amelia &amp;quot;Mildred&amp;quot;&#39;, &#39;Smith, Miss. Marion Elsie&#39;, &#39;Davison, Mrs. Thomas Henry (Mary E Finck)&#39;, &#39;Coutts, Master. William Loch &amp;quot;William&amp;quot;&#39;, &#39;Dimic, Mr. Jovan&#39;, &#39;Odahl, Mr. Nils Martin&#39;, &#39;Williams-Lambert, Mr. Fletcher Fellows&#39;, &#39;Elias, Mr. Tannous&#39;, &#39;Arnold-Franchi, Mr. Josef&#39;, &#39;Yousif, Mr. Wazli&#39;, &#39;Vanden Steen, Mr. Leo Peter&#39;, &#39;Bowerman, Miss. Elsie Edith&#39;, &#39;Funk, Miss. Annie Clemmer&#39;, &#39;McGovern, Miss. Mary&#39;, &#39;Mockler, Miss. Helen Mary &amp;quot;Ellie&amp;quot;&#39;, &#39;Skoog, Mr. Wilhelm&#39;, &#39;del Carlo, Mr. Sebastiano&#39;, &#39;Barbara, Mrs. (Catherine David)&#39;, &#39;Asim, Mr. Adola&#39;, &amp;quot;O&#39;Brien, Mr. Thomas&amp;quot;, &#39;Adahl, Mr. Mauritz Nils Martin&#39;, &#39;Warren, Mrs. Frank Manley (Anna Sophia Atkinson)&#39;, &#39;Moussa, Mrs. (Mantoura Boulos)&#39;, &#39;Jermyn, Miss. Annie&#39;, &#39;Aubart, Mme. Leontine Pauline&#39;, &#39;Harder, Mr. George Achilles&#39;, &#39;Wiklund, Mr. Jakob Alfred&#39;, &#39;Beavan, Mr. William Thomas&#39;, &#39;Ringhini, Mr. Sante&#39;, &#39;Palsson, Miss. Stina Viola&#39;, &#39;Meyer, Mrs. Edgar Joseph (Leila Saks)&#39;, &#39;Landergren, Miss. Aurora Adelia&#39;, &#39;Widener, Mr. Harry Elkins&#39;, &#39;Betros, Mr. Tannous&#39;, &#39;Gustafsson, Mr. Karl Gideon&#39;, &#39;Bidois, Miss. Rosalie&#39;, &#39;Nakid, Miss. Maria (&amp;quot;Mary&amp;quot;)&#39;, &#39;Tikkanen, Mr. Juho&#39;, &#39;Holverson, Mrs. Alexander Oskar (Mary Aline Towner)&#39;, &#39;Plotcharsky, Mr. Vasil&#39;, &#39;Davies, Mr. Charles Henry&#39;, &#39;Goodwin, Master. Sidney Leonard&#39;, &#39;Buss, Miss. Kate&#39;, &#39;Sadlier, Mr. Matthew&#39;, &#39;Lehmann, Miss. Bertha&#39;, &#39;Carter, Mr. William Ernest&#39;, &#39;Jansson, Mr. Carl Olof&#39;, &#39;Gustafsson, Mr. Johan Birger&#39;, &#39;Newell, Miss. Marjorie&#39;, &#39;Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson)&#39;, &#39;Johansson, Mr. Erik&#39;, &#39;Olsson, Miss. Elina&#39;, &#39;McKane, Mr. Peter David&#39;, &#39;Pain, Dr. Alfred&#39;, &#39;Trout, Mrs. William H (Jessie L)&#39;, &#39;Niskanen, Mr. Juha&#39;, &#39;Adams, Mr. John&#39;, &#39;Jussila, Miss. Mari Aina&#39;, &#39;Hakkarainen, Mr. Pekka Pietari&#39;, &#39;Oreskovic, Miss. Marija&#39;, &#39;Gale, Mr. Shadrach&#39;, &#39;Widegren, Mr. Carl/Charles Peter&#39;, &#39;Richards, Master. William Rowe&#39;, &#39;Birkeland, Mr. Hans Martin Monsen&#39;, &#39;Lefebre, Miss. Ida&#39;, &#39;Sdycoff, Mr. Todor&#39;, &#39;Hart, Mr. Henry&#39;, &#39;Minahan, Miss. Daisy E&#39;, &#39;Cunningham, Mr. Alfred Fleming&#39;, &#39;Sundman, Mr. Johan Julian&#39;, &#39;Meek, Mrs. Thomas (Annie Louise Rowley)&#39;, &#39;Drew, Mrs. James Vivian (Lulu Thorne Christian)&#39;, &#39;Silven, Miss. Lyyli Karoliina&#39;, &#39;Matthews, Mr. William John&#39;, &#39;Van Impe, Miss. Catharina&#39;, &#39;Gheorgheff, Mr. Stanio&#39;, &#39;Charters, Mr. David&#39;, &#39;Zimmerman, Mr. Leo&#39;, &#39;Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren)&#39;, &#39;Rosblom, Mr. Viktor Richard&#39;, &#39;Wiseman, Mr. Phillippe&#39;, &#39;Clarke, Mrs. Charles V (Ada Maria Winfield)&#39;, &#39;Phillips, Miss. Kate Florence (&amp;quot;Mrs Kate Louise Phillips Marshall&amp;quot;)&#39;, &#39;Flynn, Mr. James&#39;, &#39;Pickard, Mr. Berk (Berk Trembisky)&#39;, &#39;Bjornstrom-Steffansson, Mr. Mauritz Hakan&#39;, &#39;Thorneycroft, Mrs. Percival (Florence Kate White)&#39;, &#39;Louch, Mrs. Charles Alexander (Alice Adelaide Slow)&#39;, &#39;Kallio, Mr. Nikolai Erland&#39;, &#39;Silvey, Mr. William Baird&#39;, &#39;Carter, Miss. Lucile Polk&#39;, &#39;Ford, Miss. Doolina Margaret &amp;quot;Daisy&amp;quot;&#39;, &#39;Richards, Mrs. Sidney (Emily Hocking)&#39;, &#39;Fortune, Mr. Mark&#39;, &#39;Kvillner, Mr. Johan Henrik Johannesson&#39;, &#39;Hart, Mrs. Benjamin (Esther Ada Bloomfield)&#39;, &#39;Hampe, Mr. Leon&#39;, &#39;Petterson, Mr. Johan Emil&#39;, &#39;Reynaldo, Ms. Encarnacion&#39;, &#39;Johannesen-Bratthammer, Mr. Bernt&#39;, &#39;Dodge, Master. Washington&#39;, &#39;Mellinger, Miss. Madeleine Violet&#39;, &#39;Seward, Mr. Frederic Kimber&#39;, &#39;Baclini, Miss. Marie Catherine&#39;, &#39;Peuchen, Major. Arthur Godfrey&#39;, &#39;West, Mr. Edwy Arthur&#39;, &#39;Hagland, Mr. Ingvald Olai Olsen&#39;, &#39;Foreman, Mr. Benjamin Laventall&#39;, &#39;Goldenberg, Mr. Samuel L&#39;, &#39;Peduzzi, Mr. Joseph&#39;, &#39;Jalsevac, Mr. Ivan&#39;, &#39;Millet, Mr. Francis Davis&#39;, &#39;Kenyon, Mrs. Frederick R (Marion)&#39;, &#39;Toomey, Miss. Ellen&#39;, &amp;quot;O&#39;Connor, Mr. Maurice&amp;quot;, &#39;Anderson, Mr. Harry&#39;, &#39;Morley, Mr. William&#39;, &#39;Gee, Mr. Arthur H&#39;, &#39;Milling, Mr. Jacob Christian&#39;, &#39;Maisner, Mr. Simon&#39;, &#39;Goncalves, Mr. Manuel Estanslas&#39;, &#39;Campbell, Mr. William&#39;, &#39;Smart, Mr. John Montgomery&#39;, &#39;Scanlan, Mr. James&#39;, &#39;Baclini, Miss. Helene Barbara&#39;, &#39;Keefe, Mr. Arthur&#39;, &#39;Cacic, Mr. Luka&#39;, &#39;West, Mrs. Edwy Arthur (Ada Mary Worth)&#39;, &#39;Jerwan, Mrs. Amin S (Marie Marthe Thuillard)&#39;, &#39;Strandberg, Miss. Ida Sofia&#39;, &#39;Clifford, Mr. George Quincy&#39;, &#39;Renouf, Mr. Peter Henry&#39;, &#39;Braund, Mr. Lewis Richard&#39;, &#39;Karlsson, Mr. Nils August&#39;, &#39;Hirvonen, Miss. Hildur E&#39;, &#39;Goodwin, Master. Harold Victor&#39;, &#39;Frost, Mr. Anthony Wood &amp;quot;Archie&amp;quot;&#39;, &#39;Rouse, Mr. Richard Henry&#39;, &#39;Turkula, Mrs. (Hedwig)&#39;, &#39;Bishop, Mr. Dickinson H&#39;, &#39;Lefebre, Miss. Jeannie&#39;, &#39;Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby)&#39;, &#39;Kent, Mr. Edward Austin&#39;, &#39;Somerton, Mr. Francis William&#39;, &#39;Coutts, Master. Eden Leslie &amp;quot;Neville&amp;quot;&#39;, &#39;Hagland, Mr. Konrad Mathias Reiersen&#39;, &#39;Windelov, Mr. Einar&#39;, &#39;Molson, Mr. Harry Markland&#39;, &#39;Artagaveytia, Mr. Ramon&#39;, &#39;Stanley, Mr. Edward Roland&#39;, &#39;Yousseff, Mr. Gerious&#39;, &#39;Eustis, Miss. Elizabeth Mussey&#39;, &#39;Shellard, Mr. Frederick William&#39;, &#39;Allison, Mrs. Hudson J C (Bessie Waldo Daniels)&#39;, &#39;Svensson, Mr. Olof&#39;, &#39;Calic, Mr. Petar&#39;, &#39;Canavan, Miss. Mary&#39;, &amp;quot;O&#39;Sullivan, Miss. Bridget Mary&amp;quot;, &#39;Laitinen, Miss. Kristina Sofia&#39;, &#39;Maioni, Miss. Roberta&#39;, &#39;Penasco y Castellana, Mr. Victor de Satode&#39;, &#39;Quick, Mrs. Frederick Charles (Jane Richards)&#39;, &#39;Bradley, Mr. George (&amp;quot;George Arthur Brayton&amp;quot;)&#39;, &#39;Olsen, Mr. Henry Margido&#39;, &#39;Lang, Mr. Fang&#39;, &#39;Daly, Mr. Eugene Patrick&#39;, &#39;Webber, Mr. James&#39;, &#39;McGough, Mr. James Robert&#39;, &#39;Rothschild, Mrs. Martin (Elizabeth L. Barrett)&#39;, &#39;Coleff, Mr. Satio&#39;, &#39;Walker, Mr. William Anderson&#39;, &#39;Lemore, Mrs. (Amelia Milley)&#39;, &#39;Ryan, Mr. Patrick&#39;, &#39;Angle, Mrs. William A (Florence &amp;quot;Mary&amp;quot; Agnes Hughes)&#39;, &#39;Pavlovic, Mr. Stefo&#39;, &#39;Perreault, Miss. Anne&#39;, &#39;Vovk, Mr. Janko&#39;, &#39;Lahoud, Mr. Sarkis&#39;, &#39;Hippach, Mrs. Louis Albert (Ida Sophia Fischer)&#39;, &#39;Kassem, Mr. Fared&#39;, &#39;Farrell, Mr. James&#39;, &#39;Ridsdale, Miss. Lucy&#39;, &#39;Farthing, Mr. John&#39;, &#39;Salonen, Mr. Johan Werner&#39;, &#39;Hocking, Mr. Richard George&#39;, &#39;Quick, Miss. Phyllis May&#39;, &#39;Toufik, Mr. Nakli&#39;, &#39;Elias, Mr. Joseph Jr&#39;, &#39;Peter, Mrs. Catherine (Catherine Rizk)&#39;, &#39;Cacic, Miss. Marija&#39;, &#39;Hart, Miss. Eva Miriam&#39;, &#39;Butt, Major. Archibald Willingham&#39;, &#39;LeRoy, Miss. Bertha&#39;, &#39;Risien, Mr. Samuel Beard&#39;, &#39;Frolicher, Miss. Hedwig Margaritha&#39;, &#39;Crosby, Miss. Harriet R&#39;, &#39;Andersson, Miss. Ingeborg Constanzia&#39;, &#39;Andersson, Miss. Sigrid Elisabeth&#39;, &#39;Beane, Mr. Edward&#39;, &#39;Douglas, Mr. Walter Donald&#39;, &#39;Nicholson, Mr. Arthur Ernest&#39;, &#39;Beane, Mrs. Edward (Ethel Clarke)&#39;, &#39;Padro y Manent, Mr. Julian&#39;, &#39;Goldsmith, Mr. Frank John&#39;, &#39;Davies, Master. John Morgan Jr&#39;, &#39;Thayer, Mr. John Borland Jr&#39;, &#39;Sharp, Mr. Percival James R&#39;, &amp;quot;O&#39;Brien, Mr. Timothy&amp;quot;, &#39;Leeni, Mr. Fahim (&amp;quot;Philip Zenni&amp;quot;)&#39;, &#39;Ohman, Miss. Velin&#39;, &#39;Wright, Mr. George&#39;, &#39;Duff Gordon, Lady. (Lucille Christiana Sutherland) (&amp;quot;Mrs Morgan&amp;quot;)&#39;, &#39;Robbins, Mr. Victor&#39;, &#39;Taussig, Mrs. Emil (Tillie Mandelbaum)&#39;, &#39;de Messemaeker, Mrs. Guillaume Joseph (Emma)&#39;, &#39;Morrow, Mr. Thomas Rowan&#39;, &#39;Sivic, Mr. Husein&#39;, &#39;Norman, Mr. Robert Douglas&#39;, &#39;Simmons, Mr. John&#39;, &#39;Meanwell, Miss. (Marion Ogden)&#39;, &#39;Davies, Mr. Alfred J&#39;, &#39;Stoytcheff, Mr. Ilia&#39;, &#39;Palsson, Mrs. Nils (Alma Cornelia Berglund)&#39;, &#39;Doharr, Mr. Tannous&#39;, &#39;Jonsson, Mr. Carl&#39;, &#39;Harris, Mr. George&#39;, &#39;Appleton, Mrs. Edward Dale (Charlotte Lamson)&#39;, &#39;Flynn, Mr. John Irwin (&amp;quot;Irving&amp;quot;)&#39;, &#39;Kelly, Miss. Mary&#39;, &#39;Rush, Mr. Alfred George John&#39;, &#39;Patchett, Mr. George&#39;, &#39;Garside, Miss. Ethel&#39;, &#39;Silvey, Mrs. William Baird (Alice Munger)&#39;, &#39;Caram, Mrs. Joseph (Maria Elias)&#39;, &#39;Jussila, Mr. Eiriik&#39;, &#39;Christy, Miss. Julie Rachel&#39;, &#39;Thayer, Mrs. John Borland (Marian Longstreth Morris)&#39;, &#39;Downton, Mr. William James&#39;, &#39;Ross, Mr. John Hugo&#39;, &#39;Paulner, Mr. Uscher&#39;, &#39;Taussig, Miss. Ruth&#39;, &#39;Jarvis, Mr. John Denzil&#39;, &#39;Frolicher-Stehli, Mr. Maxmillian&#39;, &#39;Gilinski, Mr. Eliezer&#39;, &#39;Murdlin, Mr. Joseph&#39;, &#39;Rintamaki, Mr. Matti&#39;, &#39;Stephenson, Mrs. Walter Bertram (Martha Eustis)&#39;, &#39;Elsbury, Mr. William James&#39;, &#39;Bourke, Miss. Mary&#39;, &#39;Chapman, Mr. John Henry&#39;, &#39;Van Impe, Mr. Jean Baptiste&#39;, &#39;Leitch, Miss. Jessie Wills&#39;, &#39;Johnson, Mr. Alfred&#39;, &#39;Boulos, Mr. Hanna&#39;, &#39;Duff Gordon, Sir. Cosmo Edmund (&amp;quot;Mr Morgan&amp;quot;)&#39;, &#39;Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy)&#39;, &#39;Slabenoff, Mr. Petco&#39;, &#39;Harrington, Mr. Charles H&#39;, &#39;Torber, Mr. Ernst William&#39;, &#39;Homer, Mr. Harry (&amp;quot;Mr E Haven&amp;quot;)&#39;, &#39;Lindell, Mr. Edvard Bengtsson&#39;, &#39;Karaic, Mr. Milan&#39;, &#39;Daniel, Mr. Robert Williams&#39;, &#39;Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue)&#39;, &#39;Shutes, Miss. Elizabeth W&#39;, &#39;Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren)&#39;, &#39;Jardin, Mr. Jose Neto&#39;, &#39;Murphy, Miss. Margaret Jane&#39;, &#39;Horgan, Mr. John&#39;, &#39;Brocklebank, Mr. William Alfred&#39;, &#39;Herman, Miss. Alice&#39;, &#39;Danbom, Mr. Ernst Gilbert&#39;, &#39;Lobb, Mrs. William Arthur (Cordelia K Stanlick)&#39;, &#39;Becker, Miss. Marion Louise&#39;, &#39;Gavey, Mr. Lawrence&#39;, &#39;Yasbeck, Mr. Antoni&#39;, &#39;Kimball, Mr. Edwin Nelson Jr&#39;, &#39;Nakid, Mr. Sahid&#39;, &#39;Hansen, Mr. Henry Damsgaard&#39;, &#39;Bowen, Mr. David John &amp;quot;Dai&amp;quot;&#39;, &#39;Sutton, Mr. Frederick&#39;, &#39;Kirkland, Rev. Charles Leonard&#39;, &#39;Longley, Miss. Gretchen Fiske&#39;, &#39;Bostandyeff, Mr. Guentcho&#39;, &amp;quot;O&#39;Connell, Mr. Patrick D&amp;quot;, &#39;Barkworth, Mr. Algernon Henry Wilson&#39;, &#39;Lundahl, Mr. Johan Svensson&#39;, &#39;Stahelin-Maeglin, Dr. Max&#39;, &#39;Parr, Mr. William Henry Marsh&#39;, &#39;Skoog, Miss. Mabel&#39;, &#39;Davis, Miss. Mary&#39;, &#39;Leinonen, Mr. Antti Gustaf&#39;, &#39;Collyer, Mr. Harvey&#39;, &#39;Panula, Mrs. Juha (Maria Emilia Ojala)&#39;, &#39;Thorneycroft, Mr. Percival&#39;, &#39;Jensen, Mr. Hans Peder&#39;, &#39;Sagesser, Mlle. Emma&#39;, &#39;Skoog, Miss. Margit Elizabeth&#39;, &#39;Foo, Mr. Choong&#39;, &#39;Baclini, Miss. Eugenie&#39;, &#39;Harper, Mr. Henry Sleeper&#39;, &#39;Cor, Mr. Liudevit&#39;, &#39;Simonius-Blumer, Col. Oberst Alfons&#39;, &#39;Willey, Mr. Edward&#39;, &#39;Stanley, Miss. Amy Zillah Elsie&#39;, &#39;Mitkoff, Mr. Mito&#39;, &#39;Doling, Miss. Elsie&#39;, &#39;Kalvik, Mr. Johannes Halvorsen&#39;, &#39;O\&#39;Leary, Miss. Hanora &amp;quot;Norah&amp;quot;&#39;, &#39;Hegarty, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;, &#39;Hickman, Mr. Leonard Mark&#39;, &#39;Radeff, Mr. Alexander&#39;, &#39;Bourke, Mrs. John (Catherine)&#39;, &#39;Eitemiller, Mr. George Floyd&#39;, &#39;Newell, Mr. Arthur Webster&#39;, &#39;Frauenthal, Dr. Henry William&#39;, &#39;Badt, Mr. Mohamed&#39;, &#39;Colley, Mr. Edward Pomeroy&#39;, &#39;Coleff, Mr. Peju&#39;, &#39;Lindqvist, Mr. Eino William&#39;, &#39;Hickman, Mr. Lewis&#39;, &#39;Butler, Mr. Reginald Fenton&#39;, &#39;Rommetvedt, Mr. Knud Paust&#39;, &#39;Cook, Mr. Jacob&#39;, &#39;Taylor, Mrs. Elmer Zebley (Juliet Cummins Wright)&#39;, &#39;Brown, Mrs. Thomas William Solomon (Elizabeth Catherine Ford)&#39;, &#39;Davidson, Mr. Thornton&#39;, &#39;Mitchell, Mr. Henry Michael&#39;, &#39;Wilhelms, Mr. Charles&#39;, &#39;Watson, Mr. Ennis Hastings&#39;, &#39;Edvardsson, Mr. Gustaf Hjalmar&#39;, &#39;Sawyer, Mr. Frederick Charles&#39;, &#39;Turja, Miss. Anna Sofia&#39;, &#39;Goodwin, Mrs. Frederick (Augusta Tyler)&#39;, &#39;Cardeza, Mr. Thomas Drake Martinez&#39;, &#39;Peters, Miss. Katie&#39;, &#39;Hassab, Mr. Hammad&#39;, &#39;Olsvigen, Mr. Thor Anderson&#39;, &#39;Goodwin, Mr. Charles Edward&#39;, &#39;Brown, Mr. Thomas William Solomon&#39;, &#39;Laroche, Mr. Joseph Philippe Lemercier&#39;, &#39;Panula, Mr. Jaako Arnold&#39;, &#39;Dakic, Mr. Branko&#39;, &#39;Fischer, Mr. Eberhard Thelander&#39;, &#39;Madill, Miss. Georgette Alexandra&#39;, &#39;Dick, Mr. Albert Adrian&#39;, &#39;Karun, Miss. Manca&#39;, &#39;Lam, Mr. Ali&#39;, &#39;Saad, Mr. Khalil&#39;, &#39;Weir, Col. John&#39;, &#39;Chapman, Mr. Charles Henry&#39;, &#39;Kelly, Mr. James&#39;, &#39;Mullens, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;, &#39;Thayer, Mr. John Borland&#39;, &#39;Humblen, Mr. Adolf Mathias Nicolai Olsen&#39;, &#39;Astor, Mrs. John Jacob (Madeleine Talmadge Force)&#39;, &#39;Silverthorne, Mr. Spencer Victor&#39;, &#39;Barbara, Miss. Saiide&#39;, &#39;Gallagher, Mr. Martin&#39;, &#39;Hansen, Mr. Henrik Juul&#39;, &#39;Morley, Mr. Henry Samuel (&amp;quot;Mr Henry Marshall&amp;quot;)&#39;, &#39;Kelly, Mrs. Florence &amp;quot;Fannie&amp;quot;&#39;, &#39;Calderhead, Mr. Edward Pennington&#39;, &#39;Cleaver, Miss. Alice&#39;, &#39;Moubarek, Master. Halim Gonios (&amp;quot;William George&amp;quot;)&#39;, &#39;Mayne, Mlle. Berthe Antonine (&amp;quot;Mrs de Villiers&amp;quot;)&#39;, &#39;Klaber, Mr. Herman&#39;, &#39;Taylor, Mr. Elmer Zebley&#39;, &#39;Larsson, Mr. August Viktor&#39;, &#39;Greenberg, Mr. Samuel&#39;, &#39;Soholt, Mr. Peter Andreas Lauritz Andersen&#39;, &#39;Endres, Miss. Caroline Louise&#39;, &#39;Troutt, Miss. Edwina Celia &amp;quot;Winnie&amp;quot;&#39;, &#39;McEvoy, Mr. Michael&#39;, &#39;Johnson, Mr. Malkolm Joackim&#39;, &#39;Harper, Miss. Annie Jessie &amp;quot;Nina&amp;quot;&#39;, &#39;Jensen, Mr. Svend Lauritz&#39;, &#39;Gillespie, Mr. William Henry&#39;, &#39;Hodges, Mr. Henry Price&#39;, &#39;Chambers, Mr. Norman Campbell&#39;, &#39;Oreskovic, Mr. Luka&#39;, &#39;Renouf, Mrs. Peter Henry (Lillian Jefferys)&#39;, &#39;Mannion, Miss. Margareth&#39;, &#39;Bryhl, Mr. Kurt Arnold Gottfrid&#39;, &#39;Ilmakangas, Miss. Pieta Sofia&#39;, &#39;Allen, Miss. Elisabeth Walton&#39;, &#39;Hassan, Mr. Houssein G N&#39;, &#39;Knight, Mr. Robert J&#39;, &#39;Berriman, Mr. William John&#39;, &#39;Troupiansky, Mr. Moses Aaron&#39;, &#39;Williams, Mr. Leslie&#39;, &#39;Ford, Mrs. Edward (Margaret Ann Watson)&#39;, &#39;Lesurer, Mr. Gustave J&#39;, &#39;Ivanoff, Mr. Kanio&#39;, &#39;Nankoff, Mr. Minko&#39;, &#39;Hawksford, Mr. Walter James&#39;, &#39;Cavendish, Mr. Tyrell William&#39;, &#39;Ryerson, Miss. Susan Parker &amp;quot;Suzette&amp;quot;&#39;, &#39;McNamee, Mr. Neal&#39;, &#39;Stranden, Mr. Juho&#39;, &#39;Crosby, Capt. Edward Gifford&#39;, &#39;Abbott, Mr. Rossmore Edward&#39;, &#39;Sinkkonen, Miss. Anna&#39;, &#39;Marvin, Mr. Daniel Warner&#39;, &#39;Connaghton, Mr. Michael&#39;, &#39;Wells, Miss. Joan&#39;, &#39;Moor, Master. Meier&#39;, &#39;Vande Velde, Mr. Johannes Joseph&#39;, &#39;Jonkoff, Mr. Lalio&#39;, &#39;Herman, Mrs. Samuel (Jane Laver)&#39;, &#39;Hamalainen, Master. Viljo&#39;, &#39;Carlsson, Mr. August Sigfrid&#39;, &#39;Bailey, Mr. Percy Andrew&#39;, &#39;Theobald, Mr. Thomas Leonard&#39;, &#39;Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards)&#39;, &#39;Garfirth, Mr. John&#39;, &#39;Nirva, Mr. Iisakki Antino Aijo&#39;, &#39;Barah, Mr. Hanna Assi&#39;, &#39;Carter, Mrs. William Ernest (Lucile Polk)&#39;, &#39;Eklund, Mr. Hans Linus&#39;, &#39;Hogeboom, Mrs. John C (Anna Andrews)&#39;, &#39;Brewe, Dr. Arthur Jackson&#39;, &#39;Mangan, Miss. Mary&#39;, &#39;Moran, Mr. Daniel J&#39;, &#39;Gronnestad, Mr. Daniel Danielsen&#39;, &#39;Lievens, Mr. Rene Aime&#39;, &#39;Jensen, Mr. Niels Peder&#39;, &#39;Mack, Mrs. (Mary)&#39;, &#39;Elias, Mr. Dibo&#39;, &#39;Hocking, Mrs. Elizabeth (Eliza Needs)&#39;, &#39;Myhrman, Mr. Pehr Fabian Oliver Malkolm&#39;, &#39;Tobin, Mr. Roger&#39;, &#39;Emanuel, Miss. Virginia Ethel&#39;, &#39;Kilgannon, Mr. Thomas J&#39;, &#39;Robert, Mrs. Edward Scott (Elisabeth Walton McMillan)&#39;, &#39;Ayoub, Miss. Banoura&#39;, &#39;Dick, Mrs. Albert Adrian (Vera Gillespie)&#39;, &#39;Long, Mr. Milton Clyde&#39;, &#39;Johnston, Mr. Andrew G&#39;, &#39;Ali, Mr. William&#39;, &#39;Harmer, Mr. Abraham (David Lishin)&#39;, &#39;Sjoblom, Miss. Anna Sofia&#39;, &#39;Rice, Master. George Hugh&#39;, &#39;Dean, Master. Bertram Vere&#39;, &#39;Guggenheim, Mr. Benjamin&#39;, &#39;Keane, Mr. Andrew &amp;quot;Andy&amp;quot;&#39;, &#39;Gaskell, Mr. Alfred&#39;, &#39;Sage, Miss. Stella Anna&#39;, &#39;Hoyt, Mr. William Fisher&#39;, &#39;Dantcheff, Mr. Ristiu&#39;, &#39;Otter, Mr. Richard&#39;, &#39;Leader, Dr. Alice (Farnham)&#39;, &#39;Osman, Mrs. Mara&#39;, &#39;Ibrahim Shawah, Mr. Yousseff&#39;, &#39;Van Impe, Mrs. Jean Baptiste (Rosalie Paula Govaert)&#39;, &#39;Ponesell, Mr. Martin&#39;, &#39;Collyer, Mrs. Harvey (Charlotte Annie Tate)&#39;, &#39;Carter, Master. William Thornton II&#39;, &#39;Thomas, Master. Assad Alexander&#39;, &#39;Hedman, Mr. Oskar Arvid&#39;, &#39;Johansson, Mr. Karl Johan&#39;, &#39;Andrews, Mr. Thomas Jr&#39;, &#39;Pettersson, Miss. Ellen Natalia&#39;, &#39;Meyer, Mr. August&#39;, &#39;Chambers, Mrs. Norman Campbell (Bertha Griggs)&#39;, &#39;Alexander, Mr. William&#39;, &#39;Lester, Mr. James&#39;, &#39;Slemen, Mr. Richard James&#39;, &#39;Andersson, Miss. Ebba Iris Alfrida&#39;, &#39;Tomlin, Mr. Ernest Portage&#39;, &#39;Fry, Mr. Richard&#39;, &#39;Heininen, Miss. Wendla Maria&#39;, &#39;Mallet, Mr. Albert&#39;, &#39;Holm, Mr. John Fredrik Alexander&#39;, &#39;Skoog, Master. Karl Thorsten&#39;, &#39;Hays, Mrs. Charles Melville (Clara Jennings Gregg)&#39;, &#39;Lulic, Mr. Nikola&#39;, &#39;Reuchlin, Jonkheer. John George&#39;, &#39;Moor, Mrs. (Beila)&#39;, &#39;Panula, Master. Urho Abraham&#39;, &#39;Flynn, Mr. John&#39;, &#39;Lam, Mr. Len&#39;, &#39;Mallet, Master. Andre&#39;, &#39;McCormack, Mr. Thomas Joseph&#39;, &#39;Stone, Mrs. George Nelson (Martha Evelyn)&#39;, &#39;Yasbeck, Mrs. Antoni (Selini Alexander)&#39;, &#39;Richards, Master. George Sibley&#39;, &#39;Saad, Mr. Amin&#39;, &#39;Augustsson, Mr. Albert&#39;, &#39;Allum, Mr. Owen George&#39;, &#39;Compton, Miss. Sara Rebecca&#39;, &#39;Pasic, Mr. Jakob&#39;, &#39;Sirota, Mr. Maurice&#39;, &#39;Chip, Mr. Chang&#39;, &#39;Marechal, Mr. Pierre&#39;, &#39;Alhomaki, Mr. Ilmari Rudolf&#39;, &#39;Mudd, Mr. Thomas Charles&#39;, &#39;Serepeca, Miss. Augusta&#39;, &#39;Lemberopolous, Mr. Peter L&#39;, &#39;Culumovic, Mr. Jeso&#39;, &#39;Abbing, Mr. Anthony&#39;, &#39;Sage, Mr. Douglas Bullen&#39;, &#39;Markoff, Mr. Marin&#39;, &#39;Harper, Rev. John&#39;, &#39;Goldenberg, Mrs. Samuel L (Edwiga Grabowska)&#39;, &#39;Andersson, Master. Sigvard Harald Elias&#39;, &#39;Svensson, Mr. Johan&#39;, &#39;Boulos, Miss. Nourelain&#39;, &#39;Lines, Miss. Mary Conover&#39;, &#39;Carter, Mrs. Ernest Courtenay (Lilian Hughes)&#39;, &#39;Aks, Mrs. Sam (Leah Rosen)&#39;, &#39;Wick, Mrs. George Dennick (Mary Hitchcock)&#39;, &#39;Daly, Mr. Peter Denis &#39;, &#39;Baclini, Mrs. Solomon (Latifa Qurban)&#39;, &#39;Razi, Mr. Raihed&#39;, &#39;Hansen, Mr. Claus Peter&#39;, &#39;Giles, Mr. Frederick Edward&#39;, &#39;Swift, Mrs. Frederick Joel (Margaret Welles Barron)&#39;, &#39;Sage, Miss. Dorothy Edith &amp;quot;Dolly&amp;quot;&#39;, &#39;Gill, Mr. John William&#39;, &#39;Bystrom, Mrs. (Karolina)&#39;, &#39;Duran y More, Miss. Asuncion&#39;, &#39;Roebling, Mr. Washington Augustus II&#39;, &#39;van Melkebeke, Mr. Philemon&#39;, &#39;Johnson, Master. Harold Theodor&#39;, &#39;Balkic, Mr. Cerin&#39;, &#39;Beckwith, Mrs. Richard Leonard (Sallie Monypeny)&#39;, &#39;Carlsson, Mr. Frans Olof&#39;, &#39;Vander Cruyssen, Mr. Victor&#39;, &#39;Abelson, Mrs. Samuel (Hannah Wizosky)&#39;, &#39;Najib, Miss. Adele Kiamie &amp;quot;Jane&amp;quot;&#39;, &#39;Gustafsson, Mr. Alfred Ossian&#39;, &#39;Petroff, Mr. Nedelio&#39;, &#39;Laleff, Mr. Kristo&#39;, &#39;Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)&#39;, &#39;Shelley, Mrs. William (Imanita Parrish Hall)&#39;, &#39;Markun, Mr. Johann&#39;, &#39;Dahlberg, Miss. Gerda Ulrika&#39;, &#39;Banfield, Mr. Frederick James&#39;, &#39;Sutehall, Mr. Henry Jr&#39;, &#39;Rice, Mrs. William (Margaret Norton)&#39;, &#39;Montvila, Rev. Juozas&#39;, &#39;Graham, Miss. Margaret Edith&#39;, &#39;Johnston, Miss. Catherine Helen &amp;quot;Carrie&amp;quot;&#39;, &#39;Behr, Mr. Karl Howell&#39;, &#39;Dooley, Mr. Patrick&#39;]
sexe = [&#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(name[3])
print(age[3])
print(survided[3])
print(sexe[3])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Futrelle, Mrs. Jacques Heath (Lily May Peel)
35.0
1
female
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1) récuper le nombre total de passager en consultant la longueur totale d&amp;rsquo;une des listes (peu importe laquelle, elle font la même longueur). Stocker l&amp;rsquo;information dans la variable &amp;lsquo;nbPassagers&amp;rsquo;&lt;br&gt;&lt;br&gt;
2) Créer une fonction &amp;lsquo;analyseTitanic&amp;rsquo; qui va prendre pour l&amp;rsquo;instant un seul paramètre &amp;lsquo;totalPassagers&amp;rsquo;. La fonction retourne pour l&amp;rsquo;instant la valeur &amp;lsquo;totalPassagers&amp;rsquo;. Testez votre fonction en passant en paramètre la variable &amp;lsquo;nbPassagers&amp;rsquo; &lt;br&gt;&lt;br&gt;
3) Dans cette fonction, ajoutez une boucle For qui va itérer de 1 en 1 et qui aura pour longueur le nombre total de passagers (range(&amp;hellip;)). dans cette boucle, ajoutez une fonction print() qui va afficher chaque valeur de la liste &amp;lsquo;survided&amp;rsquo;. Testez votre fonction. Si elle marche vous pouvez supprimer le print() &lt;br&gt;&lt;br&gt;
4) L&amp;rsquo;idée maintenant va être de compter le nombre de survivants (survided = 1) dans cette liste.
- juste avant votre boucle, créez une variable nbSurvivants qui sera égale à zero
- dans votre boucle, ajoutez une condition qui indique &amp;lsquo;si cette personne a survecu, alors mon compteur nbSurvivant augmente de 1&amp;rsquo;
- remplacez nbPassagers par nbSurvivants dans la valeur de retour de la fonction.
- testez votre fonction. à l&amp;rsquo;aide de la variable nbPassagers, calculez le taux de survie global sur le Titanic
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;5) Ajout d&amp;rsquo;un critère&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ajouter un deuxième paramètre &amp;lsquo;sexePassager&amp;rsquo; à la fonction qui prendra soit la valeur &amp;lsquo;male&amp;rsquo;, soit la valeur &amp;lsquo;female&amp;rsquo;&lt;/li&gt;
&lt;li&gt;juste avant votre boucle, créez une variable nbPassagersCritere qui sera égale à zero&lt;/li&gt;
&lt;li&gt;Dans votre boucle, ajouter une nouvelle condition à la suite de la première permettant de d&amp;rsquo;indiquer &amp;lsquo;si le passager à un sexe correspondant à la valeur renseignée dans la variable &amp;lsquo;sexePassager&amp;rsquo;, alors nbPassagersCritere augmente de 1&lt;/li&gt;
&lt;li&gt;Modifiez maintenant votre première condition en ajoutant la contrainte &amp;lsquo;le passager a survecu ET le passager à un sexe correspondant à la valeur renseignée dans la variable &amp;lsquo;sexePassager&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6) analyse
- A la suite de votre boucle, créez la variable &amp;lsquo;tauxDeSurvie&amp;rsquo;, qui va diviser nbSurvivants par nbPassagersCritere
- remplacez nbSurvivants par tauxDeSurvie dans la valeur de retour de la fonction.
- calculez le taux de survie des hommes et celui des femmes. Analysez les résultats.&lt;/p&gt;

&lt;p&gt;7) Aller plus loin (optionnel) &lt;br&gt;&lt;br&gt;
Faire une nouvelle fonction qui ne se basera pas sur le sexe mais sur une tranche d&amp;rsquo;age&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;1) récuper le nombre total de passager en consultant la longueur totale d&amp;rsquo;une des listes (peu importe laquelle, elle font la même longueur). Stocker l&amp;rsquo;information dans la variable &amp;lsquo;nbPassagers&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nbPassagers = len(name)
nbPassagers
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;891
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Créer une fonction &amp;lsquo;analyseTitanic&amp;rsquo; qui va prendre pour l&amp;rsquo;instant un seul paramètre &amp;lsquo;totalPassagers&amp;rsquo;. La fonction retourne pour l&amp;rsquo;instant la valeur &amp;lsquo;totalPassagers&amp;rsquo;. Testez votre fonction en passant en paramètre la variable &amp;lsquo;nbPassagers&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers):
    
    return(totalPassagers)

analyseTitanic(nbPassagers)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;891
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Dans cette fonction, ajoutez une boucle For qui va itérer de 1 en 1 et qui aura pour longueur le nombre total de passagers (range(&amp;hellip;)). dans cette boucle, ajoutez une fonction print() qui va afficher chaque valeur de la liste &amp;lsquo;survided&amp;rsquo;. Testez votre fonction. Si elle marche vous pouvez supprimer le print()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers):
    for i in range(totalPassagers):
        survided[i]
        
    return(totalPassagers)
analyseTitanic(nbPassagers)    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;891
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) L&amp;rsquo;idée maintenant va être de compter le nombre de survivants (survided = 1) dans cette liste.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;juste avant votre boucle, créez une variable nbSurvivants qui sera égale à zero&lt;/li&gt;
&lt;li&gt;dans votre boucle, ajoutez une condition qui indique &amp;lsquo;si cette personne a survecu, alors mon compteur nbSurvivant augmente de 1&amp;rsquo;&lt;/li&gt;
&lt;li&gt;remplacez nbPassagers par nbSurvivants dans la valeur de retour de la fonction.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;testez votre fonction. à l&amp;rsquo;aide de la variable nbPassagers, calculez le taux de survie global sur le Titanic&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers):
nbSurvivants = 0
    
for i in range(totalPassagers):   
        
    if survided[i] == 1:            
        nbSurvivants += 1 
            
tauxDeSurvie = (nbSurvivants/totalPassagers) * 100
    
return(tauxDeSurvie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;38.38383838383838&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5) Ajout d&amp;rsquo;un critère&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ajouter un deuxième paramètre &amp;lsquo;sexePassager&amp;rsquo; à la fonction qui prendra soit la valeur &amp;lsquo;male&amp;rsquo;, soit la valeur &amp;lsquo;female&amp;rsquo;&lt;/li&gt;
&lt;li&gt;juste avant votre boucle, créez une variable nbPassagersCritere qui sera égale à zero&lt;/li&gt;
&lt;li&gt;Dans votre boucle, ajouter une nouvelle condition à la suite de la première permettant d&amp;rsquo;indiquer &amp;lsquo;si le passager a un sexe correspondant à la valeur renseignée dans la variable &amp;lsquo;sexePassager&amp;rsquo;, alors nbPassagersCritere augmente de 1&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Modifiez maintenant votre première condition en ajoutant la contrainte &amp;lsquo;le passager a survecu ET le passager à un sexe correspondant à la valeur renseignée dans la variable &amp;lsquo;sexePassager&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers, sexePassager):
nbSurvivants = 0
nbPassagersCritere = 0
    
for i in range(totalPassagers):
        
    if sexe[i] == sexePassager:
        nbPassagersCritere += 1
            
    if survided[i] == 1 and sexe[i] == sexePassager:
        nbSurvivants += 1 
            
tauxDeSurvie = (nbSurvivants/nbPassagersCritere) * 100
    
return(tauxDeSurvie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers, &#39;male&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;18.890814558058924&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers, &#39;female&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;74.20382165605095&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6) analyse
- A la suite de votre boucle, créez la variable &amp;lsquo;tauxDeSurvie&amp;rsquo;, qui va diviser nbSurvivants par nbPassagersCritere
- remplacez nbSurvivants par tauxDeSurvie dans la valeur de retour de la fonction.
- calculez le taux de survie des hommes et celui des femmes. Analysez les résultats.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers, trancheAge):
    nbSurvivants = 0
    nbPassagersCritere = 0
    
    for i in range(totalPassagers):
        
        if age[i] &amp;gt; trancheAge[0] and age[i] &amp;lt;=  trancheAge[1]:
            nbPassagersCritere += 1
            
            if survided[i] == 1:
                nbSurvivants += 1 
            
    tauxDeSurvie = nbSurvivants/nbPassagersCritere
    
    return(tauxDeSurvie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers, [0,15])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.5903614457831325
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers, [15,100])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.3626237623762376
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>7- La librairie Numpy - Cours</title>
      <link>/courses/formation_python/7-numpy/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/7-numpy/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/numpy.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-utilisation-de-la-librairie-numpy-numerical-python&#34;&gt;7- Utilisation de la librairie Numpy  (Numerical Python):&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bibliothèque Python importante en calcul scientifique, cette librairie est appelée dans beaucoup d&amp;rsquo;autres librairies&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Intègre une nouvelle structure de données: les ndarray (N-dimensional array). Ce sont des vecteurs (tableaux à 1 dimension), tableaux à plusieurs dimensions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Intègre un ensemble de fonctions développées en C. Calcul performant sur les calculs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisé dans tous les projets de calculs numériques&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Les ndarray se manipulent comme les listes et les tubles MAIS ne peut contenir qu&amp;rsquo;un seul type de données.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nous allons voir comment initialiser des tableaux Numpy de plusieurs façons, accéder aux valeurs dans les tableaux, effectuer des opérations mathématiques et matricielles, et utiliser des tableaux aussi bien pour le masquage que pour les comparaisons.&lt;/p&gt;

&lt;h2 id=&#34;7-1-création-d-un-tableau-numpy-ou-ndarray&#34;&gt;7.1- Création d&amp;rsquo;un tableau Numpy ou ndarray&lt;/h2&gt;

&lt;p&gt;Plusieurs techniques sont mises à disposition pour créer des tableaux Numpy.&lt;/p&gt;

&lt;p&gt;Tout d’abord, vous devez importer Numpy avec le code suivant:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On va importer la librairie Numpy et créer un alias. 
# Les alias permettent d&#39;alléger l&#39;écriture des codes. 
import numpy as np
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Contrairement à une liste, vous ne pouvez pas créer de tableaux Numpy vides. Vous trouverez ci-dessous plusieurs façons d’initialiser un tableau Numpy en fonction de vos besoins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;array()&lt;/b&gt; pour créer un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau1 = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])
tableau1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
       18, 19, 20])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Création d&amp;rsquo;un tableau bi-dimensionnel avec des lignes et des colonnes; on crée une liste de liste. Chaque liste est une ligne du tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Exemple d&#39;un tableau avec 3 lignes et 3 colonnes
tableau2 = np.array([[1,2,3], [4,5,6]])
tableau2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Exemple d&#39;un tableau avec 3 lignes et 3 colonnes
tableau3 = np.array([[1,2,3], [4,5,6], [7,8,9]])
tableau3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;range()&lt;/b&gt; pour créer un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau4 = np.array(range(10)) # tableau avec des chiffres de 0 à 9
tableau4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;arange()&lt;/b&gt; pour créer un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(1, 100, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33,
       35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67,
       69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(0, 1, 0.1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.linspace(0, 100, 11)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;zeros()&lt;/b&gt; pour créer un tableau Numpy avec des zéros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau5 = np.zeros((4,3)) # tableau contenant 4 lignes et 3 colonnes de 0
tableau5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;ones()&lt;/b&gt; pour créer un tableau Numpy avec des 1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau6 = np.ones((4,3)) # tableau contenant 2 lignes 2 colonnes de 1
tableau6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;identity()&lt;/b&gt; pour créer une matrice Numpy identité:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau7 = np.identity(4) # Matrice Identité de dimension 4
tableau7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conversion d&amp;rsquo;une liste en tableau numpy avec la fonction &lt;b&gt;array()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste = [0,1,2,3,4,5,6]
ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[0, 1, 2, 3, 4, 5, 6]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau8 = np.array(ma_liste)
tableau8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0, 1, 2, 3, 4, 5, 6])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;random()&lt;/b&gt; pour créer un tableau Numpy  avec des valeurs aléatoires:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau9 = np.random.randint(100,size=(4,3))  # Exemple création d&#39;un tableau 4*3 random avec valeurs comprises entre 0 et 100 
tableau9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[81, 80, 96],
       [43, 12, 53],
       [53, 83,  5],
       [73, 73, 31]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-2-accéder-aux-données-d-un-tableau-numpy-ou-ndarray&#34;&gt;7.2- Accéder aux données d&amp;rsquo;un tableau Numpy ou ndarray&lt;/h2&gt;

&lt;p&gt;Nous pouvons accéder à un élément individuellement ou à une tranche de valeurs par slicing.&lt;/p&gt;

&lt;p&gt;Semblable aux listes, le premier élément est indexé à 0. Par exemple, array1[0,0] indique que nous accédons à la première ligne et à la première colonne.&lt;/p&gt;

&lt;p&gt;Le premier nombre du tuple [0,0] indique l’index de la ligne et le deuxième nombre indique l’index de la colonne:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau = np.array([[1,2,3], [4,5,6], [7,8,9]])
mon_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Voici quelques exemples pour accéder à des éléments individuels d&amp;rsquo;un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[1,2]     # On veut accéder à l&#39;élément situé à la ligne d&#39;index 1 et la colonne d&#39;index 2 
                 #  ndarray(row,column) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[1,-1]    # On veut accéder à l&#39;élément situé à la ligne d&#39;index 1 et à la colonne ayant le dernier index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[0,1]     # On veut accéder à l&#39;élément situé à la ligne d&#39;index 0 et la colonne d&#39;index 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[1,0]     # On veut accéder à l&#39;élément situé à la ligne d&#39;index 1 et la colonne d&#39;index 0                     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exemples pour accéder à des tranches d&amp;rsquo;un tableau Numpy: &lt;b&gt;Slicing&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[:,0]    # On veut toutes les lignes de la colonne d&#39;index 0 (slicing)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([1, 4, 7])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[0,:]    # On veut toutes les colonnes de la ligne d&#39;index 0 (slicing)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([1, 2, 3])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[:,0:3:2] # On veut toutes les lignes et les colonnes d&#39;index de 0 à 3 avec pas de 2.
                 # Donc toutes les lignes et les colonnes 1 et 2 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1, 3],
       [4, 6],
       [7, 9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[:,-1]  # On veut toutes les lignes de la dernière colonne
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([3, 6, 9])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[:,1:-1] # On veut toutes les lignes entre la colonne d&#39;index 1 et la dernière colonne
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[2],
       [5],
       [8]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[2,1:-1] # On veut les valeurs de la ligne d&#39;index 2 entre la colonne d&#39;index 1 et la dernière colonne
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([8])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-3-calculs-mathématiques-et-matriciels-sur-un-tableau-numpy&#34;&gt;7.3- Calculs mathématiques et matriciels sur un tableau Numpy:&lt;/h2&gt;

&lt;p&gt;Les tableaux Numpy sont très faciles à manipuler: on peut les concaténer, ajouter des valeurs, les multiplier, les transposer avec une seule ligne de code.&lt;/p&gt;

&lt;p&gt;Vous trouverez ci-dessous quelques exemples d’opérations arithmétiques et multiplicatives variées avec les tableaux Numpy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 = np.arange(9).reshape(3,3)
array1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2 = np.random.randint(50, size=(3,3))
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[28,  8, 34],
       [40, 44,  6],
       [23, 41, 40]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Opérations arithmétiques de base: addition, soustraction, multiplication, division&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 + 10 # ajouter une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[10, 11, 12],
       [13, 14, 15],
       [16, 17, 18]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 - 10 # soustraire une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[-10,  -9,  -8],
       [ -7,  -6,  -5],
       [ -4,  -3,  -2]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 * 100 # multiplier une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[  0, 100, 200],
       [300, 400, 500],
       [600, 700, 800]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1[:,0] * 10 # on multiplie par 10 toutes les lignes de la colonne d&#39;index 0.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 0, 30, 60])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 / 2 # diviser une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[0. , 0.5, 1. ],
       [1.5, 2. , 2.5],
       [3. , 3.5, 4. ]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;quelques fonctions et méthodes Numpy applicables sur les tableaux Numpy:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.all.html#numpy.all&#34; title=&#34;numpy.all&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;all&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.any.html#numpy.any&#34; title=&#34;numpy.any&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;any&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis&#34; title=&#34;numpy.apply_along_axis&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;apply_along_axis&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmax.html#numpy.argmax&#34; title=&#34;numpy.argmax&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argmax&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmin.html#numpy.argmin&#34; title=&#34;numpy.argmin&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argmin&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argsort.html#numpy.argsort&#34; title=&#34;numpy.argsort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argsort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.average.html#numpy.average&#34; title=&#34;numpy.average&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;average&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.bincount.html#numpy.bincount&#34; title=&#34;numpy.bincount&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;bincount&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ceil.html#numpy.ceil&#34; title=&#34;numpy.ceil&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ceil&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.clip.html#numpy.clip&#34; title=&#34;numpy.clip&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;clip&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.conj.html#numpy.conj&#34; title=&#34;numpy.conj&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;conj&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.corrcoef.html#numpy.corrcoef&#34; title=&#34;numpy.corrcoef&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;corrcoef&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cov.html#numpy.cov&#34; title=&#34;numpy.cov&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cov&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cross.html#numpy.cross&#34; title=&#34;numpy.cross&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cross&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cumprod.html#numpy.cumprod&#34; title=&#34;numpy.cumprod&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cumprod&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cumsum.html#numpy.cumsum&#34; title=&#34;numpy.cumsum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cumsum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.diff.html#numpy.diff&#34; title=&#34;numpy.diff&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;diff&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.dot.html#numpy.dot&#34; title=&#34;numpy.dot&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;dot&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.floor.html#numpy.floor&#34; title=&#34;numpy.floor&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;floor&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.inner.html#numpy.inner&#34; title=&#34;numpy.inner&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;inner&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.lexsort.html#numpy.lexsort&#34; title=&#34;numpy.lexsort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;lexsort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#max&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;max&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.maximum.html#numpy.maximum&#34; title=&#34;numpy.maximum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;maximum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.mean.html#numpy.mean&#34; title=&#34;numpy.mean&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;mean&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.median.html#numpy.median&#34; title=&#34;numpy.median&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;median&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#min&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;min&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.minimum.html#numpy.minimum&#34; title=&#34;numpy.minimum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;minimum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.nonzero.html#numpy.nonzero&#34; title=&#34;numpy.nonzero&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;nonzero&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.outer.html#numpy.outer&#34; title=&#34;numpy.outer&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;outer&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/re.html#module-re&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;re&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#round&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;round&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.sort.html#numpy.sort&#34; title=&#34;numpy.sort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;sort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.std.html#numpy.std&#34; title=&#34;numpy.std&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;std&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.sum.html#numpy.sum&#34; title=&#34;numpy.sum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;sum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.trace.html#numpy.trace&#34; title=&#34;numpy.trace&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;trace&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.transpose.html#numpy.transpose&#34; title=&#34;numpy.transpose&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;transpose&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.var.html#numpy.var&#34; title=&#34;numpy.var&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;var&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vdot.html#numpy.vdot&#34; title=&#34;numpy.vdot&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vdot&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vectorize.html#numpy.vectorize&#34; title=&#34;numpy.vectorize&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vectorize&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.where.html#numpy.where&#34; title=&#34;numpy.where&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;where&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.add(array1,10) # ajouter une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[10, 11, 12],
       [13, 14, 15],
       [16, 17, 18]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.subtract(array1,10) # soustraire une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[-10,  -9,  -8],
       [ -7,  -6,  -5],
       [ -4,  -3,  -2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.multiply(array1,100) # multiplier une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  0, 100, 200],
       [300, 400, 500],
       [600, 700, 800]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.divide(array1, 2) # diviser une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0. , 0.5, 1. ],
       [1.5, 2. , 2.5],
       [3. , 3.5, 4. ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1) # calcul de la moyenne du tableau Numpy à partir de la fonction mean()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.mean()  # calcul de la moyenne du tableau Numpy à partir de la méthode mean()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.min()  # calcul de la valeur minimale du tableau Numpy à partir de la méthode min()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.max()  # calcul de la valeur maximale du tableau Numpy à partir de la méthode max()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1, axis=0)  # si on veut appliquer une fonction uniquement sur les colonnes 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([3., 4., 5.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1, axis=1) # si on veut appliquer une fonction uniquement sur les lignes 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1., 4., 7.])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Opérations entre plusieurs tableaux&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(array1 +1) * array2 # multiplication de 2 tableaux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 28,  16, 102],
       [160, 220,  36],
       [161, 328, 360]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 + array2 # somme de 2 tableaux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[28,  9, 36],
       [43, 48, 11],
       [29, 48, 48]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.dot(array1, array2) # produit scalaire de 2 tableaux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 86, 126,  86],
       [359, 405, 326],
       [632, 684, 566]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-4-modifier-des-tableaux-numpy&#34;&gt;7.4- Modifier des tableaux Numpy:&lt;/h2&gt;

&lt;p&gt;Parmi les autres fonctionnalités intéressantes figurent la concaténation, le fractionnement, la transposition (changement d’éléments d’une rangée à l’autre et vice versa) et l’obtention des éléments en diagonale.&lt;/p&gt;

&lt;p&gt;a)- Pour manipuler/modifier les dimensions d&amp;rsquo;un tableau Numpy:&lt;/p&gt;

&lt;p&gt;La dimension d&amp;rsquo;un tableau est donnée par le nombres d&amp;rsquo;élélements suivant chaque axe.
On a des méthodes spécifiques et des attributs spécifiques aux ndarray():&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ndim&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Attribut pour connaitre la dimension d&#39;un tableau Numpy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;shape&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Attribut pour connaitre les dimension d&#39;un tableau Numpy &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;dtype&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Attribut pour connaitre le type de notre array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;size&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Attibut pour connaitre la taille de notre array&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.floor(10*np.random.random((3,4)))
print(a, a.shape, a.ndim)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[2. 5. 1. 0.]
 [5. 0. 0. 1.]
 [7. 7. 5. 0.]] (3, 4) 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Selon nos besoins en programmation, on peut modifier la dimension d&amp;rsquo;un tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.ravel()  # écrit notre tableau sur 1 dimension (flattened) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([2., 5., 1., 0., 5., 0., 0., 1., 7., 7., 5., 0.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.reshape(6,2)  # fonction reshape() pour modifier la dimension de notre tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[2., 5.],
       [1., 0.],
       [5., 0.],
       [0., 1.],
       [7., 7.],
       [5., 0.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.T  # méthode .T pour calculer la transposée de notre tableau. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[2., 5., 7.],
       [5., 0., 7.],
       [1., 0., 5.],
       [0., 1., 0.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(a.T.shape, a.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(4, 3) (3, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La fonction reshape renvoie son argument avec une forme modifiée, alors que la méthode ndarray.resize modifie le tableau lui-même:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.resize((2,6))
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[2., 5., 1., 0., 5., 0.],
       [0., 1., 7., 7., 5., 0.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si une dimension est définie à -1 dans une opération de reformage, les autres dimensions sont automatiquement calculées:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.reshape(4,-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[2., 5., 1.],
       [0., 5., 0.],
       [0., 1., 7.],
       [7., 5., 0.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b)- Travailler et modifier un sous-ensemble d&amp;rsquo;un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notre_tableau = np.array([[1,2,3], [4,5,6], [7,8,9]])
notre_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On va sélectionner un sous-ensemble de notre tableau en prenant la ligne d&amp;rsquo;index 0 .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sous_tableau = notre_tableau[0]
sous_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On va modifier la première valeur de notre tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sous_tableau[0] = 100
sous_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([100,   2,   3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mais en modifiant notre sous tableau, on se rend compte que nous avons modifié notre_tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notre_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[100,   2,   3],
       [  4,   5,   6],
       [  7,   8,   9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une modification du sous-ensemble entraîne une modification du tableau initial .
On dit que sous_tableau est une vue de notre tableau. Raison: travailler avec des gros volumes de données.&lt;/p&gt;

&lt;p&gt;Si on veut vraiment travailler avec un sous ensemble sans modifier notre tableau d&amp;rsquo;origine, il faut faire une copie avec la fonction &lt;b&gt;copy()&lt;/b&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notre_tableau = np.array([[1,2,3], [4,5,6], [7,8,9]])
sous_tableau=notre_tableau[0].copy()
sous_tableau[0]=101
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sous_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([101,   2,   3])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notre_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c)- Pour concatener des tableaux Numpy:&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vstack.html#numpy.vstack&#34; title=&#34;numpy.vstack&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vstack&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.column_stack.html#numpy.column_stack&#34; title=&#34;numpy.column_stack&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;column_stack&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.concatenate.html#numpy.concatenate&#34; title=&#34;numpy.concatenate&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;concatenate&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pour concatener des tableaux Numpy: fonction &lt;b&gt;concatenate()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1=np.array([[1,2,3],[4,5,6],[7,8,9]])
array1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2=np.array([[2,5,6],[9,10,11],[5,6,9]])
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 2,  5,  6],
       [ 9, 10, 11],
       [ 5,  6,  9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.concatenate([array1,array2], axis=0)   # concaténer par lignes  (axis = 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [ 2,  5,  6],
       [ 9, 10, 11],
       [ 5,  6,  9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.concatenate([array1,array2], axis=1)   # concaténer par colonnes  (axis = 1) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 1,  2,  3,  2,  5,  6],
       [ 4,  5,  6,  9, 10, 11],
       [ 7,  8,  9,  5,  6,  9]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si on souhaite concatener des tableaux n&amp;rsquo;ayant pas les mêmes dimensions, on ne va pas utiliser
la fonction concatenate(), mais:
- la fonction &lt;b&gt;vstack()&lt;/b&gt; pour empiler à la verticale
- la fonction &lt;b&gt;hstack()&lt;/b&gt; pour empliler à l&amp;rsquo;horizontale&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array3=np.array([10,20,30]) # Création d&#39;un array() de 1D.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([10, 20, 30])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array4=np.array([[1,2,3],[4,5,6],[7,8,9]]) # Création d&#39;un array() bi-dimentionnel
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#np.concatenate([array3,array4])
np.vstack([array4,array3])   #  On va concatener à la verticale les deux tableaux 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 20, 30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array5=np.array([[10],[20],[30]]) # Tableau à 2 dimensions à 2 colonnes
array5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[10],
       [20],
       [30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.hstack([array4,array5]) #  On va empiler à l&#39;horizontale les deux tableaux 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3, 10],
       [ 4,  5,  6, 20],
       [ 7,  8,  9, 30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une autre fonction intéressante à connaitre est la fonction &lt;b&gt;column_stack()&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Cette fonction empile des tableaux 1D sous forme de colonnes dans un tableau 2D. Cela équivaut à hstack uniquement pour les tableaux 2D.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.array([4.,2.,1.]) # on utilise un tableau 1 D, que nous souhaitons concaténer avec le tableau 2D array4
print(a.shape, array4.shape)
print(a.ndim, array4.ndim)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(3,) (3, 3)
1 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# np.hstack([array4,a]) # problème de dimension
np.column_stack([array4,a])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1., 2., 3., 4.],
       [4., 5., 6., 2.],
       [7., 8., 9., 1.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d)- Pour découper des tableaux Numpy:&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est le contraire de la concatenation.
Nous avons les fonctions split(), hsplit() et vsplit() .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array=np.array([15,16,17,12,49,52,12,14,36]) # on crée un array à 1 D. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(array) # taille de notre array 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.split(array,3) # séparer le tableau array en 3 tableaux
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[array([15, 16, 17]), array([12, 49, 52]), array([12, 14, 36])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut découper notre tableau avec des points de cassure délimités par les index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.split(array,[2,6]) # on veut couper notre tableau en 3 tableaux , les chiffres entre [] sont les points de cassures. 
                      # correspond aux index où on coupe. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[array([15, 16]), array([17, 12, 49, 52]), array([12, 14, 36])]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array2,array3=np.split(array,[2,6]) # on peut multi-assigner notre cassure
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(array1,array2,array3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[15 16] [17 12 49 52] [12 14 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array2,array3,array4=np.split(array,[2,4,6]) # selon le nombre de points de cassure, on a le nombre de tableaux. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(array1,array2,array3,array4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[15 16] [17 12] [49 52] [12 14 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour casser des tableaux à 2 dimensions. on utilise hsplit ou vsplit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2=np.array([[1,2,3],[4,5,6],[7,8,9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array1bis=np.vsplit(array2, [2]) # on coupe à la verticale au point de cassure de niveau 2 
print(array1,array1bis)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1 2 3]
 [4 5 6]] [[7 8 9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array1bis=np.hsplit(array2,[2]) # on coupe à l&#39;horizontal au point de cassure de niveau 2 
print(array1,array1bis)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1 2]
 [4 5]
 [7 8]] [[3]
 [6]
 [9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e)- Pour supprimer des rangées et colonnes des tableaux Numpy: &lt;b&gt;delete()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array=np.array([[1,2,3],[4,5,6],[7,8,9]])
array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.delete(array,2,axis=0) # supprime la ligne d&#39;index 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.delete(array2,2,axis=1) # supprime la colonne d&#39;index 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2],
       [4, 5],
       [7, 8]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;f)- Pour calculer la transposer d&amp;rsquo;un tableau Numpy: &lt;b&gt;transpose()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.transpose(array)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 4, 7],
       [2, 5, 8],
       [3, 6, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;g)- Pour obtenir les valeurs de la diagonale d&amp;rsquo;un tableau Numpy: &lt;b&gt;diagonal()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array.diagonal() # obtenir les éléments de la diagonale de array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 5, 9])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;7-5-comparaisons-et-masques-sur-un-tableau-numpy&#34;&gt;7.5- Comparaisons et masques sur un tableau Numpy:&lt;/h2&gt;

&lt;p&gt;Avec les tableaux Numpy, il est possible d&amp;rsquo;utiliser une matrice booléenne pour filtrer et comparer des tableaux Numpy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau = np.random.randint(100,size=(6,6))  # création d&#39;un tableau 4*3 random avec valeurs comprises entre 0 et 100 
tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[75, 94, 60, 30, 13, 61],
       [82, 96, 64, 97, 29, 99],
       [76, 19, 73, 74, 11,  5],
       [83, 38, 77, 58, 63, 84],
       [79, 94, 10,  5,  6, 75],
       [40, 53, 22, 67, 44, 56]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;masque = tableau&amp;gt;50# on génère ici un tableau de la même dimension que notre tableau d&#39;origine mais avec des booléens, comme un masque
masque
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ True,  True,  True, False, False,  True],
       [ True,  True,  True,  True, False,  True],
       [ True, False,  True,  True, False, False],
       [ True, False,  True,  True,  True,  True],
       [ True,  True, False, False, False,  True],
       [False,  True, False,  True, False,  True]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Étant tout deux de même dimension, nous pouvons utiliser cette matrice booléenne à notre avantage. Autrement dit, nous pouvons faire du masquage booléen. Avec cette matrice booléenne comme masque, nous pouvons l’utiliser pour sélectionner le sous-ensemble particulier de données qui nous intéresse.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau[masque] 
#tableau[tableau&amp;gt;50]  # synthaxe équivalente
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([75, 94, 60, 61, 82, 96, 64, 97, 99, 76, 73, 74, 83, 77, 58, 63, 84,
       79, 94, 75, 53, 67, 56])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous disposons de nombreux autres opérateurs de comparaison pour comparer deux tableaux tels que == (égalité), != (Non-égalité), &amp;lt;= (inférieur ou égal à). Nous pouvons même combiner deux déclarations booléennes &amp;amp; (pour les conditions “ET”) ou | (pour les conditions “OU”).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tableau[tableau&amp;gt;=50]                 # on souhaite garder uniquement les valeurs supérieures ou égales à  50.
#tableau[tableau&amp;lt;50]                      # on souhaite garder uniquement les valeurs strictement inférieures à 50.
#tableau[tableau!=50]                     # on souhaite garder uniquement les valeurs différentes de 50.
#tableau[tableau==50]                     # on souhaite garder uniquement les valeurs égales 50. 
#tableau[(tableau &amp;gt;=50) &amp;amp; (tableau &amp;lt;=70)]   # on souhaite garder uniquement les valeurs comprises entre 50 et 70 inclusivement.
tableau[(tableau&amp;gt;=50) | (tableau&amp;lt;=40)]     # on souhaite garder uniquement les valeurs non comprises entre 40 et 50. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([75, 94, 60, 30, 13, 61, 82, 96, 64, 97, 29, 99, 76, 19, 73, 74, 11,
        5, 83, 38, 77, 58, 63, 84, 79, 94, 10,  5,  6, 75, 40, 53, 22, 67,
       56])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>7- La librairie Numpy - Exercice</title>
      <link>/courses/formation_python/7-numpy-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/7-numpy-exercice/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;h1&gt; TP : Analyse de données de station &lt;/h1&gt;&lt;/p&gt;

&lt;p&gt;Objectifs: manipuler des données ascii de stations uniquement avec la librairie Numpy.&lt;/p&gt;

&lt;p&gt;Ensemble : lecture du fichier contenant les données journalières de précipitation et de température pour la station d&amp;rsquo;Ottawa pour l&amp;rsquo;année 2017&lt;/p&gt;

&lt;p&gt;1- Créer un tableau Numpy ayant une colonne pour la température et une colonne pour la précipitation. (avec deux tableaux Numpy 1D, créer un tableau 2D (365 lignes et 2 colonnes).&lt;/p&gt;

&lt;p&gt;2- Convertir les données de températures en Celcius (T[Celcius] = T[Kelvin] - 273.15).&lt;/p&gt;

&lt;p&gt;3- Combien de journées ont une accumulation supérieure à 25mm ?&lt;/p&gt;

&lt;p&gt;4- Quelle température a été enregistrée pour la journée présentant la plus grande accumulation.&lt;/p&gt;

&lt;p&gt;5- Calculer le nombre de degrés jours (&amp;gt;0degC) pour l&amp;rsquo;année 2017.&lt;/p&gt;

&lt;p&gt;6- Calculer le cumul journalier de précipitation pour l&amp;rsquo;année 2017 et assigner cette variable au tableau cumul_precipitation. Ajouter le tableau cumul_precipitation au tableau.&lt;/p&gt;

&lt;p&gt;7- Juste pour l’exercice, splitter (casser) l’array en 2 tableaux, puis les concaténer à nouveau pour obtenir le tableau initial.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
# pour lire un fichier csv avec numpy: appel de la fonction genfromtxt()
temperature = np.genfromtxt(&amp;quot;./OTTAWA_tasmoy_2017.csv&amp;quot;, dtype=float)
precipitation = np.genfromtxt(&amp;quot;./OTTAWA_PrecTOT_2017.csv&amp;quot;, dtype=float)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(temperature.shape, precipitation.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(365,) (365,)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#1- Créer un tableau Numpy ayant une colonne pour la température et une colonne pour la précipitation. 
#   (avec deux tableaux Numpy 1D, créer un tableau 2D (365 lignes et 2 colonnes).

tableau = np.column_stack([temperature,precipitation])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tableau = np.hstack([temperature,precipitation])
tableau = np.hstack([temperature.reshape(len(temperature),-1),precipitation.reshape(len(precipitation),-1)])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tableau.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(365, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#2- Convertir les données de températures en Celcius (T[Celcius] = T[Kelvin] - 273.15).
tableau[:,0]=tableau[:,0]-273.15  # on prend toutes les lignes de la première colonne 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3- Combien de journées ont une accumulation supérieure à 25mm ?
tableau[tableau[:,1]&amp;gt;=25]    # On filtre toutes les lignes de la 2ème colonne 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in greater_equal






array([[-1.8 , 26.57],
       [ 2.3 , 25.84],
       [ 3.3 , 28.49],
       [ 4.5 , 31.14],
       [ 8.8 , 35.22],
       [ 8.3 , 40.12],
       [16.  , 25.84],
       [17.3 , 37.26],
       [16.  , 26.04],
       [15.8 , 45.01]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# pour connaitre le nombre de jours, on utilise la fonction len()
len(tableau[tableau[:,1]&amp;gt;=25])  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in greater_equal






10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 4- Quelle température a été enregistrée pour la journée présentant la plus grande accumulation.
precipitation_max = np.nanmax(tableau[:,1]) # on cherche le maximum d&#39;accumulation avec la fonction max()
print(precipitation_max)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;45.01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau[tableau[:,1] == precipitation_max] # on cherche sur toutes les lignes de la deuxième colonne celle qui correspond à notre variable precipitation_max
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[15.8 , 45.01]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 5- Calculer le nombre de degrés jours (&amp;gt;0degC) pour l&#39;année 2017. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(tableau[:,1][tableau[:,1]&amp;gt;0])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in greater
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.





1328.5300000000002
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 6- Calculer le cumul journalier de précipitation pour l&#39;année 2017
cumul_precipitation = np.nancumsum(tableau[:,1])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Ajouter le tableau cumul_precipitation au tableau. 
tableau = np.column_stack([tableau, cumul_precipitation])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 7. spliter (casser) l’array en 3 tableaux, puis concaténer à nouveau pour obtenir le tableau initial.

# on assigne les trois tableaux et on fait une coupure horizontale avec la fonction hsplit()
temperature2,precipitation2,cumul2 = np.hsplit(tableau, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour revenir à notre tableau original, on utilise la fonction concatenate avec l&#39;option axis = 1 
tableau_original=np.concatenate([temperature2+273.15, precipitation2], axis = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>8- La librairie Pandas - Exercice</title>
      <link>/courses/formation_python/8-pandas-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/8-pandas-exercice/</guid>
      <description>&lt;h1&gt;TP: Analyse d&#39;un listing de 10 000 chaussures vendues en ligne&lt;/h1&gt;

&lt;p&gt;source du dataset : &lt;a href=&#34;https://www.kaggle.com/datafiniti/womens-shoes-prices&#34; target=&#34;_blank&#34;&gt;https://www.kaggle.com/datafiniti/womens-shoes-prices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nous allons analyser un data set contenant 10 000 chaussures avec de nombreuse caractéristiques comme le prix, les couleurs disponibles, les tailles disponibles, leurs poids&amp;hellip;&lt;/p&gt;

&lt;p&gt;Voici une traduction de la description des colonnes principales :
- asins : Une liste des ASIN (identificateurs d&amp;rsquo;Amazon) utilisés pour ce produit.
- brand : Le nom de marque de ce produit.
- categories : Une liste de mots-clés de catégorie utilisés pour ce produit dans plusieurs sources.
- colors : Une liste de couleurs disponibles pour ce produit.
- count : Le nombre d&amp;rsquo;unités incluses dans l&amp;rsquo;emballage du produit. Peut inclure une description de l&amp;rsquo;unité.
- dateAdded : La date à laquelle ce produit a été ajouté pour la première fois à la base de données des produits.
- dateUpdated : La date la plus récente à laquelle ce produit a été mis à jour ou vu par notre système.
- descriptions : Une liste des descriptions de ce produit provenant de diverses sources. Chaque description contient :
- dimension : La longueur, la largeur et la hauteur de ce produit. Unités incluses.
- ean : Les codes EAN de ce produit. Il peut y avoir plus d&amp;rsquo;un EAN dans la liste lorsqu&amp;rsquo;un produit a plusieurs variantes,
- financingAndLeasing : Une liste des conditions de financement ou de location associées à ce produit
- features : Une liste des caractéristiques associées à ce produit. La liste des caractéristiques peut être obtenue à partir des sections de caractéristiques spécifiques disponibles dans la liste des produits du produit.
- manufacturer : Numéro du fabricant
- merchants : Une liste des marchands qui vendent ce produit. Il s&amp;rsquo;agit généralement de marchands tiers que l&amp;rsquo;on trouve sur les sites Web de commerce électronique.
- name : dénomination du produit
- prices : Une liste de prix pour ce produit.
- primaryCategories : Une liste des catégories normalisées auxquelles ce produit appartient. Les valeurs des catégories peuvent être trouvées ici.
- quantities : Une liste des quantités disponibles pour ce produit. Les quantités indiquent combien d&amp;rsquo;unités du produit sont disponibles auprès d&amp;rsquo;une source spécifique à un moment donné.
- reviews : Une liste de commentaires pour ce produit.
- sizes : Une liste des tailles disponibles pour ce produit.
- skus : Une liste des références de ce produit. Les SKU sont typiquement spécifiques aux détaillants individuels ou aux sites Web.
- sourceURLs : Une liste d&amp;rsquo;URLs utilisées pour générer les données de ce produit.
- upc : Le code CUP de ce produit.
- websiteIDs : Une liste d&amp;rsquo;identifiants de site Web pour ce produit. Les ID de site Web sont liés à un détaillant en ligne spécifique. Il s&amp;rsquo;agit de l&amp;rsquo;identifiant unique utilisé par le site Web. Ils sont utilisés par Datafiniti lorsque d&amp;rsquo;autres identificateurs uniques ne sont pas disponibles pour un produit.
- weight : Le poids du produit. Unités incluses.&lt;/p&gt;

&lt;p&gt;La source &lt;a href=&#34;https://developer.datafiniti.co/docs/product-data-schema&#34; target=&#34;_blank&#34;&gt;https://developer.datafiniti.co/docs/product-data-schema&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Exercices &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Découverte du data set&lt;/b&gt;&lt;br&gt;
1) à l&amp;rsquo;aide de la fonction read_csv, importez entièrement le data set de enregistrez dans le dataframe &amp;lsquo;Shoes&amp;rsquo; &lt;br&gt;
2) Utilisez la méthode .head() pour afficher les premières lignes &lt;br&gt;
3) Il y a trop de colonnes&amp;hellip;Pour avoir une vue d&amp;rsquo;ensemble changez le paramétrage de pandas avec set_option pour afficher les 34 colonnes. Une fois cela fait, affichez à nouveau le head de la page &lt;br&gt;
4) On va garder uniquement les colonnes qui nous interessent. grace à la méthode de sélection de plusieurs colonnes, créez un dataframe &amp;lsquo;ShoesLight&amp;rsquo;, comprenant unique les colonnes suivantes :&amp;lsquo;id&amp;rsquo;,&amp;lsquo;name&amp;rsquo;,&amp;lsquo;dateUpdated&amp;rsquo;,&amp;lsquo;colors&amp;rsquo;,&amp;lsquo;prices.amountMax&amp;rsquo;,&amp;lsquo;prices.amountMin&amp;rsquo;,&amp;lsquo;prices.merchant&amp;rsquo;. &lt;br&gt;Affichez le head de ShoesLight.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; data cleaning &lt;/b&gt; &lt;br&gt;
5) A l&amp;rsquo;aide de la méthode .dtypes, consultez les types de chaque colonne. Ecrivez en markdown celles devant être corrigées et comment. &lt;br&gt;
6) A l&amp;rsquo;aide des méthodes .isnull, .sum() et len(), calculez le % de valeurs maquantes par colonne. Notez en markdown celles qui sont problématiques. &lt;br&gt;
7) Il manque trop de valeurs pour les colonnes des e-commercant et des couleurs. Retirez les du dataframe shoesLight &lt;br&gt;
8) A l&amp;rsquo;aide de la méthode .to_datetime, transformez la colonne &amp;lsquo;dateUpdated&amp;rsquo;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; features modeling &lt;/b&gt; &lt;br&gt;
9) caculez la colonne &amp;lsquo;prices.amountAverage&amp;rsquo; en additionnant les colonnes &amp;lsquo;prices.amountMax&amp;rsquo; et &amp;lsquo;prices.amountMin&amp;rsquo; et en divisant par 2 &lt;br&gt;
10) grace à la méthode dt.weekday, créez une colonne &amp;lsquo;dayOfweekUpdated&amp;rsquo;, permettant de connaitre à partir de dateUpdated le jour de la semaine où les produits sont mis à jour&lt;/p&gt;

&lt;p&gt;&lt;b&gt; data analyse &lt;/b&gt; &lt;br&gt;&lt;/p&gt;

&lt;p&gt;11) Analyser le prix moyen des chaussures avec la methode .desribe() &lt;br&gt;
12) Y-a-t-il de grandes différences de prix en fonction de la marque ? A l&amp;rsquo;aide des methodes groupby(), mean() et sort_values(), créez une varaible &amp;lsquo;Luxe&amp;rsquo; contenant les 10 marques les plus chères, puis la variable &amp;lsquo;lowCost&amp;rsquo; contenant les 10 marques les moins chères. &lt;br&gt;
13) grace à la méthode value_counts(), determinez le jour de la semaine où les produits sont le plus souvent mis à jour &lt;br&gt;
14) (optionnel) donnez le prix moyen des produits de la marque &amp;lsquo;easy street&amp;rsquo; mis à jour un jeudi&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Découverte du data set&lt;/b&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
from tabulate import tabulate
shoes = pd.read_csv(&#39;Datafiniti_Womens_Shoes.csv&#39;, encoding = &#39;latin-1&#39;, sep=&#39;,&#39;)
pd.set_option(&amp;quot;display.max_columns&amp;quot;, 35)
print(tabulate(shoes.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | id                   | dateAdded            | dateUpdated          |   asins | brand       | categories                                                          | primaryCategories   | colors                         | dimension                |          ean | imageURLs| keys                                                                                                                                                                                                                           | manufacturer   | manufacturerNumber   | name                                                          |   prices.amountMax |   prices.amountMin | prices.availability   | prices.color       | prices.condition   | prices.currency   | prices.dateAdded     | prices.dateSeen                                   | prices.isSale   | prices.merchant   |   prices.offer |   prices.returnPolicy | prices.shipping   | prices.size   | prices.sourceURLs                                                                                                                                                                                                                             | sizes                                                                                                                             | sourceURLs|          upc |   weight |
|---:|:---------------------|:---------------------|:---------------------|--------:|:------------|:--------------------------------------------------------------------|:--------------------|:-------------------------------|:-------------------------|-------------:||:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------|:---------------------|:--------------------------------------------------------------|-------------------:|-------------------:|:----------------------|:-------------------|:-------------------|:------------------|:---------------------|:--------------------------------------------------|:----------------|:------------------|---------------:|----------------------:|:------------------|:--------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------||-------------:|---------:|
|  0 | AVpfEf_hLJeJML431ueH | 2015-05-04T12:13:08Z | 2018-01-29T04:38:43Z |     nan | Naturalizer | Clothing,Shoes,Women&#39;s Shoes,All Women&#39;s Shoes,Heels,Sandals        | Shoes               | Silver,Cream Watercolor Floral | nan                      | nan          | https://i5.walmartimages.com/asr/861ca6cf-fa55-4a48-904d-b764d7c00f0c_1.1a2bb39923e1486d05bdafe37ad832e3.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/efe9ba1e-daed-4534-9e2e-11804bbb30f1_1.62e3e7f0268f641323a245d5caebdd6d.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/0c717815-228e-4c9b-a8fc-d033576461c9_1.f08402e0a5165746e133ddeb589c73e0.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/f46703c8-2cdb-4bf2-a3ea-819f24aab134_1.df725b76ca0112d64bdf566ad97760a9.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/f652f354-a1fb-47ac-b507-7f97eb216b14_1.39e78b87e2328421803115869ee8b950.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,http://ak1.ostkcdn.com/images/products/84/146/P16141204.jpg,http://s1.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_tp.jpg,http://s3.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_sl.jpg,http://s2.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_rt.jpg,http://s3.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_45.jpg,http://s2.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_hl.jpg,http://s1.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_lt.jpg,http://ak1.ostkcdn.com/images/products/85/115/P16454357.jpg | naturalizer/47147sc022,017136472311,womensnaturalizerdanyasoftsilvercrosshatchshinypatent/16141204,womensnaturalizerdanyasoftsilvercrosshatchshinypatent/377672,womensnaturalizerdanyasoftsilvercrosshatchshinypatent/16454357 | nan            | 47147SC022           | Naturalizer Danya Women N/S Open Toe Synthetic Silver Sandals |              55.99 |              55.99 | nan                   | UWomens  M Regular | nan                | USD               | 2017-03-28T11:40:25Z | 2017-03-25T09:19:24.819Z,2017-03-25T09:19:19.600Z | False           | Overstock.com     |            nan |                   nan | nan               | S             | https://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Soft-Silver-Crosshatch-Shiny-Patent/8925023/product.html,https://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Silver-Crosshatch-Patent-PU/9291843/product.html | 6W,9W,7.5W,12W,8.5M,9N,9M,9.5M,10.5M,10W,8.5W,7M,7.5M,7N,9.5W,10N,10M,5M,12M,5.5M,8W,11W,8N,8M,4.5M,6.5M,6M,11M,6N,11N,6.5W,4M,7W | https://www.walmart.com/ip/Naturalizer-Danya-Women-N-S-Open-Toe-Synthetic-Silver-Sandals/136041884,https://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Soft-Silver-Crosshatch-Shiny-Patent/8925023/product.html,http://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Soft-Silver-Crosshatch-Shiny-Patent/8925023/product.html?refccid=O7POPZJCH6AJFPCMWNSBVDYJGI&amp;amp;searchidx=6749,https://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Silver-Crosshatch-Patent-PU/9291843/product.html,http://www.shoes.com/womens-naturalizer-danya-soft-silver-crosshatch-shiny-p2_id332635,http://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Silver-Crosshatch-Patent-PU/9291843/product.html?refccid=JEHJMDO4H2ZK5FKIT6XGVPS7B4&amp;amp;searchidx=4871,http://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Silver-Crosshatch-Patent-PU/9291843/product.html?refccid=Y6DKPF6YL5DIRFCPAK7JMVETL4&amp;amp;searchidx=4245 | 017136472311 |      nan |
|  1 | AVpi74XfLJeJML43qZAc | 2017-01-27T01:23:39Z | 2018-01-03T05:21:54Z |     nan | MUK LUKS    | Clothing,Shoes,Women&#39;s Shoes,Women&#39;s Casual Shoes,All Women&#39;s Shoes | Shoes               | Grey                           | nan                      |   3.3977e+10 | https://i5.walmartimages.com/asr/421de5d5-3a74-4ca2-ae91-a75787f7da41_1.375e3cf74dc82303ce37bdf6a9742610.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/202d5a0e-b2aa-4d47-b63c-661fc3f9cd69_1.a61c1848859953067192fb2ce1c4f916.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/55a10ffd-de74-406b-8aa5-ae5be3569ee3_1.4b179b9702f0076cdf701afd0e7dcda2.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/138e9ecf-fac8-4e9d-946a-7ca33dfa46aa_1.e4211c14f2a6ecf891e3d440402b5f82.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/8c6c1ee4-7708-4d45-b48a-b30f974a5f2f_1.857088c50496451990583941d955218d.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/a486d1cf-f2b5-49ca-b0f8-3e2db896c51c_1.de1c99ac6fdfcf3dc3ddbd9c1c6c72b1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg| mukluks/00173650206,033977045743,muklukswomensjanesuedemoccasin/553406801,0033977045743                                                                                                                                        | Muk Luks       | 0017365020-6         | MUK LUKS Womens Jane Suede Moccasin                           |              47    |              35.25 | In Stock              | Grey               | New                | USD               | 2018-01-03T05:21:54Z | 2017-12-08T14:24:00.000Z,2017-11-01T02:52:00.000Z | True            | Walmart.com       |            nan |                   nan | Standard          | 6             | https://www.walmart.com/ip/MUK-LUKS-Womens-Jane-Suede-Moccasin/41271362                                                                                                                                                                       | 10,7,6,9,8                                                                                                                        | https://www.walmart.com/ip/MUK-LUKS-Womens-Jane-Suede-Moccasin| 033977045743 |      nan |
|  2 | AVpi74XfLJeJML43qZAc | 2017-01-27T01:23:39Z | 2018-01-03T05:21:54Z |     nan | MUK LUKS    | Clothing,Shoes,Women&#39;s Shoes,Women&#39;s Casual Shoes,All Women&#39;s Shoes | Shoes               | Grey                           | nan                      |   3.3977e+10 | https://i5.walmartimages.com/asr/421de5d5-3a74-4ca2-ae91-a75787f7da41_1.375e3cf74dc82303ce37bdf6a9742610.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/202d5a0e-b2aa-4d47-b63c-661fc3f9cd69_1.a61c1848859953067192fb2ce1c4f916.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/55a10ffd-de74-406b-8aa5-ae5be3569ee3_1.4b179b9702f0076cdf701afd0e7dcda2.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/138e9ecf-fac8-4e9d-946a-7ca33dfa46aa_1.e4211c14f2a6ecf891e3d440402b5f82.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/8c6c1ee4-7708-4d45-b48a-b30f974a5f2f_1.857088c50496451990583941d955218d.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/a486d1cf-f2b5-49ca-b0f8-3e2db896c51c_1.de1c99ac6fdfcf3dc3ddbd9c1c6c72b1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg| mukluks/00173650206,033977045743,muklukswomensjanesuedemoccasin/553406801,0033977045743                                                                                                                                        | Muk Luks       | 0017365020-6         | MUK LUKS Womens Jane Suede Moccasin                           |              35.25 |              35.25 | In Stock              | Grey               | New                | USD               | 2017-12-06T05:02:42Z | 2017-11-10T15:11:00.000Z,2017-11-18T08:00:00.000Z | False           | Slippers Dot Com  |            nan |                   nan | Value             | 6             | https://www.walmart.com/ip/MUK-LUKS-Womens-Jane-Suede-Moccasin/41271362                                                                                                                                                                       | 10,7,6,9,8                                                                                                                        | https://www.walmart.com/ip/MUK-LUKS-Womens-Jane-Suede-Moccasin| 033977045743 |      nan |
|  3 | AVpjXyCc1cnluZ0-V-Gj | 2017-01-27T01:25:56Z | 2018-01-04T11:52:35Z |     nan | MUK LUKS    | Clothing,Shoes,Women&#39;s Shoes,All Women&#39;s Shoes,Women&#39;s Slippers     | Shoes,Shoes         | Black                          | 6.0 in x 6.0 in x 1.0 in |   3.3977e+10 | https://i5.walmartimages.com/asr/950d38a5-0113-4111-952d-33fdcde53902_1.d2dd17888ccb2856f3227e0273d911f8.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/cd183ae0-efea-4771-b3fd-d341a57887cf_1.24ec8674bb4d7a783a92fe8c33656327.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/68891305-0fb3-4249-b7de-7dabd8702994_1.0f4a323222d690fca9dc9bb8f70f2761.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/d43b85d9-b4de-43fc-a9ca-0979e2f50455_1.5e4d5516a1443339e7dc329feb348cd1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/0ef94daa-fa39-420d-bb4c-e6156c441ce3_1.52cd0a9a611b0238ce83767b4dcf205e.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/3fece502-09aa-4981-ac4f-e1b7c4d5f954_1.e12aa766531546eea0f4143b37b8e4c1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,http://i5.walmartimages.com/dfw/dce07b8c-a7ea/k2-_46c4321b-d9d6-43b8-bc25-375ae7b82de0.v1.jpg,http://i5.walmartimages.com/dfw/dce07b8c-5142/k2-_74fbfb19-88d1-4a20-bd31-58b6a4b908ef.v1.jpg,http://i5.walmartimages.com/dfw/dce07b8c-2bb2/k2-_70437d33-1a05-4563-8eb6-a2b5f303580d.v2.jpg                                                                                                                                                                                                                                                                                                                               | 033977045903,muklukswomensdawnsuedescuffslipper/553409417,mukluks/00173660016,0033977045903                                                                                                                                    | Muk Luks       | 0017366001-6         | MUK LUKS Womens Dawn Suede Scuff Slipper                      |              24.75 |              24.75 | In Stock              | Black              | New                | USD               | 2018-01-04T11:52:35Z | 2017-12-07T16:37:00.000Z                          | False           | Slippers Dot Com  |            nan |                   nan | Value             | 6             | https://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper/41288600                                                                                                                                                                  | 10,7,6,9,8                                                                                                                        | https://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper/41288600,http://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper| 033977045903 |      nan |
|  4 | AVphGKLPilAPnD_x1Nrm | 2017-01-27T01:25:56Z | 2018-01-18T03:55:18Z |     nan | MUK LUKS    | Clothing,Shoes,Women&#39;s Shoes,All Women&#39;s Shoes,Women&#39;s Slippers     | Shoes               | Grey                           | 6.0 in x 6.0 in x 1.0 in |   3.3977e+10 | https://i5.walmartimages.com/asr/5e137bc3-c900-4886-8b34-b668151f701b_1.84e3c472b6a11bf7a4591a29bc82e9d2.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/7daeac49-7810-406f-9c26-d4114c95f45d_1.a15e4690332f4ff0ff36ca920e8e524c.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/91daf35f-626a-4fbd-8f18-5eda881bd8c9_1.37f9328c0a254b6448fb81cd45161967.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/4189df99-e20a-4d15-8c84-2d2099b22268_1.fb873895715fea71bc31f0e89abca53d.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/366cacbc-afd6-4f00-a9e4-0f55dbb0ecfc_1.5d03f6fc3bff935a2295ed3ec1653da1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/5752e61a-01c2-4791-85a1-726a40accaf8_1.64d856d974c88497ac10a6ca5444291f.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg| mukluks/00173660206,033977045958,0033977045958,muklukswomensdawnsuedescuffslipper/553409491                                                                                                                                    | nan            | 0017366020-6         | MUK LUKS Womens Dawn Suede Scuff Slipper                      |              33    |              30.39 | In Stock              | Grey               | New                | USD               | 2017-12-04T21:35:47Z | 2017-11-17T21:15:00.000Z                          | True            | Walmart.com       |            nan |                   nan | Expedited         | 6             | https://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper/41288525                                                                                                                                                                  | 10,7,6,9,8                                                                                                                        | https://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper/41288525,https://www.walmart.com/ip/Women-s-MUK-LUKS-Dawn-Suede-Scuff/41288525,https://www.walmart.com/ip| 033977045958 |      nan |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight = shoes[[&#39;id&#39;,&#39;name&#39;,&#39;dateUpdated&#39;,&#39;colors&#39;,&#39;prices.amountMax&#39;,&#39;prices.amountMin&#39;,&#39;prices.merchant&#39;]]
print(tabulate(shoesLight.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | id                   | name                                                          | dateUpdated          | colors                         |   prices.amountMax |   prices.amountMin | prices.merchant   |
|---:|:---------------------|:--------------------------------------------------------------|:---------------------|:-------------------------------|-------------------:|-------------------:|:------------------|
|  0 | AVpfEf_hLJeJML431ueH | Naturalizer Danya Women N/S Open Toe Synthetic Silver Sandals | 2018-01-29T04:38:43Z | Silver,Cream Watercolor Floral |              55.99 |              55.99 | Overstock.com     |
|  1 | AVpi74XfLJeJML43qZAc | MUK LUKS Womens Jane Suede Moccasin                           | 2018-01-03T05:21:54Z | Grey                           |              47    |              35.25 | Walmart.com       |
|  2 | AVpi74XfLJeJML43qZAc | MUK LUKS Womens Jane Suede Moccasin                           | 2018-01-03T05:21:54Z | Grey                           |              35.25 |              35.25 | Slippers Dot Com  |
|  3 | AVpjXyCc1cnluZ0-V-Gj | MUK LUKS Womens Dawn Suede Scuff Slipper                      | 2018-01-04T11:52:35Z | Black                          |              24.75 |              24.75 | Slippers Dot Com  |
|  4 | AVphGKLPilAPnD_x1Nrm | MUK LUKS Womens Dawn Suede Scuff Slipper                      | 2018-01-18T03:55:18Z | Grey                           |              33    |              30.39 | Walmart.com       |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;id                   object
name                 object
dateUpdated          object
colors               object
prices.amountMax    float64
prices.amountMin    float64
prices.merchant      object
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;dateUpdated doit etre passé en datetime&lt;/li&gt;

&lt;li&gt;&lt;p&gt;colors doit etre passé en liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight.isnull().sum()/len(shoesLight)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;id                  0.0000
name                0.0000
dateUpdated         0.0000
colors              0.7369
prices.amountMax    0.0000
prices.amountMin    0.0000
prices.merchant     0.9565
dtype: float64&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il manque 75% des valeurs pour les couelurs et quasi tous les noms des e-commercants.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight = shoes[[&#39;id&#39;,&#39;name&#39;,&#39;brand&#39;,&#39;dateUpdated&#39;,&#39;prices.amountMax&#39;,&#39;prices.amountMin&#39;]]
print(tabulate(shoesLight.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | id                   | name                                                          | brand       | dateUpdated          |   prices.amountMax |   prices.amountMin |
|---:|:---------------------|:--------------------------------------------------------------|:------------|:---------------------|-------------------:|-------------------:|
|  0 | AVpfEf_hLJeJML431ueH | Naturalizer Danya Women N/S Open Toe Synthetic Silver Sandals | Naturalizer | 2018-01-29T04:38:43Z |              55.99 |              55.99 |
|  1 | AVpi74XfLJeJML43qZAc | MUK LUKS Womens Jane Suede Moccasin                           | MUK LUKS    | 2018-01-03T05:21:54Z |              47    |              35.25 |
|  2 | AVpi74XfLJeJML43qZAc | MUK LUKS Womens Jane Suede Moccasin                           | MUK LUKS    | 2018-01-03T05:21:54Z |              35.25 |              35.25 |
|  3 | AVpjXyCc1cnluZ0-V-Gj | MUK LUKS Womens Dawn Suede Scuff Slipper                      | MUK LUKS    | 2018-01-04T11:52:35Z |              24.75 |              24.75 |
|  4 | AVphGKLPilAPnD_x1Nrm | MUK LUKS Womens Dawn Suede Scuff Slipper                      | MUK LUKS    | 2018-01-18T03:55:18Z |              33    |              30.39 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight[&#39;dateUpdated&#39;] = pd.to_datetime(shoesLight[&#39;dateUpdated&#39;])
shoesLight[&#39;dateUpdated&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.





0      2018-01-29 04:38:43+00:00
1      2018-01-03 05:21:54+00:00
2      2018-01-03 05:21:54+00:00
3      2018-01-04 11:52:35+00:00
4      2018-01-18 03:55:18+00:00
5      2018-10-23 21:26:11+00:00
6      2018-10-15 15:50:13+00:00
7      2018-10-15 15:50:13+00:00
8      2018-01-03 05:22:07+00:00
9      2018-01-30 06:18:34+00:00
10     2018-01-30 06:18:34+00:00
11     2018-01-23 04:13:40+00:00
12     2018-01-04 11:52:59+00:00
13     2018-01-04 11:52:59+00:00
14     2018-01-04 08:03:19+00:00
15     2018-01-28 10:16:47+00:00
16     2018-01-28 10:16:47+00:00
17     2018-01-28 10:16:47+00:00
18     2018-01-28 10:52:04+00:00
19     2018-01-28 10:52:04+00:00
20     2018-01-09 21:18:52+00:00
21     2018-06-05 22:29:16+00:00
22     2018-01-04 11:52:59+00:00
23     2018-01-04 08:02:27+00:00
24     2018-01-04 08:03:26+00:00
25     2018-01-03 05:21:54+00:00
26     2018-01-03 05:21:54+00:00
27     2018-04-21 12:44:31+00:00
28     2018-04-21 12:44:31+00:00
29     2018-04-21 12:44:03+00:00
                  ...           
9970   2018-04-06 21:35:55+00:00
9971   2018-04-06 21:35:47+00:00
9972   2018-04-06 21:35:47+00:00
9973   2018-04-06 21:35:46+00:00
9974   2018-04-06 21:35:46+00:00
9975   2018-04-06 21:35:46+00:00
9976   2018-04-06 21:35:43+00:00
9977   2018-04-06 21:35:43+00:00
9978   2018-04-06 21:35:38+00:00
9979   2018-04-06 21:35:38+00:00
9980   2018-04-06 21:35:37+00:00
9981   2018-04-06 21:35:36+00:00
9982   2018-04-06 21:35:34+00:00
9983   2018-04-06 21:35:34+00:00
9984   2018-04-06 21:35:34+00:00
9985   2018-04-06 21:35:34+00:00
9986   2018-04-06 21:35:34+00:00
9987   2018-04-06 21:35:34+00:00
9988   2018-04-06 21:02:08+00:00
9989   2018-04-06 21:02:08+00:00
9990   2018-04-06 21:02:08+00:00
9991   2018-04-06 21:02:08+00:00
9992   2018-04-06 21:02:08+00:00
9993   2018-04-06 21:02:08+00:00
9994   2018-04-06 21:02:08+00:00
9995   2018-04-06 21:02:04+00:00
9996   2018-04-06 21:02:04+00:00
9997   2018-04-06 21:02:01+00:00
9998   2018-04-06 21:01:53+00:00
9999   2018-04-06 21:01:50+00:00
Name: dateUpdated, Length: 10000, dtype: datetime64[ns, UTC]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight[&#39;prices.amountAverage&#39;] =  (shoesLight[&#39;prices.amountMax&#39;] + shoesLight[&#39;prices.amountMin&#39;]) / 2
shoesLight[&#39;prices.amountAverage&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.





0    55.990
1    41.125
2    35.250
3    24.750
4    31.695
Name: prices.amountAverage, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight[&#39;prices.amountAverage&#39;].describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count    10000.000000
mean        60.177376
std         18.786193
min          5.375000
25%         49.990000
50%         56.875000
75%         67.490000
max        359.950000
Name: prices.amountAverage, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>8- La lirairie Pandas - Cours</title>
      <link>/courses/formation_python/8-pandas/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/8-pandas/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pandas.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;la-librairie-pandas&#34;&gt;La librairie Pandas:&lt;/h2&gt;

&lt;p&gt;Pandas est une bibliothèque spécialisée dans la manipulation de données.
Cette bibliothèque regroupe un ensemble de fonctions optimisées pour manipuler de gros jeux de données.
Elle permet de créer et exporter des tables de données à partir de fichiers textes (séparateurs, .csv, format fixe, compressés), binaires (HDF5 avec Pytable), HTML, XML, JSON, MongoDB, SQL&amp;hellip;&lt;/p&gt;

&lt;p&gt;Une nouvelle structure de donnée est utilisée avec cette bibliothèque: le DataFrame .
Il existe deux types de données avec pandas: les séries et les dataframes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Un dataframe est un tableau qui est crée avec des dictionnaires ou des listes&lt;/li&gt;
&lt;li&gt;Ils sont basés sur des tableaux Numpy ou ndarray&lt;/li&gt;
&lt;li&gt;Ils peuvent avoir des noms de colonnes et des noms de lignes&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ils ont la particularité de pouvoir mélanger les types de données: str, float, Nan, Int&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On peut les visualiser comme une feuille excell mais avec un nombre important de volumes de données ainsi qu&amp;rsquo;un nombre importants de fonctions et attributs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction-sur-les-séries&#34;&gt;- Introduction sur les séries -&lt;/h2&gt;

&lt;p&gt;Une série est un objet unidimensionnel. Les séries représentent les valeurs d&amp;rsquo;une variable statistique.
Variables quantitatives ou des variables qualitatives.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# on va charger la librairie pandas 
import pandas as pd      # création d&#39;un alias pour alléger les codes 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On va créer une série. On peut soit utiliser des listes, soit des dictionnaires.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie = pd.Series([11,15,12,13,14])
print(serie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    11
1    15
2    12
3    13
4    14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons dans les séries, les index et les valeurs. On peut remplacer ces index par du texte avec l&amp;rsquo;option index. Attention, le nombre d&amp;rsquo;index doit correspondre au nombre de valeurs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie = pd.Series([11,15,12,13,14], index=[&amp;quot;Montréal&amp;quot;, &amp;quot;Ottawa&amp;quot;, &amp;quot;Toronto&amp;quot;, &amp;quot;Gatineau&amp;quot;, &amp;quot;Québec&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(serie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montréal    11
Ottawa      15
Toronto     12
Gatineau    13
Québec      14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La méthode describe() nous donne la distribution de nos données dans la série.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count     5.000000
mean     13.000000
std       1.581139
min      11.000000
25%      12.000000
50%      13.000000
75%      14.000000
max      15.000000
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut accéder à une valeur en utilisant l&amp;rsquo;index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[&amp;quot;Montréal&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mais on peut toujours utiliser le numéro de l&amp;rsquo;index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[3]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut accéder à plusieurs index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[[&amp;quot;Montréal&amp;quot;, &amp;quot;Québec&amp;quot;, &amp;quot;Toronto&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montréal    11
Québec      14
Toronto     12
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il exite d&amp;rsquo;autres méthodes intéressantes pour faire des calculs sur la série.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.min()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.max()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut utiliser des opérateurs de comparaison.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[serie&amp;gt;12]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Ottawa      15
Gatineau    13
Québec      14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie&amp;gt;12 # c est l&#39;ensemble de booléens.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montréal    False
Ottawa       True
Toronto     False
Gatineau     True
Québec       True
dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-les-dataframes&#34;&gt;8- Les dataframes:&lt;/h2&gt;

&lt;p&gt;Un dataframe est un tableau avec des observations ou individus sur les lignes et des attributs sur les colonnes qui décrivent les individus.&lt;/p&gt;

&lt;p&gt;Un DataFrame est une structure de données tabulaire bidimensionnelle à taille variable, potentiellement hétérogène avec des axes étiquetés (lignes et colonnes).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataframe_shadow.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Les attributs peuvent être soit qualitatif soit quantitatif.&lt;/p&gt;

&lt;h2 id=&#34;8-1-création-d-un-dataframe&#34;&gt;8.1- Création d&amp;rsquo;un Dataframe:&lt;/h2&gt;

&lt;p&gt;Dans le monde réel, un DataFrame sera créé en chargeant les jeux de données à partir du stockage existant, le stockage peut être par exemple une base de données SQL, un fichier CSV ou un fichier Excel.&lt;/p&gt;

&lt;p&gt;Le DataFrame peut aussi être créé à partir de listes, d&amp;rsquo;un dictionnaire et d&amp;rsquo;une liste de dictionnaires, etc.&lt;/p&gt;

&lt;p&gt;Voici quelques façons de créer un dataframe:&lt;/p&gt;

&lt;h2 id=&#34;8-1-1-création-d-un-dataframe-à-partir-d-un-array-numpy&#34;&gt;8.1.1- Création d&amp;rsquo;un DataFrame à partir d&amp;rsquo;un array Numpy:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np  # on importe la librairie numpy
stations = np.genfromtxt(&amp;quot;./DATA/DATA_Barrage_1963_2017_5.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;, dtype=&#39;float&#39;)   # on assigne une variable. 
stations
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  39.7       ,   39.09      ,   39.55645161,   23.23      ,
          22.5       ,   22.85903226, 2390.52612903, 3164.97      ,
        1673.8       ],
       [  41.16      ,   40.96      ,   41.08806452,   23.22      ,
          22.43      ,   22.7583871 , 2227.28290323, 3008.18      ,
        1697.87      ],
       [  41.15      ,   41.05      ,   41.11322581,   23.35      ,
          22.87      ,   23.15548387, 2851.27419355, 3231.8       ,
        2367.85      ],
       [  41.09      ,   40.61      ,   40.9683871 ,   23.78      ,
          22.7       ,   23.03258065, 2635.03774194, 3967.33      ,
        2069.65      ],
       [  41.09      ,   39.6       ,   40.26967742,   24.24      ,
          22.87      ,   23.64580645, 3924.23451613, 5407.32      ,
        2417.89      ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour créer le dataframe, on utilise la fonction &lt;b&gt;DataFrame()&lt;/b&gt; de pandas. C&amp;rsquo;est à cette étape qu&amp;rsquo;on définit le nom de nos colonnes.  En entrée on met le tableau Numpy .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.DataFrame(stations, columns=[&amp;quot;Amont Max&amp;quot;, &amp;quot;Amont Min&amp;quot;, &amp;quot;Amont Moyen&amp;quot;, &amp;quot;Aval Max&amp;quot;, &amp;quot;Aval Max&amp;quot;, &amp;quot;Aval Moyen&amp;quot;, &amp;quot;Debit Moyen&amp;quot;, &amp;quot;Debit Max&amp;quot;,&amp;quot;Debit Min&amp;quot;])
dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Amont Max |   Amont Min |   Amont Moyen |   Aval Max |   Aval Max |   Aval Moyen |   Debit Moyen |   Debit Max |   Debit Min |
|---:|------------:|------------:|--------------:|-----------:|-----------:|-------------:|--------------:|------------:|------------:|
|  0 |       39.7  |       39.09 |       39.5565 |      23.23 |      22.5  |      22.859  |       2390.53 |     3164.97 |     1673.8  |
|  1 |       41.16 |       40.96 |       41.0881 |      23.22 |      22.43 |      22.7584 |       2227.28 |     3008.18 |     1697.87 |
|  2 |       41.15 |       41.05 |       41.1132 |      23.35 |      22.87 |      23.1555 |       2851.27 |     3231.8  |     2367.85 |
|  3 |       41.09 |       40.61 |       40.9684 |      23.78 |      22.7  |      23.0326 |       2635.04 |     3967.33 |     2069.65 |
|  4 |       41.09 |       39.6  |       40.2697 |      24.24 |      22.87 |      23.6458 |       3924.23 |     5407.32 |     2417.89 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-1-2-création-d-un-dataframe-à-partir-de-series&#34;&gt;8.1.2- Création d&amp;rsquo;un DataFrame à partir de series:&lt;/h2&gt;

&lt;p&gt;On a vu précédemment comment créer une Série. On peut s&amp;rsquo;en servir pour créer des Dataframes.&lt;/p&gt;

&lt;p&gt;Lors de la création d&amp;rsquo;un DataFrame, chaque série définira une colonne.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# on crée une première série 
groupe1=pd.Series([11,15,12,13], index=[&amp;quot;Fred&amp;quot;, &amp;quot;Jeanne&amp;quot;, &amp;quot;Julie&amp;quot;, &amp;quot;Julien&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;groupe1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Fred      11
Jeanne    15
Julie     12
Julien    13
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# on crée une deuxième série mais avec des nouveaux élèves en plus et des élèves absents.   
groupe2=pd.Series([11,15,15,11], index=[&amp;quot;Fred&amp;quot;, &amp;quot;Jeanne&amp;quot;, &amp;quot;Damien&amp;quot;, &amp;quot;Samuel&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On crée notre DataFrame avec nos deux séries.
Pour cela on utilise des dictionnaire pour créer un dataframe avec des séries, donc on utilise des {}, avec des clés et des valeurs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.DataFrame({&amp;quot;Groupe1&amp;quot; : groupe1, &amp;quot;Groupe2&amp;quot; : groupe2})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|        |   Groupe1 |   Groupe2 |
|:-------|----------:|----------:|
| Damien |       nan |        15 |
| Fred   |        11 |        11 |
| Jeanne |        15 |        15 |
| Julie  |        12 |       nan |
| Julien |        13 |       nan |
| Samuel |       nan |        11 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NaN: la valeur n&amp;rsquo;est pas disponible.&lt;/p&gt;

&lt;h2 id=&#34;8-1-3-création-d-un-dataframe-à-partir-d-un-fichier-csv-fonctions-b-read-table-b-ou-b-read-csv&#34;&gt;8.1.3- Création d&amp;rsquo;un DataFrame à partir d&amp;rsquo;un fichier csv: fonctions &lt;b&gt;read_table()&lt;/b&gt; ou &lt;b&gt;read_csv():&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;read_table()&lt;/b&gt; et &lt;b&gt;read_csv()&lt;/b&gt; sont les fonctions les plus utiles sous Pandas pour lire des fichiers textes et générer un objet de type DataFrame.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On va travailler avec un jeu de données issu d&amp;rsquo;un barrage hydraulique.&lt;/p&gt;

&lt;p&gt;Notre fichier csv possède 9 variables, la première ligne nous renvoie les noms des variables (ou labels).&lt;/p&gt;

&lt;p&gt;On peut lire un document csv avec la fonction &lt;b&gt;read_table()&lt;/b&gt; , en mettant en attribut le séparateur &amp;ldquo;,&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barrage = pd.read_table(&amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;, sep=&amp;quot;,&amp;quot;)
barrage.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Amont_max |   Amont_min |   Amont_moyen |   Aval_max |   Aval_min |   Aval_moyen |   Debit_Moyen |   Debit_max |   Debit_min |
|---:|------------:|------------:|--------------:|-----------:|-----------:|-------------:|--------------:|------------:|------------:|
|  0 |       39.7  |       39.09 |       39.5565 |      23.23 |      22.5  |      22.859  |       2390.53 |     3164.97 |     1673.8  |
|  1 |       41.16 |       40.96 |       41.0881 |      23.22 |      22.43 |      22.7584 |       2227.28 |     3008.18 |     1697.87 |
|  2 |       41.15 |       41.05 |       41.1132 |      23.35 |      22.87 |      23.1555 |       2851.27 |     3231.8  |     2367.85 |
|  3 |       41.09 |       40.61 |       40.9684 |      23.78 |      22.7  |      23.0326 |       2635.04 |     3967.33 |     2069.65 |
|  4 |       41.09 |       39.6  |       40.2697 |      24.24 |      22.87 |      23.6458 |       3924.23 |     5407.32 |     2417.89 |


D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: FutureWarning: read_table is deprecated, use read_csv instead.
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cependant, si on sait que notre fichier à lire est un csv, on peut utiliser une fonction plus simple de Pandas qui est &lt;b&gt;read_csv()&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Pas besoin de l&amp;rsquo;option sep=&amp;rdquo; . Il trouvera le séparateur par défault.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barrage = pd.read_csv(&amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;)

barrage.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Amont_max |   Amont_min |   Amont_moyen |   Aval_max |   Aval_min |   Aval_moyen |   Debit_Moyen |   Debit_max |   Debit_min |
|---:|------------:|------------:|--------------:|-----------:|-----------:|-------------:|--------------:|------------:|------------:|
|  0 |       39.7  |       39.09 |       39.5565 |      23.23 |      22.5  |      22.859  |       2390.53 |     3164.97 |     1673.8  |
|  1 |       41.16 |       40.96 |       41.0881 |      23.22 |      22.43 |      22.7584 |       2227.28 |     3008.18 |     1697.87 |
|  2 |       41.15 |       41.05 |       41.1132 |      23.35 |      22.87 |      23.1555 |       2851.27 |     3231.8  |     2367.85 |
|  3 |       41.09 |       40.61 |       40.9684 |      23.78 |      22.7  |      23.0326 |       2635.04 |     3967.33 |     2069.65 |
|  4 |       41.09 |       39.6  |       40.2697 |      24.24 |      22.87 |      23.6458 |       3924.23 |     5407.32 |     2417.89 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#help(pd.read_csv)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plusieurs options sont mises à disposition de la fonction read_csv(). Il est important de connaître la liste des possibilités et options offertes par cette simple commande.&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;path&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Chemin ou non du fichier ou URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;sep&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;délimiteur comme , ; | \t ou \s+ pour un nombre variable d’espaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;header&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;défaut 0, la première ligne contient le nom des variables ; si None les noms sont générés ou définis par ailleurs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;index_col&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Noms ou numéros de colonnes définissant les index de lignes, index pouvant être hiérarchisés comme les facteurs d’un plan d’expérience.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;names&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Si header=None, liste des noms des variables.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;nrows&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Utile pour tester et limiter le nombre de ligne à lire&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;skiprow&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Liste de lignes à sauter en lecture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;skip_footer&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Nombre de lignes à sauter en fin de fichier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;na_values&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Définition du ou des codes signalant des valeurs manquantes. Ils
peuvent être définis dans un dictionnaire pour associer variables et codes
de valeurs manquantes spécifiques&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;usecols&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Sélectionne une liste des variable à lire pour éviter de lire des
champs ou variables volumineuses et inutiles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;skip_blank_lines&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Si &lt;b&gt;True&lt;/b&gt;, on saute les lignes blanches &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;thousand&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Séparateur des miliers : &#34;.&#34; ou &#34;,&#34;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;file1 = &amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;
col_names = [&#39;Variable1&#39;, &#39;Variable2&#39;, &#39;Variable3&#39;]
df2 = pd.read_csv(file1, skiprows=1, usecols=[0, 1, 3], names=col_names)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
df2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Variable1 |   Variable2 |   Variable3 |
|---:|------------:|------------:|------------:|
|  0 |       39.7  |       39.09 |       23.23 |
|  1 |       41.16 |       40.96 |       23.22 |
|  2 |       41.15 |       41.05 |       23.35 |
|  3 |       41.09 |       40.61 |       23.78 |
|  4 |       41.09 |       39.6  |       24.24 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-1-4-création-d-un-dataframe-à-partir-d-un-fichier-txt&#34;&gt;8.1.4- Création d&amp;rsquo;un DataFrame à partir d&amp;rsquo;un fichier txt:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;./DATA/Daily_Precipitation_1963-2017.txt&#39;, &#39;r&#39;) as file:
        rows = file.read()      
dataset = [float(row) for row in rows.split()]   
df3 = pd.DataFrame({&amp;quot;Precipitation&amp;quot; : dataset})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Precipitation |
|---:|----------------:|
|  0 |               0 |
|  1 |               0 |
|  2 |               0 |
|  3 |               0 |
|  4 |               0 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-1-5-création-d-un-dataframe-à-partir-d-un-fichier-excell-ou-xls-fonction-b-read-excel-b&#34;&gt;8.1.5- Création d&amp;rsquo;un DataFrame à partir d&amp;rsquo;un fichier excell ou (.xls): fonction &lt;b&gt;read_excel()&lt;/b&gt;&lt;/h2&gt;

&lt;p&gt;Nous allons ouvrir ici un fichier excell (d&amp;rsquo;extension .xls). Ce fichier est une base de données contenant de l&amp;rsquo;information sur toutes les stations homogénéisées de température d&amp;rsquo;Environnement et Changement Climatique Canada.&lt;/p&gt;

&lt;p&gt;Cette base de données présente 11 colonnes avec des données commençant à la 4 ème ligne.&lt;/p&gt;

&lt;p&gt;On va définir la colonne Province comme index de notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df4 = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, index_col=0,skiprows = range(0, 3))
from tabulate import tabulate
print(tabulate(df4.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|
| BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
| BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
| BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
| BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
| BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt; 8.2- Premiers pas sur un DataFrame:&lt;/h2&gt; 

&lt;p&gt;Une fois le dataframe crée, on peut appliquer quelques fonctions et méthodes pour effectuer une première exploration du jeu de données.&lt;/p&gt;

&lt;p&gt;Il existe plusieurs fonctions, méthodes ou attributs qu&amp;rsquo;on peut appliquer sur les DataFrame:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nous allons présenter quelques fonctions utiles lors de l&amp;rsquo;exploration d&amp;rsquo;un jeu de données.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
from tabulate import tabulate
print(tabulate(dataframe.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |      Tmax |   Tmax90p |      Tmin |   Tmin10p |      DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|----------:|----------:|----------:|----------:|---------:|
|  0 |            0 | BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              | nan       |  nan      | nan       | nan       |  nan     |
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |   5.63043 |   18.9033 |  -3.46052 | -19.235   |  860.083 |
|  2 |            2 | BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              | nan       |  nan      | nan       | nan       |  nan     |
|  3 |            3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |  12.628   |   23.6417 |   4.01748 |  -3.646   | 1798.09  |
|  4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 | N              |  12.1556  |   20.2007 |   6.77689 |   1.09467 | 2518.68  |
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;La méthode &lt;b&gt;.info()&lt;/b&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;&lt;strong&gt;Pandas dtype&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;&lt;strong&gt;Python type&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;&lt;strong&gt;Numpy type&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;object&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;str or mixed&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;string_,unicode_,mixed types&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Text or mixed numeric and non-numeric values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;int64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;int_,int8,int16,int32,int64,uint8,uint16,uint32,uint64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Integer numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;float64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;float_, float16, float32, float64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Floating point numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;bool_&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;True/False values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;datetime64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;datetime64[ns]&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Date and time values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;timedelta[ns]&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Differences between two datetimes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;category&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Finite list of text values&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 289 entries, 0 to 288
Data columns (total 17 columns):
Unnamed: 0        289 non-null int64
Prov              289 non-null object
Nom de station    289 non-null object
stnid             289 non-null object
année déb.        289 non-null int64
mois déb.         289 non-null int64
année fin.        289 non-null int64
mois fin.         289 non-null int64
lat (deg)         289 non-null float64
long (deg)        289 non-null float64
élév (m)          289 non-null int64
stns jointes      289 non-null object
Tmax              172 non-null float64
Tmax90p           172 non-null float64
Tmin              171 non-null float64
Tmin10p           171 non-null float64
DG0               171 non-null float64
dtypes: float64(7), int64(6), object(4)
memory usage: 38.5+ KB
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.dtypes()&lt;/b&gt;:  nous fournit les types de variables de notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unnamed: 0          int64
Prov               object
Nom de station     object
stnid              object
année déb.          int64
mois déb.           int64
année fin.          int64
mois fin.           int64
lat (deg)         float64
long (deg)        float64
élév (m)            int64
stns jointes       object
Tmax              float64
Tmax90p           float64
Tmin              float64
Tmin10p           float64
DG0               float64
dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.Prov.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dtype(&amp;lsquo;O&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.shape&lt;/b&gt; : retourne un tuple sur la dimension de notre DataFrame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.shape # nous avons donc 289 lignes et 17 colonnes dans notre base de données.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(289, 17)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.columns&lt;/b&gt;: retourne les noms des colonnes de notre DataFrame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Index([&amp;lsquo;Unnamed: 0&amp;rsquo;, &amp;lsquo;Prov&amp;rsquo;, &amp;lsquo;Nom de station&amp;rsquo;, &amp;lsquo;stnid&amp;rsquo;, &amp;lsquo;année déb.&amp;rsquo;,
       &amp;lsquo;mois déb.&amp;rsquo;, &amp;lsquo;année fin.&amp;rsquo;, &amp;lsquo;mois fin.&amp;rsquo;, &amp;lsquo;lat (deg)&amp;rsquo;, &amp;lsquo;long (deg)&amp;rsquo;,
       &amp;lsquo;élév (m)&amp;rsquo;, &amp;lsquo;stns jointes&amp;rsquo;, &amp;lsquo;Tmax&amp;rsquo;, &amp;lsquo;Tmax90p&amp;rsquo;, &amp;lsquo;Tmin&amp;rsquo;, &amp;lsquo;Tmin10p&amp;rsquo;,
       &amp;lsquo;DG0&amp;rsquo;],
      dtype=&amp;lsquo;object&amp;rsquo;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La méthode &lt;b&gt;.isnull&lt;/b&gt;:  nous informe si la valeur est NaN ou non
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On va imbriquer deux méthodes pour connaître le nombre de valeurs manquantes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- .isnull(): nous informe si la valeur est NaN ou non 

- .sum(): effectue la somme. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.isnull().sum() # information sur la somme des NaN par catégorie
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Unnamed: 0          0
Prov                0
Nom de station      0
stnid               0
année déb.          0
mois déb.           0
année fin.          0
mois fin.           0
lat (deg)           0
long (deg)          0
élév (m)            0
stns jointes        0
Tmax              117
Tmax90p           117
Tmin              118
Tmin10p           118
DG0               118
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.describe()&lt;/b&gt;:  permet d&amp;rsquo;avoir un apperçu de notre DataFrame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;count&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1919.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.77509&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.8166&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.7494&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-96.5974&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;338.315&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.91631&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.565&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.27754&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.6113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1397.74&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;std&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;83.5713&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.9921&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.60092&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.3012&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.58285&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.34345&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6708&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;314.664&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.52463&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.39633&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.25505&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.05387&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;544.373&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;min&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-140.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.3665&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.74167&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.9351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-42.8867&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58.6167&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;25%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-116.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.36465&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5659&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.03064&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.6402&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1106.85&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;50%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1916&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-99.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;251&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98805&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.5307&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.2296&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.8553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1366.14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;75%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1940&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54.82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-75.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;546&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.0182&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0746&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.691542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.6338&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1676.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;max&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1580&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.1055&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30.8767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.01629&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.949&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2807.09&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.describe(include=&amp;quot;all&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;count&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;unique&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;top&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WOODSTOCK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;250M001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;freq&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;224&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1919.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.77509&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.8166&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.7494&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-96.5974&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;338.315&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.91631&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.565&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.27754&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.6113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1397.74&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;std&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;83.5713&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.9921&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.60092&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.3012&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.58285&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.34345&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6708&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;314.664&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.52463&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.39633&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.25505&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.05387&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;544.373&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;min&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-140.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.3665&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.74167&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.9351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-42.8867&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58.6167&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;25%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-116.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.36465&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5659&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.03064&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.6402&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1106.85&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;50%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1916&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-99.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;251&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98805&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.5307&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.2296&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.8553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1366.14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;75%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1940&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54.82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-75.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;546&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.0182&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0746&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.691542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.6338&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1676.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;max&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1580&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.1055&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30.8767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.01629&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.949&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2807.09&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On peut faire directement des statistiques sur des variables quantitatives.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&amp;quot;Tmin&amp;quot;].describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count    171.000000
mean      -2.277538
std        5.255046
min      -21.935075
25%       -4.030637
50%       -2.229597
75%        0.691542
max        7.016292
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-3-naviguer-dans-un-dataframe-et-accéder-aux-éléments&#34;&gt;8.3- Naviguer dans un Dataframe et accéder aux éléments:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|---:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|
|  0 | BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
|  1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
|  2 | BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
|  3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
|  4 | BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avant exploration d&amp;rsquo;un Dataframe, on peut modifier l&amp;rsquo;index pour faciliter l&amp;rsquo;analyse d&amp;rsquo;un jeu de données. Pour cela, on utilise la fonction &lt;b&gt;.set_index()&lt;/b&gt; . On doit créer un nouvel objet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index = dataframe.set_index(&amp;quot;Prov&amp;quot;).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|
| BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
| BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
| BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
| BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
| BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour accéder à un élément dans un dataframe, il existe deux méthodes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;la méthode &lt;b&gt;iloc()&lt;/b&gt; pour accéder aux données à partir des numéros d&amp;rsquo;index&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;la méthode &lt;b&gt;loc()&lt;/b&gt; pour accéder aux données à partir des labels&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/pandas_selection.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-3-1-la-méthode-iloc&#34;&gt;8.3.1-  La méthode iloc()&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;iloc:  on veut les extraire les valeurs localiées à la colonne d&amp;rsquo;index 1 et ligne d&amp;rsquo;index 4 [row, column]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.iloc[4,1]      
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1060841&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iloc: pour accéder aux 4 premières lignes et toutes les colonnes de notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.iloc[0:4,:]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iloc: pour accéder aux 4 premières colonnes et toutes les lignes de notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.iloc[:,0:4]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slicing sur les colonnes et les lignes: on veut les lignes d&amp;rsquo;index 2 à 5 et les colonnes d&amp;rsquo;index 3 à 8&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.iloc[2:5,3:8]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;## 8.3.2-  La méthode loc():&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;loc: On veut extraire pour accéder à toutes les valeurs d&amp;rsquo;un index, utilisation du slicing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.loc[&amp;quot;BC&amp;quot;,&amp;quot;stnid&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prov
BC    1100120
BC    1200560
BC    1090660
BC    1130771
BC    1060841
Name: stnid, dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.loc[&amp;quot;BC&amp;quot;,:]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;loc pour sélectionner toutes les lignes de 3 labels .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.loc[:,[&amp;quot;Nom de station&amp;quot;, &amp;quot;année déb.&amp;quot;, &amp;quot;année fin.&amp;quot;]].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;8-3-3-faire-des-boucles-dans-un-dataframe&#34;&gt;8.3.3-  Faire des boucles dans un dataframe:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for row_index,row in dataframe_Prov_index.head(5).iterrows():
    print (row_index)
    print(row[&#39;année déb.&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BC
1893
BC
1905
BC
1888
BC
1939
BC
1895
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for key,value in dataframe_Prov_index.head(2).iteritems():
    print(key)
    print(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Nom de station
Prov
BC    AGASSIZ
BC      ATLIN
Name: Nom de station, dtype: object
stnid
Prov
BC    1100120
BC    1200560
Name: stnid, dtype: object
année déb.
Prov
BC    1893
BC    1905
Name: année déb., dtype: int64
mois déb.
Prov
BC    1
BC    8
Name: mois déb., dtype: int64
année fin.
Prov
BC    2017
BC    2017
Name: année fin., dtype: int64
mois fin.
Prov
BC    12
BC    12
Name: mois fin., dtype: int64
lat (deg)
Prov
BC    49.25
BC    59.57
Name: lat (deg), dtype: float64
long (deg)
Prov
BC   -121.77
BC   -133.70
Name: long (deg), dtype: float64
élév (m)
Prov
BC     15
BC    674
Name: élév (m), dtype: int64
stns jointes
Prov
BC    N
BC    N
Name: stns jointes, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-4-data-cleaning-d-un-dataframe&#34;&gt;8.4- &amp;ldquo;Data cleaning&amp;rdquo; d&amp;rsquo;un dataframe:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)

dataframe.head(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |      Tmax |   Tmax90p |      Tmin |   Tmin10p |     DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|----------:|----------:|----------:|----------:|--------:|
|  0 |            0 | BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              | nan       |  nan      | nan       |   nan     | nan     |
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |   5.63043 |   18.9033 |  -3.46052 |   -19.235 | 860.083 |
|  2 |            2 | BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              | nan       |  nan      | nan       |   nan     | nan     |
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.replace()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.replace(&#39;N&#39;,np.nan, inplace=True)

dataframe.head(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.isnull()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.isnull().head(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.isnull().sum()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unnamed: 0          0
Prov                0
Nom de station      0
stnid               0
année déb.          0
mois déb.           0
année fin.          0
mois fin.           0
lat (deg)           0
long (deg)          0
élév (m)            0
stns jointes       65
Tmax              117
Tmax90p           117
Tmin              118
Tmin10p           118
DG0               118
dtype: int64&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.isnull().sum()/len(dataframe)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unnamed: 0        0.000000
Prov              0.000000
Nom de station    0.000000
stnid             0.000000
année déb.        0.000000
mois déb.         0.000000
année fin.        0.000000
mois fin.         0.000000
lat (deg)         0.000000
long (deg)        0.000000
élév (m)          0.000000
stns jointes      0.224913
Tmax              0.404844
Tmax90p           0.404844
Tmin              0.408304
Tmin10p           0.408304
DG0               0.408304
dtype: float64&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.fillna()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe.fillna(0).head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.dropna()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe.dropna(axis=1).head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe.dropna(axis=0).head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLUE RIVER&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1160899&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;683&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.4408&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.12501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.5823&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;987.363&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;COMOX&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021830&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-124.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.7376&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1023&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.42485&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.526&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2444.39&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CRANBROOK&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1152105&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1901&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-115.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;940&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.3203&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.403836&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.3553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1383.26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;DARFIELD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1162265&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-120.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;412&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.8902&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.6917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.82373&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.12333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1525.71&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unnamed: 0          int64
Prov               object
Nom de station     object
stnid              object
année déb.          int64
mois déb.           int64
année fin.          int64
mois fin.           int64
lat (deg)         float64
long (deg)        float64
élév (m)            int64
stns jointes       object
Tmax              float64
Tmax90p           float64
Tmin              float64
Tmin10p           float64
DG0               float64
dtype: object&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.map()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Tmax&#39;] = dataframe[&#39;Tmax&#39;].map(int,na_action=&#39;ignore&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.unique()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(dataframe[&#39;Prov&#39;].unique())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;14&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def multiple_unique(liste):
if len(liste) == 0:
    result = np.nan
elif len(liste) == 1:
    result = &#39;unique&#39;
else:
    result = &#39;multiples&#39;
return result
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Prov&#39;] = multiple_unique(dataframe[&#39;Prov&#39;])
dataframe[&#39;Prov&#39;].unique()
#Ne fonctionne pas car il prend toute la colonne en tant que liste
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([&amp;lsquo;multiples&amp;rsquo;], dtype=object)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;uniq&#39;] = dataframe[&#39;Prov&#39;].apply(lambda x: multiple_unique(x))
dataframe[&#39;uniq&#39;].value_counts()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;multiples    289
Name: uniq, dtype: int64&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.sort_values()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe.sort_values([&#39;Prov&#39;] ,ascending=False).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;uniq&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;145&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PILGER&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4056120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1911&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2011&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-105.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;552&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.419&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.86342&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.695&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1270.17&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;197&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;197&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MINE CENTRE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6025205&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1915&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-92.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;361&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;196&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;196&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MADAWASKA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6080192&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1915&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-77.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;316&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;195&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;195&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LONDON&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6144478&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-81.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;278&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.21358&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.20833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2377.23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Quelques méthodes sur les chaînes de caractères: &lt;b&gt;.lower()&lt;/b&gt;, &lt;b&gt;.upper()&lt;/b&gt;, &lt;b&gt;.len()&lt;/b&gt;, &lt;b&gt;.contains()&lt;/b&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.lower().head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0          agassiz
1            atlin
2      barkerville
3       beaverdell
4    blind channel
Name: Nom de station, dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.upper().head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0          AGASSIZ
1            ATLIN
2      BARKERVILLE
3       BEAVERDELL
4    BLIND CHANNEL
Name: Nom de station, dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.len().head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0     7
1     5
2    11
3    10
4    13
Name: Nom de station, dtype: int64&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe[dataframe[&#39;Nom de station&#39;].str.contains(&#39;CRANBROOK&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;uniq&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CRANBROOK&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1152105&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1901&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-115.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;940&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.3203&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.403836&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.3553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1383.26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.strip().head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0          AGASSIZ
1            ATLIN
2      BARKERVILLE
3       BEAVERDELL
4    BLIND CHANNEL
Name: Nom de station, dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.split(&#39;,&#39;).head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0          [AGASSIZ]
1            [ATLIN]
2      [BARKERVILLE]
3       [BEAVERDELL]
4    [BLIND CHANNEL]
Name: Nom de station, dtype: object&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;## 8.5-  Modifier un DataFrame et introduction au &amp;ldquo;feature modeling&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;Il existe plusieurs fonctions, méthodes ou attributs qu&amp;rsquo;on peut appliquer sur les DataFrame:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nous allons présenter quelques fonctions utiles lors de l&amp;rsquo;exploration d&amp;rsquo;un jeu de données.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe_Prov_index.head()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|
| BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
| BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
| BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
| BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
| BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-1-création-d-une-variable-depuis-un-dataframe&#34;&gt;8.5.1-  Création d&amp;rsquo;une variable depuis un DataFrame:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delta_year = (dataframe_Prov_index[&amp;quot;année fin.&amp;quot;] - dataframe_Prov_index[&amp;quot;année déb.&amp;quot;]) + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delta_year.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
BC    125
BC    113
BC    128
BC     68
BC    123
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-2-ajout-d-une-variable-dans-un-dataframe&#34;&gt;8.5.2- Ajout d&amp;rsquo;une variable dans un DataFrame:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index[&amp;quot;total année&amp;quot;] = delta_year
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe_Prov_index.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |   total année |
|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|--------------:|
| BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |           125 |
| BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |           113 |
| BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |           128 |
| BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |            68 |
| BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |           123 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;## 8.5.3- Suppression d&amp;rsquo;une variable dans un DataFrame:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;drop()&lt;/b&gt;, en entrée on spécifie une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe_Prov_index.drop([&amp;quot;stns jointes&amp;quot;], axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total année&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;113&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;128&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;68&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;pop()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print (&amp;quot;Deleting &#39;stnid&#39; column using POP function:&amp;quot;)
dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.pop(&#39;stnid&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deleting &amp;lsquo;stnid&amp;rsquo; column using POP function:
|    | Prov   | Nom de station   |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|&amp;mdash;:|:&amp;mdash;&amp;mdash;-|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|
|  0 | BC     | AGASSIZ          |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
|  1 | BC     | ATLIN            |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
|  2 | BC     | BARKERVILLE      |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
|  3 | BC     | BEAVERDELL       |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
|  4 | BC     | BELLA COOLA      |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonction &lt;b&gt;del()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print (&amp;quot;Deleting &#39;stns jointes&#39; column using DEL function:&amp;quot;)
del dataframe[&#39;stns jointes&#39;]
dataframe.head()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deleting &amp;lsquo;stns jointes&amp;rsquo; column using DEL function:
|    | Prov   | Nom de station   |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |
|&amp;mdash;:|:&amp;mdash;&amp;mdash;-|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|
|  0 | BC     | AGASSIZ          |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 |
|  1 | BC     | ATLIN            |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 |
|  2 | BC     | BARKERVILLE      |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 |
|  3 | BC     | BEAVERDELL       |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 |
|  4 | BC     | BELLA COOLA      |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 |&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;8-5-4-appliquer-des-fonctions&#34;&gt;8.5.4- Appliquer des fonctions:&lt;/h2&gt;

&lt;p&gt;Pour appliquer vos propres fonctions ou celles d&amp;rsquo;une autre bibliothèque à des objets Pandas, vous devez connaître les trois méthodes importantes. La méthode appropriée à utiliser dépend du fait que votre fonction prévoit de fonctionner sur un DataFrame entier, par ligne ou par colonne ou par élément.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Application d&amp;rsquo;une fonction au niveau de la table: &lt;b&gt; .pipe () &lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Application d&amp;rsquo;une fonction de ligne ou de colonne: &lt;b&gt; .apply () &lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Application d&amp;rsquo;une fonction par élément: &lt;b&gt; .applymap () &lt;/b&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;8-5-4-1-la-méthode-b-apply-b&#34;&gt;8.5.4.1- La méthode &lt;b&gt;.apply()&lt;/b&gt;:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;La méthode &lt;b&gt;.apply()&lt;/b&gt; permet d&amp;rsquo;appliquer une fonction sur l&amp;rsquo;ensemble des valeurs d&amp;rsquo;une colonnes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Des fonctions arbitraires peuvent être appliquées le long des axes d&amp;rsquo;un DataFrame ou d&amp;rsquo;un Panel à l&amp;rsquo;aide de la méthode apply (), qui, comme les méthodes de statistiques descriptives, prend un argument d&amp;rsquo;axe facultatif. Par défaut, l&amp;rsquo;opération s&amp;rsquo;effectue en colonnes, en prenant chaque colonne comme un tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
dataframe[&amp;quot;stns jointes&amp;quot;]=dataframe[&amp;quot;stns jointes&amp;quot;].apply(lambda x: x.replace(&amp;quot;N&amp;quot;, &amp;quot;NaN&amp;quot;))
dataframe[&amp;quot;stns jointes&amp;quot;]=dataframe[&amp;quot;stns jointes&amp;quot;].apply(lambda x: x.replace(&amp;quot;Y&amp;quot;, &amp;quot;1&amp;quot;))
dataframe = dataframe.dropna() 
print(tabulate(dataframe.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |     Tmax |   Tmax90p |     Tmin |   Tmin10p |      DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|---------:|----------:|---------:|----------:|---------:|
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 |            nan |  5.63043 |   18.9033 | -3.46052 | -19.235   |  860.083 |
|  3 |            3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 |              1 | 12.628   |   23.6417 |  4.01748 |  -3.646   | 1798.09  |
|  4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 |            nan | 12.1556  |   20.2007 |  6.77689 |   1.09467 | 2518.68  |
|  5 |            5 | BC     | BLUE RIVER       | 1160899 |         1946 |           9 |         2017 |          12 |       52.13 |      -119.28 |        683 |              1 | 10.4408  |   25.9917 | -1.12501 | -12.5823  |  987.363 |
|  9 |            9 | BC     | COMOX            | 1021830 |         1935 |          11 |         2017 |          12 |       49.72 |      -124.9  |         26 |              1 | 13.7376  |   23.1023 |  6.42485 |  -0.526   | 2444.39  |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = dataframe.dropna(axis=0)
dataframe[&amp;quot;Tmin&amp;quot;]=dataframe[&amp;quot;Tmin&amp;quot;].apply(lambda x: int(x))
print(tabulate(dataframe.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |     Tmax |   Tmax90p |   Tmin |   Tmin10p |      DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|---------:|----------:|-------:|----------:|---------:|
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 |            nan |  5.63043 |   18.9033 |     -3 | -19.235   |  860.083 |
|  3 |            3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 |              1 | 12.628   |   23.6417 |      4 |  -3.646   | 1798.09  |
|  4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 |            nan | 12.1556  |   20.2007 |      6 |   1.09467 | 2518.68  |
|  5 |            5 | BC     | BLUE RIVER       | 1160899 |         1946 |           9 |         2017 |          12 |       52.13 |      -119.28 |        683 |              1 | 10.4408  |   25.9917 |     -1 | -12.5823  |  987.363 |
|  9 |            9 | BC     | COMOX            | 1021830 |         1935 |          11 |         2017 |          12 |       49.72 |      -124.9  |         26 |              1 | 13.7376  |   23.1023 |      6 |  -0.526   | 2444.39  |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-5-filtrer-des-données&#34;&gt;8.5.5- Filtrer des données:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#On veut toutes les valeurs mais uniquement pour une Province
print(tabulate(dataframe.loc[dataframe[&amp;quot;Prov&amp;quot;]==&amp;quot;NB&amp;quot;,:], headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|     |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |    Tmax |   Tmax90p |   Tmin |   Tmin10p |     DG0 |
|----:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|--------:|----------:|-------:|----------:|--------:|
| 256 |          256 | NB     | CHATHAM MIRA.    | 8100989 |         1873 |           1 |         2017 |          12 |       47.02 |       -65.47 |         33 |              1 | 10.6661 |   26.0853 |      0 |  -16.9597 | 1564.13 |
| 258 |          258 | NB     | FREDERICTON      | 8101505 |         1871 |          12 |         2017 |          12 |       45.87 |       -66.53 |         21 |              1 | 11.4353 |   26.306  |      0 |  -14.8207 | 1747.27 |
| 259 |          259 | NB     | MONCTON          | 8103201 |         1898 |           5 |         2017 |          12 |       46.1  |       -64.68 |         71 |              1 | 10.7642 |   25.392  |      0 |  -13.9483 | 1715.35 |
| 260 |          260 | NB     | SAINT JOHN       | 8104901 |         1871 |           1 |         2017 |          12 |       45.32 |       -65.88 |        109 |              1 | 10.4343 |   23.0513 |      0 |  -14.5553 | 1548.77 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(dataframe.loc[dataframe[&amp;quot;DG0&amp;quot;]&amp;gt;=2500,:], headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|     |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |    Tmax |   Tmax90p |   Tmin |   Tmin10p |     DG0 |
|----:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|--------:|----------:|-------:|----------:|--------:|
|   4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 |            nan | 12.1556 |   20.2007 |      6 |  1.09467  | 2518.68 |
|  27 |           27 | BC     | MCINNES ISLAND   | 1065010 |         1955 |           1 |         2017 |          12 |       52.27 |      -128.72 |         26 |            nan | 11.3032 |   17.164  |      7 |  1.949    | 2587.88 |
|  44 |           44 | BC     | VANCOUVER        | 1108395 |         1896 |           2 |         2017 |          12 |       49.2  |      -123.18 |          4 |              1 | 13.9542 |   22.404  |      7 | -0.182667 | 2673.56 |
| 190 |          190 | ON     | HARROW           | 6130257 |         1917 |           4 |         2017 |          12 |       42.03 |       -82.9  |        182 |              1 | 14.7701 |   29.0533 |      5 | -8.03733  | 2655.17 |
| 210 |          210 | ON     | TORONTO          | 6158355 |         1840 |           3 |         2017 |          12 |       43.67 |       -79.4  |        113 |              1 | 13.1046 |   27.0743 |      5 | -7.532    | 2807.09 |
| 211 |          211 | ON     | VINELAND         | 6139148 |         1924 |          10 |         2017 |          12 |       43.18 |       -79.68 |         79 |              1 | 13.4847 |   27.5757 |      5 | -7.63633  | 2551.13 |
| 214 |          214 | ON     | WINDSOR          | 6139527 |         1940 |           8 |         2017 |          12 |       42.27 |       -82.97 |        190 |              1 | 14.4231 |   28.7953 |      5 | -7.38467  | 2803.45 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut combiner des filtres:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(dataframe.loc[(dataframe[&amp;quot;Prov&amp;quot;]==&amp;quot;QC&amp;quot;) &amp;amp; (dataframe[&amp;quot;Tmin&amp;quot;]&amp;gt;0),:], headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|     |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |    Tmax |   Tmax90p |   Tmin |   Tmin10p |     DG0 |
|----:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|--------:|----------:|-------:|----------:|--------:|
| 224 |          224 | QC     | DRUMMONDVILLE    | 7022160 |         1913 |          11 |         2017 |           8 |       45.88 |       -72.48 |         82 |            nan | 11.0868 |   26.6117 |      1 |  -15.8633 | 2110.86 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;## 8.5.6- Grouper un DataFrame sur une ou plusieurs colonnes (groupby):&lt;/p&gt;

&lt;p&gt;Toute opération groupby implique l&amp;rsquo;une des opérations suivantes sur l&amp;rsquo;objet d&amp;rsquo;origine. Ce sont -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Fractionner l&#39;objet

- Application d&#39;une fonction

- Combiner les résultats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans de nombreuses situations, nous divisons les données en ensembles et nous appliquons certaines fonctionnalités à chaque sous-ensemble. Nous pouvons effectuer les opérations suivantes -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Agrégation - calcul d&#39;une statistique récapitulative

- Transformation - effectuer une opération spécifique au groupe

- Filtration - rejet des données avec certaines conditions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Créons maintenant un objet DataFrame et effectuons toutes les opérations dessus -&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
print(tabulate(dataframe.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |      Tmax |   Tmax90p |      Tmin |   Tmin10p |      DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|----------:|----------:|----------:|----------:|---------:|
|  0 |            0 | BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              | nan       |  nan      | nan       | nan       |  nan     |
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |   5.63043 |   18.9033 |  -3.46052 | -19.235   |  860.083 |
|  2 |            2 | BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              | nan       |  nan      | nan       | nan       |  nan     |
|  3 |            3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |  12.628   |   23.6417 |   4.01748 |  -3.646   | 1798.09  |
|  4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 | N              |  12.1556  |   20.2007 |   6.77689 |   1.09467 | 2518.68  |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En observant le DataFrame ci-dessus, nous voyons qu&amp;rsquo;il y a, au minimum, 3 variables que nous pouvons utiliser pour grouper notre jeu de données. On peut par exemple grouper nos données par province (Prov) , par année de début d&amp;rsquo;enregistrement ou année de fin d&amp;rsquo;enregistrement .&lt;/p&gt;

&lt;p&gt;Nous allons utiliser le module groupeby de Pandas pour grouper nos données.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Méthode &lt;b&gt;.unique()&lt;/b&gt; : méthode permet d&amp;rsquo;extraire les valeurs uniques d&amp;rsquo;une colonne. On peut ainsi s&amp;rsquo;assurer que notre variable à grouper possède plusieurs catégories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&amp;quot;Prov&amp;quot;].unique() 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([&amp;lsquo;BC&amp;rsquo;, &amp;lsquo;YT&amp;rsquo;, &amp;lsquo;N   YT&amp;rsquo;, &amp;lsquo;NT&amp;rsquo;, &amp;lsquo;NU&amp;rsquo;, &amp;lsquo;AB&amp;rsquo;, &amp;lsquo;SK&amp;rsquo;, &amp;lsquo;MB&amp;rsquo;, &amp;lsquo;ON&amp;rsquo;, &amp;lsquo;QC&amp;rsquo;,
       &amp;lsquo;NB&amp;rsquo;, &amp;lsquo;NS&amp;rsquo;, &amp;lsquo;PE&amp;rsquo;, &amp;lsquo;NL&amp;rsquo;], dtype=object)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;8-5-6-1-fractionner-les-données-en-groupes&#34;&gt;8.5.6.1- Fractionner les données en groupes:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Prov = dataframe.groupby(&#39;Prov&#39;)
df_Prov.groups
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;AB&#39;: Int64Index([ 96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
             109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
             122, 123, 124, 125, 126, 127, 128, 129, 130],
            dtype=&#39;int64&#39;),
 &#39;BC&#39;: Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
             17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
             34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50],
            dtype=&#39;int64&#39;),
 &#39;MB&#39;: Int64Index([156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
             169, 170, 171, 172, 173, 174, 175],
            dtype=&#39;int64&#39;),
 &#39;N   YT&#39;: Int64Index([52], dtype=&#39;int64&#39;),
 &#39;NB&#39;: Int64Index([254, 255, 256, 257, 258, 259, 260, 261], dtype=&#39;int64&#39;),
 &#39;NL&#39;: Int64Index([275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
             288],
            dtype=&#39;int64&#39;),
 &#39;NS&#39;: Int64Index([262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273], dtype=&#39;int64&#39;),
 &#39;NT&#39;: Int64Index([61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], dtype=&#39;int64&#39;),
 &#39;NU&#39;: Int64Index([74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
             91, 92, 93, 94, 95],
            dtype=&#39;int64&#39;),
 &#39;ON&#39;: Int64Index([176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
             189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
             202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
             215],
            dtype=&#39;int64&#39;),
 &#39;PE&#39;: Int64Index([274], dtype=&#39;int64&#39;),
 &#39;QC&#39;: Int64Index([216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
             229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
             242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253],
            dtype=&#39;int64&#39;),
 &#39;SK&#39;: Int64Index([131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
             144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155],
            dtype=&#39;int64&#39;),
 &#39;YT&#39;: Int64Index([51, 53, 54, 55, 56, 57, 58, 59, 60], dtype=&#39;int64&#39;)}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sélectionner un groupe: méthode &lt;b&gt;.get_group()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(df_Prov.get_group(&#39;QC&#39;).head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AMOS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;709CEE9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;305&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAGOTVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7060400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;159&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.28139&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.2973&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.83359&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8117&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1528.41&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;218&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;218&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAUCEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7027283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-70.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.5515&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0783&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.37634&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.6283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1509.36&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;219&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BROME&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7020840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1890&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2014&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-72.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;206&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1409&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.1767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.294151&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1676.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;220&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;220&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On peut faire un .groupeby() sur plusieurs catégories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(dataframe.groupby([&amp;quot;Prov&amp;quot;, &amp;quot;année fin.&amp;quot;])[&amp;quot;Tmin&amp;quot;].describe().head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|              |   count |      mean |       std |       min |       25% |       50% |       75% |       max |
|:-------------|--------:|----------:|----------:|----------:|----------:|----------:|----------:|----------:|
| (&#39;AB&#39;, 2011) |       0 | nan       | nan       | nan       | nan       | nan       | nan       | nan       |
| (&#39;AB&#39;, 2013) |       1 |  -4.21653 | nan       |  -4.21653 |  -4.21653 |  -4.21653 |  -4.21653 |  -4.21653 |
| (&#39;AB&#39;, 2016) |       1 |  -2.49021 | nan       |  -2.49021 |  -2.49021 |  -2.49021 |  -2.49021 |  -2.49021 |
| (&#39;AB&#39;, 2017) |      17 |  -3.01535 |   1.45026 |  -6.54421 |  -3.42227 |  -3.11709 |  -2.92727 |  -0.1559  |
| (&#39;BC&#39;, 2006) |       1 |   4.01748 | nan       |   4.01748 |   4.01748 |   4.01748 |   4.01748 |   4.01748 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-2-itérer-au-travers-des-groupes&#34;&gt;8.5.6.2- Itérer au travers des  groupes:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped = dataframe.groupby(&#39;Prov&#39;)

for name,group in grouped:
   print(name)
   print(group)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;AB
     Unnamed: 0 Prov   Nom de station    stnid  année déb.  mois déb.  \
96           96   AB        ATHABASCA  3060L20        1918          6   
97           97   AB            BANFF  3050519        1887         11   
98           98   AB      BEAVERLODGE  3070600        1913          4   
99           99   AB          CALGARY  3031092        1885          1   
100         100   AB           CALMAR  3011120        1915         11   
101         101   AB          CAMPSIE  3061200        1912          9   
102         102   AB          CAMROSE  3011240        1946          3   
103         103   AB           CARWAY  3031402        1914          8   
104         104   AB        COLD LAKE  3081680        1925          7   
105         105   AB       CORONATION  3011887        1924          4   
106         106   AB         EDMONTON  3012216        1880          7   
107         107   AB            EDSON  3062246        1914          2   
108         108   AB         ENTRANCE  306A009        1917          6   
109         109   AB         FAIRVIEW  3072525        1931         10   
110         110   AB   FORT CHIPEWYAN  3072655        1883         10   
111         111   AB    FORT MCMURRAY  3062696        1916          1   
112         112   AB   FORT VERMILION  3072723        1908          7   
113         113   AB         GLEICHEN  3032801        1903          7   
114         114   AB   GRANDE PRAIRIE  3072921        1922          8   
115         115   AB     HIGH PRAIRIE  3063165        1926          9   
116         116   AB       HIGH RIVER  3033250        1902          8   
117         117   AB           JASPER  3053536        1926          9   
118         118   AB          LACOMBE  3023722        1907         12   
119         119   AB       LETHBRIDGE  3033890        1902          1   
120         120   AB      MANYBERRIES  3044923        1928          8   
121         121   AB     MEDICINE HAT  3034485        1883          8   
122         122   AB             OLDS  3024925        1914          4   
123         123   AB      PEACE RIVER  3075041        1907         10   
124         124   AB    PINCHER CREEK  3035198        1893          8   
125         125   AB         RANFURLY  3015401        1905          1   
126         126   AB  ROCKY MTN HOUSE  3015523        1915          8   
127         127   AB       SLAVE LAKE  3065995        1922          8   
128         128   AB   STETTLER NORTH  3016124        1918          9   
129         129   AB         VAUXHALL  3036682        1913         10   
130         130   AB       WHITECOURT  3067373        1942         12   

     année fin.  mois fin.  lat (deg)  long (deg)  élév (m) stns jointes  \
96         2017         12      54.82     -113.53       626            Y   
97         2017         12      51.20     -115.55      1397            Y   
98         2017         12      55.20     -119.40       745            Y   
99         2017         12      51.12     -114.02      1084            Y   
100        2016         12      53.28     -113.85       720            N   
101        2013         10      54.13     -114.68       671            N   
102        2017         12      53.03     -112.82       739            N   
103        2017         12      49.00     -113.37      1354            Y   
104        2017         12      54.42     -110.28       541            Y   
105        2017         12      52.08     -111.45       791            Y   
106        2017         12      53.57     -113.52       723            Y   
107        2017         12      53.58     -116.47       927            Y   
108        2017         12      53.37     -117.70       991            Y   
109        2017         12      56.07     -118.38       655            Y   
110        2017         12      58.77     -111.12       238            Y   
111        2017         12      56.65     -111.22       369            Y   
112        2017         12      58.38     -116.03       289            Y   
113        2017         12      50.88     -113.05       905            Y   
114        2017         12      55.18     -118.88       669            Y   
115        2017          9      55.40     -116.48       602            Y   
116        2011          9      50.48     -114.17      1580            Y   
117        2017         12      52.93     -118.03      1020            Y   
118        2017         12      52.45     -113.75       860            Y   
119        2017         12      49.63     -112.80       929            Y   
120        2017         12      49.12     -110.47       935            Y   
121        2017         12      50.02     -110.72       717            Y   
122        2017         12      51.78     -114.10      1046            Y   
123        2017         12      56.23     -117.43       571            Y   
124        2017         12      49.52     -113.98      1190            Y   
125        2017         12      53.42     -111.73       673            Y   
126        2017         12      52.43     -114.92       988            Y   
127        2017         12      55.30     -114.78       583            Y   
128        2017         12      52.33     -112.72       821            Y   
129        2017         12      50.05     -112.13       779            Y   
130        2016          6      54.15     -115.78       782            Y   

          Tmax    Tmax90p      Tmin    Tmin10p          DG0  
96    8.240395  24.018667 -3.362346 -21.040000  1168.233333  
97    8.906518  23.132000 -3.084884 -15.858333   750.370000  
98    8.158459  23.086667 -2.927270 -18.997667  1051.916667  
99   10.834976  24.467333 -1.444606 -15.235000  1172.050000  
100        NaN        NaN       NaN        NaN          NaN  
101   9.214514  24.548333 -4.216529 -21.218333   979.166667  
102   8.964966  24.175667 -3.714421 -20.588000  1048.130000  
103  11.139694  24.925000 -1.618858 -13.980000   956.836667  
104   7.724485  24.273667 -3.037595 -21.203667  1303.950000  
105        NaN        NaN       NaN        NaN          NaN  
106   8.982117  24.328000 -3.117089 -19.190667  1095.933333  
107        NaN        NaN       NaN        NaN          NaN  
108        NaN        NaN       NaN        NaN          NaN  
109        NaN        NaN       NaN        NaN          NaN  
110   4.282190  23.566000 -6.544206 -28.629667  1135.113333  
111   7.080704  24.609667 -4.511516 -23.883667  1145.983333  
112        NaN        NaN       NaN        NaN          NaN  
113        NaN        NaN       NaN        NaN          NaN  
114   8.185239  23.771333 -3.374008 -20.712667  1126.333333  
115        NaN        NaN       NaN        NaN          NaN  
116        NaN        NaN       NaN        NaN          NaN  
117   9.831020  24.132000 -3.341606 -16.509667   761.946667  
118        NaN        NaN       NaN        NaN          NaN  
119        NaN        NaN       NaN        NaN          NaN  
120        NaN        NaN       NaN        NaN          NaN  
121  12.648926  28.497333 -0.155900 -15.783333  1563.866667  
122        NaN        NaN       NaN        NaN          NaN  
123   7.358369  23.566333 -3.784061 -21.467667  1121.106667  
124  10.973669  25.435000 -0.837767 -14.170000  1166.016667  
125   8.434513  24.951667 -2.982488 -19.998333  1204.603333  
126        NaN        NaN       NaN        NaN          NaN  
127   7.481366  22.464333 -3.422267 -20.380333  1131.030000  
128        NaN        NaN       NaN        NaN          NaN  
129        NaN        NaN       NaN        NaN          NaN  
130   8.458045  23.313333 -2.490207 -17.834000  1104.916667  
BC
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-3-fonctions-dites-d-agrégation&#34;&gt;8.5.6.3- Fonctions dites d&amp;rsquo;agrégation:&lt;/h2&gt;

&lt;p&gt;Une fonction agrégée renvoie une seule valeur agrégée pour chaque groupe. Une fois le groupe par objet créé, plusieurs opérations d&amp;rsquo;agrégation peuvent être effectuées sur les données groupées.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
grouped = dataframe.groupby(&#39;Prov&#39;)
grouped[&#39;Tmin&#39;].agg(np.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
AB        -3.050928
BC         1.578024
MB        -4.493900
N   YT          NaN
NB         0.341750
NL        -1.324334
NS         2.542629
NT        -8.518655
NU       -16.522658
ON         0.031970
PE         1.986827
QC        -1.992695
SK        -3.208984
YT        -8.995421
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-4-appliquer-plusieurs-fonctions&#34;&gt;8.5.6.4-  Appliquer plusieurs fonctions:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(grouped[&#39;Tmin&#39;].agg([np.min, np.mean, np.max, np.std]), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   |       amin |        mean |       amax |        std |
|:-------|-----------:|------------:|-----------:|-----------:|
| AB     |  -6.54421  |  -3.05093   |  -0.1559   |   1.40133  |
| BC     |  -6.06858  |   1.57802   |   7.01629  |   3.89638  |
| MB     | -10.0943   |  -4.4939    |  -1.98027  |   2.61835  |
| N   YT | nan        | nan         | nan        | nan        |
| NB     |  -0.491043 |   0.34175   |   0.840796 |   0.598429 |
| NL     |  -8.02478  |  -1.32433   |   1.81275  |   3.42585  |
| NS     |   1.21413  |   2.54263   |   3.75946  |   0.982653 |
| NT     | -12.4518   |  -8.51865   |  -6.68323  |   2.16937  |
| NU     | -21.9351   | -16.5227    | -12.2332   |   3.0491   |
| ON     |  -7.48484  |   0.0319696 |   5.91872  |   3.64788  |
| PE     |   1.98683  |   1.98683   |   1.98683  | nan        |
| QC     |  -8.76805  |  -1.99269   |   1.62212  |   2.70668  |
| SK     |  -5.01656  |  -3.20898   |  -1.42885  |   1.03055  |
| YT     | -10.2177   |  -8.99542   |  -7.77313  |   1.72858  |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-5-transformations&#34;&gt;8.5.6.5- Transformations:&lt;/h2&gt;

&lt;p&gt;La transformation sur un groupe ou une colonne renvoie un objet indexé de la même taille que celui en cours de regroupement.&lt;/p&gt;

&lt;p&gt;Par conséquent, la transformation doit renvoyer un résultat de la même taille que celui d&amp;rsquo;un bloc de groupe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped = dataframe.groupby(&#39;Prov&#39;)
and_stand = lambda x: (x - x.mean()) / x.std()
grouped[&#39;Tmin&#39;].transform(and_stand).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0         NaN
1   -1.293133
2         NaN
3    0.626082
4    1.334280
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-6-filtration&#34;&gt;8.5.6.6- Filtration:&lt;/h2&gt;

&lt;p&gt;La filtration filtre les données selon des critères définis et renvoie le sous-ensemble de données. La fonction filter () est utilisée pour filtrer les données.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(dataframe.groupby(&#39;Prov&#39;).filter(lambda x: len(x) == 1), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|     |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |     Tmax |   Tmax90p |      Tmin |   Tmin10p |     DG0 |
|----:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|---------:|----------:|----------:|----------:|--------:|
|  52 |           52 | N   YT | HAINES JUNCTIO   | 2100630 |         1944 |          10 |         2017 |          12 |       60.75 |      -137.5  |        596 | N              | nan      |  nan      | nan       |  nan      |  nan    |
| 274 |          274 | PE     | CHARLOTTETOWN    | 8300301 |         1872 |          11 |         2017 |          12 |       46.28 |       -63.13 |         49 | Y              |  10.0063 |   23.7683 |   1.98683 |  -12.0367 | 1912.16 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-6-rassembler-plusieurs-dataframes&#34;&gt;8.6-  Rassembler plusieurs Dataframes:&lt;/h2&gt;

&lt;h2 id=&#34;8-6-1-jointure-de-dataframes&#34;&gt;8.6.1- Jointure de DataFrames:&lt;/h2&gt;

&lt;p&gt;Il s’agit de &amp;ldquo;jointer&amp;rdquo; deux tables partageant la même clef ou encore de concaténer horizontalement les lignes en faisant correspondre les valeurs d’une variable clef qui peuvent ne pas être uniques.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/join.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left_dataframe = pd.DataFrame({
   &#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;MONTREAL TAVISH&#39;, &#39;QUEBEC&#39;, &#39;TADOUSSAC&#39;,&#39;OKA&#39;],
   &#39;variable&#39;:[&#39;var1&#39;,&#39;var2&#39;,&#39;var6&#39;,&#39;var5&#39;]})

right_dataframe = pd.DataFrame(
   {&#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;TORONTO&#39;, &#39;OTTAWA&#39;, &#39;KINGSTON&#39;,&#39;CHAPLEAU&#39;],
   &#39;variable&#39;:[&#39;var3&#39;,&#39;var1&#39;,&#39;var6&#39;,&#39;var5&#39;]})
left_dataframe
print(tabulate(left_dataframe, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station   | variable   |
|---:|-----:|:-----------------|:-----------|
|  0 |    1 | MONTREAL TAVISH  | var1       |
|  1 |    2 | QUEBEC           | var2       |
|  2 |    3 | TADOUSSAC        | var6       |
|  3 |    4 | OKA              | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(right_dataframe, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station   | variable   |
|---:|-----:|:-----------------|:-----------|
|  0 |    1 | TORONTO          | var3       |
|  1 |    2 | OTTAWA           | var1       |
|  2 |    3 | KINGSTON         | var6       |
|  3 |    4 | CHAPLEAU         | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-6-1-1-assembler-deux-dataframes-sur-une-clé&#34;&gt;8.6.1.1-  Assembler deux DataFrames sur une clé:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=pd.merge(left_dataframe,right_dataframe,on=&#39;id&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station_x   | variable_x   | Nom de station_y   | variable_y   |
|---:|-----:|:-------------------|:-------------|:-------------------|:-------------|
|  0 |    1 | MONTREAL TAVISH    | var1         | TORONTO            | var3         |
|  1 |    2 | QUEBEC             | var2         | OTTAWA             | var1         |
|  2 |    3 | TADOUSSAC          | var6         | KINGSTON           | var6         |
|  3 |    4 | OKA                | var5         | CHAPLEAU           | var5         |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=pd.merge(left_dataframe,right_dataframe,on=[&#39;id&#39;,&#39;variable&#39;])
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station_x   | variable   | Nom de station_y   |
|---:|-----:|:-------------------|:-----------|:-------------------|
|  0 |    3 | TADOUSSAC          | var6       | KINGSTON           |
|  1 |    4 | OKA                | var5       | CHAPLEAU           |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-6-1-2-fusionner-deux-dataframes-en-utilisant-l-argument-how&#34;&gt;8.6.1.2-  Fusionner deux DataFrames en utilisant l&amp;rsquo;argument &amp;lsquo;How&amp;rsquo;:&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;argument &amp;ldquo;how&amp;rdquo; permet de  déterminer les clés à inclure dans la table résultante.&lt;/p&gt;

&lt;p&gt;Si aucune combinaison de clés n&amp;rsquo;apparaît dans les tableaux de gauche ou de droite, les valeurs du tableau joint seront NaN.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Left Join
data=pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;left&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id_x | Nom de station_x   | variable   |   id_y | Nom de station_y   |
|---:|-------:|:-------------------|:-----------|-------:|:-------------------|
|  0 |      1 | MONTREAL TAVISH    | var1       |      2 | OTTAWA             |
|  1 |      2 | QUEBEC             | var2       |    nan | nan                |
|  2 |      3 | TADOUSSAC          | var6       |      3 | KINGSTON           |
|  3 |      4 | OKA                | var5       |      4 | CHAPLEAU           |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# right Join
data=pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;right&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id_x | Nom de station_x   | variable   |   id_y | Nom de station_y   |
|---:|-------:|:-------------------|:-----------|-------:|:-------------------|
|  0 |      1 | MONTREAL TAVISH    | var1       |      2 | OTTAWA             |
|  1 |      3 | TADOUSSAC          | var6       |      3 | KINGSTON           |
|  2 |      4 | OKA                | var5       |      4 | CHAPLEAU           |
|  3 |    nan | nan                | var3       |      1 | TORONTO            |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# inner Join
data=pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;inner&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id_x | Nom de station_x   | variable   |   id_y | Nom de station_y   |
|---:|-------:|:-------------------|:-----------|-------:|:-------------------|
|  0 |      1 | MONTREAL TAVISH    | var1       |      2 | OTTAWA             |
|  1 |      3 | TADOUSSAC          | var6       |      3 | KINGSTON           |
|  2 |      4 | OKA                | var5       |      4 | CHAPLEAU           |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# outer Join
data=pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;outer&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id_x | Nom de station_x   | variable   |   id_y | Nom de station_y   |
|---:|-------:|:-------------------|:-----------|-------:|:-------------------|
|  0 |      1 | MONTREAL TAVISH    | var1       |      2 | OTTAWA             |
|  1 |      2 | QUEBEC             | var2       |    nan | nan                |
|  2 |      3 | TADOUSSAC          | var6       |      3 | KINGSTON           |
|  3 |      4 | OKA                | var5       |      4 | CHAPLEAU           |
|  4 |    nan | nan                | var3       |      1 | TORONTO            |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-6-2-concatenation-de-dataframes&#34;&gt;8.6.2- Concatenation de DataFrames:&lt;/h2&gt;

&lt;p&gt;Pandas offre diverses fonctionnalités pour combiner facilement des objets DataFrame.&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;objs&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;This is a sequence or mapping of Series, DataFrame objects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;axis&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt; {0, 1, ...}, default 0. This is the axis to concatenate along.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;join&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;{‘inner’, ‘outer’}, default ‘outer’. How to handle indexes on other axis(es). Outer for union and inner for intersection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ignore_index&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;boolean, default False. If True, do not use the index values on the concatenation axis. The resulting axis will be labeled 0, ..., n - 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;join_axes&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt; This is the list of Index objects. Specific indexes to use for the other (n-1) axes instead of performing inner/outer set logic.&lt;/td&gt;

&lt;/tbody&gt;
&lt;/table&gt;    

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe1 = pd.DataFrame({
   &#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;MONTREAL TAVISH&#39;, &#39;QUEBEC&#39;, &#39;TADOUSSAC&#39;,&#39;OKA&#39;],
   &#39;variable&#39;:[&#39;var1&#39;,&#39;var2&#39;,&#39;var6&#39;,&#39;var5&#39;]})

dataframe2 = pd.DataFrame(
   {&#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;TORONTO&#39;, &#39;OTTAWA&#39;, &#39;KINGSTON&#39;,&#39;CHAPLEAU&#39;],
   &#39;variable&#39;:[&#39;var3&#39;,&#39;var1&#39;,&#39;var6&#39;,&#39;var5&#39;]})

data=pd.concat([dataframe1,dataframe2])
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station   | variable   |
|---:|-----:|:-----------------|:-----------|
|  0 |    1 | MONTREAL TAVISH  | var1       |
|  1 |    2 | QUEBEC           | var2       |
|  2 |    3 | TADOUSSAC        | var6       |
|  3 |    4 | OKA              | var5       |
|  0 |    1 | TORONTO          | var3       |
|  1 |    2 | OTTAWA           | var1       |
|  2 |    3 | KINGSTON         | var6       |
|  3 |    4 | CHAPLEAU         | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=pd.concat([dataframe1,dataframe2],keys=[&#39;QC&#39;,&#39;ON&#39;])
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|           |   id | Nom de station   | variable   |
|:----------|-----:|:-----------------|:-----------|
| (&#39;QC&#39;, 0) |    1 | MONTREAL TAVISH  | var1       |
| (&#39;QC&#39;, 1) |    2 | QUEBEC           | var2       |
| (&#39;QC&#39;, 2) |    3 | TADOUSSAC        | var6       |
| (&#39;QC&#39;, 3) |    4 | OKA              | var5       |
| (&#39;ON&#39;, 0) |    1 | TORONTO          | var3       |
| (&#39;ON&#39;, 1) |    2 | OTTAWA           | var1       |
| (&#39;ON&#39;, 2) |    3 | KINGSTON         | var6       |
| (&#39;ON&#39;, 3) |    4 | CHAPLEAU         | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=pd.concat([dataframe1,dataframe2],axis=1)
data
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;Nom de station&lt;/th&gt;
      &lt;th&gt;variable&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;Nom de station&lt;/th&gt;
      &lt;th&gt;variable&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;MONTREAL TAVISH&lt;/td&gt;
      &lt;td&gt;var1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;TORONTO&lt;/td&gt;
      &lt;td&gt;var3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;QUEBEC&lt;/td&gt;
      &lt;td&gt;var2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;OTTAWA&lt;/td&gt;
      &lt;td&gt;var1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;TADOUSSAC&lt;/td&gt;
      &lt;td&gt;var6&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;KINGSTON&lt;/td&gt;
      &lt;td&gt;var6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;OKA&lt;/td&gt;
      &lt;td&gt;var5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;CHAPLEAU&lt;/td&gt;
      &lt;td&gt;var5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;concaténation-avec-append&#34;&gt;Concaténation avec append&lt;/h2&gt;

&lt;p&gt;Un raccourci utile pour concatérer sont les méthodes d&amp;rsquo;instance d&amp;rsquo;ajout sur DataFrame. Ils concaténent le long de l&amp;rsquo;axe = 0, à savoir l&amp;rsquo;indice&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=dataframe1.append(dataframe2)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station   | variable   |
|---:|-----:|:-----------------|:-----------|
|  0 |    1 | MONTREAL TAVISH  | var1       |
|  1 |    2 | QUEBEC           | var2       |
|  2 |    3 | TADOUSSAC        | var6       |
|  3 |    4 | OKA              | var5       |
|  0 |    1 | TORONTO          | var3       |
|  1 |    2 | OTTAWA           | var1       |
|  2 |    3 | KINGSTON         | var6       |
|  3 |    4 | CHAPLEAU         | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;9-sauver-un-dataframe&#34;&gt;9-  Sauver un DataFrame:&lt;/h2&gt;

&lt;p&gt;Pour l’écriture d&amp;rsquo;un DataFrame on utilise les fonctions &lt;b&gt;.to_csv&lt;/b&gt; ou &lt;b&gt;_table&lt;/b&gt; avec des options similaires que read_csv() vues précédemment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.to_csv(&amp;quot;./DATA/mon_nouveau_dataframe.csv&amp;quot;, index = False, header = True, sep = &#39;,&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;10-les-dates&#34;&gt;10- Les dates:&lt;/h2&gt;

&lt;p&gt;Une fois un Dataframe crée, il peut être très pertinent d&amp;rsquo;ajouter au besoin un index temporel afin de faciliter nos analyses.&lt;/p&gt;

&lt;p&gt;En utilisant la fonction &lt;b&gt; date.range () &lt;/b&gt;, nous pouvons créer la série de dates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.date_range(&#39;1/1/2011&#39;, periods=5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-01&#39;, &#39;2011-01-02&#39;, &#39;2011-01-03&#39;, &#39;2011-01-04&#39;,
               &#39;2011-01-05&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour modifier la fréquence:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.date_range(&#39;1/1/2011&#39;, periods=5,freq=&#39;M&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-31&#39;, &#39;2011-02-28&#39;, &#39;2011-03-31&#39;, &#39;2011-04-30&#39;,
               &#39;2011-05-31&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;M&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;bdate_range()&lt;/b&gt; permet de travailler avec des ours ouvrés.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.bdate_range(&#39;1/1/2011&#39;, periods=10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DatetimeIndex([&amp;lsquo;2011-01-03&amp;rsquo;, &amp;lsquo;2011-01-04&amp;rsquo;, &amp;lsquo;2011-01-05&amp;rsquo;, &amp;lsquo;2011-01-06&amp;rsquo;,
               &amp;lsquo;2011-01-07&amp;rsquo;, &amp;lsquo;2011-01-10&amp;rsquo;, &amp;lsquo;2011-01-11&amp;rsquo;, &amp;lsquo;2011-01-12&amp;rsquo;,
               &amp;lsquo;2011-01-13&amp;rsquo;, &amp;lsquo;2011-01-14&amp;rsquo;],
              dtype=&amp;lsquo;datetime64[ns]&amp;lsquo;, freq=&amp;lsquo;B&amp;rsquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;start = pd.datetime(2011, 1, 1)
end = pd.datetime(2011, 1, 5)
pd.date_range(start, end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DatetimeIndex([&amp;lsquo;2011-01-01&amp;rsquo;, &amp;lsquo;2011-01-02&amp;rsquo;, &amp;lsquo;2011-01-03&amp;rsquo;, &amp;lsquo;2011-01-04&amp;rsquo;,
               &amp;lsquo;2011-01-05&amp;rsquo;],
              dtype=&amp;lsquo;datetime64[ns]&amp;lsquo;, freq=&amp;rsquo;D&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; 11- Formater des dates avec le module Datetime:&lt;/h2&gt;   

&lt;p&gt;Python fournit ne nombreuses fonctionnalités pour travailler avec des dates et le temps de manière plus générale.&lt;/p&gt;

&lt;p&gt;Datetime est un module qui permet de manipuler des dates et des durées sous forme d’objets. L’idée est simple: vous manipulez l’objet pour faire tous vos calculs, et quand vous avez besoin de l’afficher, vous formatez l’objet en chaîne de caractères.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/datetime.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/library/datetime.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On peut créer artificiellement un objet datetime suivant les paramètres suivant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    datetime(année, mois, jour, heure, minute, seconde, microseconde, fuseau horaire)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les paramètres “année”, “mois” et “jour” sont obligatoires.&lt;/p&gt;

&lt;p&gt;Le module datetime fournit les classes suivantes:
&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;
   &lt;tr&gt;
    &lt;th&gt;Classe&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.date&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Une instance de date représente une date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.datetime&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Une instance de datetime représente une date et l&amp;rsquo;heure selon le calendrier Gregorian
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.time&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Une instance de time représente le temps (time), à l&amp;rsquo;exception de la date (date).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.timedelta&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;La classe timedelta est utilisée pour conserver les différences entre deux objets temporels ou datés.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.tzinfo&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;La classe tzinfo est utilisée pour implémenter la prise en charge du fuseau horaire pour les objets time et datetime.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;Nous allons voir dans ce qui suit quelques exemples d&amp;rsquo;utilisation de DateTime et de ses classes.  Par la suite, nous verrons qu&amp;rsquo;une combinaise du module de datetime nous offre une grande aisance dans le traitement des données.&lt;/p&gt;

&lt;h2 id=&#34;11-1-la-classe-b-datetime-b-du-module-datetime&#34;&gt;11.1- La classe &lt;b&gt;datetime&lt;/b&gt; du module datetime:&lt;/h2&gt;

&lt;h2 id=&#34;11-1-1-création-d-un-objet-datetime&#34;&gt;11.1.1- Création d&amp;rsquo;un objet datetime:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
datetime(2019, 3, 1)       # ceci est une instance de datetime
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 0, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant = datetime.now()
maintenant
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 9, 8, 11, 24, 42, 424718)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant = datetime.utcnow()
maintenant
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 9, 8, 15, 24, 42, 649731)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lors de l&amp;rsquo;ouverture d&amp;rsquo;un fichier csv ou text, nous avons une information sur la date et le temps des mesures mais sous forme de chaînes de caractères: &amp;ldquo;2018-11-01 15:20&amp;rdquo; ou &amp;ldquo;2017/12/1 16:35:22&amp;rdquo; &amp;hellip;&lt;/p&gt;

&lt;p&gt;Il est possible lors de la lecture de convertir ces chaînes de caractères en objet datetime.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;2018/11/01 15:20&amp;quot;, &amp;quot;%Y/%m/%d %H:%M&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2018, 11, 1, 15, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;2017/12/1 16:35:22&amp;quot;, &amp;quot;%Y/%m/%d %H:%M:%S&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2017, 12, 1, 16, 35, 22)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;01/11/19 10-35:22&amp;quot;, &amp;quot;%d/%m/%y %H-%M:%S&amp;quot;)
dt

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 11, 1, 10, 35, 22)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;1Mar 2019 à 09h35&amp;quot;, &amp;quot;%d%b %Y à %Hh%M&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 9, 35)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;11-1-2-manipuler-un-objet-datetime&#34;&gt;11.1.2- Manipuler un objet datetime:&lt;/h2&gt;

&lt;p&gt;Depuis un objet ou instance de datetime, on peut récupérer l&amp;rsquo;heure et la date.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant.year
#maintenant.month
#maintenant.day
#maintenant.hour
maintenant.minute
#maintenant.second
#maintenant.microsecond
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut modifier une instance datetime.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant.replace(year=1995) # on créer un nouvel objet
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(1995, 9, 8, 15, 24, 42, 649731)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant.replace(month=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 1, 8, 15, 24, 42, 649731)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut ensuite écrire en format string un objet datetime&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = datetime.now(); print(d)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2020-09-08 11:24:46.451948
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Heures et minutes
d.strftime(&amp;quot;%H:%M&amp;quot;), d.strftime(&amp;quot;%Hh%Mmin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(&#39;11:24&#39;, &#39;11h24min&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Année ,mois , heure
d.strftime(&amp;quot;%Y-%m %H:%M&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;2020-09 11:24&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Nous sommes le {0:%d} {0:%B} et il est {0:%Hh%Mmin} &#39;.format(d, &amp;quot;day&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;time&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Nous sommes le 08 September et il est 11h24min &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Les classes &lt;b&gt;date&lt;/b&gt; et &lt;b&gt;time&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces deux classes peuvent être utilisées pour créer une instance datetime&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime, date, time
d = date(2005, 7, 14)
t = time(12, 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.combine(d, t)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2005, 7, 14, 12, 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant = datetime.utcnow()
maintenant.date()
maintenant.time()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.time(15, 24, 48, 669075)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;La classe &lt;b&gt;timedelta&lt;/b&gt; du module datetime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cette classe permet de calculer la différence entre deux dates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import timedelta
delta = timedelta(days=3, seconds=100)    # on crée notre propre timedelta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now() + delta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 9, 11, 11, 26, 29, 150102)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now() + timedelta(days=2, hours=4, minutes=3, seconds=12)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 9, 10, 15, 28, 1, 290110)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;duree = datetime(2010, 12, 31) - datetime(1981, 12, 31)
duree
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.timedelta(days=10592)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut ainsi générer des dates pour des séries temporelles avec un pas de temps arbitraire:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import timedelta
dt = timedelta(days = 5, hours = 6, minutes = 25)
d0 = datetime(2000, 2, 21)
[str(d0 + i * dt) for i in range(10)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;2000-02-21 00:00:00&#39;,
 &#39;2000-02-26 06:25:00&#39;,
 &#39;2000-03-02 12:50:00&#39;,
 &#39;2000-03-07 19:15:00&#39;,
 &#39;2000-03-13 01:40:00&#39;,
 &#39;2000-03-18 08:05:00&#39;,
 &#39;2000-03-23 14:30:00&#39;,
 &#39;2000-03-28 20:55:00&#39;,
 &#39;2000-04-03 03:20:00&#39;,
 &#39;2000-04-08 09:45:00&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;13-bonus-modifier-le-paramétrage-de-pandas&#34;&gt;13- bonus : modifier le paramétrage de pandas:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.set_option(&amp;quot;display.max_row&amp;quot;,30)  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.reset_option(&amp;quot;display.max_rows&amp;quot;)
#https://www.programcreek.com/python/example/101355/pandas.set_option
#https://pandas.pydata.org/pandas-docs/stable/generated/pandas.set_option.html
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>9- La visualisation grapgique avec Python - Exercice</title>
      <link>/courses/formation_python/9-visualisation-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/9-visualisation-exercice/</guid>
      <description>&lt;h1&gt;TP Data visualisation &lt;/h1&gt;

&lt;p&gt;Digimon, abréviation de &amp;ldquo;monstres numériques&amp;rdquo;, est une franchise qui s&amp;rsquo;articule autour d&amp;rsquo;une mécanique de base qui consiste à capturer, soigner et entraîner les monstres pour ensuite s&amp;rsquo;engager dans le combat avec eux. C&amp;rsquo;est similaire aux Pokémon. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Ce fichier contient une liste de tous les Digimon du jeu, avec leur niveau, leur coquille, leur attribut, leur mémoire et le nombre de slots d&amp;rsquo;équipement. Toutes les statistiques (HP, SP, attaque, défense, intelligence et vitesse) sont pour ce Digimon au niveau 50.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;pour toute la suite de cet exercice vous pouvez prendre pour modèle ce que nous avons fait pendant le cours (si vous êtes perdus). Et pour chaque questions n&amp;rsquo;hesitez pas à écrire vos observations/analyses ! &lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;1) importez le fichier DigiDB_digimonlist.csv et affichez le header&lt;br&gt;&lt;/p&gt;

&lt;p&gt;2) A l&amp;rsquo;aide de la fonction .info() de pandas, vérifiez le type des colonnes et si des valeurs manquent dans certaines d&amp;rsquo;entre elle&lt;br&gt;&lt;/p&gt;

&lt;p&gt;3) à l&amp;rsquo;aide de matplotlib, affichez un bar chart du nombre de digimons par niveau (Stage). &lt;br&gt;&lt;/p&gt;

&lt;p&gt;4) faites le même exercice avec les attributs. Il y a plus de valeurs&amp;hellip;adaptez la largeur du graphique pour que cela reste simple à consulter&lt;br&gt;&lt;/p&gt;

&lt;p&gt;5) en utilisant sns.distplot, affichez la répartition de la colonne Memory&lt;br&gt;&lt;/p&gt;

&lt;p&gt;6) en utiliant sns.kdeplot, affichez uniquement la courbe de répartition de la colonne &amp;lsquo;Lv 50 HP&amp;rsquo;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;7) en utilisant scatter_matrix de Pandas, affichez la répartition et les nuages de point des 6 dernières colonnes du data set&lt;br&gt;&lt;/p&gt;

&lt;p&gt;8) Il semble y avoir quelque chose d&amp;rsquo;intéréssant entre &amp;lsquo;Lv50 SP&amp;rsquo; et &amp;lsquo;Lv50 Int&amp;rsquo;&amp;hellip;utilisez sns.jointplot pour voir cela plus en détail&lt;br&gt;&lt;/p&gt;

&lt;p&gt;9) en utilisant sns.lmplot, ajoutez le niveau des digimons (Stage) sur le nuage de points réalisé en point 8.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;10) En utilisant sns.violinplot, visionnez la réparition de &amp;lsquo;Lv 50 HP&amp;rsquo; en fonction du stage du digimon.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;1) importez le fichier DigiDB_digimonlist.csv et affichez le header&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&#39;./DATA/DigiDB_digimonlist.csv&#39;,encoding=&#39;latin-1&#39;, sep=&#39;,&#39;)
data.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Number&lt;/th&gt;
      &lt;th&gt;Digimon&lt;/th&gt;
      &lt;th&gt;Stage&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Attribute&lt;/th&gt;
      &lt;th&gt;Memory&lt;/th&gt;
      &lt;th&gt;Equip Slots&lt;/th&gt;
      &lt;th&gt;Lv 50 HP&lt;/th&gt;
      &lt;th&gt;Lv50 SP&lt;/th&gt;
      &lt;th&gt;Lv50 Atk&lt;/th&gt;
      &lt;th&gt;Lv50 Def&lt;/th&gt;
      &lt;th&gt;Lv50 Int&lt;/th&gt;
      &lt;th&gt;Lv50 Spd&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Kuramon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;590&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;95&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Pabumon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;950&lt;/td&gt;
      &lt;td&gt;62&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Punimon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;870&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;97&lt;/td&gt;
      &lt;td&gt;87&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Botamon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;690&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;95&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;61&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Poyomon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;540&lt;/td&gt;
      &lt;td&gt;98&lt;/td&gt;
      &lt;td&gt;54&lt;/td&gt;
      &lt;td&gt;59&lt;/td&gt;
      &lt;td&gt;95&lt;/td&gt;
      &lt;td&gt;86&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;2) A l&amp;rsquo;aide de la fonction .info() de pandas, vérifiez le type des colonnes et si des valeurs manquent dans certaines d&amp;rsquo;entre elle&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 249 entries, 0 to 248
Data columns (total 13 columns):
Number         249 non-null int64
Digimon        249 non-null object
Stage          249 non-null object
Type           249 non-null object
Attribute      249 non-null object
Memory         249 non-null int64
Equip Slots    249 non-null int64
Lv 50 HP       249 non-null int64
Lv50 SP        249 non-null int64
Lv50 Atk       249 non-null int64
Lv50 Def       249 non-null int64
Lv50 Int       249 non-null int64
Lv50 Spd       249 non-null int64
dtypes: int64(9), object(4)
memory usage: 25.4+ KB
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.isnull().sum()/len(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Number         0.0
Digimon        0.0
Stage          0.0
Type           0.0
Attribute      0.0
Memory         0.0
Equip Slots    0.0
Lv 50 HP       0.0
Lv50 SP        0.0
Lv50 Atk       0.0
Lv50 Def       0.0
Lv50 Int       0.0
Lv50 Spd       0.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) à l&amp;rsquo;aide de matplotlib, affichez un bar chart du nombre de digimons par niveau (Stage).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stages = data[&#39;Stage&#39;].value_counts()
import matplotlib.pyplot as plt
fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.bar(range(len(stages)),stages)
tick_positions = range(0,len(stages))
ax1.set_xticks(tick_positions)
ax1.set_xticklabels(stages.index, rotation=45)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[Text(0, 0, &#39;Mega&#39;),
 Text(0, 0, &#39;Ultimate&#39;),
 Text(0, 0, &#39;Champion&#39;),
 Text(0, 0, &#39;Rookie&#39;),
 Text(0, 0, &#39;In-Training&#39;),
 Text(0, 0, &#39;Ultra&#39;),
 Text(0, 0, &#39;Baby&#39;),
 Text(0, 0, &#39;Armor&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) faites le même exercice avec les attributs. Il y a plus de valeurs&amp;hellip;adaptez la largeur du graphique pour que cela reste simple à consulter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Type = data[&#39;Attribute&#39;].value_counts()

fig = plt.figure(figsize=(12,5))
ax1 = fig.add_subplot(111)
ax1.bar(range(len(Type)),Type)
tick_positions = range(0,len(Type))
ax1.set_xticks(tick_positions)
ax1.set_xticklabels(Type.index, rotation=45)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[Text(0, 0, &#39;Dark&#39;),
 Text(0, 0, &#39;Fire&#39;),
 Text(0, 0, &#39;Light&#39;),
 Text(0, 0, &#39;Neutral&#39;),
 Text(0, 0, &#39;Plant&#39;),
 Text(0, 0, &#39;Electric&#39;),
 Text(0, 0, &#39;Water&#39;),
 Text(0, 0, &#39;Earth&#39;),
 Text(0, 0, &#39;Wind&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz1_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5) en utilisant sns.distplot, affichez la répartition de la colonne Memory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
sns.distplot(data[&#39;Memory&#39;])
sns.set()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz1_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6) en utiliant sns.kdeplot, affichez uniquement la courbe de répartition de la colonne &amp;lsquo;Lv 50 HP&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.kdeplot(data[&#39;Lv 50 HP&#39;], shade = True)
sns.set()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz1_3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;7) en utilisant scatter_matrix de Pandas, affichez la répartition et les nuages de point des 6 dernières colonnes du data set&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pandas.plotting import scatter_matrix
scatter_matrix(data[data.columns[-6:]], figsize=(15,15))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D40BC88&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D431550&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D456EB8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D483860&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D4B11D0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D4D5B38&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D5044E0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D52AE80&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D52AEB8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D587198&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D5ADB00&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D5DC4A8&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D600E10&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D62E7B8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D65D160&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D682AC8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D6B2470&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D6D8DD8&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D704780&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D734128&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D759A90&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D788438&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D7AEDA0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D7DB748&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D80A0F0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D832A58&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D860400&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D885D68&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D8B3710&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D8E20B8&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D907A20&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D9373C8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D95BD30&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D9896D8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D9BA080&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D9DE9E8&amp;gt;]],
      dtype=object)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz1_4.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;8) Il semble y avoir quelque chose d&amp;rsquo;intéréssant entre &amp;lsquo;Lv50 SP&amp;rsquo; et &amp;lsquo;Lv50 Int&amp;rsquo;&amp;hellip;utilisez sns.jointplot pour voir cela plus en détail&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(&amp;quot;Lv50 SP&amp;quot;, &amp;quot;Lv50 Int&amp;quot;, data=data, kind=&amp;quot;reg&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz1_5.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;9) en utilisant sns.lmplot, ajoutez le niveau des digimons (Stage) sur le nuage de points réalisé en point 8.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&amp;quot;Lv50 SP&amp;quot;, y= &amp;quot;Lv50 Int&amp;quot;, hue=&amp;quot;Stage&amp;quot;, data=data, fit_reg = False)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz1_6.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;10) En utilisant sns.violinplot, visionnez la réparition de &amp;lsquo;Lv 50 HP&amp;rsquo; en fonction du stage du digimon.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()
fig.set_size_inches(12,8)
sns.violinplot(x=&amp;quot;Stage&amp;quot;, y=&amp;quot;Lv 50 HP&amp;quot;, data=data)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz1_7.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>9- La visualisation graphique avec Python - Cours</title>
      <link>/courses/formation_python/9-visualisation/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/9-visualisation/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/matplotlib.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;objectifs&#34;&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comment générer des graphiques en Python avec matplotlib&lt;/li&gt;
&lt;li&gt;Gerer plusieurs données dans un même graphique&lt;/li&gt;
&lt;li&gt;Gérer les figures multi-graphiques&lt;/li&gt;
&lt;li&gt;Créer des bar charts, histogrammes, courbes, nuages de points et boites à moustaches&lt;/li&gt;
&lt;li&gt;Utiliser la librairie Seaborn &lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La bibliothèque Matplotlib est l&amp;rsquo;une des bibliothèques les plus utilisées pour tracer des données en Python.&lt;/p&gt;

&lt;p&gt;De nombreux types de graphiques peuvent être développés avec cette bibliothèque:
&lt;a href=&#34;https://matplotlib.org/gallery/index.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/gallery/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pour illustrer certaines fonctionnalités du module Python matplotlib.pyplot (qui fournit un système de traçage similaire à celui de MATLAB), nous utiliserons une base de données de la station UQAM.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
import numpy as np
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
import matplotlib.pyplot as plt

dataframe_UQAM = pd.read_csv(&#39;./DATA/UQAM_DATA_STATION_2018.csv&#39;)
dataframe_UQAM[&#39;Date&#39;]=pd.to_datetime(dataframe_UQAM[&#39;Date&#39;])
dataframe_UQAM = dataframe_UQAM.set_index(&amp;quot;Date&amp;quot;, drop=True)
dataframe_UQAM.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Temperature minimale&lt;/th&gt;
      &lt;th&gt;Temperature maximale&lt;/th&gt;
      &lt;th&gt;Temperature moyenne&lt;/th&gt;
      &lt;th&gt;Precipitation totale&lt;/th&gt;
      &lt;th&gt;Dir_wind&lt;/th&gt;
      &lt;th&gt;Mod_wind&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-01&lt;/th&gt;
      &lt;td&gt;-4.6&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
      &lt;td&gt;-1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;244.0&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-02&lt;/th&gt;
      &lt;td&gt;-6.2&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;-3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;163.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-03&lt;/th&gt;
      &lt;td&gt;-4.8&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;-1.2&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;255.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-04&lt;/th&gt;
      &lt;td&gt;-9.9&lt;/td&gt;
      &lt;td&gt;-4.8&lt;/td&gt;
      &lt;td&gt;-8.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;148.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-05&lt;/th&gt;
      &lt;td&gt;-9.9&lt;/td&gt;
      &lt;td&gt;-6.3&lt;/td&gt;
      &lt;td&gt;-7.6&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;261.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;1-générer-son-premier-graphique&#34;&gt;1- Générer son premier graphique&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Option &lt;b&gt; marqueur &lt;/b&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://matplotlib.org/api/markers_api.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/api/markers_api.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Option &lt;b&gt; linestyle &lt;/b&gt;: supprimer ou non les lignes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], marker=&#39;x&#39;, linestyle=&amp;quot;--&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;dataviz2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], marker=&#39;x&#39;, linestyle=&amp;quot;--&amp;quot;)
plt.xlabel(&amp;quot; L&#39;axe des abscisses&amp;quot;)
plt.ylabel(&amp;quot;L&#39;axe des ordonnées&amp;quot;)
plt.title(&amp;quot;Ma deuxième courbe !&amp;quot;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;)
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkred&#39;)

plt.xlabel(&amp;quot; L&#39;axe des abscisses&amp;quot;)
plt.ylabel(&amp;quot;L&#39;axe des ordonnées&amp;quot;)
plt.title(&amp;quot;multi-courbes&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz4.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fonction &lt;b&gt; scatter &lt;/b&gt;: la fonction vous permet de créer un nuage de points&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt; .rcParams &lt;/b&gt; est utilisée pour agrandir la fenêtre graphique&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]  
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;dataviz5.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pour utiliser l&amp;rsquo;option scatter color, python veut une liste d&amp;rsquo;entrée et non un dictionnaire&lt;/li&gt;

&lt;li&gt;&lt;p&gt;option couleur: c = list ()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], c=list(year_to_plot[&#39;Temperature moyenne&#39;]))
plt.xlabel(&amp;quot;Temps&amp;quot;)
plt.ylabel(&amp;quot;Température&amp;quot;)
plt.title(&amp;quot;Temperature&amp;quot;, y=1.05)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;dataviz6.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nous avons utilisé la couleur de dispersion par défaut ()&lt;/li&gt;
&lt;li&gt;avec l&amp;rsquo;option &lt;b&gt; cmap &lt;/b&gt;, nous pouvons choisir notre panel de couleurs: &lt;a href=&#34;https://matplotlib.org/examples/color/colormaps_reference.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/examples/color/colormaps_reference.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;on choisira par exemple la palette de couleurs &amp;ldquo;sismique&amp;rdquo; via l&amp;rsquo;option &lt;b&gt; cmap &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;pour changer la forme et la taille des points: utilisez les options &lt;b&gt; marqueur &lt;/b&gt; et &lt;b&gt; s &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;pour enregistrer un graphe: fonction pyplot: &lt;b&gt; savefig () &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Pour ajouter une barre de couleur: fonction &lt;b&gt; colorbar () &lt;/b&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pour faire pivoter les étiquettes dans x: function &lt;b&gt; xticks () &lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], c=list(year_to_plot[&#39;Temperature moyenne&#39;]),
        cmap=&amp;quot;seismic&amp;quot;,
        marker=&amp;quot;D&amp;quot;, 
        s=100)
plt.xlabel(&amp;quot;Time&amp;quot;)
plt.ylabel(&amp;quot;Temperature&amp;quot;)
plt.title(&amp;quot;Temperature&amp;quot;, y=1.05)
plt.colorbar()
plt.xticks(rotation=45)
plt.show()
plt.savefig(&amp;quot;figures/my_graph.png&amp;quot;, bbox_inches=&amp;quot;tight&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;dataviz7.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Figure size 1152x648 with 0 Axes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;2- Figure et multi graph &lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()               # je crée un nouvel espace de création pour mes graphique
ax = fig.add_subplot(111)        # je crée un nouveau graphique appelé &#39;ax&#39; et j&#39;indique ses coordonnées
ax.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;) # je ne dis plus plt mais ax pour indiquer ce qui est présent
ax.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkgreen&#39;)
ax.set_xlabel(&amp;quot; L&#39;axe des abscisses&amp;quot;)
ax.set_ylabel(&amp;quot;L&#39;axe des ordonnées&amp;quot;)
ax.set_title(&amp;quot;multi-courbes&amp;quot;)
plt.xticks(rotation=45)
plt.show() #c&#39;est plt qui continue d&#39;indiquer l&#39;affichage du graphique


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz8.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Résumé des principaux éléments dans un graphique matplotlib &lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;attachment:recap_vocab.PNG&#34; alt=&#34;recap_vocab.PNG&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)

ax1.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;) # je ne dis plus plt mais ax pour indiquer ce qui est présent
ax2.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkgreen&#39;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz9.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;matplotlib-subplot&#34;&gt;Matplotlib subplot&lt;/h2&gt;

&lt;p&gt;Lors de la création d&amp;rsquo;un graphique, matplotlib:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stocke un conteneur pour tous les graphiques&lt;/li&gt;
&lt;li&gt;stocke un conteneur pour que le graphique soit positionné sur une grille&lt;/li&gt;
&lt;li&gt;stocke les symboles visuels sur le graphique&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vous pouvez tracer différentes choses dans la même figure en utilisant la fonction de sous-tracé. Voici un exemple:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;attachment:SUBPLOT.PNG&#34; alt=&#34;SUBPLOT.PNG&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()
ax1 = fig.add_subplot(2,2,1) # up and left 
ax2 = fig.add_subplot(2,2,2) # up and right 
ax3 = fig.add_subplot(2,2,3) # down and left 
ax4 = fig.add_subplot(2,2,4) # down and right
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz10.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Voici une documentation sur le sous-intrigue:
&lt;a href=&#34;https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(10,5))
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)
ax1.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;) # je ne dis plus plt mais ax pour indiquer ce qui est présent
ax2.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkgreen&#39;)
ax1.legend(loc=&#39;upper left&#39;)
ax2.legend(loc=&#39;upper left&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz11.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(10,5))
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

ax1.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;) # je ne dis plus plt mais ax pour indiquer ce qui est présent
ax2.scatter(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkgreen&#39;)

plt.savefig(&amp;quot;foo.png&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz12.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(15, 8))
colors = [&#39;green&#39;, &#39;blue&#39;, &#39;red&#39;,&#39;orange&#39;]
for i in range(4):
    ax = fig.add_subplot(2,2,i+1)
    year = str(2014+i)
    label=year
    plt.plot(dataframe_UQAM[year].index,dataframe_UQAM[year][&#39;Temperature moyenne&#39;], c=colors[i], label = label)
    plt.legend(loc=&#39;upper left&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz13.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;3- Présentation des principales représentations graphiques &lt;/h2&gt;
&lt;h3&gt; a- Le bar chart &lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Exemple 1 : 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&#39;./DATA/train.csv&#39;,encoding=&#39;latin-1&#39;, sep=&#39;,&#39;)
data.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;PassengerId&lt;/th&gt;
      &lt;th&gt;Survived&lt;/th&gt;
      &lt;th&gt;Pclass&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Sex&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;SibSp&lt;/th&gt;
      &lt;th&gt;Parch&lt;/th&gt;
      &lt;th&gt;Ticket&lt;/th&gt;
      &lt;th&gt;Fare&lt;/th&gt;
      &lt;th&gt;Cabin&lt;/th&gt;
      &lt;th&gt;Embarked&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Braund, Mr. Owen Harris&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;A/5 21171&lt;/td&gt;
      &lt;td&gt;7.2500&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Cumings, Mrs. John Bradley (Florence Briggs Th...&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;PC 17599&lt;/td&gt;
      &lt;td&gt;71.2833&lt;/td&gt;
      &lt;td&gt;C85&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Heikkinen, Miss. Laina&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;STON/O2. 3101282&lt;/td&gt;
      &lt;td&gt;7.9250&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Futrelle, Mrs. Jacques Heath (Lily May Peel)&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;113803&lt;/td&gt;
      &lt;td&gt;53.1000&lt;/td&gt;
      &lt;td&gt;C123&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Allen, Mr. William Henry&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;373450&lt;/td&gt;
      &lt;td&gt;8.0500&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Répartition du nombre de personnes par class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;passagersClasses = data[&#39;Pclass&#39;].value_counts()
passagersClasses
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3    491
1    216
2    184
Name: Pclass, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.bar(range(len(passagersClasses)),passagersClasses)   # création du graphique
tick_positions = range(0,len(passagersClasses))          # définition de la position des échelles sur les axes
ax1.set_xticks(tick_positions)                           # ajout des échelles 
ax1.set_xticklabels(passagersClasses.index, rotation=45) # ajout des labels

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz14.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Exemple 2 : 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Répartition des classes avec un filtre&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;passagersClassesWomen = data[&#39;Pclass&#39;][data[&#39;Sex&#39;] == &#39;female&#39;].value_counts()
print(passagersClassesWomen)
passagersClassesMen = data[&#39;Pclass&#39;][data[&#39;Sex&#39;] == &#39;male&#39;].value_counts()
print(passagersClassesMen)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3    144
1     94
2     76
Name: Pclass, dtype: int64
3    347
1    122
2    108
Name: Pclass, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;largeurBar = 0.25
position1W = np.arange(len(passagersClassesWomen))
position1M = [x + largeurBar for x in position1W]
print(position1W)
print(position1M)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0 1 2]
[0.25, 1.25, 2.25]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)

ax1.bar(position1W,passagersClassesWomen, width=largeurBar, label=&#39;Femmes&#39;)

ax1.bar(position1M,passagersClassesMen, width=largeurBar,label=&#39;Hommes&#39;)

tick_positions = range(0,len(passagersClasses))
ax1.set_xticks(tick_positions)
ax1.set_xticklabels(passagersClasses.index, rotation=45)

plt.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz15.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Exemple 3 : 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Création de bar empilé&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;passagersVieClasses = data[&#39;Pclass&#39;][data[&#39;Survived&#39;] == 1].value_counts()
print(passagersVieClasses)
passagersMortClasses = data[&#39;Pclass&#39;][data[&#39;Survived&#39;] == 0].value_counts()
print(passagersMortClasses)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1    136
3    119
2     87
Name: Pclass, dtype: int64
3    372
2     97
1     80
Name: Pclass, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;largeurBar = 0.5
position1 = np.arange(len(passagersVieClasses))

fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)

ax1.bar(position1,passagersVieClasses, width=largeurBar, label=&#39;Vie&#39;)

ax1.bar(position1,passagersMortClasses, width=largeurBar,label=&#39;décès&#39;,bottom=passagersVieClasses)

tick_positions = range(0,len(passagersClasses))
ax1.set_xticks(tick_positions)
ax1.set_xticklabels(passagersClasses.index, rotation=45)

plt.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz16.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;b-l-histogramme&#34;&gt;b- L&amp;rsquo; histogramme&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)

ax1.hist(data[&#39;Age&#39;].dropna())          #on pousse la liste age en supprimant les valeurs manquantes
ax1.set_title(&amp;quot;repartition de l&#39;age&amp;quot;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz17.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)

# on ajoute des filtres 
ageEnVie = data[&#39;Age&#39;][data[&#39;Survived&#39;] == 1].dropna()    
ageDeces = data[&#39;Age&#39;][data[&#39;Survived&#39;] == 0].dropna()
# on va pousser deux listes dans notre histogramme
ax1.hist([ageEnVie,ageDeces],bins=20,stacked=True,density = True)
ax1.set_title(&amp;quot;Répartition de l&#39;âge en fonction de la survie (en bleu) ou du décès (en orange)&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz18.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3&gt; c- Le nuage de points &lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.scatter(data[&#39;Age&#39;],data[&#39;Fare&#39;])
ax1.set_title(&amp;quot;Prix du bilet en fonction de l&#39;age&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz19.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.scatter(data[&#39;Age&#39;],data[&#39;Fare&#39;])
ax1.set_title(&amp;quot;Prix du bilet en fonction de l&#39;age&amp;quot;)
ax1.set_ylim(top=100)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz20.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.scatter(data[&#39;Pclass&#39;],data[&#39;Fare&#39;])
ax1.set_title(&amp;quot;Prix du bilet en fonction de la classe&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz21.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pandas.plotting import scatter_matrix
scatter_matrix(data[[&#39;Survived&#39;,&#39;Pclass&#39;,&#39;Age&#39;,&#39;SibSp&#39;,&#39;Fare&#39;]], figsize=(15,15))
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz22.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-aller-plus-loin-avec-seaborn&#34;&gt;4- Aller plus loin avec Seaborn&lt;/h2&gt;

&lt;p&gt;Pour compléter et enrichir nos visualiations, une nouvelle bibliothèque Python sera utilisée: &lt;b&gt; Seaborn &lt;/b&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la bibliothèque Seaborn est basée sur matplotlib.&lt;/li&gt;
&lt;li&gt;il permet de dessiner des graphiques plus complexes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour plus d&amp;rsquo;informations:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&#34; target=&#34;_blank&#34;&gt;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ce lien présente une galerie de types de graphiques à réaliser avec Seaborn:
&lt;a href=&#34;https://seaborn.pydata.org/examples/index.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/examples/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src = &#34;./figures/seaborn.png&#34; alt = &#34;Seaborn&#34; width = &#34;60%&#34; height = &#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/examples/index.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/examples/index.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
sns.distplot(data[&amp;quot;Age&amp;quot;].dropna())
sns.set()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz23.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.kdeplot(data[&amp;quot;Age&amp;quot;].dropna(), shade=True)
sns.set()
plt.xlabel(&amp;quot;Age&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz24.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&amp;quot;Age&amp;quot;, y=&amp;quot;Fare&amp;quot;, hue=&amp;quot;Pclass&amp;quot;, data=data,fit_reg=False)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz25.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(&amp;quot;Age&amp;quot;, &amp;quot;Fare&amp;quot;, data=data, kind=&amp;quot;reg&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz26.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(&amp;quot;Age&amp;quot;, &amp;quot;Fare&amp;quot;, data=data, kind=&amp;quot;hex&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz27.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.boxplot(x=data[&amp;quot;Age&amp;quot;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz28.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;attachment:boite%20a%20moustache.png&#34; alt=&#34;boite%20a%20moustache.png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.boxplot(x=&amp;quot;Pclass&amp;quot;, y=&amp;quot;Age&amp;quot;, data=data)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz29.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.violinplot(x=&amp;quot;Pclass&amp;quot;, y=&amp;quot;Age&amp;quot;, data=data)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz30.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()
fig.set_size_inches(12, 8)
sns.violinplot(x=&amp;quot;Pclass&amp;quot;, y=&amp;quot;Age&amp;quot;, data=data)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;dataviz31.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Afin de mettre en pratique ce que nous venons de voir, une section exercice est proposée. Deux projets complets sur des analyses de stations météorologiques sont également proposées.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
