<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GDueymes</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>GDueymes</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 24 Apr 2020 12:03:32 -0700</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>GDueymes</title>
      <link>/</link>
    </image>
    
    <item>
      <title>1 Python basics</title>
      <link>/courses/tutorial_python/1-python_basics/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/1-python_basics/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-1-variables&#34;&gt;1.1 Variables&lt;/h2&gt;

&lt;p&gt;blablabla&lt;/p&gt;

&lt;p&gt;A variable is an identifier or name to store information or results.
All python programs use variables. It is important to remember that each type of information is stored in a special type of variable.
A type of variable is an information about the contents of the variable. The type of variable will tell the python interpreter what it can do or not with this variable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python can make the difference between upper and lower case letters&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;You can not start a variable with a number&lt;/li&gt;
&lt;li&gt;Do not use accents in variable names&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Function : type() give you informations on the type of our variable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m=3.2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;int(m)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-1-1-numeric-type&#34;&gt;1.1.1 Numeric type:&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Integer: int()&lt;/td&gt;
&lt;td&gt;1 is an integer, 1.0 is not an integer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Float: float()&lt;/td&gt;
&lt;td&gt;Number that includes a decimal part&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Complex numbers&lt;/td&gt;
&lt;td&gt;Association between a real number and an imaginary number&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(m)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;float
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;int(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;int(3.5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;float(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3+5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-1-2-booleans&#34;&gt;1.1.2 Booleans:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;variable storing binary values: True or False&lt;/li&gt;
&lt;li&gt;data types result from logical operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Very useful in if() conditional structures.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3&amp;gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3&amp;lt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-1-3-strings&#34;&gt;1.1.3 Strings:&lt;/h3&gt;

&lt;p&gt;Python can also manipulate strings, which can be expressed in several ways. They can be enclosed in single quotes (&amp;lsquo;&amp;hellip;&amp;rsquo;) or double quotes (&amp;ldquo;&amp;hellip;&amp;rdquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Hello
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(&#39;Hello&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(&amp;quot;15&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;15&amp;quot; + 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-13-3fe5846cb1c2&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 &amp;quot;15&amp;quot; + 2
TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
----------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But we can concatenate two strings together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;15&amp;quot; + &amp;quot;56&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;1556&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;str(15)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;15&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;String objects have a bunch of useful methods; for example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;s = &amp;quot;hello&amp;quot;
print(s.capitalize())  # Capitalize a string; prints &amp;quot;Hello&amp;quot;
print(s.upper())       # Convert a string to uppercase; prints &amp;quot;HELLO&amp;quot;
print(s.rjust(7))      # Right-justify a string, padding with spaces; prints &amp;quot;  hello&amp;quot;
print(s.center(7))     # Center a string, padding with spaces; prints &amp;quot; hello &amp;quot;
print(s.replace(&#39;l&#39;, &#39;(ell)&#39;))  # Replace all instances of one substring with another;
                           # prints &amp;quot;he(ell)(ell)o&amp;quot;
print(&#39;  world &#39;.strip())  # Strip leading and trailing whitespace; prints &amp;quot;world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Hello
HELLO
  hello
 hello 
he(ell)(ell)o
world
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-2-python-arithmetic-operators&#34;&gt;1.2 Python Arithmetic Operators&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Adds values&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Subtracts right hand operand from left hand operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Multiplies values on either side of the operator&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;Divides left hand operand by right hand operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;Divides left hand operand by right hand operand and returns remainder (modulus)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%%&lt;/td&gt;
&lt;td&gt;Performs exponential (power) calculation on operators&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;Floor Division - The division of operands where the result is the quotient in which the digits after the decimal point are removed. But if one of the operands is negative, the result is floored, i.e., rounded away from zero (towards negative infinity)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5-3 # Subtraction 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5+3 # Addition 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5*3 # Multiplication
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5/3 # division  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1.6666666666666667
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5//3 # Floor Division 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5%3 # Modulus  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5**3 # power
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;125
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_variable1=10
ma_variable2=20
ma_variable1*ma_variable2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;200
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_variable1*10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We cannot apply arithmetic operators on text.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;mon texte&amp;quot; - &amp;quot;mon texte&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-26-5483fafb4a74&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 &amp;quot;mon texte&amp;quot; - &amp;quot;mon texte&amp;quot; 
TypeError: unsupported operand type(s) for -: &#39;str&#39; and &#39;str&#39;
----------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;Hi&amp;quot; + &amp;quot; how are you ?&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Hi how are you ?&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;Hi &amp;quot; * 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Hi Hi Hi Hi Hi &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-3-python-comparison-operators&#34;&gt;1.3 Python Comparison Operators&lt;/h2&gt;

&lt;p&gt;These operators compare the values on either sides of them and decide the relation among them. They are also called Relational operators.
The true value of relationships is often used to make decisions by ensuring that conditions are met to perform a certain task.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;If the values of two operands are equal, then the condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;If values of two operands are not equal, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;If the value of left operand is greater than the value of right operand, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;If the value of left operand is less than the value of right operand, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;If the value of left operand is greater than or equal to the value of right operand, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;If the value of left operand is less than or equal to the value of right operand, then condition becomes true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;is&lt;/td&gt;
&lt;td&gt;Identity operators compare the memory locations of two objects. Evaluates to true if the variables on either side of the operator point to the same object and false otherwise&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;is not&lt;/td&gt;
&lt;td&gt;Identity operators compare the memory locations of two objects. Evaluates to false if the variables on either side of the operator point to the same object and true otherwise&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1 == 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1==2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1!=2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;lt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;=1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2 &amp;lt;= 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a=1 # Warning !!!! this is an assignment  operator
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-4-python-logical-operators&#34;&gt;1.4 Python Logical Operators&lt;/h2&gt;

&lt;p&gt;Logical operators compare Boolean expressions instead of values as in the previous point.&lt;/p&gt;

&lt;p&gt;They are used to create Boolean expressions that help us know if a certain task should be performed or not.
Operator| Description   |
|&amp;mdash;&amp;mdash;|&amp;mdash;&amp;mdash;|
|  and| If both operands are true then condition becomes true|
|  or| If any of the two operands are non-zero then condition becomes true|
|  not| Used to reverse the logical state of its operand|&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# and
(3==3) and (4==4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(3==3) and (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# or
(3==3) or (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(3!=3) or (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#  not
not((3!=3) or (4==5))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-5-python-assignment-operators&#34;&gt;1.5 Python Assignment Operators&lt;/h2&gt;

&lt;p&gt;Assignment operators store a value in a variable. We have already seen the simplest case (=), but python offers many other operators of this type, in particular to perform an arithmetic operation at the same time as the assignment.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;Assigns values from right side operands to left side operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td&gt;It adds right operand to the left operand and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-=&lt;/td&gt;
&lt;td&gt;It subtracts right operand from the left operand and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;*=&lt;/td&gt;
&lt;td&gt;It multiplies right operand with the left operand and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td&gt;It divides left operand with the right operand and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td&gt;It takes modulus using two operands and assign the result to left operand&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;**=&lt;/td&gt;
&lt;td&gt;Performs exponential (power) calculation on operators and assign value to the left operande&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;//=&lt;/td&gt;
&lt;td&gt;It performs floor division on operators and assign value to the left operand&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 2
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable += 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable -= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable *= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5. 
Mavariable /= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2.5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable %= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable **= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;25
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5. 
Mavariable //= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2.0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>1- Introduction</title>
      <link>/courses/formation_python/1-introduction/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/1-introduction/</guid>
      <description>&lt;h1&gt;Objectifs&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Tout préparer pour commencer le tutoriel&lt;/li&gt;
&lt;li&gt;Présentation et installation de l’environnement de travail&lt;/li&gt;
&lt;li&gt;Présentation de Jupyter&lt;/li&gt;
&lt;li&gt;Maitrise de jupyter notebook 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Qu’est-ce qu’Anaconda ?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/&#34; target=&#34;_blank&#34;&gt;https://www.anaconda.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Anaconda est une distribution Python, c&amp;rsquo;est à dire une configuration particulière (bonne version Python, bon packages, les bonnes versions)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pourquoi Anaconda ? C’est le plus répandue (6M) , open source, que vous allez retrouver partout, adapté à la data science machine learning &amp;hellip;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt; Comment installer Anaconda ? &lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chercher ‘anaconda’ sur Google&lt;/li&gt;
&lt;li&gt;Aller dans download (25% utilisent encore Python 2). Prendre Python 3&lt;/li&gt;
&lt;li&gt;Suivre les processus d’installation classique (tout laisser par défaut)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; L&#39;interface anaconda&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Lancer anaconda&lt;/li&gt;
&lt;li&gt;Présentation Home&lt;/li&gt;
&lt;li&gt;Présentation Environnements (noyaux avec packages autour) : chercher pandas, Seaborn. Cherchez plotly&lt;/li&gt;
&lt;li&gt;Lancer Jupyter  via anaconda&lt;/li&gt;
&lt;li&gt;Lancer jupyter via cortana&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; Maitrise du notebook jupyter 1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;3 onglets : documents (vos dossiers), Running (notbook en cours), Clusters (parrallelisation de calcul)&lt;/li&gt;
&lt;li&gt;Création d’un nouveau dossier&lt;/li&gt;
&lt;li&gt;Création d’un nouveau notebook&lt;/li&gt;
&lt;li&gt;Renomer&lt;/li&gt;
&lt;li&gt;Print(‘Data science’)&lt;/li&gt;
&lt;li&gt;Ajouter une nouvelle cellule print(‘Machine learnin’)&lt;/li&gt;
&lt;li&gt;Changer valeur, rerun cell print(‘Machine learning’)&lt;/li&gt;
&lt;li&gt;Changer ordre (flèches)&lt;/li&gt;
&lt;li&gt;Supprimer&lt;/li&gt;
&lt;li&gt;Copy past&lt;/li&gt;
&lt;li&gt;Ajouter markdown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;h1&gt; jupyter introduction &lt;/h1&gt;
&lt;h2&gt; session 1 &lt;/h2&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sinon &lt;a href=&#34;https://wordtohtml.net/&#34; target=&#34;_blank&#34;&gt;https://wordtohtml.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pour cela qu’on parle de notebook !
&lt;a href=&#34;https://www.kaggle.com/pavansanagapati/a-simple-tutorial-on-exploratory-data-analysis&#34; target=&#34;_blank&#34;&gt;https://www.kaggle.com/pavansanagapati/a-simple-tutorial-on-exploratory-data-analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Première erreur (passer markdown en python)&lt;/li&gt;
&lt;li&gt;Restart &amp;amp; clear output&lt;/li&gt;
&lt;li&gt;Cells &amp;gt; Run all&lt;/li&gt;
&lt;li&gt;Save&lt;/li&gt;
&lt;li&gt;Print preview&lt;/li&gt;
&lt;li&gt;Download as&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2- Les bases du language Python - Cours</title>
      <link>/courses/formation_python/2-les_bases/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/2-les_bases/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-bases-du-langage-python&#34;&gt;Les Bases du langage Python:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une variable&lt;/li&gt;
&lt;li&gt;Les règles de nommage d&amp;rsquo;une variable&lt;/li&gt;
&lt;li&gt;Les premiers types de variables&lt;/li&gt;
&lt;li&gt;Réaliser des opération entre des variables&lt;/li&gt;
&lt;li&gt;Vérifier et modifier le type d’une variable&lt;/li&gt;
&lt;li&gt;Maîtrise de jupyter notebook 2 : execution du code à travers les cellules&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-les-variables&#34;&gt;2- Les variables&lt;/h2&gt;

&lt;p&gt;Une variable est un identificateur ou un nom pour stocker des informations ou des résultats.&lt;/p&gt;

&lt;p&gt;Tous les programmes Python font appel à des variables. Il est important de garder en mémoire que chaque type d&amp;rsquo;information est enregistré dans un type spécial de variable.&lt;/p&gt;

&lt;p&gt;Un type de variable est une information sur le contenu de la variable. Le type de variable va signifier à l&amp;rsquo;interpreteur python ce qu&amp;rsquo;il peut faire ou ne pas faire avec cette variable.&lt;/p&gt;

&lt;p&gt;Quelques remarques:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python est sensible à la Casse: il distingue les Majuscules et les minuscules&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;On ne peut pas commencer une variable par un chiffre&lt;/li&gt;
&lt;li&gt;Ne pas utiliser d&amp;rsquo;accents dans les noms de variables.&lt;/li&gt;
&lt;li&gt;fonction type(): permet de connaitre le type de notre variable.&lt;/li&gt;
&lt;li&gt;Pas d’espace (underscore)&lt;/li&gt;
&lt;li&gt;Mots interdits (se mets en vert) : &lt;a href=&#34;https://www.programiz.com/python-programming/keywords-identifier&#34; target=&#34;_blank&#34;&gt;https://www.programiz.com/python-programming/keywords-identifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Soyez brefs mais clairs (allez l’écrire souvent, un code peut faire des 100aines de ligne)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; Concept de variable et déclaration d’une variable dans Jupyter &lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Se retrouve dans pratiquement tous les langages&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Données que vous stockez dans votre programme enregistré sous un nom. On pourra ensuite l’utiliser, faire des calculs et la modifier.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;job = &#39;data scientist&#39; # on stocke une valeur dans une variable 
print(job)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;data scientist&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Une variable déclarée est accessible depuis d’autres cellules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(job)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;data scientist
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-1-les-type-des-variables-concept&#34;&gt;2.1 Les type des variables (concept)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Très important (fondamental comme dans tout type de langage)&lt;/li&gt;
&lt;li&gt;La manière dont python va comprendre la nature de l’information stockée et permettre certaines actions (ou en bloquer d&amp;rsquo;autres)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-1-1-les-types-numériques&#34;&gt;2.1.1- Les types numériques&lt;/h3&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Les entiers: int()&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;1 est un nombre entier, 1.0 n&#39;en est pas un&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Les décimaux: float()&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;nombre qui comprend une partie décimale &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;Les nombres complexes&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;association entre un nombre réel et un nombre imaginaire&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m=3.2
type(m)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;float
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;m=3
type(m)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;int
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-2-les-types-booléens&#34;&gt;2.1.2- Les types booléens&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;variable contenant des valeurs binaires: True ou False&lt;/li&gt;
&lt;li&gt;des types de données  résultent d&amp;rsquo;opérations logiques&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Très utile dans les confitions if().&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3&amp;gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;3&amp;lt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-1-3-les-chaînes-de-caractère&#34;&gt;2.1.3- Les chaînes de caractère&lt;/h3&gt;

&lt;p&gt;Suite finie de caractères qu&amp;rsquo;on peut considérer comme du texte qu&amp;rsquo;on définit entre deux (&amp;lsquo;&amp;hellip;&amp;rsquo;) ou (&amp;ldquo;&amp;hellip;&amp;rdquo;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gestion des apostrohpes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;job = &#39;data science&#39;
job
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lsquo;data science&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;darkVador = &#39;Luke, I&#39;m your father&#39;
print(darkVador)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;File &amp;ldquo;&lt;ipython-input-34-24a0388f6afa&gt;&amp;rdquo;, line 1
    darkVador = &amp;lsquo;Luke, I&amp;rsquo;m your father&amp;rsquo;
                         ^
SyntaxError: invalid syntax&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;darkVador = &amp;quot;Luke, I&#39;m your father&amp;quot;
print(darkVador)
# ou 

darkVador = &#39;Luke, I\&#39;m your father&#39;
print(darkVador)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Luke, I&amp;rsquo;m your father
Luke, I&amp;rsquo;m your father&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Si texte trop long (marche aussi pour du code classique)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;luke = &#39;no…That\&#39;s impossible….Noooooooooooooooooooooooooo\
oooooooooooo&#39;
print(luke)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;no…That&amp;rsquo;s impossible….Noooooooooooooooooooooooooooooooooooooo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Possible de concatener 2 variables&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;start = &#39;luke, I\&#39;m&#39;
end = &#39;your father&#39;
darkVador = start+end
print(darkVador)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;luke, I&amp;rsquo;myour father&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;darkVador = start+&#39; &#39;+end
print(darkVador)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;luke, I&amp;rsquo;m your father&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Possible de répèter une chaine de caractère&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;luke = &#39;N&#39;+(&#39;o&#39;*10)
print(luke)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Noooooooooo&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-1-4-vérifier-et-modifier-le-type-d-une-variable&#34;&gt;2.1.4- Vérifier et modifier le type d’une variable&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exemple (règle : on ne mix pas chiffres et strings dans une concaténation)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;finalMotivationScore = 90
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test = job + &#39;learning motivation ?&#39; + finalMotivationScore + &#39;% !&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;TypeError                                 Traceback (most recent call last)&lt;/p&gt;

&lt;p&gt;&lt;ipython-input-41-77bbac5d7b73&gt; in &lt;module&gt;
&amp;mdash;-&amp;gt; 1 test = job + &amp;lsquo;learning motivation ?&amp;rsquo; + finalMotivationScore + &amp;lsquo;% !&amp;rsquo;&lt;/p&gt;

&lt;p&gt;TypeError: can only concatenate str (not &amp;ldquo;int&amp;rdquo;) to str&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Verifier le type d’une variable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(type(finalMotivationScore))
print(type(&#39;test&#39;))
print(type(1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;class &#39;int&#39;&gt;
&lt;class &#39;str&#39;&gt;
&lt;class &#39;int&#39;&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;modifier le type d&amp;rsquo;une variable&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;float(1)
int(1.3)
str(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lsquo;1&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test = job + &#39; learning motivation ? &#39; + str(finalMotivationScore) + &#39;% !&#39;
print(test)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;data science learning motivation ? 90% !&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-2-les-opérateurs-arithmétiques&#34;&gt;2.2- Les opérateurs arithmétiques&lt;/h2&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;thead valign=&#34;bottom&#34;&gt;
&lt;tr&gt;&lt;th class=&#34;head&#34;&gt;Opérateurs&lt;/th&gt;
&lt;th class=&#34;head&#34;&gt;Signification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;+&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Ajoute deux valeurs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;-&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Soustrait l&#39;opérande droit de l&#39;opérande gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;#42;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Multiplie deux valeurs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;/&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise l&#39;opérande gauche par l&#39;opérande droit &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;%&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise l&#39;opérande gauche par l&#39;opérande droit et retourne le reste (opérateur modulo)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;#42;&amp;#42;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Calcule de la valeur exponentielle de l&#39;opératde gauche par l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;//&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise l&#39;opérande gauche par l&#39;opérande droit et retourne la partie entière&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5-3 # soustraction 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5+3 # addition 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5*3 # multiplication
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5/3 # division  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1.6666666666666667
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5//3 # le chiffre entier de ma division 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5%3 # récupérer le reste de ma division ou modulo  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;5**3 # exponentielle ou puissance
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;125
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-3-les-opérateurs-relationnels&#34;&gt;2.3- Les opérateurs relationnels&lt;/h2&gt;

&lt;p&gt;Les opérateurs relationnels comparent une valeur avec une autre et vous disent si la relation fournie est vraie.&lt;/p&gt;

&lt;p&gt;La valeur vraie des relations est souvent utilisée pour prendre des décisions en s&amp;rsquo;assurant que des conditions sont réunies pour effectuer une certaine tâche.&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;thead valign=&#34;bottom&#34;&gt;
&lt;tr&gt;&lt;th class=&#34;head&#34;&gt;Opérateurs&lt;/th&gt;
&lt;th class=&#34;head&#34;&gt;Signification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;==&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Détermine si deux valeurs sont égales&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;!=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Détermine si deux valeurs sont différentes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Vérifie que l&#39;opérande gauche est plus grand que l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Vérifie que l&#39;opérande gauche est plus petit que l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Vérifie que l&#39;opérande gauche est supérieur ou égal à l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Vérifie que l&#39;opérande gauche est inférieur ou égal à l&#39;opérande droit&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;is&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Indentité&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;pre&#34;&gt;not&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Négation&lt;/td&gt;

&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# premier opérateur de comparaison : == 
1 == 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1==2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2ème opérateur de comparaison : != 
1!=2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3ème opérateur de comparaison : &amp;gt; et &amp;lt; 
1&amp;gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;2&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;lt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;1&amp;gt;=1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a=1 # Attention !!!! c&#39;est un opérateur d&#39;assignation de valeur à la variable 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-4-les-opérateurs-logiques&#34;&gt;2.4- Les opérateurs logiques&lt;/h2&gt;

&lt;p&gt;Les opérateurs logiques comparent des expressions booléennes et non  plus des valeurs comme dans le point précédent.&lt;/p&gt;

&lt;p&gt;Ils servent à créer des expressions booléennes qui nous aident à savoir si une certaine tâche doit ou non être réalisée.&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;thead valign=&#34;bottom&#34;&gt;
&lt;tr&gt;&lt;th class=&#34;head&#34;&gt;Opérateurs&lt;/th&gt;
&lt;th class=&#34;head&#34;&gt;Signification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;and (et)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Détermine si les deux opérandes sont vrais&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;or (ou)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Détermine si l&#39;un des deux opérandes est vrai&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;not(non)&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Inverse la valeur logique de l&#39;opérande&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# premier opérateur logique : and
(3==3) and (4==4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(3==3) and (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# deuxième opérateur logique : or
(3==3) or (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(3!=3) or (4==5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3ème opérateur logique : not
not((3!=3) or (4==5))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-5-les-opérateurs-d-affectation&#34;&gt;2.5- Les opérateurs d&amp;rsquo;affectation&lt;/h2&gt;

&lt;p&gt;Les opérateurs d&amp;rsquo;affectation placent une valeur dans une variable. Nous aovns déjà vu le cas le plus simple (=), mais python offre bien d&amp;rsquo;autres opérateurs de ce type, afin nottamment de réaliser une opération aithmétique en même temps que l&amp;rsquo;affectation.
&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;thead valign=&#34;bottom&#34;&gt;
&lt;tr&gt;&lt;th class=&#34;head&#34;&gt;Opérateurs&lt;/th&gt;
&lt;th class=&#34;head&#34;&gt;Signification&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign=&#34;top&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Affecte la valeur de l&amp;rsquo;opérande droit à l&amp;rsquo;opérande de gauche &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;+=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Ajoute la valeur de l&amp;rsquo;opérande droit à l&amp;rsquo;opérande de gauche et place le résultat dans l&amp;rsquo;opérande gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;-=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Soustrait la valeur de l&amp;rsquo;opérande droit de l&amp;rsquo;opérande gauche et place le résultat dans l&amp;rsquo;opérande gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;*=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Multiplie la valeur de l&amp;rsquo;opérande droit par celle de l&amp;rsquo;opérande gauche et place le résultat dans l&amp;rsquo;opérande de gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;/=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise la valeur de l&amp;rsquo;opérande gauche par celle de l&amp;rsquo;opérande droit et place le résultat dans l&amp;rsquo;opérande de gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;%=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise la valeur de l&amp;rsquo;opérande gauche par celle de l&amp;rsquo;opérande droit et place le reste dans l&amp;rsquo;opérande de gauche&lt;/td&gt;
&lt;/tr&gt;&lt;/p&gt;

&lt;p&gt;&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;**=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Calcule la valeur exponentielle de l&amp;rsquo;opérande de gauche par celle de l&amp;rsquo;opérande droit et place le résultat dans l&amp;rsquo;opérande gauche&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;//=&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Divise la valeur de l&amp;rsquo;opérande gauche par celle de l&amp;rsquo;opérande droit et place le résultat entier dans l&amp;rsquo;opérande gauche&lt;/td&gt;&lt;/p&gt;

&lt;p&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 2
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable += 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;7
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable -= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mavariable = 5 
Mavariable **= 2 
Mavariable
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;25
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-6-maitrise-de-jupyter-notebook-execution-du-code-à-travers-les-cellules-commentaires&#34;&gt;2.6- Maitrise de jupyter notebook: execution du code à travers les cellules &amp;amp; commentaires&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Modification de la variable au fil du script (la dernière valeur est conservé)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 1.1
print(number)
print(type(number))

number = 1
print(number)
print(type(number))

number = &#39;1&#39;
print(number)
print(type(number))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1.1
&lt;class &#39;float&#39;&gt;
1
&lt;class &#39;int&#39;&gt;
1
&lt;class &#39;str&#39;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(number)
print(type(number))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1
&lt;class &#39;str&#39;&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ordre d&amp;rsquo;execution des cellules important (erreur fréquente)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 1
print(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;number = 2
print(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(number)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Les commentaires&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;&#39;&#39; Premier 
commentaire &#39;&#39;&#39;
print(number) #Deuxième commentaire
print(&#39;voici un #commentaire&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2
voici un #commentaire&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Exercices + corrections&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2- Les bases du language Python - Exercices</title>
      <link>/courses/formation_python/2-les_bases-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/2-les_bases-exercice/</guid>
      <description>&lt;h1&gt; Exercices &lt;/h1&gt;

&lt;p&gt;1) Debuggez cette erreur et expliquer brievement le problème en commentaire&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Nom = &#39;Sebastien&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;mon nom est &#39;Nom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  File &amp;quot;&amp;lt;ipython-input-3-965d76a6ded8&amp;gt;&amp;quot;, line 1
    print(&#39;mon nom est &#39;Nom)
                          ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;mon nom est &#39; + Nom) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;mon nom est Sebastien
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Faites en sorte que la cellule ci-dessous retourne &amp;lsquo;J&amp;rsquo;apprends la data Science&amp;rsquo; à partir des variables à disposition&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;debutPhrase = &#39;J&#39;apprends la &#39;
finPhrase = &#39;Data science&#39;
print()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;debutPhrase = &amp;quot;J&#39;apprends la &amp;quot;
finPhrase = &#39;Data science&#39;
print(debutPhrase + finPhrase)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;J&#39;apprends la Data science
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Debugguez le code ci-dessous en modifiant uniquement ce qu&amp;rsquo;il se trouve dans print(&amp;hellip;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;heuresPassees = 2
debutPhrase = &#39;j\&#39;apprends Python depuis &#39;
finPhrase = &#39; heures.&#39;

print(debutPhrase + heuresPassees + finPhrase)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-8-54124c40b75b&amp;gt; in &amp;lt;module&amp;gt;
      3 finPhrase = &#39; heures.&#39;
      4 
----&amp;gt; 5 print(debutPhrase + heuresPassees + finPhrase)


TypeError: can only concatenate str (not &amp;quot;int&amp;quot;) to str
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;heuresPassees = 2
debutPhrase = &#39;j\&#39;apprends Python depuis &#39;
finPhrase = &#39; heures.&#39;

print(debutPhrase + str(heuresPassees) + finPhrase)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;j&#39;apprends Python depuis 2 heures.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) quelle sera la valeur de varAge dans le code ci-dessous ? Expliquez en commentaire la raison&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;varAge = 28
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;varAge = 30
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(varAge)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5) a) A partir des variables mises à disposition, calculez le taux de conversion et stockez le dans la variable &amp;ldquo;tauxConversion&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Définition : Le taux de conversion d’un site web désigne le plus souvent le ratio [conversions/visites] donnant le pourcentage de visiteurs réalisant un achat au cours de la visite d’un site&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombreDeVisites = 26736352
nombredeConversions = 973520
#tauxConversion=...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tauxConversion= 973520/26736352
print(tauxConversion)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.036411848557349934
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b) Verifiez le type de la variable en l&amp;rsquo;imprimant à l&amp;rsquo;execution de la cellule&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#print(...)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(type(tauxConversion))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;float&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c) faites en sorte que le taux soit en base 100 plutôt qu&amp;rsquo;en base 1 (ex : avoir 62 plutot que 0.62)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tauxConversion=...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tauxConversion= (973520/26736352) * 100
print(tauxConversion)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.6411848557349935
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d) trouvez un moyen d&amp;rsquo;arrondir la variable tauxConversion à 2 chiffres après la virgule. Ne cherchez pas dans le cours, ça n&amp;rsquo;y est pas :)&lt;/p&gt;

&lt;p&gt;Aide : round()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tauxConversion=...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tauxConversion= round((973520/26736352) * 100,2)
print(tauxConversion)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e) Imprimez la phrase suivante &amp;ldquo;Le taux de conversion est (valeur tauxConversion) %&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#print(...)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Le taux de conversion est &amp;quot;+ str(tauxConversion) +&amp;quot; %&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le taux de conversion est 3.64 %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;f) Rassemblez toutes vos manipulations dans une cellule pour faire le travail en une seule fois. Commentez votre code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombreDeVisites = 26736352
nombredeConversions = 973520
#tauxConversion=...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nombreDeVisites = 26736352
nombredeConversions = 973520
tauxConversion= round((nombredeConversions/nombreDeVisites) * 100,2)
print(&amp;quot;Le taux de conversion est &amp;quot;+ str(tauxConversion) +&amp;quot; %&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le taux de conversion est 3.64 %
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>3- Les listes en Python - Cours</title>
      <link>/courses/formation_python/3-les_listes/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/3-les_listes/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-les-listes-en-python&#34;&gt;3- Les listes en Python:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une liste&lt;/li&gt;
&lt;li&gt;Savoir consulter et analyser une liste&lt;/li&gt;
&lt;li&gt;Savoir manipuler une liste&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Concept et déclaration d&#39;une liste en Python&lt;/h2&gt;

&lt;p&gt;La struture dite &amp;ldquo;liste&amp;rdquo; est fondamentale dans la programmation Python.&lt;/p&gt;

&lt;p&gt;Les listes permettent de regrouper un ensemble de valeurs sous forme ordonnée et modifiable accessible via des index.&lt;/p&gt;

&lt;p&gt;On écrit tous les éléments de la liste en les séparant par des virgules et le tout encadré par des crochets :
             - ma_liste = [ , , , , ]&lt;/p&gt;

&lt;p&gt;Python est un langage orienté-objet, les listes sont associées à des méthodes: objet.method()&lt;/p&gt;

&lt;p&gt;On peut appliquer des fonctions sur les listes&lt;/p&gt;

&lt;h2 id=&#34;3-1-créer-une-liste&#34;&gt;3.1- Créer une liste&lt;/h2&gt;

&lt;p&gt;Pour crée une lixte, on écrit tous les éléments de la liste en les séparant par des virgules et le tout encadré par des crochets&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)  # fonction pour voir ce qui compose notre liste 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut aussi utiliser la fonction &lt;b&gt;range()&lt;/b&gt; pour générer une liste composée d&amp;rsquo;une simple suite arithmétique.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=list(range(10))
ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=list(range(1981,1985,1))
ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1981, 1982, 1983, 1984]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lorsque l&amp;rsquo;on travaille avec un objet sous Python, la commande dir() nous montre toujours les tâches que nous pouvons réaliser avec cet objet: dir(ma_liste)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;In&#39;,
 &#39;Out&#39;,
 &#39;_&#39;,
 &#39;_3&#39;,
 &#39;_4&#39;,
 &#39;__&#39;,
 &#39;___&#39;,
 &#39;__builtin__&#39;,
 &#39;__builtins__&#39;,
 &#39;__doc__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;_dh&#39;,
 &#39;_i&#39;,
 &#39;_i1&#39;,
 &#39;_i2&#39;,
 &#39;_i3&#39;,
 &#39;_i4&#39;,
 &#39;_i5&#39;,
 &#39;_ih&#39;,
 &#39;_ii&#39;,
 &#39;_iii&#39;,
 &#39;_oh&#39;,
 &#39;exit&#39;,
 &#39;get_ipython&#39;,
 &#39;ma_liste&#39;,
 &#39;quit&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-2-parcourir-des-listes&#34;&gt;3.2- Parcourir des listes&lt;/h2&gt;

&lt;p&gt;Une fois la liste crée, nous pouvons accéder aux éléments de notre liste en utilisant les index de cette dernière.&lt;/p&gt;

&lt;p&gt;Le premier item commence toujours avec l&amp;rsquo;index 0. Pour lire la premier item on utilise la valeur 0, le deuxième on utilise la valeur 1, etc.&lt;/p&gt;

&lt;p&gt;Il est d&amp;rsquo;ailleurs possible de modifier une valeur avec son index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
ma_liste[:] # Affiche toutes les occurences
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[1] # pour accéder à un élement de la liste: ici on prend le deuxième élément. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[2:4] # slicing: pour accéder aux éléments entre la 3ème position et la 4ème
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[:4] # slicing: pour accéder tous les éléments jusqu&#39;à l&#39;index 4 ou 4ème position 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[3:] # slicing: pour accéder tous les éléments à partir de l&#39;index 3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[0:2],ma_liste[4],ma_liste[5:7] # pour choisir plusieurs éléments, on fait plusieurs listes
# on crée ici un tuple: qui contient des listes 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;([1, 2], 5, [6, 7])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[-2] # pour récupérer la 2ème valeur à partir de la fin , avec les index négatifs, on ne part plus de 0 . 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[1:-4] # on part de l&#39;index 1, avec le slicing , on s&#39;arrête une 4 fois avant 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[::2] # pour extraire les éléments avec un incrément: ici on extrait les index pairs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 3, 5, 7, &#39;hello&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[1::2] # pour extraire les éléments avec un incrément: ici on extrait les indexs impairs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 4, 6, 8, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-3-modifier-des-listes&#34;&gt;3.3-  Modifier des listes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pour &lt;b&gt;ajouter&lt;/b&gt; un élément: on utilise une méthode append&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste.append(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1981, 1982, 1983, 1984, 2]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pour &lt;b&gt;insérer&lt;/b&gt;  un élement dans notre liste à un index choisi: méthode insert()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste.insert(5,&amp;quot;nouvelle&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[1981, 1982, 1983, 1984, 2, &amp;lsquo;nouvelle&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pour &lt;b&gt;modifier&lt;/b&gt; une valeur dans notre liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[0]=&amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&amp;lsquo;a&amp;rsquo;, 1982, 1983, 1984, 2, &amp;lsquo;nouvelle&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pour &lt;b&gt;modifier&lt;/b&gt; plusieurs éléments de notre liste: slicing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[3:5]=[8,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&amp;lsquo;a&amp;rsquo;, 1982, 1983, 8, 10, &amp;lsquo;nouvelle&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pour &lt;b&gt;supprimer&lt;/b&gt; des valeurs d&amp;rsquo;une liste: 2 méthodes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste[0:2]=[]  # supprimer avec du slicing 
print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1983, 8, 10, &amp;lsquo;nouvelle&amp;rsquo;]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del ma_liste[3] # supprimer avec des mots clefs :https://fr.wikibooks.org/wiki/Programmation_Python/Tableau_des_mots_r%C3%A9serv%C3%A9s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ma_liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1983, 8, 10]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; 3.4-  Opérations utiles sur les listes  &lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pour &lt;b&gt;concatener&lt;/b&gt; deux listes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste1=[1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste2=[6,7,8,9,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste3=ma_liste1+ma_liste2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pour &lt;b&gt;duppliquer&lt;/b&gt; une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste1=[1,2,3,4,5]
ma_liste1*3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.reverse()&lt;/b&gt; pour &lt;b&gt;inverser&lt;/b&gt; les éléments d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste1=[1,2,3,4,5]
print(ma_liste1)
ma_liste1.reverse()
print(ma_liste1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5]
[5, 4, 3, 2, 1]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.count()&lt;/b&gt; pour &lt;b&gt;compter&lt;/b&gt; le nombre d&amp;rsquo;occurence dans une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste2=liste = [&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;]
ma_liste2.count(&amp;quot;a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.index()&lt;/b&gt; pour &lt;b&gt;trouver l&amp;rsquo;index&lt;/b&gt; d&amp;rsquo;une valeur dans une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste2=liste = [&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;]
ma_liste2.index(&amp;quot;c&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonction &lt;b&gt;sum()&lt;/b&gt; pour &lt;b&gt;sommer&lt;/b&gt; les éléments d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste1=[1,2,3,4,5]
sum(ma_liste1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonction &lt;b&gt;.len()&lt;/b&gt; pour connaitre &lt;b&gt;le nombre d&amp;rsquo;items&lt;/b&gt; d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(ma_liste1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.sort()&lt;/b&gt; pour &lt;b&gt;trier&lt;/b&gt; les items d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste = [90,3,8,4,1,10,25,99]
ma_liste.sort() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 3, 4, 8, 10, 25, 90, 99]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonctions &lt;b&gt;min()&lt;/b&gt; et &lt;b&gt;max()&lt;/b&gt; pour extraire le &lt;b&gt;minimum&lt;/b&gt; ou le &lt;b&gt;maximum&lt;/b&gt; d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 3, 4, 8, 10, 25, 90, 99]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(ma_liste) # fonction pour extraire le minimum de notre liste 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(ma_liste) # fonction pour extraire le maximum de notre liste 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;99&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;association d&amp;rsquo;une boucle &lt;b&gt;for&lt;/b&gt; et de la fonction &lt;b&gt;print()&lt;/b&gt; pour afficher les valeurs d&amp;rsquo;une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_mois = [&amp;quot;jan&amp;quot;,&amp;quot;fev&amp;quot;,&amp;quot;mar&amp;quot;]
for mois in list_mois:
print(mois)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jan
fev
mar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonction &lt;b&gt;enumerate()&lt;/b&gt; pour afficher les valeurs d&amp;rsquo;une liste ainsi que son index associé&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_mois = [&amp;quot;jan&amp;quot;,&amp;quot;fev&amp;quot;,&amp;quot;mar&amp;quot;]
for mois in enumerate(list_mois):
 print(mois)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(0, &amp;lsquo;jan&amp;rsquo;)
(1, &amp;lsquo;fev&amp;rsquo;)
(2, &amp;lsquo;mar&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.split()&lt;/b&gt; pour transformer une chaîne de caractère en liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_chaine = &amp;quot;Janvier:Fevrier:Mars&amp;quot;
ma_chaine.split(&amp;quot;:&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&amp;lsquo;Janvier&amp;rsquo;, &amp;lsquo;Fevrier&amp;rsquo;, &amp;lsquo;Mars&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;.join()&lt;/b&gt; pour transformer une liste en chaîne de caractères&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;liste = [&#39;Janvier&#39;, &#39;Fevrier&#39;, &#39;Mars&#39;]
&amp;quot;:&amp;quot;.join(liste)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lsquo;Janvier:Fevrier:Mars&amp;rsquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-5-les-tuples&#34;&gt;3.5- Les tuples&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;1 tuple est une liste, soit ensemble de valeur stockée, mais à la différence qu&amp;rsquo;un tuple n&amp;rsquo;est pas modifiable comme dans une liste.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;l&amp;rsquo;intérêt d&amp;rsquo;un tuple est ce qui est rangé dans un tuble ne sera jamais modifiable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On écrit tous les éléments d&amp;rsquo;un tuple en les séparant par des virgules et le tout encadré par des parenthèses :
         - mon_tuple = ( , , , , )&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On utilisera un tuple pour définir des sortes de constantes qui n&amp;rsquo;ont donc pas vocation à changer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1=(1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1, 2, 3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1[0]=0 # on ne peut pas modifier un tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-48-af300b8325d6&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 tuple1[0]=0 # on ne peut pas modifier un tuple


TypeError: &#39;tuple&#39; object does not support item assignment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1[1]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>3- Les listes en Python - Exercice</title>
      <link>/courses/formation_python/3-les_listes-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/3-les_listes-exercice/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;tp-analyse-des-données-brutes-des-passagers-du-titanic-1-3&#34;&gt;TP : Analyse des données brutes des passagers du Titanic (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)&lt;/h2&gt;

&lt;p&gt;Votre mission est de parvenir à extraire les données suivantes
- 1) le nombre de passagers&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2) le nombre de femmes et d&amp;rsquo;hommes&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;3) le pourcentage de survit des passagers (dans la liste survided, 1 correspond à survecu, 0 à mort)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;4) l&amp;rsquo;age moyen sur le bateau&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il y a ensuite quelques manipulations à réaliser&lt;/p&gt;

&lt;p&gt;5) trouver un système permettant de vérifier la présence d&amp;rsquo;une personne à partir de son nom.
- &amp;lsquo;Levy, Mr. Rene Jacques&amp;rsquo; était il présent ?
- &amp;lsquo;Pinsky, Mrs. (Carla)&amp;rsquo; était-elle présente ?&lt;/p&gt;

&lt;p&gt;6) il y a une erreur sur le nom d&amp;rsquo;un des passagers
- trouver l&amp;rsquo;emplacement dans la liste de &amp;lsquo;Panula, Mr. Ernesti Arvid&amp;rsquo;
- Supprimer le passager et mettre à la place &amp;lsquo;Tanula, Mr. Ernesto Arvad&amp;rsquo;
- Vérifier avec le système trouvé en exercice 5 si la correction a bien été réalisée en recherchant l&amp;rsquo;ancien et le nouveau nom&lt;/p&gt;

&lt;p&gt;Aller plus loin : &lt;a href=&#34;https://www.kaggle.com/c/titanic&#34; target=&#34;_blank&#34;&gt;https://www.kaggle.com/c/titanic&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;survided = [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]
age = [22.0, 38.0, 26.0, 35.0, 35.0, 23.0, 54.0, 2.0, 27.0, 14.0, 4.0, 58.0, 20.0, 39.0, 14.0, 55.0, 2.0, 23.0, 31.0, 23.0, 35.0, 34.0, 15.0, 28.0, 8.0, 38.0, 23.0, 19.0, 23.0, 23.0, 40.0, 23.0, 23.0, 66.0, 28.0, 42.0, 23.0, 21.0, 18.0, 14.0, 40.0, 27.0, 23.0, 3.0, 19.0, 23.0, 23.0, 23.0, 23.0, 18.0, 7.0, 21.0, 49.0, 29.0, 65.0, 23.0, 21.0, 28.5, 5.0, 11.0, 22.0, 38.0, 45.0, 4.0, 23.0, 23.0, 29.0, 19.0, 17.0, 26.0, 32.0, 16.0, 21.0, 26.0, 32.0, 25.0, 23.0, 23.0, 0.82999999999999996, 30.0, 22.0, 29.0, 23.0, 28.0, 17.0, 33.0, 16.0, 23.0, 23.0, 24.0, 29.0, 20.0, 46.0, 26.0, 59.0, 23.0, 71.0, 23.0, 34.0, 34.0, 28.0, 23.0, 21.0, 33.0, 37.0, 28.0, 21.0, 23.0, 38.0, 23.0, 47.0, 14.5, 22.0, 20.0, 17.0, 21.0, 70.5, 29.0, 24.0, 2.0, 21.0, 23.0, 32.5, 32.5, 54.0, 12.0, 23.0, 24.0, 23.0, 45.0, 33.0, 20.0, 47.0, 29.0, 25.0, 23.0, 19.0, 37.0, 16.0, 24.0, 23.0, 22.0, 24.0, 19.0, 18.0, 19.0, 27.0, 9.0, 36.5, 42.0, 51.0, 22.0, 55.5, 40.5, 23.0, 51.0, 16.0, 30.0, 23.0, 23.0, 44.0, 40.0, 26.0, 17.0, 1.0, 9.0, 23.0, 45.0, 23.0, 28.0, 61.0, 4.0, 1.0, 21.0, 56.0, 18.0, 23.0, 50.0, 30.0, 36.0, 23.0, 23.0, 9.0, 1.0, 4.0, 23.0, 23.0, 45.0, 40.0, 36.0, 32.0, 19.0, 19.0, 3.0, 44.0, 58.0, 23.0, 42.0, 23.0, 24.0, 28.0, 23.0, 34.0, 45.5, 18.0, 2.0, 32.0, 26.0, 16.0, 40.0, 24.0, 35.0, 22.0, 30.0, 23.0, 31.0, 27.0, 42.0, 32.0, 30.0, 16.0, 27.0, 51.0, 23.0, 38.0, 22.0, 19.0, 20.5, 18.0, 23.0, 35.0, 29.0, 59.0, 5.0, 24.0, 23.0, 44.0, 8.0, 19.0, 33.0, 23.0, 23.0, 29.0, 22.0, 30.0, 44.0, 25.0, 24.0, 37.0, 54.0, 23.0, 29.0, 62.0, 30.0, 41.0, 29.0, 23.0, 30.0, 35.0, 50.0, 23.0, 3.0, 52.0, 40.0, 23.0, 36.0, 16.0, 25.0, 58.0, 35.0, 23.0, 25.0, 41.0, 37.0, 23.0, 63.0, 45.0, 23.0, 7.0, 35.0, 65.0, 28.0, 16.0, 19.0, 23.0, 33.0, 30.0, 22.0, 42.0, 22.0, 26.0, 19.0, 36.0, 24.0, 24.0, 23.0, 23.5, 2.0, 23.0, 50.0, 23.0, 23.0, 19.0, 23.0, 23.0, 0.92000000000000004, 23.0, 17.0, 30.0, 30.0, 24.0, 18.0, 26.0, 28.0, 43.0, 26.0, 24.0, 54.0, 31.0, 40.0, 22.0, 27.0, 30.0, 22.0, 23.0, 36.0, 61.0, 36.0, 31.0, 16.0, 23.0, 45.5, 38.0, 16.0, 23.0, 23.0, 29.0, 41.0, 45.0, 45.0, 2.0, 24.0, 28.0, 25.0, 36.0, 24.0, 40.0, 23.0, 3.0, 42.0, 23.0, 23.0, 15.0, 25.0, 23.0, 28.0, 22.0, 38.0, 23.0, 23.0, 40.0, 29.0, 45.0, 35.0, 23.0, 30.0, 60.0, 23.0, 23.0, 24.0, 25.0, 18.0, 19.0, 22.0, 3.0, 23.0, 22.0, 27.0, 20.0, 19.0, 42.0, 1.0, 32.0, 35.0, 23.0, 18.0, 1.0, 36.0, 23.0, 17.0, 36.0, 21.0, 28.0, 23.0, 24.0, 22.0, 31.0, 46.0, 23.0, 28.0, 39.0, 26.0, 21.0, 28.0, 20.0, 34.0, 51.0, 3.0, 21.0, 23.0, 23.0, 23.0, 33.0, 23.0, 44.0, 23.0, 34.0, 18.0, 30.0, 10.0, 23.0, 21.0, 29.0, 28.0, 18.0, 23.0, 28.0, 19.0, 23.0, 32.0, 28.0, 23.0, 42.0, 17.0, 50.0, 14.0, 21.0, 24.0, 64.0, 31.0, 45.0, 20.0, 25.0, 28.0, 23.0, 4.0, 13.0, 34.0, 5.0, 52.0, 36.0, 23.0, 30.0, 49.0, 23.0, 29.0, 65.0, 23.0, 50.0, 23.0, 48.0, 34.0, 47.0, 48.0, 23.0, 38.0, 23.0, 56.0, 23.0, 0.75, 23.0, 38.0, 33.0, 23.0, 22.0, 23.0, 34.0, 29.0, 22.0, 2.0, 9.0, 23.0, 50.0, 63.0, 25.0, 23.0, 35.0, 58.0, 30.0, 9.0, 23.0, 21.0, 55.0, 71.0, 21.0, 23.0, 54.0, 23.0, 25.0, 24.0, 17.0, 21.0, 23.0, 37.0, 16.0, 18.0, 33.0, 23.0, 28.0, 26.0, 29.0, 23.0, 36.0, 54.0, 24.0, 47.0, 34.0, 23.0, 36.0, 32.0, 30.0, 22.0, 23.0, 44.0, 23.0, 40.5, 50.0, 23.0, 39.0, 23.0, 2.0, 23.0, 17.0, 23.0, 30.0, 7.0, 45.0, 30.0, 23.0, 22.0, 36.0, 9.0, 11.0, 32.0, 50.0, 64.0, 19.0, 23.0, 33.0, 8.0, 17.0, 27.0, 23.0, 22.0, 22.0, 62.0, 48.0, 23.0, 39.0, 36.0, 23.0, 40.0, 28.0, 23.0, 23.0, 24.0, 19.0, 29.0, 23.0, 32.0, 62.0, 53.0, 36.0, 23.0, 16.0, 19.0, 34.0, 39.0, 23.0, 32.0, 25.0, 39.0, 54.0, 36.0, 23.0, 18.0, 47.0, 60.0, 22.0, 23.0, 35.0, 52.0, 47.0, 23.0, 37.0, 36.0, 23.0, 49.0, 23.0, 49.0, 24.0, 23.0, 23.0, 44.0, 35.0, 36.0, 30.0, 27.0, 22.0, 40.0, 39.0, 23.0, 23.0, 23.0, 35.0, 24.0, 34.0, 26.0, 4.0, 26.0, 27.0, 42.0, 20.0, 21.0, 21.0, 61.0, 57.0, 21.0, 26.0, 23.0, 80.0, 51.0, 32.0, 23.0, 9.0, 28.0, 32.0, 31.0, 41.0, 23.0, 20.0, 24.0, 2.0, 23.0, 0.75, 48.0, 19.0, 56.0, 23.0, 23.0, 23.0, 18.0, 21.0, 23.0, 18.0, 24.0, 23.0, 32.0, 23.0, 58.0, 50.0, 40.0, 47.0, 36.0, 20.0, 32.0, 25.0, 23.0, 43.0, 23.0, 40.0, 31.0, 70.0, 31.0, 23.0, 18.0, 24.5, 18.0, 43.0, 36.0, 23.0, 27.0, 20.0, 14.0, 60.0, 25.0, 14.0, 19.0, 18.0, 15.0, 31.0, 4.0, 23.0, 25.0, 60.0, 52.0, 44.0, 23.0, 49.0, 42.0, 18.0, 35.0, 18.0, 25.0, 26.0, 39.0, 45.0, 42.0, 22.0, 23.0, 24.0, 23.0, 48.0, 29.0, 52.0, 19.0, 38.0, 27.0, 23.0, 33.0, 6.0, 17.0, 34.0, 50.0, 27.0, 20.0, 30.0, 23.0, 25.0, 25.0, 29.0, 11.0, 23.0, 23.0, 23.0, 28.5, 48.0, 35.0, 23.0, 23.0, 23.0, 36.0, 21.0, 24.0, 31.0, 70.0, 16.0, 30.0, 19.0, 31.0, 4.0, 6.0, 33.0, 23.0, 48.0, 0.67000000000000004, 28.0, 18.0, 34.0, 33.0, 23.0, 41.0, 20.0, 36.0, 16.0, 51.0, 23.0, 30.5, 23.0, 32.0, 24.0, 48.0, 57.0, 23.0, 54.0, 18.0, 23.0, 5.0, 23.0, 43.0, 13.0, 17.0, 29.0, 23.0, 25.0, 25.0, 18.0, 8.0, 1.0, 46.0, 23.0, 16.0, 23.0, 23.0, 25.0, 39.0, 49.0, 31.0, 30.0, 30.0, 34.0, 31.0, 11.0, 0.41999999999999998, 27.0, 31.0, 39.0, 18.0, 39.0, 33.0, 26.0, 39.0, 35.0, 6.0, 30.5, 23.0, 23.0, 31.0, 43.0, 10.0, 52.0, 27.0, 38.0, 27.0, 2.0, 23.0, 23.0, 1.0, 23.0, 62.0, 15.0, 0.82999999999999996, 23.0, 23.0, 18.0, 39.0, 21.0, 23.0, 32.0, 23.0, 20.0, 16.0, 30.0, 34.5, 17.0, 42.0, 23.0, 35.0, 28.0, 23.0, 4.0, 74.0, 9.0, 16.0, 44.0, 18.0, 45.0, 51.0, 24.0, 23.0, 41.0, 21.0, 48.0, 23.0, 24.0, 42.0, 27.0, 31.0, 23.0, 4.0, 26.0, 47.0, 33.0, 47.0, 28.0, 15.0, 20.0, 19.0, 23.0, 56.0, 25.0, 33.0, 22.0, 28.0, 25.0, 39.0, 27.0, 19.0, 23.0, 26.0, 32.0]
name = [&#39;Braund, Mr. Owen Harris&#39;, &#39;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&#39;, &#39;Heikkinen, Miss. Laina&#39;, &#39;Futrelle, Mrs. Jacques Heath (Lily May Peel)&#39;, &#39;Allen, Mr. William Henry&#39;, &#39;Moran, Mr. James&#39;, &#39;McCarthy, Mr. Timothy J&#39;, &#39;Palsson, Master. Gosta Leonard&#39;, &#39;Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)&#39;, &#39;Nasser, Mrs. Nicholas (Adele Achem)&#39;, &#39;Sandstrom, Miss. Marguerite Rut&#39;, &#39;Bonnell, Miss. Elizabeth&#39;, &#39;Saundercock, Mr. William Henry&#39;, &#39;Andersson, Mr. Anders Johan&#39;, &#39;Vestrom, Miss. Hulda Amanda Adolfina&#39;, &#39;Hewlett, Mrs. (Mary D Kingcome) &#39;, &#39;Rice, Master. Eugene&#39;, &#39;Williams, Mr. Charles Eugene&#39;, &#39;Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)&#39;, &#39;Masselmani, Mrs. Fatima&#39;, &#39;Fynney, Mr. Joseph J&#39;, &#39;Beesley, Mr. Lawrence&#39;, &#39;McGowan, Miss. Anna &amp;quot;Annie&amp;quot;&#39;, &#39;Sloper, Mr. William Thompson&#39;, &#39;Palsson, Miss. Torborg Danira&#39;, &#39;Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)&#39;, &#39;Emir, Mr. Farred Chehab&#39;, &#39;Fortune, Mr. Charles Alexander&#39;, &#39;O\&#39;Dwyer, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;, &#39;Todoroff, Mr. Lalio&#39;, &#39;Uruchurtu, Don. Manuel E&#39;, &#39;Spencer, Mrs. William Augustus (Marie Eugenie)&#39;, &#39;Glynn, Miss. Mary Agatha&#39;, &#39;Wheadon, Mr. Edward H&#39;, &#39;Meyer, Mr. Edgar Joseph&#39;, &#39;Holverson, Mr. Alexander Oskar&#39;, &#39;Mamee, Mr. Hanna&#39;, &#39;Cann, Mr. Ernest Charles&#39;, &#39;Vander Planke, Miss. Augusta Maria&#39;, &#39;Nicola-Yarred, Miss. Jamila&#39;, &#39;Ahlin, Mrs. Johan (Johanna Persdotter Larsson)&#39;, &#39;Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott)&#39;, &#39;Kraeff, Mr. Theodor&#39;, &#39;Laroche, Miss. Simonne Marie Anne Andree&#39;, &#39;Devaney, Miss. Margaret Delia&#39;, &#39;Rogers, Mr. William John&#39;, &#39;Lennon, Mr. Denis&#39;, &amp;quot;O&#39;Driscoll, Miss. Bridget&amp;quot;, &#39;Samaan, Mr. Youssef&#39;, &#39;Arnold-Franchi, Mrs. Josef (Josefine Franchi)&#39;, &#39;Panula, Master. Juha Niilo&#39;, &#39;Nosworthy, Mr. Richard Cater&#39;, &#39;Harper, Mrs. Henry Sleeper (Myna Haxtun)&#39;, &#39;Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson)&#39;, &#39;Ostby, Mr. Engelhart Cornelius&#39;, &#39;Woolner, Mr. Hugh&#39;, &#39;Rugg, Miss. Emily&#39;, &#39;Novel, Mr. Mansouer&#39;, &#39;West, Miss. Constance Mirium&#39;, &#39;Goodwin, Master. William Frederick&#39;, &#39;Sirayanian, Mr. Orsen&#39;, &#39;Icard, Miss. Amelie&#39;, &#39;Harris, Mr. Henry Birkhardt&#39;, &#39;Skoog, Master. Harald&#39;, &#39;Stewart, Mr. Albert A&#39;, &#39;Moubarek, Master. Gerios&#39;, &#39;Nye, Mrs. (Elizabeth Ramell)&#39;, &#39;Crease, Mr. Ernest James&#39;, &#39;Andersson, Miss. Erna Alexandra&#39;, &#39;Kink, Mr. Vincenz&#39;, &#39;Jenkin, Mr. Stephen Curnow&#39;, &#39;Goodwin, Miss. Lillian Amy&#39;, &#39;Hood, Mr. Ambrose Jr&#39;, &#39;Chronopoulos, Mr. Apostolos&#39;, &#39;Bing, Mr. Lee&#39;, &#39;Moen, Mr. Sigurd Hansen&#39;, &#39;Staneff, Mr. Ivan&#39;, &#39;Moutal, Mr. Rahamin Haim&#39;, &#39;Caldwell, Master. Alden Gates&#39;, &#39;Dowdell, Miss. Elizabeth&#39;, &#39;Waelens, Mr. Achille&#39;, &#39;Sheerlinck, Mr. Jan Baptist&#39;, &#39;McDermott, Miss. Brigdet Delia&#39;, &#39;Carrau, Mr. Francisco M&#39;, &#39;Ilett, Miss. Bertha&#39;, &#39;Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson)&#39;, &#39;Ford, Mr. William Neal&#39;, &#39;Slocovski, Mr. Selman Francis&#39;, &#39;Fortune, Miss. Mabel Helen&#39;, &#39;Celotti, Mr. Francesco&#39;, &#39;Christmann, Mr. Emil&#39;, &#39;Andreasson, Mr. Paul Edvin&#39;, &#39;Chaffee, Mr. Herbert Fuller&#39;, &#39;Dean, Mr. Bertram Frank&#39;, &#39;Coxon, Mr. Daniel&#39;, &#39;Shorney, Mr. Charles Joseph&#39;, &#39;Goldschmidt, Mr. George B&#39;, &#39;Greenfield, Mr. William Bertram&#39;, &#39;Doling, Mrs. John T (Ada Julia Bone)&#39;, &#39;Kantor, Mr. Sinai&#39;, &#39;Petranec, Miss. Matilda&#39;, &#39;Petroff, Mr. Pastcho (&amp;quot;Pentcho&amp;quot;)&#39;, &#39;White, Mr. Richard Frasar&#39;, &#39;Johansson, Mr. Gustaf Joel&#39;, &#39;Gustafsson, Mr. Anders Vilhelm&#39;, &#39;Mionoff, Mr. Stoytcho&#39;, &#39;Salkjelsvik, Miss. Anna Kristine&#39;, &#39;Moss, Mr. Albert Johan&#39;, &#39;Rekic, Mr. Tido&#39;, &#39;Moran, Miss. Bertha&#39;, &#39;Porter, Mr. Walter Chamberlain&#39;, &#39;Zabour, Miss. Hileni&#39;, &#39;Barton, Mr. David John&#39;, &#39;Jussila, Miss. Katriina&#39;, &#39;Attalah, Miss. Malake&#39;, &#39;Pekoniemi, Mr. Edvard&#39;, &#39;Connors, Mr. Patrick&#39;, &#39;Turpin, Mr. William John Robert&#39;, &#39;Baxter, Mr. Quigg Edmond&#39;, &#39;Andersson, Miss. Ellis Anna Maria&#39;, &#39;Hickman, Mr. Stanley George&#39;, &#39;Moore, Mr. Leonard Charles&#39;, &#39;Nasser, Mr. Nicholas&#39;, &#39;Webber, Miss. Susan&#39;, &#39;White, Mr. Percival Wayland&#39;, &#39;Nicola-Yarred, Master. Elias&#39;, &#39;McMahon, Mr. Martin&#39;, &#39;Madsen, Mr. Fridtjof Arne&#39;, &#39;Peter, Miss. Anna&#39;, &#39;Ekstrom, Mr. Johan&#39;, &#39;Drazenoic, Mr. Jozef&#39;, &#39;Coelho, Mr. Domingos Fernandeo&#39;, &#39;Robins, Mrs. Alexander A (Grace Charity Laury)&#39;, &#39;Weisz, Mrs. Leopold (Mathilde Francoise Pede)&#39;, &#39;Sobey, Mr. Samuel James Hayden&#39;, &#39;Richard, Mr. Emile&#39;, &#39;Newsom, Miss. Helen Monypeny&#39;, &#39;Futrelle, Mr. Jacques Heath&#39;, &#39;Osen, Mr. Olaf Elon&#39;, &#39;Giglio, Mr. Victor&#39;, &#39;Boulos, Mrs. Joseph (Sultana)&#39;, &#39;Nysten, Miss. Anna Sofia&#39;, &#39;Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck)&#39;, &#39;Burke, Mr. Jeremiah&#39;, &#39;Andrew, Mr. Edgardo Samuel&#39;, &#39;Nicholls, Mr. Joseph Charles&#39;, &#39;Andersson, Mr. August Edvard (&amp;quot;Wennerstrom&amp;quot;)&#39;, &#39;Ford, Miss. Robina Maggie &amp;quot;Ruby&amp;quot;&#39;, &#39;Navratil, Mr. Michel (&amp;quot;Louis M Hoffman&amp;quot;)&#39;, &#39;Byles, Rev. Thomas Roussel Davids&#39;, &#39;Bateman, Rev. Robert James&#39;, &#39;Pears, Mrs. Thomas (Edith Wearne)&#39;, &#39;Meo, Mr. Alfonzo&#39;, &#39;van Billiard, Mr. Austin Blyler&#39;, &#39;Olsen, Mr. Ole Martin&#39;, &#39;Williams, Mr. Charles Duane&#39;, &#39;Gilnagh, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;, &#39;Corn, Mr. Harry&#39;, &#39;Smiljanic, Mr. Mile&#39;, &#39;Sage, Master. Thomas Henry&#39;, &#39;Cribb, Mr. John Hatfield&#39;, &#39;Watt, Mrs. James (Elizabeth &amp;quot;Bessie&amp;quot; Inglis Milne)&#39;, &#39;Bengtsson, Mr. John Viktor&#39;, &#39;Calic, Mr. Jovo&#39;, &#39;Panula, Master. Eino Viljami&#39;, &#39;Goldsmith, Master. Frank John William &amp;quot;Frankie&amp;quot;&#39;, &#39;Chibnall, Mrs. (Edith Martha Bowerman)&#39;, &#39;Skoog, Mrs. William (Anna Bernhardina Karlsson)&#39;, &#39;Baumann, Mr. John D&#39;, &#39;Ling, Mr. Lee&#39;, &#39;Van der hoef, Mr. Wyckoff&#39;, &#39;Rice, Master. Arthur&#39;, &#39;Johnson, Miss. Eleanor Ileen&#39;, &#39;Sivola, Mr. Antti Wilhelm&#39;, &#39;Smith, Mr. James Clinch&#39;, &#39;Klasen, Mr. Klas Albin&#39;, &#39;Lefebre, Master. Henry Forbes&#39;, &#39;Isham, Miss. Ann Elizabeth&#39;, &#39;Hale, Mr. Reginald&#39;, &#39;Leonard, Mr. Lionel&#39;, &#39;Sage, Miss. Constance Gladys&#39;, &#39;Pernot, Mr. Rene&#39;, &#39;Asplund, Master. Clarence Gustaf Hugo&#39;, &#39;Becker, Master. Richard F&#39;, &#39;Kink-Heilmann, Miss. Luise Gretchen&#39;, &#39;Rood, Mr. Hugh Roscoe&#39;, &#39;O\&#39;Brien, Mrs. Thomas (Johanna &amp;quot;Hannah&amp;quot; Godfrey)&#39;, &#39;Romaine, Mr. Charles Hallace (&amp;quot;Mr C Rolmane&amp;quot;)&#39;, &#39;Bourke, Mr. John&#39;, &#39;Turcin, Mr. Stjepan&#39;, &#39;Pinsky, Mrs. (Rosa)&#39;, &#39;Carbines, Mr. William&#39;, &#39;Andersen-Jensen, Miss. Carla Christine Nielsine&#39;, &#39;Navratil, Master. Michel M&#39;, &#39;Brown, Mrs. James Joseph (Margaret Tobin)&#39;, &#39;Lurette, Miss. Elise&#39;, &#39;Mernagh, Mr. Robert&#39;, &#39;Olsen, Mr. Karl Siegwart Andreas&#39;, &#39;Madigan, Miss. Margaret &amp;quot;Maggie&amp;quot;&#39;, &#39;Yrois, Miss. Henriette (&amp;quot;Mrs Harbeck&amp;quot;)&#39;, &#39;Vande Walle, Mr. Nestor Cyriel&#39;, &#39;Sage, Mr. Frederick&#39;, &#39;Johanson, Mr. Jakob Alfred&#39;, &#39;Youseff, Mr. Gerious&#39;, &#39;Cohen, Mr. Gurshon &amp;quot;Gus&amp;quot;&#39;, &#39;Strom, Miss. Telma Matilda&#39;, &#39;Backstrom, Mr. Karl Alfred&#39;, &#39;Albimona, Mr. Nassef Cassem&#39;, &#39;Carr, Miss. Helen &amp;quot;Ellen&amp;quot;&#39;, &#39;Blank, Mr. Henry&#39;, &#39;Ali, Mr. Ahmed&#39;, &#39;Cameron, Miss. Clear Annie&#39;, &#39;Perkin, Mr. John Henry&#39;, &#39;Givard, Mr. Hans Kristensen&#39;, &#39;Kiernan, Mr. Philip&#39;, &#39;Newell, Miss. Madeleine&#39;, &#39;Honkanen, Miss. Eliina&#39;, &#39;Jacobsohn, Mr. Sidney Samuel&#39;, &#39;Bazzani, Miss. Albina&#39;, &#39;Harris, Mr. Walter&#39;, &#39;Sunderland, Mr. Victor Francis&#39;, &#39;Bracken, Mr. James H&#39;, &#39;Green, Mr. George Henry&#39;, &#39;Nenkoff, Mr. Christo&#39;, &#39;Hoyt, Mr. Frederick Maxfield&#39;, &#39;Berglund, Mr. Karl Ivar Sven&#39;, &#39;Mellors, Mr. William John&#39;, &#39;Lovell, Mr. John Hall (&amp;quot;Henry&amp;quot;)&#39;, &#39;Fahlstrom, Mr. Arne Jonas&#39;, &#39;Lefebre, Miss. Mathilde&#39;, &#39;Harris, Mrs. Henry Birkhardt (Irene Wallach)&#39;, &#39;Larsson, Mr. Bengt Edvin&#39;, &#39;Sjostedt, Mr. Ernst Adolf&#39;, &#39;Asplund, Miss. Lillian Gertrud&#39;, &#39;Leyson, Mr. Robert William Norman&#39;, &#39;Harknett, Miss. Alice Phoebe&#39;, &#39;Hold, Mr. Stephen&#39;, &#39;Collyer, Miss. Marjorie &amp;quot;Lottie&amp;quot;&#39;, &#39;Pengelly, Mr. Frederick William&#39;, &#39;Hunt, Mr. George Henry&#39;, &#39;Zabour, Miss. Thamine&#39;, &#39;Murphy, Miss. Katherine &amp;quot;Kate&amp;quot;&#39;, &#39;Coleridge, Mr. Reginald Charles&#39;, &#39;Maenpaa, Mr. Matti Alexanteri&#39;, &#39;Attalah, Mr. Sleiman&#39;, &#39;Minahan, Dr. William Edward&#39;, &#39;Lindahl, Miss. Agda Thorilda Viktoria&#39;, &#39;Hamalainen, Mrs. William (Anna)&#39;, &#39;Beckwith, Mr. Richard Leonard&#39;, &#39;Carter, Rev. Ernest Courtenay&#39;, &#39;Reed, Mr. James George&#39;, &#39;Strom, Mrs. Wilhelm (Elna Matilda Persson)&#39;, &#39;Stead, Mr. William Thomas&#39;, &#39;Lobb, Mr. William Arthur&#39;, &#39;Rosblom, Mrs. Viktor (Helena Wilhelmina)&#39;, &#39;Touma, Mrs. Darwis (Hanne Youssef Razi)&#39;, &#39;Thorne, Mrs. Gertrude Maybelle&#39;, &#39;Cherry, Miss. Gladys&#39;, &#39;Ward, Miss. Anna&#39;, &#39;Parrish, Mrs. (Lutie Davis)&#39;, &#39;Smith, Mr. Thomas&#39;, &#39;Asplund, Master. Edvin Rojj Felix&#39;, &#39;Taussig, Mr. Emil&#39;, &#39;Harrison, Mr. William&#39;, &#39;Henry, Miss. Delia&#39;, &#39;Reeves, Mr. David&#39;, &#39;Panula, Mr. Ernesti Arvid&#39;, &#39;Persson, Mr. Ernst Ulrik&#39;, &#39;Graham, Mrs. William Thompson (Edith Junkins)&#39;, &#39;Bissette, Miss. Amelia&#39;, &#39;Cairns, Mr. Alexander&#39;, &#39;Tornquist, Mr. William Henry&#39;, &#39;Mellinger, Mrs. (Elizabeth Anne Maidment)&#39;, &#39;Natsch, Mr. Charles H&#39;, &#39;Healy, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;, &#39;Andrews, Miss. Kornelia Theodosia&#39;, &#39;Lindblom, Miss. Augusta Charlotta&#39;, &#39;Parkes, Mr. Francis &amp;quot;Frank&amp;quot;&#39;, &#39;Rice, Master. Eric&#39;, &#39;Abbott, Mrs. Stanton (Rosa Hunt)&#39;, &#39;Duane, Mr. Frank&#39;, &#39;Olsson, Mr. Nils Johan Goransson&#39;, &#39;de Pelsmaeker, Mr. Alfons&#39;, &#39;Dorking, Mr. Edward Arthur&#39;, &#39;Smith, Mr. Richard William&#39;, &#39;Stankovic, Mr. Ivan&#39;, &#39;de Mulder, Mr. Theodore&#39;, &#39;Naidenoff, Mr. Penko&#39;, &#39;Hosono, Mr. Masabumi&#39;, &#39;Connolly, Miss. Kate&#39;, &#39;Barber, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;, &#39;Bishop, Mrs. Dickinson H (Helen Walton)&#39;, &#39;Levy, Mr. Rene Jacques&#39;, &#39;Haas, Miss. Aloisia&#39;, &#39;Mineff, Mr. Ivan&#39;, &#39;Lewy, Mr. Ervin G&#39;, &#39;Hanna, Mr. Mansour&#39;, &#39;Allison, Miss. Helen Loraine&#39;, &#39;Saalfeld, Mr. Adolphe&#39;, &#39;Baxter, Mrs. James (Helene DeLaudeniere Chaput)&#39;, &#39;Kelly, Miss. Anna Katherine &amp;quot;Annie Kate&amp;quot;&#39;, &#39;McCoy, Mr. Bernard&#39;, &#39;Johnson, Mr. William Cahoone Jr&#39;, &#39;Keane, Miss. Nora A&#39;, &#39;Williams, Mr. Howard Hugh &amp;quot;Harry&amp;quot;&#39;, &#39;Allison, Master. Hudson Trevor&#39;, &#39;Fleming, Miss. Margaret&#39;, &#39;Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo)&#39;, &#39;Abelson, Mr. Samuel&#39;, &#39;Francatelli, Miss. Laura Mabel&#39;, &#39;Hays, Miss. Margaret Bechstein&#39;, &#39;Ryerson, Miss. Emily Borie&#39;, &#39;Lahtinen, Mrs. William (Anna Sylfven)&#39;, &#39;Hendekovic, Mr. Ignjac&#39;, &#39;Hart, Mr. Benjamin&#39;, &#39;Nilsson, Miss. Helmina Josefina&#39;, &#39;Kantor, Mrs. Sinai (Miriam Sternin)&#39;, &#39;Moraweck, Dr. Ernest&#39;, &#39;Wick, Miss. Mary Natalie&#39;, &#39;Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone)&#39;, &#39;Dennis, Mr. Samuel&#39;, &#39;Danoff, Mr. Yoto&#39;, &#39;Slayter, Miss. Hilda Mary&#39;, &#39;Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh)&#39;, &#39;Sage, Mr. George John Jr&#39;, &#39;Young, Miss. Marie Grice&#39;, &#39;Nysveen, Mr. Johan Hansen&#39;, &#39;Ball, Mrs. (Ada E Hall)&#39;, &#39;Goldsmith, Mrs. Frank John (Emily Alice Brown)&#39;, &#39;Hippach, Miss. Jean Gertrude&#39;, &#39;McCoy, Miss. Agnes&#39;, &#39;Partner, Mr. Austen&#39;, &#39;Graham, Mr. George Edward&#39;, &#39;Vander Planke, Mr. Leo Edmondus&#39;, &#39;Frauenthal, Mrs. Henry William (Clara Heinsheimer)&#39;, &#39;Denkoff, Mr. Mitto&#39;, &#39;Pears, Mr. Thomas Clinton&#39;, &#39;Burns, Miss. Elizabeth Margaret&#39;, &#39;Dahl, Mr. Karl Edwart&#39;, &#39;Blackwell, Mr. Stephen Weart&#39;, &#39;Navratil, Master. Edmond Roger&#39;, &#39;Fortune, Miss. Alice Elizabeth&#39;, &#39;Collander, Mr. Erik Gustaf&#39;, &#39;Sedgwick, Mr. Charles Frederick Waddington&#39;, &#39;Fox, Mr. Stanley Hubert&#39;, &#39;Brown, Miss. Amelia &amp;quot;Mildred&amp;quot;&#39;, &#39;Smith, Miss. Marion Elsie&#39;, &#39;Davison, Mrs. Thomas Henry (Mary E Finck)&#39;, &#39;Coutts, Master. William Loch &amp;quot;William&amp;quot;&#39;, &#39;Dimic, Mr. Jovan&#39;, &#39;Odahl, Mr. Nils Martin&#39;, &#39;Williams-Lambert, Mr. Fletcher Fellows&#39;, &#39;Elias, Mr. Tannous&#39;, &#39;Arnold-Franchi, Mr. Josef&#39;, &#39;Yousif, Mr. Wazli&#39;, &#39;Vanden Steen, Mr. Leo Peter&#39;, &#39;Bowerman, Miss. Elsie Edith&#39;, &#39;Funk, Miss. Annie Clemmer&#39;, &#39;McGovern, Miss. Mary&#39;, &#39;Mockler, Miss. Helen Mary &amp;quot;Ellie&amp;quot;&#39;, &#39;Skoog, Mr. Wilhelm&#39;, &#39;del Carlo, Mr. Sebastiano&#39;, &#39;Barbara, Mrs. (Catherine David)&#39;, &#39;Asim, Mr. Adola&#39;, &amp;quot;O&#39;Brien, Mr. Thomas&amp;quot;, &#39;Adahl, Mr. Mauritz Nils Martin&#39;, &#39;Warren, Mrs. Frank Manley (Anna Sophia Atkinson)&#39;, &#39;Moussa, Mrs. (Mantoura Boulos)&#39;, &#39;Jermyn, Miss. Annie&#39;, &#39;Aubart, Mme. Leontine Pauline&#39;, &#39;Harder, Mr. George Achilles&#39;, &#39;Wiklund, Mr. Jakob Alfred&#39;, &#39;Beavan, Mr. William Thomas&#39;, &#39;Ringhini, Mr. Sante&#39;, &#39;Palsson, Miss. Stina Viola&#39;, &#39;Meyer, Mrs. Edgar Joseph (Leila Saks)&#39;, &#39;Landergren, Miss. Aurora Adelia&#39;, &#39;Widener, Mr. Harry Elkins&#39;, &#39;Betros, Mr. Tannous&#39;, &#39;Gustafsson, Mr. Karl Gideon&#39;, &#39;Bidois, Miss. Rosalie&#39;, &#39;Nakid, Miss. Maria (&amp;quot;Mary&amp;quot;)&#39;, &#39;Tikkanen, Mr. Juho&#39;, &#39;Holverson, Mrs. Alexander Oskar (Mary Aline Towner)&#39;, &#39;Plotcharsky, Mr. Vasil&#39;, &#39;Davies, Mr. Charles Henry&#39;, &#39;Goodwin, Master. Sidney Leonard&#39;, &#39;Buss, Miss. Kate&#39;, &#39;Sadlier, Mr. Matthew&#39;, &#39;Lehmann, Miss. Bertha&#39;, &#39;Carter, Mr. William Ernest&#39;, &#39;Jansson, Mr. Carl Olof&#39;, &#39;Gustafsson, Mr. Johan Birger&#39;, &#39;Newell, Miss. Marjorie&#39;, &#39;Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson)&#39;, &#39;Johansson, Mr. Erik&#39;, &#39;Olsson, Miss. Elina&#39;, &#39;McKane, Mr. Peter David&#39;, &#39;Pain, Dr. Alfred&#39;, &#39;Trout, Mrs. William H (Jessie L)&#39;, &#39;Niskanen, Mr. Juha&#39;, &#39;Adams, Mr. John&#39;, &#39;Jussila, Miss. Mari Aina&#39;, &#39;Hakkarainen, Mr. Pekka Pietari&#39;, &#39;Oreskovic, Miss. Marija&#39;, &#39;Gale, Mr. Shadrach&#39;, &#39;Widegren, Mr. Carl/Charles Peter&#39;, &#39;Richards, Master. William Rowe&#39;, &#39;Birkeland, Mr. Hans Martin Monsen&#39;, &#39;Lefebre, Miss. Ida&#39;, &#39;Sdycoff, Mr. Todor&#39;, &#39;Hart, Mr. Henry&#39;, &#39;Minahan, Miss. Daisy E&#39;, &#39;Cunningham, Mr. Alfred Fleming&#39;, &#39;Sundman, Mr. Johan Julian&#39;, &#39;Meek, Mrs. Thomas (Annie Louise Rowley)&#39;, &#39;Drew, Mrs. James Vivian (Lulu Thorne Christian)&#39;, &#39;Silven, Miss. Lyyli Karoliina&#39;, &#39;Matthews, Mr. William John&#39;, &#39;Van Impe, Miss. Catharina&#39;, &#39;Gheorgheff, Mr. Stanio&#39;, &#39;Charters, Mr. David&#39;, &#39;Zimmerman, Mr. Leo&#39;, &#39;Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren)&#39;, &#39;Rosblom, Mr. Viktor Richard&#39;, &#39;Wiseman, Mr. Phillippe&#39;, &#39;Clarke, Mrs. Charles V (Ada Maria Winfield)&#39;, &#39;Phillips, Miss. Kate Florence (&amp;quot;Mrs Kate Louise Phillips Marshall&amp;quot;)&#39;, &#39;Flynn, Mr. James&#39;, &#39;Pickard, Mr. Berk (Berk Trembisky)&#39;, &#39;Bjornstrom-Steffansson, Mr. Mauritz Hakan&#39;, &#39;Thorneycroft, Mrs. Percival (Florence Kate White)&#39;, &#39;Louch, Mrs. Charles Alexander (Alice Adelaide Slow)&#39;, &#39;Kallio, Mr. Nikolai Erland&#39;, &#39;Silvey, Mr. William Baird&#39;, &#39;Carter, Miss. Lucile Polk&#39;, &#39;Ford, Miss. Doolina Margaret &amp;quot;Daisy&amp;quot;&#39;, &#39;Richards, Mrs. Sidney (Emily Hocking)&#39;, &#39;Fortune, Mr. Mark&#39;, &#39;Kvillner, Mr. Johan Henrik Johannesson&#39;, &#39;Hart, Mrs. Benjamin (Esther Ada Bloomfield)&#39;, &#39;Hampe, Mr. Leon&#39;, &#39;Petterson, Mr. Johan Emil&#39;, &#39;Reynaldo, Ms. Encarnacion&#39;, &#39;Johannesen-Bratthammer, Mr. Bernt&#39;, &#39;Dodge, Master. Washington&#39;, &#39;Mellinger, Miss. Madeleine Violet&#39;, &#39;Seward, Mr. Frederic Kimber&#39;, &#39;Baclini, Miss. Marie Catherine&#39;, &#39;Peuchen, Major. Arthur Godfrey&#39;, &#39;West, Mr. Edwy Arthur&#39;, &#39;Hagland, Mr. Ingvald Olai Olsen&#39;, &#39;Foreman, Mr. Benjamin Laventall&#39;, &#39;Goldenberg, Mr. Samuel L&#39;, &#39;Peduzzi, Mr. Joseph&#39;, &#39;Jalsevac, Mr. Ivan&#39;, &#39;Millet, Mr. Francis Davis&#39;, &#39;Kenyon, Mrs. Frederick R (Marion)&#39;, &#39;Toomey, Miss. Ellen&#39;, &amp;quot;O&#39;Connor, Mr. Maurice&amp;quot;, &#39;Anderson, Mr. Harry&#39;, &#39;Morley, Mr. William&#39;, &#39;Gee, Mr. Arthur H&#39;, &#39;Milling, Mr. Jacob Christian&#39;, &#39;Maisner, Mr. Simon&#39;, &#39;Goncalves, Mr. Manuel Estanslas&#39;, &#39;Campbell, Mr. William&#39;, &#39;Smart, Mr. John Montgomery&#39;, &#39;Scanlan, Mr. James&#39;, &#39;Baclini, Miss. Helene Barbara&#39;, &#39;Keefe, Mr. Arthur&#39;, &#39;Cacic, Mr. Luka&#39;, &#39;West, Mrs. Edwy Arthur (Ada Mary Worth)&#39;, &#39;Jerwan, Mrs. Amin S (Marie Marthe Thuillard)&#39;, &#39;Strandberg, Miss. Ida Sofia&#39;, &#39;Clifford, Mr. George Quincy&#39;, &#39;Renouf, Mr. Peter Henry&#39;, &#39;Braund, Mr. Lewis Richard&#39;, &#39;Karlsson, Mr. Nils August&#39;, &#39;Hirvonen, Miss. Hildur E&#39;, &#39;Goodwin, Master. Harold Victor&#39;, &#39;Frost, Mr. Anthony Wood &amp;quot;Archie&amp;quot;&#39;, &#39;Rouse, Mr. Richard Henry&#39;, &#39;Turkula, Mrs. (Hedwig)&#39;, &#39;Bishop, Mr. Dickinson H&#39;, &#39;Lefebre, Miss. Jeannie&#39;, &#39;Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby)&#39;, &#39;Kent, Mr. Edward Austin&#39;, &#39;Somerton, Mr. Francis William&#39;, &#39;Coutts, Master. Eden Leslie &amp;quot;Neville&amp;quot;&#39;, &#39;Hagland, Mr. Konrad Mathias Reiersen&#39;, &#39;Windelov, Mr. Einar&#39;, &#39;Molson, Mr. Harry Markland&#39;, &#39;Artagaveytia, Mr. Ramon&#39;, &#39;Stanley, Mr. Edward Roland&#39;, &#39;Yousseff, Mr. Gerious&#39;, &#39;Eustis, Miss. Elizabeth Mussey&#39;, &#39;Shellard, Mr. Frederick William&#39;, &#39;Allison, Mrs. Hudson J C (Bessie Waldo Daniels)&#39;, &#39;Svensson, Mr. Olof&#39;, &#39;Calic, Mr. Petar&#39;, &#39;Canavan, Miss. Mary&#39;, &amp;quot;O&#39;Sullivan, Miss. Bridget Mary&amp;quot;, &#39;Laitinen, Miss. Kristina Sofia&#39;, &#39;Maioni, Miss. Roberta&#39;, &#39;Penasco y Castellana, Mr. Victor de Satode&#39;, &#39;Quick, Mrs. Frederick Charles (Jane Richards)&#39;, &#39;Bradley, Mr. George (&amp;quot;George Arthur Brayton&amp;quot;)&#39;, &#39;Olsen, Mr. Henry Margido&#39;, &#39;Lang, Mr. Fang&#39;, &#39;Daly, Mr. Eugene Patrick&#39;, &#39;Webber, Mr. James&#39;, &#39;McGough, Mr. James Robert&#39;, &#39;Rothschild, Mrs. Martin (Elizabeth L. Barrett)&#39;, &#39;Coleff, Mr. Satio&#39;, &#39;Walker, Mr. William Anderson&#39;, &#39;Lemore, Mrs. (Amelia Milley)&#39;, &#39;Ryan, Mr. Patrick&#39;, &#39;Angle, Mrs. William A (Florence &amp;quot;Mary&amp;quot; Agnes Hughes)&#39;, &#39;Pavlovic, Mr. Stefo&#39;, &#39;Perreault, Miss. Anne&#39;, &#39;Vovk, Mr. Janko&#39;, &#39;Lahoud, Mr. Sarkis&#39;, &#39;Hippach, Mrs. Louis Albert (Ida Sophia Fischer)&#39;, &#39;Kassem, Mr. Fared&#39;, &#39;Farrell, Mr. James&#39;, &#39;Ridsdale, Miss. Lucy&#39;, &#39;Farthing, Mr. John&#39;, &#39;Salonen, Mr. Johan Werner&#39;, &#39;Hocking, Mr. Richard George&#39;, &#39;Quick, Miss. Phyllis May&#39;, &#39;Toufik, Mr. Nakli&#39;, &#39;Elias, Mr. Joseph Jr&#39;, &#39;Peter, Mrs. Catherine (Catherine Rizk)&#39;, &#39;Cacic, Miss. Marija&#39;, &#39;Hart, Miss. Eva Miriam&#39;, &#39;Butt, Major. Archibald Willingham&#39;, &#39;LeRoy, Miss. Bertha&#39;, &#39;Risien, Mr. Samuel Beard&#39;, &#39;Frolicher, Miss. Hedwig Margaritha&#39;, &#39;Crosby, Miss. Harriet R&#39;, &#39;Andersson, Miss. Ingeborg Constanzia&#39;, &#39;Andersson, Miss. Sigrid Elisabeth&#39;, &#39;Beane, Mr. Edward&#39;, &#39;Douglas, Mr. Walter Donald&#39;, &#39;Nicholson, Mr. Arthur Ernest&#39;, &#39;Beane, Mrs. Edward (Ethel Clarke)&#39;, &#39;Padro y Manent, Mr. Julian&#39;, &#39;Goldsmith, Mr. Frank John&#39;, &#39;Davies, Master. John Morgan Jr&#39;, &#39;Thayer, Mr. John Borland Jr&#39;, &#39;Sharp, Mr. Percival James R&#39;, &amp;quot;O&#39;Brien, Mr. Timothy&amp;quot;, &#39;Leeni, Mr. Fahim (&amp;quot;Philip Zenni&amp;quot;)&#39;, &#39;Ohman, Miss. Velin&#39;, &#39;Wright, Mr. George&#39;, &#39;Duff Gordon, Lady. (Lucille Christiana Sutherland) (&amp;quot;Mrs Morgan&amp;quot;)&#39;, &#39;Robbins, Mr. Victor&#39;, &#39;Taussig, Mrs. Emil (Tillie Mandelbaum)&#39;, &#39;de Messemaeker, Mrs. Guillaume Joseph (Emma)&#39;, &#39;Morrow, Mr. Thomas Rowan&#39;, &#39;Sivic, Mr. Husein&#39;, &#39;Norman, Mr. Robert Douglas&#39;, &#39;Simmons, Mr. John&#39;, &#39;Meanwell, Miss. (Marion Ogden)&#39;, &#39;Davies, Mr. Alfred J&#39;, &#39;Stoytcheff, Mr. Ilia&#39;, &#39;Palsson, Mrs. Nils (Alma Cornelia Berglund)&#39;, &#39;Doharr, Mr. Tannous&#39;, &#39;Jonsson, Mr. Carl&#39;, &#39;Harris, Mr. George&#39;, &#39;Appleton, Mrs. Edward Dale (Charlotte Lamson)&#39;, &#39;Flynn, Mr. John Irwin (&amp;quot;Irving&amp;quot;)&#39;, &#39;Kelly, Miss. Mary&#39;, &#39;Rush, Mr. Alfred George John&#39;, &#39;Patchett, Mr. George&#39;, &#39;Garside, Miss. Ethel&#39;, &#39;Silvey, Mrs. William Baird (Alice Munger)&#39;, &#39;Caram, Mrs. Joseph (Maria Elias)&#39;, &#39;Jussila, Mr. Eiriik&#39;, &#39;Christy, Miss. Julie Rachel&#39;, &#39;Thayer, Mrs. John Borland (Marian Longstreth Morris)&#39;, &#39;Downton, Mr. William James&#39;, &#39;Ross, Mr. John Hugo&#39;, &#39;Paulner, Mr. Uscher&#39;, &#39;Taussig, Miss. Ruth&#39;, &#39;Jarvis, Mr. John Denzil&#39;, &#39;Frolicher-Stehli, Mr. Maxmillian&#39;, &#39;Gilinski, Mr. Eliezer&#39;, &#39;Murdlin, Mr. Joseph&#39;, &#39;Rintamaki, Mr. Matti&#39;, &#39;Stephenson, Mrs. Walter Bertram (Martha Eustis)&#39;, &#39;Elsbury, Mr. William James&#39;, &#39;Bourke, Miss. Mary&#39;, &#39;Chapman, Mr. John Henry&#39;, &#39;Van Impe, Mr. Jean Baptiste&#39;, &#39;Leitch, Miss. Jessie Wills&#39;, &#39;Johnson, Mr. Alfred&#39;, &#39;Boulos, Mr. Hanna&#39;, &#39;Duff Gordon, Sir. Cosmo Edmund (&amp;quot;Mr Morgan&amp;quot;)&#39;, &#39;Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy)&#39;, &#39;Slabenoff, Mr. Petco&#39;, &#39;Harrington, Mr. Charles H&#39;, &#39;Torber, Mr. Ernst William&#39;, &#39;Homer, Mr. Harry (&amp;quot;Mr E Haven&amp;quot;)&#39;, &#39;Lindell, Mr. Edvard Bengtsson&#39;, &#39;Karaic, Mr. Milan&#39;, &#39;Daniel, Mr. Robert Williams&#39;, &#39;Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue)&#39;, &#39;Shutes, Miss. Elizabeth W&#39;, &#39;Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren)&#39;, &#39;Jardin, Mr. Jose Neto&#39;, &#39;Murphy, Miss. Margaret Jane&#39;, &#39;Horgan, Mr. John&#39;, &#39;Brocklebank, Mr. William Alfred&#39;, &#39;Herman, Miss. Alice&#39;, &#39;Danbom, Mr. Ernst Gilbert&#39;, &#39;Lobb, Mrs. William Arthur (Cordelia K Stanlick)&#39;, &#39;Becker, Miss. Marion Louise&#39;, &#39;Gavey, Mr. Lawrence&#39;, &#39;Yasbeck, Mr. Antoni&#39;, &#39;Kimball, Mr. Edwin Nelson Jr&#39;, &#39;Nakid, Mr. Sahid&#39;, &#39;Hansen, Mr. Henry Damsgaard&#39;, &#39;Bowen, Mr. David John &amp;quot;Dai&amp;quot;&#39;, &#39;Sutton, Mr. Frederick&#39;, &#39;Kirkland, Rev. Charles Leonard&#39;, &#39;Longley, Miss. Gretchen Fiske&#39;, &#39;Bostandyeff, Mr. Guentcho&#39;, &amp;quot;O&#39;Connell, Mr. Patrick D&amp;quot;, &#39;Barkworth, Mr. Algernon Henry Wilson&#39;, &#39;Lundahl, Mr. Johan Svensson&#39;, &#39;Stahelin-Maeglin, Dr. Max&#39;, &#39;Parr, Mr. William Henry Marsh&#39;, &#39;Skoog, Miss. Mabel&#39;, &#39;Davis, Miss. Mary&#39;, &#39;Leinonen, Mr. Antti Gustaf&#39;, &#39;Collyer, Mr. Harvey&#39;, &#39;Panula, Mrs. Juha (Maria Emilia Ojala)&#39;, &#39;Thorneycroft, Mr. Percival&#39;, &#39;Jensen, Mr. Hans Peder&#39;, &#39;Sagesser, Mlle. Emma&#39;, &#39;Skoog, Miss. Margit Elizabeth&#39;, &#39;Foo, Mr. Choong&#39;, &#39;Baclini, Miss. Eugenie&#39;, &#39;Harper, Mr. Henry Sleeper&#39;, &#39;Cor, Mr. Liudevit&#39;, &#39;Simonius-Blumer, Col. Oberst Alfons&#39;, &#39;Willey, Mr. Edward&#39;, &#39;Stanley, Miss. Amy Zillah Elsie&#39;, &#39;Mitkoff, Mr. Mito&#39;, &#39;Doling, Miss. Elsie&#39;, &#39;Kalvik, Mr. Johannes Halvorsen&#39;, &#39;O\&#39;Leary, Miss. Hanora &amp;quot;Norah&amp;quot;&#39;, &#39;Hegarty, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;, &#39;Hickman, Mr. Leonard Mark&#39;, &#39;Radeff, Mr. Alexander&#39;, &#39;Bourke, Mrs. John (Catherine)&#39;, &#39;Eitemiller, Mr. George Floyd&#39;, &#39;Newell, Mr. Arthur Webster&#39;, &#39;Frauenthal, Dr. Henry William&#39;, &#39;Badt, Mr. Mohamed&#39;, &#39;Colley, Mr. Edward Pomeroy&#39;, &#39;Coleff, Mr. Peju&#39;, &#39;Lindqvist, Mr. Eino William&#39;, &#39;Hickman, Mr. Lewis&#39;, &#39;Butler, Mr. Reginald Fenton&#39;, &#39;Rommetvedt, Mr. Knud Paust&#39;, &#39;Cook, Mr. Jacob&#39;, &#39;Taylor, Mrs. Elmer Zebley (Juliet Cummins Wright)&#39;, &#39;Brown, Mrs. Thomas William Solomon (Elizabeth Catherine Ford)&#39;, &#39;Davidson, Mr. Thornton&#39;, &#39;Mitchell, Mr. Henry Michael&#39;, &#39;Wilhelms, Mr. Charles&#39;, &#39;Watson, Mr. Ennis Hastings&#39;, &#39;Edvardsson, Mr. Gustaf Hjalmar&#39;, &#39;Sawyer, Mr. Frederick Charles&#39;, &#39;Turja, Miss. Anna Sofia&#39;, &#39;Goodwin, Mrs. Frederick (Augusta Tyler)&#39;, &#39;Cardeza, Mr. Thomas Drake Martinez&#39;, &#39;Peters, Miss. Katie&#39;, &#39;Hassab, Mr. Hammad&#39;, &#39;Olsvigen, Mr. Thor Anderson&#39;, &#39;Goodwin, Mr. Charles Edward&#39;, &#39;Brown, Mr. Thomas William Solomon&#39;, &#39;Laroche, Mr. Joseph Philippe Lemercier&#39;, &#39;Panula, Mr. Jaako Arnold&#39;, &#39;Dakic, Mr. Branko&#39;, &#39;Fischer, Mr. Eberhard Thelander&#39;, &#39;Madill, Miss. Georgette Alexandra&#39;, &#39;Dick, Mr. Albert Adrian&#39;, &#39;Karun, Miss. Manca&#39;, &#39;Lam, Mr. Ali&#39;, &#39;Saad, Mr. Khalil&#39;, &#39;Weir, Col. John&#39;, &#39;Chapman, Mr. Charles Henry&#39;, &#39;Kelly, Mr. James&#39;, &#39;Mullens, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;, &#39;Thayer, Mr. John Borland&#39;, &#39;Humblen, Mr. Adolf Mathias Nicolai Olsen&#39;, &#39;Astor, Mrs. John Jacob (Madeleine Talmadge Force)&#39;, &#39;Silverthorne, Mr. Spencer Victor&#39;, &#39;Barbara, Miss. Saiide&#39;, &#39;Gallagher, Mr. Martin&#39;, &#39;Hansen, Mr. Henrik Juul&#39;, &#39;Morley, Mr. Henry Samuel (&amp;quot;Mr Henry Marshall&amp;quot;)&#39;, &#39;Kelly, Mrs. Florence &amp;quot;Fannie&amp;quot;&#39;, &#39;Calderhead, Mr. Edward Pennington&#39;, &#39;Cleaver, Miss. Alice&#39;, &#39;Moubarek, Master. Halim Gonios (&amp;quot;William George&amp;quot;)&#39;, &#39;Mayne, Mlle. Berthe Antonine (&amp;quot;Mrs de Villiers&amp;quot;)&#39;, &#39;Klaber, Mr. Herman&#39;, &#39;Taylor, Mr. Elmer Zebley&#39;, &#39;Larsson, Mr. August Viktor&#39;, &#39;Greenberg, Mr. Samuel&#39;, &#39;Soholt, Mr. Peter Andreas Lauritz Andersen&#39;, &#39;Endres, Miss. Caroline Louise&#39;, &#39;Troutt, Miss. Edwina Celia &amp;quot;Winnie&amp;quot;&#39;, &#39;McEvoy, Mr. Michael&#39;, &#39;Johnson, Mr. Malkolm Joackim&#39;, &#39;Harper, Miss. Annie Jessie &amp;quot;Nina&amp;quot;&#39;, &#39;Jensen, Mr. Svend Lauritz&#39;, &#39;Gillespie, Mr. William Henry&#39;, &#39;Hodges, Mr. Henry Price&#39;, &#39;Chambers, Mr. Norman Campbell&#39;, &#39;Oreskovic, Mr. Luka&#39;, &#39;Renouf, Mrs. Peter Henry (Lillian Jefferys)&#39;, &#39;Mannion, Miss. Margareth&#39;, &#39;Bryhl, Mr. Kurt Arnold Gottfrid&#39;, &#39;Ilmakangas, Miss. Pieta Sofia&#39;, &#39;Allen, Miss. Elisabeth Walton&#39;, &#39;Hassan, Mr. Houssein G N&#39;, &#39;Knight, Mr. Robert J&#39;, &#39;Berriman, Mr. William John&#39;, &#39;Troupiansky, Mr. Moses Aaron&#39;, &#39;Williams, Mr. Leslie&#39;, &#39;Ford, Mrs. Edward (Margaret Ann Watson)&#39;, &#39;Lesurer, Mr. Gustave J&#39;, &#39;Ivanoff, Mr. Kanio&#39;, &#39;Nankoff, Mr. Minko&#39;, &#39;Hawksford, Mr. Walter James&#39;, &#39;Cavendish, Mr. Tyrell William&#39;, &#39;Ryerson, Miss. Susan Parker &amp;quot;Suzette&amp;quot;&#39;, &#39;McNamee, Mr. Neal&#39;, &#39;Stranden, Mr. Juho&#39;, &#39;Crosby, Capt. Edward Gifford&#39;, &#39;Abbott, Mr. Rossmore Edward&#39;, &#39;Sinkkonen, Miss. Anna&#39;, &#39;Marvin, Mr. Daniel Warner&#39;, &#39;Connaghton, Mr. Michael&#39;, &#39;Wells, Miss. Joan&#39;, &#39;Moor, Master. Meier&#39;, &#39;Vande Velde, Mr. Johannes Joseph&#39;, &#39;Jonkoff, Mr. Lalio&#39;, &#39;Herman, Mrs. Samuel (Jane Laver)&#39;, &#39;Hamalainen, Master. Viljo&#39;, &#39;Carlsson, Mr. August Sigfrid&#39;, &#39;Bailey, Mr. Percy Andrew&#39;, &#39;Theobald, Mr. Thomas Leonard&#39;, &#39;Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards)&#39;, &#39;Garfirth, Mr. John&#39;, &#39;Nirva, Mr. Iisakki Antino Aijo&#39;, &#39;Barah, Mr. Hanna Assi&#39;, &#39;Carter, Mrs. William Ernest (Lucile Polk)&#39;, &#39;Eklund, Mr. Hans Linus&#39;, &#39;Hogeboom, Mrs. John C (Anna Andrews)&#39;, &#39;Brewe, Dr. Arthur Jackson&#39;, &#39;Mangan, Miss. Mary&#39;, &#39;Moran, Mr. Daniel J&#39;, &#39;Gronnestad, Mr. Daniel Danielsen&#39;, &#39;Lievens, Mr. Rene Aime&#39;, &#39;Jensen, Mr. Niels Peder&#39;, &#39;Mack, Mrs. (Mary)&#39;, &#39;Elias, Mr. Dibo&#39;, &#39;Hocking, Mrs. Elizabeth (Eliza Needs)&#39;, &#39;Myhrman, Mr. Pehr Fabian Oliver Malkolm&#39;, &#39;Tobin, Mr. Roger&#39;, &#39;Emanuel, Miss. Virginia Ethel&#39;, &#39;Kilgannon, Mr. Thomas J&#39;, &#39;Robert, Mrs. Edward Scott (Elisabeth Walton McMillan)&#39;, &#39;Ayoub, Miss. Banoura&#39;, &#39;Dick, Mrs. Albert Adrian (Vera Gillespie)&#39;, &#39;Long, Mr. Milton Clyde&#39;, &#39;Johnston, Mr. Andrew G&#39;, &#39;Ali, Mr. William&#39;, &#39;Harmer, Mr. Abraham (David Lishin)&#39;, &#39;Sjoblom, Miss. Anna Sofia&#39;, &#39;Rice, Master. George Hugh&#39;, &#39;Dean, Master. Bertram Vere&#39;, &#39;Guggenheim, Mr. Benjamin&#39;, &#39;Keane, Mr. Andrew &amp;quot;Andy&amp;quot;&#39;, &#39;Gaskell, Mr. Alfred&#39;, &#39;Sage, Miss. Stella Anna&#39;, &#39;Hoyt, Mr. William Fisher&#39;, &#39;Dantcheff, Mr. Ristiu&#39;, &#39;Otter, Mr. Richard&#39;, &#39;Leader, Dr. Alice (Farnham)&#39;, &#39;Osman, Mrs. Mara&#39;, &#39;Ibrahim Shawah, Mr. Yousseff&#39;, &#39;Van Impe, Mrs. Jean Baptiste (Rosalie Paula Govaert)&#39;, &#39;Ponesell, Mr. Martin&#39;, &#39;Collyer, Mrs. Harvey (Charlotte Annie Tate)&#39;, &#39;Carter, Master. William Thornton II&#39;, &#39;Thomas, Master. Assad Alexander&#39;, &#39;Hedman, Mr. Oskar Arvid&#39;, &#39;Johansson, Mr. Karl Johan&#39;, &#39;Andrews, Mr. Thomas Jr&#39;, &#39;Pettersson, Miss. Ellen Natalia&#39;, &#39;Meyer, Mr. August&#39;, &#39;Chambers, Mrs. Norman Campbell (Bertha Griggs)&#39;, &#39;Alexander, Mr. William&#39;, &#39;Lester, Mr. James&#39;, &#39;Slemen, Mr. Richard James&#39;, &#39;Andersson, Miss. Ebba Iris Alfrida&#39;, &#39;Tomlin, Mr. Ernest Portage&#39;, &#39;Fry, Mr. Richard&#39;, &#39;Heininen, Miss. Wendla Maria&#39;, &#39;Mallet, Mr. Albert&#39;, &#39;Holm, Mr. John Fredrik Alexander&#39;, &#39;Skoog, Master. Karl Thorsten&#39;, &#39;Hays, Mrs. Charles Melville (Clara Jennings Gregg)&#39;, &#39;Lulic, Mr. Nikola&#39;, &#39;Reuchlin, Jonkheer. John George&#39;, &#39;Moor, Mrs. (Beila)&#39;, &#39;Panula, Master. Urho Abraham&#39;, &#39;Flynn, Mr. John&#39;, &#39;Lam, Mr. Len&#39;, &#39;Mallet, Master. Andre&#39;, &#39;McCormack, Mr. Thomas Joseph&#39;, &#39;Stone, Mrs. George Nelson (Martha Evelyn)&#39;, &#39;Yasbeck, Mrs. Antoni (Selini Alexander)&#39;, &#39;Richards, Master. George Sibley&#39;, &#39;Saad, Mr. Amin&#39;, &#39;Augustsson, Mr. Albert&#39;, &#39;Allum, Mr. Owen George&#39;, &#39;Compton, Miss. Sara Rebecca&#39;, &#39;Pasic, Mr. Jakob&#39;, &#39;Sirota, Mr. Maurice&#39;, &#39;Chip, Mr. Chang&#39;, &#39;Marechal, Mr. Pierre&#39;, &#39;Alhomaki, Mr. Ilmari Rudolf&#39;, &#39;Mudd, Mr. Thomas Charles&#39;, &#39;Serepeca, Miss. Augusta&#39;, &#39;Lemberopolous, Mr. Peter L&#39;, &#39;Culumovic, Mr. Jeso&#39;, &#39;Abbing, Mr. Anthony&#39;, &#39;Sage, Mr. Douglas Bullen&#39;, &#39;Markoff, Mr. Marin&#39;, &#39;Harper, Rev. John&#39;, &#39;Goldenberg, Mrs. Samuel L (Edwiga Grabowska)&#39;, &#39;Andersson, Master. Sigvard Harald Elias&#39;, &#39;Svensson, Mr. Johan&#39;, &#39;Boulos, Miss. Nourelain&#39;, &#39;Lines, Miss. Mary Conover&#39;, &#39;Carter, Mrs. Ernest Courtenay (Lilian Hughes)&#39;, &#39;Aks, Mrs. Sam (Leah Rosen)&#39;, &#39;Wick, Mrs. George Dennick (Mary Hitchcock)&#39;, &#39;Daly, Mr. Peter Denis &#39;, &#39;Baclini, Mrs. Solomon (Latifa Qurban)&#39;, &#39;Razi, Mr. Raihed&#39;, &#39;Hansen, Mr. Claus Peter&#39;, &#39;Giles, Mr. Frederick Edward&#39;, &#39;Swift, Mrs. Frederick Joel (Margaret Welles Barron)&#39;, &#39;Sage, Miss. Dorothy Edith &amp;quot;Dolly&amp;quot;&#39;, &#39;Gill, Mr. John William&#39;, &#39;Bystrom, Mrs. (Karolina)&#39;, &#39;Duran y More, Miss. Asuncion&#39;, &#39;Roebling, Mr. Washington Augustus II&#39;, &#39;van Melkebeke, Mr. Philemon&#39;, &#39;Johnson, Master. Harold Theodor&#39;, &#39;Balkic, Mr. Cerin&#39;, &#39;Beckwith, Mrs. Richard Leonard (Sallie Monypeny)&#39;, &#39;Carlsson, Mr. Frans Olof&#39;, &#39;Vander Cruyssen, Mr. Victor&#39;, &#39;Abelson, Mrs. Samuel (Hannah Wizosky)&#39;, &#39;Najib, Miss. Adele Kiamie &amp;quot;Jane&amp;quot;&#39;, &#39;Gustafsson, Mr. Alfred Ossian&#39;, &#39;Petroff, Mr. Nedelio&#39;, &#39;Laleff, Mr. Kristo&#39;, &#39;Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)&#39;, &#39;Shelley, Mrs. William (Imanita Parrish Hall)&#39;, &#39;Markun, Mr. Johann&#39;, &#39;Dahlberg, Miss. Gerda Ulrika&#39;, &#39;Banfield, Mr. Frederick James&#39;, &#39;Sutehall, Mr. Henry Jr&#39;, &#39;Rice, Mrs. William (Margaret Norton)&#39;, &#39;Montvila, Rev. Juozas&#39;, &#39;Graham, Miss. Margaret Edith&#39;, &#39;Johnston, Miss. Catherine Helen &amp;quot;Carrie&amp;quot;&#39;, &#39;Behr, Mr. Karl Howell&#39;, &#39;Dooley, Mr. Patrick&#39;]
sexe = [&#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1) le nombre de passagers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;891&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2) le nombre de femmes et d&amp;rsquo;hommes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;count = 0 
for sex in sexe:
if sex == &#39;male&#39;:
    count +=1
print(&#39;Le nombre de femmes est: &#39; + str(len(name) - count))
print(&amp;quot;Le nombre d&#39;hommes est: &amp;quot;+ str(count))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le nombre de femmes est: 314
Le nombre d&amp;rsquo;hommes est: 577&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sexe.count(&#39;male&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;577&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sexe.count(&#39;female&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;314&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;3) le pourcentage de survit des passagers (dans la liste survided, 1 correspond à survecu, 0 à mort)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(str(survided.count(1)/len(survided)*100) + &#39; %&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;38.38383838383838 %&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;4) l&amp;rsquo;age moyen sur le bateau&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(age)/len(age)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;28.368316498316496&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5) trouver un système permettant de vérifier la présence d&amp;rsquo;une personne à partir de son nom.
- &amp;lsquo;Levy, Mr. Rene Jacques&amp;rsquo; était il présent ?
- &amp;lsquo;Pinsky, Mrs. (Carla)&amp;rsquo; était-elle présente ?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Levy, Mr. Rene Jacques&#39; in name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Pinsky, Mrs. (Carla)&#39; in name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6) il y a une erreur sur le nom d&amp;rsquo;un des passagers
- trouver l&amp;rsquo;emplacement dans la liste de &amp;lsquo;Panula, Mr. Ernesti Arvid&amp;rsquo;
- Supprimer le passager et mettre à la place &amp;lsquo;Tanula, Mr. Ernesto Arvad&amp;rsquo;
- Vérifier avec le système trouvé en exercice 5 si la correction a bien été réalisée en recherchant l&amp;rsquo;ancien et le nouveau nom&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name.index(&#39;Panula, Mr. Ernesti Arvid&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;266
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name.pop(266)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Panula, Mr. Ernesti Arvid&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;name.insert(266, &#39;Tanula, Mr. Ernesto Arvad&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Tanula, Mr. Ernesto Arvad&#39; in name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Panula, Mr. Ernesti Arvid&#39; in name
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>4- Les dictionnaires en Python - Cours</title>
      <link>/courses/formation_python/4-les_dictionnaires/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/4-les_dictionnaires/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-dictionnaires-en-python&#34;&gt;Les dictionnaires en Python:&lt;/h2&gt;

&lt;h2&gt; Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est un dictionnaire&lt;/li&gt;
&lt;li&gt;Savoir consulter et analyser un dictonnaire&lt;/li&gt;
&lt;li&gt;Savoir manipuler un dictionnaire&lt;/li&gt;
&lt;li&gt;créer un dictionnaire multi-propriétés&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-les-dictionnaires-python&#34;&gt;4- Les dictionnaires Python&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Le dictionnaire est une structure où l&amp;rsquo;on stocke des clés associées à des valeurs&lt;/li&gt;
&lt;li&gt;Les dictionnaires sont des structures de données non-ordonnées&lt;/li&gt;
&lt;li&gt;On peut les modifier et les indexer&lt;/li&gt;
&lt;li&gt;Principe: on peut lier une clef à une valeur&lt;/li&gt;
&lt;li&gt;Les dictionnaires s&amp;rsquo;écrivent avec des {  }&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-1-concept-et-déclaration-d-un-dictionnaire-en-python&#34;&gt;4.1-Concept et déclaration d&amp;rsquo;un dictionnaire en Python&lt;/h2&gt;

&lt;p&gt;Pour créer un dictionnaire, on écrit tous les éléments en les séparant par des virgules et le tout encadré par des accolades {}.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsPrix = [[&#39;smartphone&#39;,1000],[&#39;chaussures&#39;,100],[&#39;console&#39;,400]]
print(produitsPrix[1][1])      
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et si un des produits est supprimé ? Ou si l&amp;rsquo;ordre est différent la fois suivante ? &lt;br&gt; Ce stockage n&amp;rsquo;est pas optimal. Un stockage sous la forme d&amp;rsquo;un dictionnaire est beaucoup plus adapté :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsDict = {&#39;smartphone&#39;:1000,&#39;chaussures&#39;:100,&#39;console&#39;:400}
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;smartphone&#39;: 1000, &#39;chaussures&#39;: 100, &#39;console&#39;: 400}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-2-modifier-un-dictionnaire&#34;&gt;4.2-Modifier un dictionnaire&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pour &lt;b&gt;ajouter&lt;/b&gt; une valeur&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Ajouter un nouveau couple ( clef : valeur ) dans un dictionnaire 
produitsDict[&amp;quot;tele&amp;quot;]=100
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;smartphone&amp;rsquo;: 1000, &amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pour &lt;b&gt;modifier&lt;/b&gt; une valeur avec une clef existant&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On peut modifier une valeur dans un dictionnaire avec une clef existante 
produitsDict[&amp;quot;smartphone&amp;quot;]=999
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;smartphone&amp;rsquo;: 999, &amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Un dictionnaire ne peut pas avoir deux fois la même clef, une clef est unique!
produitsDict[&amp;quot;smartphone&amp;quot;]=888
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;smartphone&amp;rsquo;: 888, &amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pour &lt;b&gt;supprimer&lt;/b&gt; une valeur avec une clef existantE&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On peut supprimer une valeur dans un dictionnaire 
del produitsDict[&amp;quot;smartphone&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Supprimer un item
print(produitsDict)
produitsDict.pop(&amp;quot;tele&amp;quot;)
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400, &amp;lsquo;tele&amp;rsquo;: 100}
{&amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#vider un dictionnaire
print(produitsDict)
produitsDict.clear()
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;chaussures&amp;rsquo;: 100, &amp;lsquo;console&amp;rsquo;: 400}
{}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-3-parcourir-un-dictionnaire&#34;&gt;4.3- Parcourir un dictionnaire&lt;/h2&gt;

&lt;p&gt;Une fois le dictionnaire crée, nous pouvons accéder aux éléments en utilisant les clefs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsDict = {&#39;smartphone&#39;:1000,&#39;chaussures&#39;:100,&#39;console&#39;:400}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#trouver la valeur d&#39;un item
print(produitsDict[&#39;console&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;400
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On peut parcourir un dictionnaire suivant 3 méthodes utilisant la boucle &lt;b&gt;FOR&lt;/b&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;par valeur&lt;/li&gt;
&lt;li&gt;par clef&lt;/li&gt;

&lt;li&gt;&lt;p&gt;par clef + valeur&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour connaitre les clefs d&#39;un dictionnaire: méthode .keys()
produitsDict.keys()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dict_keys([&amp;lsquo;smartphone&amp;rsquo;, &amp;lsquo;chaussures&amp;rsquo;, &amp;lsquo;console&amp;rsquo;])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour connaitre les valeurs d&#39;un dictionnaire: méthode .values()
produitsDict.values()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_values([1000, 100, 400])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour parcourir les clefs d&#39;un dictionnaire 
for cle in produitsDict.keys():
print(cle)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;smartphone
chaussures
console&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour parcourir les valeurs d&#39;un dictionnaire
for valeur in produitsDict.values():
print(valeur)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1000
100
400&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour connaitre les couples clef, valeur: méthode .items()
produitsDict.items()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_items([(&amp;lsquo;smartphone&amp;rsquo;, 1000), (&amp;lsquo;chaussures&amp;rsquo;, 100), (&amp;lsquo;console&amp;rsquo;, 400)])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ici on a des listes contenant des tuples.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour parcourir les couples clefs,valeurs 
for cle,valeur in produitsDict.items(): # la boucle for obtient un tuple à chaque itération
    print(cle,valeur)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;smartphone 1000
chaussures 100
console 400
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#vérifier si un item est présent
print(&#39;smartphone&#39; in produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#vérifier la longueur d&#39;un dictionnaire
print(len(produitsDict))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#obtenir à nouveau une liste d&#39;items
print(produitsDict.keys())
print(list(produitsDict.keys()))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;dict_keys([&#39;smartphone&#39;, &#39;chaussures&#39;, &#39;console&#39;])
[&#39;smartphone&#39;, &#39;chaussures&#39;, &#39;console&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-4-créer-un-dictionnaire-multi-propriétés&#34;&gt;4.4- Créer un dictionnaire multi-propriétés&lt;/h2&gt;

&lt;p&gt;En plus du produit, je veux savoir s&amp;rsquo;il est en stock ou non.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsDictPrix = {&#39;smartphone&#39;:1000,&#39;chaussures&#39;:100,&#39;console&#39;:400}
produitsDictStock = {&#39;smartphone&#39;:True,&#39;chaussures&#39;:False,&#39;console&#39;:True}
print(produitsDictPrix)
print(produitsDictStock)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;smartphone&#39;: 1000, &#39;chaussures&#39;: 100, &#39;console&#39;: 400}
{&#39;smartphone&#39;: True, &#39;chaussures&#39;: False, &#39;console&#39;: True}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produitsDict = {
    &#39;smartphone&#39;:{&#39;prix&#39;:1000,&#39;enStock&#39;:True},
    &#39;chaussures&#39;:{&#39;prix&#39;:100,&#39;enStock&#39;:False},
    &#39;console&#39;:{&#39;prix&#39;:400,&#39;enStock&#39;:True}
}
print(produitsDict)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;smartphone&#39;: {&#39;prix&#39;: 1000, &#39;enStock&#39;: True}, &#39;chaussures&#39;: {&#39;prix&#39;: 100, &#39;enStock&#39;: False}, &#39;console&#39;: {&#39;prix&#39;: 400, &#39;enStock&#39;: True}}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(produitsDict[&#39;smartphone&#39;][&#39;prix&#39;])
print(produitsDict[&#39;console&#39;][&#39;enStock&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1000
True
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>4- Les dictionnaires en Python - Exercice</title>
      <link>/courses/formation_python/4-les_dictionnaires-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/4-les_dictionnaires-exercice/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-dictionnaires-en-python&#34;&gt;Les dictionnaires en Python:&lt;/h2&gt;

&lt;h2 id=&#34;tp-analyse-des-données-brutes-des-passagers-du-titanic-2-3&#34;&gt;TP : Analyse des données brutes des passagers du Titanic (&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)&lt;/h2&gt;

&lt;p&gt;Nous allons analyser 2 nouvelles informations :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pclass, qui indique la classe du passage (1 = première classe, 2 = deuxième classe, 3 = troisième classe)&lt;/li&gt;
&lt;li&gt;SibSp, qui donne le nombre de personne de la même famille que le passager présentes à bord (frères, femmes etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Celles-ci sont stockées dans un dictionnaire de la manière suivante :
{Passager1:{&amp;lsquo;Pclass&amp;rsquo;: X, &amp;lsquo;SibSp&amp;rsquo;: X},&lt;br&gt;
Passager2:{&amp;lsquo;Pclass&amp;rsquo;: X, &amp;lsquo;SibSp&amp;rsquo;: X},&lt;br&gt;
&amp;hellip;
}&lt;/p&gt;

&lt;p&gt;1) quel était la classe de &amp;lsquo;Flynn, Mr. James&amp;rsquo; ?&lt;br&gt;
2) &amp;lsquo;Todoroff, Mr. Lalio&amp;rsquo; avait-il des proches à bord ?&lt;br&gt;
3) &amp;lsquo;Nicola-Yarred, Miss. Jamila&amp;rsquo; était elle à bord ?&lt;br&gt;
4) &amp;lsquo;Mamee, Mr. Hanna&amp;rsquo; étaient en 1ière classe et non en troisième classe. Merci de corriger cela&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic = {&#39;Braund, Mr. Owen Harris&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Heikkinen, Miss. Laina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Futrelle, Mrs. Jacques Heath (Lily May Peel)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Allen, Mr. William Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moran, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McCarthy, Mr. Timothy J&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Palsson, Master. Gosta Leonard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nasser, Mrs. Nicholas (Adele Achem)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Sandstrom, Miss. Marguerite Rut&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Bonnell, Miss. Elizabeth&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Saundercock, Mr. William Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andersson, Mr. Anders Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Vestrom, Miss. Hulda Amanda Adolfina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hewlett, Mrs. (Mary D Kingcome) &#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Rice, Master. Eugene&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Williams, Mr. Charles Eugene&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Masselmani, Mrs. Fatima&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fynney, Mr. Joseph J&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Beesley, Mr. Lawrence&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;McGowan, Miss. Anna &amp;quot;Annie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sloper, Mr. William Thompson&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Palsson, Miss. Torborg Danira&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Emir, Mr. Farred Chehab&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fortune, Mr. Charles Alexander&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 3}, &#39;O\&#39;Dwyer, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Todoroff, Mr. Lalio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Uruchurtu, Don. Manuel E&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Spencer, Mrs. William Augustus (Marie Eugenie)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Glynn, Miss. Mary Agatha&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Wheadon, Mr. Edward H&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Meyer, Mr. Edgar Joseph&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Holverson, Mr. Alexander Oskar&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Mamee, Mr. Hanna&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cann, Mr. Ernest Charles&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Vander Planke, Miss. Augusta Maria&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Nicola-Yarred, Miss. Jamila&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Ahlin, Mrs. Johan (Johanna Persdotter Larsson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Kraeff, Mr. Theodor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Laroche, Miss. Simonne Marie Anne Andree&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Devaney, Miss. Margaret Delia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rogers, Mr. William John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lennon, Mr. Denis&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &amp;quot;O&#39;Driscoll, Miss. Bridget&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Samaan, Mr. Youssef&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Arnold-Franchi, Mrs. Josef (Josefine Franchi)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Panula, Master. Juha Niilo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Nosworthy, Mr. Richard Cater&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harper, Mrs. Henry Sleeper (Myna Haxtun)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Ostby, Mr. Engelhart Cornelius&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Woolner, Mr. Hugh&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Rugg, Miss. Emily&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Novel, Mr. Mansouer&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;West, Miss. Constance Mirium&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Goodwin, Master. William Frederick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Sirayanian, Mr. Orsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Icard, Miss. Amelie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Harris, Mr. Henry Birkhardt&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Skoog, Master. Harald&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Stewart, Mr. Albert A&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Moubarek, Master. Gerios&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Nye, Mrs. (Elizabeth Ramell)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Crease, Mr. Ernest James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andersson, Miss. Erna Alexandra&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Kink, Mr. Vincenz&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Jenkin, Mr. Stephen Curnow&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goodwin, Miss. Lillian Amy&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Hood, Mr. Ambrose Jr&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Chronopoulos, Mr. Apostolos&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Bing, Mr. Lee&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moen, Mr. Sigurd Hansen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Staneff, Mr. Ivan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moutal, Mr. Rahamin Haim&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Caldwell, Master. Alden Gates&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Dowdell, Miss. Elizabeth&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Waelens, Mr. Achille&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sheerlinck, Mr. Jan Baptist&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McDermott, Miss. Brigdet Delia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Carrau, Mr. Francisco M&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ilett, Miss. Bertha&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Ford, Mr. William Neal&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Slocovski, Mr. Selman Francis&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fortune, Miss. Mabel Helen&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 3}, &#39;Celotti, Mr. Francesco&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Christmann, Mr. Emil&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andreasson, Mr. Paul Edvin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Chaffee, Mr. Herbert Fuller&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Dean, Mr. Bertram Frank&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Coxon, Mr. Daniel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Shorney, Mr. Charles Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goldschmidt, Mr. George B&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Greenfield, Mr. William Bertram&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Doling, Mrs. John T (Ada Julia Bone)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kantor, Mr. Sinai&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Petranec, Miss. Matilda&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Petroff, Mr. Pastcho (&amp;quot;Pentcho&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;White, Mr. Richard Frasar&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Johansson, Mr. Gustaf Joel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gustafsson, Mr. Anders Vilhelm&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Mionoff, Mr. Stoytcho&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Salkjelsvik, Miss. Anna Kristine&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moss, Mr. Albert Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rekic, Mr. Tido&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moran, Miss. Bertha&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Porter, Mr. Walter Chamberlain&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Zabour, Miss. Hileni&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Barton, Mr. David John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jussila, Miss. Katriina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Attalah, Miss. Malake&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Pekoniemi, Mr. Edvard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Connors, Mr. Patrick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Turpin, Mr. William John Robert&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Baxter, Mr. Quigg Edmond&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Andersson, Miss. Ellis Anna Maria&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Hickman, Mr. Stanley George&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Moore, Mr. Leonard Charles&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nasser, Mr. Nicholas&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Webber, Miss. Susan&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;White, Mr. Percival Wayland&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Nicola-Yarred, Master. Elias&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;McMahon, Mr. Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Madsen, Mr. Fridtjof Arne&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Peter, Miss. Anna&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Ekstrom, Mr. Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Drazenoic, Mr. Jozef&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Coelho, Mr. Domingos Fernandeo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Robins, Mrs. Alexander A (Grace Charity Laury)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Weisz, Mrs. Leopold (Mathilde Francoise Pede)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Sobey, Mr. Samuel James Hayden&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Richard, Mr. Emile&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Newsom, Miss. Helen Monypeny&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Futrelle, Mr. Jacques Heath&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Osen, Mr. Olaf Elon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Giglio, Mr. Victor&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Boulos, Mrs. Joseph (Sultana)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nysten, Miss. Anna Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Burke, Mr. Jeremiah&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andrew, Mr. Edgardo Samuel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Nicholls, Mr. Joseph Charles&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Andersson, Mr. August Edvard (&amp;quot;Wennerstrom&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ford, Miss. Robina Maggie &amp;quot;Ruby&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Navratil, Mr. Michel (&amp;quot;Louis M Hoffman&amp;quot;)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Byles, Rev. Thomas Roussel Davids&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Bateman, Rev. Robert James&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Pears, Mrs. Thomas (Edith Wearne)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Meo, Mr. Alfonzo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;van Billiard, Mr. Austin Blyler&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Olsen, Mr. Ole Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Williams, Mr. Charles Duane&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Gilnagh, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Corn, Mr. Harry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Smiljanic, Mr. Mile&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sage, Master. Thomas Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Cribb, Mr. John Hatfield&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Watt, Mrs. James (Elizabeth &amp;quot;Bessie&amp;quot; Inglis Milne)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Bengtsson, Mr. John Viktor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Calic, Mr. Jovo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Panula, Master. Eino Viljami&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Goldsmith, Master. Frank John William &amp;quot;Frankie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Chibnall, Mrs. (Edith Martha Bowerman)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Skoog, Mrs. William (Anna Bernhardina Karlsson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Baumann, Mr. John D&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ling, Mr. Lee&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Van der hoef, Mr. Wyckoff&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Rice, Master. Arthur&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Johnson, Miss. Eleanor Ileen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Sivola, Mr. Antti Wilhelm&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Smith, Mr. James Clinch&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Klasen, Mr. Klas Albin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Lefebre, Master. Henry Forbes&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Isham, Miss. Ann Elizabeth&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Hale, Mr. Reginald&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Leonard, Mr. Lionel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sage, Miss. Constance Gladys&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Pernot, Mr. Rene&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Asplund, Master. Clarence Gustaf Hugo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Becker, Master. Richard F&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Kink-Heilmann, Miss. Luise Gretchen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rood, Mr. Hugh Roscoe&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;O\&#39;Brien, Mrs. Thomas (Johanna &amp;quot;Hannah&amp;quot; Godfrey)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Romaine, Mr. Charles Hallace (&amp;quot;Mr C Rolmane&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Bourke, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Turcin, Mr. Stjepan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Pinsky, Mrs. (Rosa)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Carbines, Mr. William&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Andersen-Jensen, Miss. Carla Christine Nielsine&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Navratil, Master. Michel M&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Brown, Mrs. James Joseph (Margaret Tobin)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lurette, Miss. Elise&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Mernagh, Mr. Robert&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Olsen, Mr. Karl Siegwart Andreas&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Madigan, Miss. Margaret &amp;quot;Maggie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Yrois, Miss. Henriette (&amp;quot;Mrs Harbeck&amp;quot;)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Vande Walle, Mr. Nestor Cyriel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sage, Mr. Frederick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Johanson, Mr. Jakob Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Youseff, Mr. Gerious&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cohen, Mr. Gurshon &amp;quot;Gus&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Strom, Miss. Telma Matilda&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Backstrom, Mr. Karl Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Albimona, Mr. Nassef Cassem&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Carr, Miss. Helen &amp;quot;Ellen&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Blank, Mr. Henry&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ali, Mr. Ahmed&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cameron, Miss. Clear Annie&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Perkin, Mr. John Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Givard, Mr. Hans Kristensen&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kiernan, Mr. Philip&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Newell, Miss. Madeleine&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Honkanen, Miss. Eliina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jacobsohn, Mr. Sidney Samuel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Bazzani, Miss. Albina&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Harris, Mr. Walter&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sunderland, Mr. Victor Francis&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bracken, Mr. James H&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Green, Mr. George Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nenkoff, Mr. Christo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hoyt, Mr. Frederick Maxfield&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Berglund, Mr. Karl Ivar Sven&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mellors, Mr. William John&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Lovell, Mr. John Hall (&amp;quot;Henry&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fahlstrom, Mr. Arne Jonas&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Lefebre, Miss. Mathilde&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Harris, Mrs. Henry Birkhardt (Irene Wallach)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Larsson, Mr. Bengt Edvin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sjostedt, Mr. Ernst Adolf&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Asplund, Miss. Lillian Gertrud&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Leyson, Mr. Robert William Norman&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Harknett, Miss. Alice Phoebe&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hold, Mr. Stephen&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Collyer, Miss. Marjorie &amp;quot;Lottie&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Pengelly, Mr. Frederick William&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Hunt, Mr. George Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Zabour, Miss. Thamine&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Murphy, Miss. Katherine &amp;quot;Kate&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Coleridge, Mr. Reginald Charles&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Maenpaa, Mr. Matti Alexanteri&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Attalah, Mr. Sleiman&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Minahan, Dr. William Edward&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;Lindahl, Miss. Agda Thorilda Viktoria&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hamalainen, Mrs. William (Anna)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Beckwith, Mr. Richard Leonard&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Carter, Rev. Ernest Courtenay&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Reed, Mr. James George&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Strom, Mrs. Wilhelm (Elna Matilda Persson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Stead, Mr. William Thomas&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lobb, Mr. William Arthur&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Rosblom, Mrs. Viktor (Helena Wilhelmina)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Touma, Mrs. Darwis (Hanne Youssef Razi)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Thorne, Mrs. Gertrude Maybelle&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Cherry, Miss. Gladys&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ward, Miss. Anna&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Parrish, Mrs. (Lutie Davis)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Smith, Mr. Thomas&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Asplund, Master. Edvin Rojj Felix&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Taussig, Mr. Emil&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Harrison, Mr. William&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Henry, Miss. Delia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Reeves, Mr. David&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Panula, Mr. Ernesti Arvid&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Persson, Mr. Ernst Ulrik&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Graham, Mrs. William Thompson (Edith Junkins)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Bissette, Miss. Amelia&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Cairns, Mr. Alexander&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Tornquist, Mr. William Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mellinger, Mrs. (Elizabeth Anne Maidment)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Natsch, Mr. Charles H&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Healy, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andrews, Miss. Kornelia Theodosia&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Lindblom, Miss. Augusta Charlotta&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Parkes, Mr. Francis &amp;quot;Frank&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Rice, Master. Eric&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Abbott, Mrs. Stanton (Rosa Hunt)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Duane, Mr. Frank&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Olsson, Mr. Nils Johan Goransson&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;de Pelsmaeker, Mr. Alfons&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Dorking, Mr. Edward Arthur&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Smith, Mr. Richard William&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Stankovic, Mr. Ivan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;de Mulder, Mr. Theodore&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Naidenoff, Mr. Penko&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hosono, Mr. Masabumi&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Connolly, Miss. Kate&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Barber, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Bishop, Mrs. Dickinson H (Helen Walton)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Levy, Mr. Rene Jacques&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Haas, Miss. Aloisia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mineff, Mr. Ivan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lewy, Mr. Ervin G&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Hanna, Mr. Mansour&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Allison, Miss. Helen Loraine&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Saalfeld, Mr. Adolphe&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Baxter, Mrs. James (Helene DeLaudeniere Chaput)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kelly, Miss. Anna Katherine &amp;quot;Annie Kate&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McCoy, Mr. Bernard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Johnson, Mr. William Cahoone Jr&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Keane, Miss. Nora A&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Williams, Mr. Howard Hugh &amp;quot;Harry&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Allison, Master. Hudson Trevor&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Fleming, Miss. Margaret&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Abelson, Mr. Samuel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Francatelli, Miss. Laura Mabel&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Hays, Miss. Margaret Bechstein&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ryerson, Miss. Emily Borie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;Lahtinen, Mrs. William (Anna Sylfven)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Hendekovic, Mr. Ignjac&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hart, Mr. Benjamin&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Nilsson, Miss. Helmina Josefina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Kantor, Mrs. Sinai (Miriam Sternin)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Moraweck, Dr. Ernest&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Wick, Miss. Mary Natalie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Dennis, Mr. Samuel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Danoff, Mr. Yoto&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Slayter, Miss. Hilda Mary&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Sage, Mr. George John Jr&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Young, Miss. Marie Grice&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Nysveen, Mr. Johan Hansen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ball, Mrs. (Ada E Hall)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goldsmith, Mrs. Frank John (Emily Alice Brown)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hippach, Miss. Jean Gertrude&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;McCoy, Miss. Agnes&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Partner, Mr. Austen&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Graham, Mr. George Edward&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Vander Planke, Mr. Leo Edmondus&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Frauenthal, Mrs. Henry William (Clara Heinsheimer)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Denkoff, Mr. Mitto&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Pears, Mr. Thomas Clinton&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Burns, Miss. Elizabeth Margaret&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Dahl, Mr. Karl Edwart&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Blackwell, Mr. Stephen Weart&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Navratil, Master. Edmond Roger&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Fortune, Miss. Alice Elizabeth&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 3}, &#39;Collander, Mr. Erik Gustaf&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sedgwick, Mr. Charles Frederick Waddington&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Fox, Mr. Stanley Hubert&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Brown, Miss. Amelia &amp;quot;Mildred&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Smith, Miss. Marion Elsie&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Davison, Mrs. Thomas Henry (Mary E Finck)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Coutts, Master. William Loch &amp;quot;William&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Dimic, Mr. Jovan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Odahl, Mr. Nils Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Williams-Lambert, Mr. Fletcher Fellows&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Elias, Mr. Tannous&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Arnold-Franchi, Mr. Josef&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Yousif, Mr. Wazli&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Vanden Steen, Mr. Leo Peter&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bowerman, Miss. Elsie Edith&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Funk, Miss. Annie Clemmer&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;McGovern, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mockler, Miss. Helen Mary &amp;quot;Ellie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Skoog, Mr. Wilhelm&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;del Carlo, Mr. Sebastiano&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Barbara, Mrs. (Catherine David)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Asim, Mr. Adola&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Brien, Mr. Thomas&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Adahl, Mr. Mauritz Nils Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Warren, Mrs. Frank Manley (Anna Sophia Atkinson)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Moussa, Mrs. (Mantoura Boulos)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jermyn, Miss. Annie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Aubart, Mme. Leontine Pauline&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Harder, Mr. George Achilles&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Wiklund, Mr. Jakob Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Beavan, Mr. William Thomas&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ringhini, Mr. Sante&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Palsson, Miss. Stina Viola&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Meyer, Mrs. Edgar Joseph (Leila Saks)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Landergren, Miss. Aurora Adelia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Widener, Mr. Harry Elkins&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Betros, Mr. Tannous&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gustafsson, Mr. Karl Gideon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bidois, Miss. Rosalie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Nakid, Miss. Maria (&amp;quot;Mary&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Tikkanen, Mr. Juho&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Holverson, Mrs. Alexander Oskar (Mary Aline Towner)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Plotcharsky, Mr. Vasil&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Davies, Mr. Charles Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goodwin, Master. Sidney Leonard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Buss, Miss. Kate&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sadlier, Mr. Matthew&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lehmann, Miss. Bertha&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Carter, Mr. William Ernest&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Jansson, Mr. Carl Olof&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gustafsson, Mr. Johan Birger&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Newell, Miss. Marjorie&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Johansson, Mr. Erik&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Olsson, Miss. Elina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McKane, Mr. Peter David&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Pain, Dr. Alfred&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Trout, Mrs. William H (Jessie L)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Niskanen, Mr. Juha&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Adams, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jussila, Miss. Mari Aina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hakkarainen, Mr. Pekka Pietari&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Oreskovic, Miss. Marija&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gale, Mr. Shadrach&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Widegren, Mr. Carl/Charles Peter&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Richards, Master. William Rowe&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Birkeland, Mr. Hans Martin Monsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lefebre, Miss. Ida&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Sdycoff, Mr. Todor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hart, Mr. Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Minahan, Miss. Daisy E&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Cunningham, Mr. Alfred Fleming&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sundman, Mr. Johan Julian&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Meek, Mrs. Thomas (Annie Louise Rowley)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Drew, Mrs. James Vivian (Lulu Thorne Christian)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Silven, Miss. Lyyli Karoliina&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Matthews, Mr. William John&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Van Impe, Miss. Catharina&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gheorgheff, Mr. Stanio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Charters, Mr. David&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Zimmerman, Mr. Leo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Rosblom, Mr. Viktor Richard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Wiseman, Mr. Phillippe&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Clarke, Mrs. Charles V (Ada Maria Winfield)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Phillips, Miss. Kate Florence (&amp;quot;Mrs Kate Louise Phillips Marshall&amp;quot;)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Flynn, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Pickard, Mr. Berk (Berk Trembisky)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bjornstrom-Steffansson, Mr. Mauritz Hakan&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Thorneycroft, Mrs. Percival (Florence Kate White)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Louch, Mrs. Charles Alexander (Alice Adelaide Slow)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Kallio, Mr. Nikolai Erland&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Silvey, Mr. William Baird&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Carter, Miss. Lucile Polk&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Ford, Miss. Doolina Margaret &amp;quot;Daisy&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Richards, Mrs. Sidney (Emily Hocking)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Fortune, Mr. Mark&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Kvillner, Mr. Johan Henrik Johannesson&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Hart, Mrs. Benjamin (Esther Ada Bloomfield)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Hampe, Mr. Leon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Petterson, Mr. Johan Emil&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Reynaldo, Ms. Encarnacion&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Johannesen-Bratthammer, Mr. Bernt&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Dodge, Master. Washington&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Mellinger, Miss. Madeleine Violet&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Seward, Mr. Frederic Kimber&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Baclini, Miss. Marie Catherine&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Peuchen, Major. Arthur Godfrey&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;West, Mr. Edwy Arthur&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Hagland, Mr. Ingvald Olai Olsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Foreman, Mr. Benjamin Laventall&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Goldenberg, Mr. Samuel L&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Peduzzi, Mr. Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jalsevac, Mr. Ivan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Millet, Mr. Francis Davis&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kenyon, Mrs. Frederick R (Marion)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Toomey, Miss. Ellen&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Connor, Mr. Maurice&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Anderson, Mr. Harry&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Morley, Mr. William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gee, Mr. Arthur H&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Milling, Mr. Jacob Christian&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Maisner, Mr. Simon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goncalves, Mr. Manuel Estanslas&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Campbell, Mr. William&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Smart, Mr. John Montgomery&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Scanlan, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Baclini, Miss. Helene Barbara&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Keefe, Mr. Arthur&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cacic, Mr. Luka&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;West, Mrs. Edwy Arthur (Ada Mary Worth)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Jerwan, Mrs. Amin S (Marie Marthe Thuillard)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Strandberg, Miss. Ida Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Clifford, Mr. George Quincy&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Renouf, Mr. Peter Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Braund, Mr. Lewis Richard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Karlsson, Mr. Nils August&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hirvonen, Miss. Hildur E&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goodwin, Master. Harold Victor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Frost, Mr. Anthony Wood &amp;quot;Archie&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Rouse, Mr. Richard Henry&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Turkula, Mrs. (Hedwig)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bishop, Mr. Dickinson H&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Lefebre, Miss. Jeannie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Kent, Mr. Edward Austin&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Somerton, Mr. Francis William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Coutts, Master. Eden Leslie &amp;quot;Neville&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hagland, Mr. Konrad Mathias Reiersen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Windelov, Mr. Einar&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Molson, Mr. Harry Markland&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Artagaveytia, Mr. Ramon&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Stanley, Mr. Edward Roland&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Yousseff, Mr. Gerious&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Eustis, Miss. Elizabeth Mussey&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Shellard, Mr. Frederick William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Allison, Mrs. Hudson J C (Bessie Waldo Daniels)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Svensson, Mr. Olof&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Calic, Mr. Petar&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Canavan, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Sullivan, Miss. Bridget Mary&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Laitinen, Miss. Kristina Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Maioni, Miss. Roberta&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Penasco y Castellana, Mr. Victor de Satode&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Quick, Mrs. Frederick Charles (Jane Richards)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Bradley, Mr. George (&amp;quot;George Arthur Brayton&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Olsen, Mr. Henry Margido&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lang, Mr. Fang&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Daly, Mr. Eugene Patrick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Webber, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;McGough, Mr. James Robert&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Rothschild, Mrs. Martin (Elizabeth L. Barrett)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Coleff, Mr. Satio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Walker, Mr. William Anderson&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lemore, Mrs. (Amelia Milley)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Ryan, Mr. Patrick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Angle, Mrs. William A (Florence &amp;quot;Mary&amp;quot; Agnes Hughes)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Pavlovic, Mr. Stefo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Perreault, Miss. Anne&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Vovk, Mr. Janko&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lahoud, Mr. Sarkis&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hippach, Mrs. Louis Albert (Ida Sophia Fischer)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kassem, Mr. Fared&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Farrell, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ridsdale, Miss. Lucy&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Farthing, Mr. John&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Salonen, Mr. Johan Werner&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hocking, Mr. Richard George&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Quick, Miss. Phyllis May&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Toufik, Mr. Nakli&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Elias, Mr. Joseph Jr&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Peter, Mrs. Catherine (Catherine Rizk)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cacic, Miss. Marija&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hart, Miss. Eva Miriam&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Butt, Major. Archibald Willingham&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;LeRoy, Miss. Bertha&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Risien, Mr. Samuel Beard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Frolicher, Miss. Hedwig Margaritha&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Crosby, Miss. Harriet R&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Andersson, Miss. Ingeborg Constanzia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Andersson, Miss. Sigrid Elisabeth&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Beane, Mr. Edward&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Douglas, Mr. Walter Donald&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Nicholson, Mr. Arthur Ernest&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Beane, Mrs. Edward (Ethel Clarke)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Padro y Manent, Mr. Julian&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goldsmith, Mr. Frank John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Davies, Master. John Morgan Jr&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Thayer, Mr. John Borland Jr&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Sharp, Mr. Percival James R&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Brien, Mr. Timothy&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Leeni, Mr. Fahim (&amp;quot;Philip Zenni&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ohman, Miss. Velin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Wright, Mr. George&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Duff Gordon, Lady. (Lucille Christiana Sutherland) (&amp;quot;Mrs Morgan&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Robbins, Mr. Victor&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Taussig, Mrs. Emil (Tillie Mandelbaum)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;de Messemaeker, Mrs. Guillaume Joseph (Emma)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Morrow, Mr. Thomas Rowan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sivic, Mr. Husein&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Norman, Mr. Robert Douglas&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Simmons, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Meanwell, Miss. (Marion Ogden)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Davies, Mr. Alfred J&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Stoytcheff, Mr. Ilia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Palsson, Mrs. Nils (Alma Cornelia Berglund)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Doharr, Mr. Tannous&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jonsson, Mr. Carl&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harris, Mr. George&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Appleton, Mrs. Edward Dale (Charlotte Lamson)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;Flynn, Mr. John Irwin (&amp;quot;Irving&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kelly, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rush, Mr. Alfred George John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Patchett, Mr. George&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Garside, Miss. Ethel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Silvey, Mrs. William Baird (Alice Munger)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Caram, Mrs. Joseph (Maria Elias)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Jussila, Mr. Eiriik&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Christy, Miss. Julie Rachel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Thayer, Mrs. John Borland (Marian Longstreth Morris)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Downton, Mr. William James&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Ross, Mr. John Hugo&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Paulner, Mr. Uscher&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Taussig, Miss. Ruth&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Jarvis, Mr. John Denzil&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Frolicher-Stehli, Mr. Maxmillian&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Gilinski, Mr. Eliezer&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Murdlin, Mr. Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rintamaki, Mr. Matti&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Stephenson, Mrs. Walter Bertram (Martha Eustis)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Elsbury, Mr. William James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bourke, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Chapman, Mr. John Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Van Impe, Mr. Jean Baptiste&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Leitch, Miss. Jessie Wills&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Johnson, Mr. Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Boulos, Mr. Hanna&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Duff Gordon, Sir. Cosmo Edmund (&amp;quot;Mr Morgan&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Slabenoff, Mr. Petco&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harrington, Mr. Charles H&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Torber, Mr. Ernst William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Homer, Mr. Harry (&amp;quot;Mr E Haven&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lindell, Mr. Edvard Bengtsson&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Karaic, Mr. Milan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Daniel, Mr. Robert Williams&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Shutes, Miss. Elizabeth W&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Jardin, Mr. Jose Neto&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Murphy, Miss. Margaret Jane&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Horgan, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Brocklebank, Mr. William Alfred&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Herman, Miss. Alice&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Danbom, Mr. Ernst Gilbert&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Lobb, Mrs. William Arthur (Cordelia K Stanlick)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Becker, Miss. Marion Louise&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Gavey, Mr. Lawrence&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Yasbeck, Mr. Antoni&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Kimball, Mr. Edwin Nelson Jr&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Nakid, Mr. Sahid&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hansen, Mr. Henry Damsgaard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bowen, Mr. David John &amp;quot;Dai&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sutton, Mr. Frederick&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Kirkland, Rev. Charles Leonard&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Longley, Miss. Gretchen Fiske&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Bostandyeff, Mr. Guentcho&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &amp;quot;O&#39;Connell, Mr. Patrick D&amp;quot;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Barkworth, Mr. Algernon Henry Wilson&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lundahl, Mr. Johan Svensson&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Stahelin-Maeglin, Dr. Max&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Parr, Mr. William Henry Marsh&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Skoog, Miss. Mabel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Davis, Miss. Mary&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Leinonen, Mr. Antti Gustaf&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Collyer, Mr. Harvey&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Panula, Mrs. Juha (Maria Emilia Ojala)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Thorneycroft, Mr. Percival&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Jensen, Mr. Hans Peder&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sagesser, Mlle. Emma&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Skoog, Miss. Margit Elizabeth&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Foo, Mr. Choong&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Baclini, Miss. Eugenie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Harper, Mr. Henry Sleeper&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Cor, Mr. Liudevit&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Simonius-Blumer, Col. Oberst Alfons&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Willey, Mr. Edward&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Stanley, Miss. Amy Zillah Elsie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mitkoff, Mr. Mito&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Doling, Miss. Elsie&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kalvik, Mr. Johannes Halvorsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;O\&#39;Leary, Miss. Hanora &amp;quot;Norah&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hegarty, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hickman, Mr. Leonard Mark&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Radeff, Mr. Alexander&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bourke, Mrs. John (Catherine)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Eitemiller, Mr. George Floyd&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Newell, Mr. Arthur Webster&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Frauenthal, Dr. Henry William&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;Badt, Mr. Mohamed&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Colley, Mr. Edward Pomeroy&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Coleff, Mr. Peju&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lindqvist, Mr. Eino William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Hickman, Mr. Lewis&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 2}, &#39;Butler, Mr. Reginald Fenton&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Rommetvedt, Mr. Knud Paust&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Cook, Mr. Jacob&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Taylor, Mrs. Elmer Zebley (Juliet Cummins Wright)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Brown, Mrs. Thomas William Solomon (Elizabeth Catherine Ford)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Davidson, Mr. Thornton&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Mitchell, Mr. Henry Michael&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Wilhelms, Mr. Charles&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Watson, Mr. Ennis Hastings&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Edvardsson, Mr. Gustaf Hjalmar&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sawyer, Mr. Frederick Charles&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Turja, Miss. Anna Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goodwin, Mrs. Frederick (Augusta Tyler)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Cardeza, Mr. Thomas Drake Martinez&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Peters, Miss. Katie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hassab, Mr. Hammad&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Olsvigen, Mr. Thor Anderson&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Goodwin, Mr. Charles Edward&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 5}, &#39;Brown, Mr. Thomas William Solomon&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Laroche, Mr. Joseph Philippe Lemercier&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Panula, Mr. Jaako Arnold&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Dakic, Mr. Branko&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fischer, Mr. Eberhard Thelander&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Madill, Miss. Georgette Alexandra&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Dick, Mr. Albert Adrian&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Karun, Miss. Manca&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lam, Mr. Ali&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Saad, Mr. Khalil&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Weir, Col. John&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Chapman, Mr. Charles Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kelly, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mullens, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Thayer, Mr. John Borland&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Humblen, Mr. Adolf Mathias Nicolai Olsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Astor, Mrs. John Jacob (Madeleine Talmadge Force)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Silverthorne, Mr. Spencer Victor&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Barbara, Miss. Saiide&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gallagher, Mr. Martin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hansen, Mr. Henrik Juul&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Morley, Mr. Henry Samuel (&amp;quot;Mr Henry Marshall&amp;quot;)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Kelly, Mrs. Florence &amp;quot;Fannie&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Calderhead, Mr. Edward Pennington&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Cleaver, Miss. Alice&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Moubarek, Master. Halim Gonios (&amp;quot;William George&amp;quot;)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Mayne, Mlle. Berthe Antonine (&amp;quot;Mrs de Villiers&amp;quot;)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Klaber, Mr. Herman&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Taylor, Mr. Elmer Zebley&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Larsson, Mr. August Viktor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Greenberg, Mr. Samuel&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Soholt, Mr. Peter Andreas Lauritz Andersen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Endres, Miss. Caroline Louise&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Troutt, Miss. Edwina Celia &amp;quot;Winnie&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;McEvoy, Mr. Michael&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Johnson, Mr. Malkolm Joackim&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harper, Miss. Annie Jessie &amp;quot;Nina&amp;quot;&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Jensen, Mr. Svend Lauritz&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Gillespie, Mr. William Henry&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Hodges, Mr. Henry Price&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Chambers, Mr. Norman Campbell&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Oreskovic, Mr. Luka&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Renouf, Mrs. Peter Henry (Lillian Jefferys)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 3}, &#39;Mannion, Miss. Margareth&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bryhl, Mr. Kurt Arnold Gottfrid&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Ilmakangas, Miss. Pieta Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Allen, Miss. Elisabeth Walton&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Hassan, Mr. Houssein G N&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Knight, Mr. Robert J&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Berriman, Mr. William John&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Troupiansky, Mr. Moses Aaron&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Williams, Mr. Leslie&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ford, Mrs. Edward (Margaret Ann Watson)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Lesurer, Mr. Gustave J&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ivanoff, Mr. Kanio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nankoff, Mr. Minko&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hawksford, Mr. Walter James&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Cavendish, Mr. Tyrell William&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Ryerson, Miss. Susan Parker &amp;quot;Suzette&amp;quot;&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 2}, &#39;McNamee, Mr. Neal&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Stranden, Mr. Juho&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Crosby, Capt. Edward Gifford&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Abbott, Mr. Rossmore Edward&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Sinkkonen, Miss. Anna&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Marvin, Mr. Daniel Warner&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Connaghton, Mr. Michael&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Wells, Miss. Joan&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Moor, Master. Meier&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Vande Velde, Mr. Johannes Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jonkoff, Mr. Lalio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Herman, Mrs. Samuel (Jane Laver)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Hamalainen, Master. Viljo&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Carlsson, Mr. August Sigfrid&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Bailey, Mr. Percy Andrew&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Theobald, Mr. Thomas Leonard&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Garfirth, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Nirva, Mr. Iisakki Antino Aijo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Barah, Mr. Hanna Assi&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Carter, Mrs. William Ernest (Lucile Polk)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Eklund, Mr. Hans Linus&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hogeboom, Mrs. John C (Anna Andrews)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Brewe, Dr. Arthur Jackson&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Mangan, Miss. Mary&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Moran, Mr. Daniel J&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Gronnestad, Mr. Daniel Danielsen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lievens, Mr. Rene Aime&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Jensen, Mr. Niels Peder&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mack, Mrs. (Mary)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Elias, Mr. Dibo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hocking, Mrs. Elizabeth (Eliza Needs)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Myhrman, Mr. Pehr Fabian Oliver Malkolm&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Tobin, Mr. Roger&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Emanuel, Miss. Virginia Ethel&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Kilgannon, Mr. Thomas J&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Robert, Mrs. Edward Scott (Elisabeth Walton McMillan)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Ayoub, Miss. Banoura&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Dick, Mrs. Albert Adrian (Vera Gillespie)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Long, Mr. Milton Clyde&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Johnston, Mr. Andrew G&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Ali, Mr. William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harmer, Mr. Abraham (David Lishin)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sjoblom, Miss. Anna Sofia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rice, Master. George Hugh&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Dean, Master. Bertram Vere&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Guggenheim, Mr. Benjamin&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Keane, Mr. Andrew &amp;quot;Andy&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gaskell, Mr. Alfred&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sage, Miss. Stella Anna&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Hoyt, Mr. William Fisher&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Dantcheff, Mr. Ristiu&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Otter, Mr. Richard&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Leader, Dr. Alice (Farnham)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Osman, Mrs. Mara&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Ibrahim Shawah, Mr. Yousseff&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Van Impe, Mrs. Jean Baptiste (Rosalie Paula Govaert)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Ponesell, Mr. Martin&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Collyer, Mrs. Harvey (Charlotte Annie Tate)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Carter, Master. William Thornton II&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Thomas, Master. Assad Alexander&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hedman, Mr. Oskar Arvid&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Johansson, Mr. Karl Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Andrews, Mr. Thomas Jr&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Pettersson, Miss. Ellen Natalia&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Meyer, Mr. August&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Chambers, Mrs. Norman Campbell (Bertha Griggs)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Alexander, Mr. William&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lester, Mr. James&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Slemen, Mr. Richard James&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Andersson, Miss. Ebba Iris Alfrida&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Tomlin, Mr. Ernest Portage&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Fry, Mr. Richard&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Heininen, Miss. Wendla Maria&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mallet, Mr. Albert&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Holm, Mr. John Fredrik Alexander&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Skoog, Master. Karl Thorsten&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 3}, &#39;Hays, Mrs. Charles Melville (Clara Jennings Gregg)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Lulic, Mr. Nikola&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Reuchlin, Jonkheer. John George&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Moor, Mrs. (Beila)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Panula, Master. Urho Abraham&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Flynn, Mr. John&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Lam, Mr. Len&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mallet, Master. Andre&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;McCormack, Mr. Thomas Joseph&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Stone, Mrs. George Nelson (Martha Evelyn)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Yasbeck, Mrs. Antoni (Selini Alexander)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Richards, Master. George Sibley&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Saad, Mr. Amin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Augustsson, Mr. Albert&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Allum, Mr. Owen George&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Compton, Miss. Sara Rebecca&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Pasic, Mr. Jakob&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sirota, Mr. Maurice&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Chip, Mr. Chang&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Marechal, Mr. Pierre&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Alhomaki, Mr. Ilmari Rudolf&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Mudd, Mr. Thomas Charles&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Serepeca, Miss. Augusta&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Lemberopolous, Mr. Peter L&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Culumovic, Mr. Jeso&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Abbing, Mr. Anthony&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Sage, Mr. Douglas Bullen&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Markoff, Mr. Marin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Harper, Rev. John&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Goldenberg, Mrs. Samuel L (Edwiga Grabowska)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Andersson, Master. Sigvard Harald Elias&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 4}, &#39;Svensson, Mr. Johan&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Boulos, Miss. Nourelain&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Lines, Miss. Mary Conover&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Carter, Mrs. Ernest Courtenay (Lilian Hughes)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Aks, Mrs. Sam (Leah Rosen)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Wick, Mrs. George Dennick (Mary Hitchcock)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Daly, Mr. Peter Denis &#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Baclini, Mrs. Solomon (Latifa Qurban)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Razi, Mr. Raihed&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Hansen, Mr. Claus Peter&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 2}, &#39;Giles, Mr. Frederick Edward&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Swift, Mrs. Frederick Joel (Margaret Welles Barron)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Sage, Miss. Dorothy Edith &amp;quot;Dolly&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 8}, &#39;Gill, Mr. John William&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Bystrom, Mrs. (Karolina)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Duran y More, Miss. Asuncion&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Roebling, Mr. Washington Augustus II&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;van Melkebeke, Mr. Philemon&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Johnson, Master. Harold Theodor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Balkic, Mr. Cerin&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Beckwith, Mrs. Richard Leonard (Sallie Monypeny)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 1}, &#39;Carlsson, Mr. Frans Olof&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Vander Cruyssen, Mr. Victor&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Abelson, Mrs. Samuel (Hannah Wizosky)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 1}, &#39;Najib, Miss. Adele Kiamie &amp;quot;Jane&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Gustafsson, Mr. Alfred Ossian&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Petroff, Mr. Nedelio&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Laleff, Mr. Kristo&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Shelley, Mrs. William (Imanita Parrish Hall)&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Markun, Mr. Johann&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Dahlberg, Miss. Gerda Ulrika&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Banfield, Mr. Frederick James&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Sutehall, Mr. Henry Jr&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Rice, Mrs. William (Margaret Norton)&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}, &#39;Montvila, Rev. Juozas&#39;: {&#39;Pclass&#39;: 2, &#39;SibSp&#39;: 0}, &#39;Graham, Miss. Margaret Edith&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Johnston, Miss. Catherine Helen &amp;quot;Carrie&amp;quot;&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}, &#39;Behr, Mr. Karl Howell&#39;: {&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}, &#39;Dooley, Mr. Patrick&#39;: {&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 0}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1) quel était la classe de &amp;lsquo;Flynn, Mr. James&amp;rsquo; ?&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Flynn, Mr. James&#39;][&#39;Pclass&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) &amp;lsquo;Todoroff, Mr. Lalio&amp;rsquo; avait-il des proches à bord ?&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Todoroff, Mr. Lalio&#39;][&#39;SibSp&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) &amp;lsquo;Nicola-Yarred, Miss. Jamila&amp;rsquo; était elle à bord ?&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Nicola-Yarred, Miss. Jamila&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Pclass&#39;: 3, &#39;SibSp&#39;: 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; &#39;Nicola-Yarred, Miss. Jamila&#39;  in dictTitanic
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) &amp;lsquo;Mamee, Mr. Hanna&amp;rsquo; étaient en 1ière classe et non en troisième classe. Merci de corriger cela&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Mamee, Mr. Hanna&#39;][&#39;Pclass&#39;] = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dictTitanic[&#39;Mamee, Mr. Hanna&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Pclass&#39;: 1, &#39;SibSp&#39;: 0}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5- Les boucles en Python - Cours</title>
      <link>/courses/formation_python/5-les_boucles/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/5-les_boucles/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-les-boucles-ou-contrôles-de-flux-en-python&#34;&gt;5- Les boucles ou contrôles de flux en Python:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre les structures conditionnelles&lt;/li&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une boucle&lt;/li&gt;
&lt;li&gt;Savoir créer une boucle While&lt;/li&gt;
&lt;li&gt;Savoir créer une boucle For&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-1-la-struture-conditionnelle-if-else&#34;&gt;5.1- La struture conditionnelle : If, else&lt;/h2&gt;

&lt;p&gt;Les structures de contrôle de flux peuvent être classées en structure conditionnelle et structure d&amp;rsquo;itération.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Les instructions conditionnelles sélectionnent un ensemble particulier d&amp;rsquo;instructions à exécuter en fonction d&amp;rsquo;une condition spécifiée.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;L&amp;rsquo;instruction de contrôle conditionnelle la plus populaire est «if else».&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cette contruction de langage nous permet de décrire des branches possibles que prendra notre programme python en fonction des conditions données:
                          Syntaxe IF:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                                 if condition:
                                     action 1
                                 elif:
                                     action 2
                                 else:
                                     action 3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ATTENTION: python travaille en indentation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/indentation.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On peut affecter des tâches multiples dans des structures conditionnelles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_variable = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (ma_variable &amp;gt; 5 ):
ma_variable = ma_variable + 1 
ma_variable    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (ma_variable &amp;gt; 5 ):
ma_variable = ma_variable + 1 
else:
ma_variable = ma_variable - 1 
ma_variable   

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (ma_variable &amp;gt; 5 ):
ma_variable = ma_variable + 1 
elif (ma_variable == 5) :
ma_variable = ma_variable * 10 
else:
ma_variable = ma_variable - 1 
ma_variable   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-2-la-boucle-for&#34;&gt;5.2- La boucle for&lt;/h2&gt;

&lt;p&gt;Une boucle vous permet de répéter des instructions selon vos besoins.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                         Syntaxe FOR:  
                                     items = [1,2,3]
                                     for i in items:
                                         print(i) # 1,2,3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Attention une fois de plus à bien respecter l&amp;rsquo;indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for ma_valeur in ma_liste:
    print(ma_valeur*2)
    print(&amp;quot;---&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
---
4
---
6
---
8
---
10
---
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for ma_valeur in ma_liste:
    ma_nouvelle_variable=ma_valeur*2
    print(&amp;quot;La multiplication de 2 * %d = %d&amp;quot; % (ma_valeur,ma_nouvelle_variable))  # pour concatener du texte et une variable
                               # %d: python sait qu&#39;on va afficher un variable en entier
                               # %s: python sait qu&#39;on va afficher un variable mot 
                               # %f: python sait qu&#39;on va afficher une variable décimale
                               # on donne un tuple à afficher
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;La multiplication de 2 * 1 = 2
La multiplication de 2 * 2 = 4
La multiplication de 2 * 3 = 6
La multiplication de 2 * 4 = 8
La multiplication de 2 * 5 = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-3-la-boucle-while&#34;&gt;5.3- La boucle  while()&lt;/h2&gt;

&lt;p&gt;Même principe que la structure conditionnelle if mais répétée:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                        Syntaxe WHILE:
                                       run = True
                                       while run:
                                           print(&#39;running&#39;)
                                           if &amp;lt;condition&amp;gt;:
                                               run = False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tant que la condition est respectée, l&amp;rsquo;iterration dans la boucle continue.
Attention à bien respecter l&amp;rsquo;indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5]
compteur=0
while (compteur &amp;lt; 5):
    print(&amp;quot;Mon compteur = %d&amp;quot; % (compteur))
    print(&amp;quot;Ma valeur = %d&amp;quot; % (ma_liste[compteur]))   # dans le tuple, on veut la valeur de notre liste
    compteur=compteur+1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Mon compteur = 0
Ma valeur = 1
Mon compteur = 1
Ma valeur = 2
Mon compteur = 2
Ma valeur = 3
Mon compteur = 3
Ma valeur = 4
Mon compteur = 4
Ma valeur = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut imbriquer des conditions dans une boucle while. En reprennant la structure précédente, on va par exemple extraire uniquement les valeurs paires. Si modulo de la valeur = 0 =&amp;gt; nombre pair&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;compteur=0
compteur_resultat_vrai=0
while (compteur &amp;lt; 5):
    if ma_liste[compteur] % 2 == 0:
        print(&amp;quot;Mon compteur = %d&amp;quot; % (compteur))
        print(&amp;quot;Ma valeur = %d&amp;quot; % (ma_liste[compteur]))  
        compteur_resultat_vrai=compteur_resultat_vrai+1
    compteur=compteur+1
print(compteur_resultat_vrai)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Mon compteur = 1
Ma valeur = 2
Mon compteur = 3
Ma valeur = 4
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avec les structures while(), on peut facilement faire une boucle infine et faire planter son code.
i= 0
while i == 0:
    print(&amp;lsquo;boucle infiniiiiiiie&amp;rsquo;)&lt;/p&gt;

&lt;h2 id=&#34;5-4-création-de-listes-de-chiffres-la-boucle-range&#34;&gt;5.4- Création de listes de chiffres: la boucle  range()&lt;/h2&gt;

&lt;p&gt;Si on a besoin d&amp;rsquo;avoir une liste de chiffres et qu&amp;rsquo;on souhaite éviter une structure while(), il est possible de créer une boucle facilement avec range():&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5):
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
1
2
3
4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(2,7):
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
3
4
5
6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(0,10,2):
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
2
4
6
8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(5,-5,-1):
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
4
3
2
1
0
-1
-2
-3
-4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produits = [&#39;smartphone&#39;,&#39;chaussures&#39;,&#39;console&#39;]
caParJour = [10000,15000,12000]

for i in range(len(produits)):
    print(produits[i])
    print(caParJour[i])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;smartphone
10000
chaussures
15000
console
12000
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-5-interrompre-une-boucle&#34;&gt;5.5- Interrompre une boucle&lt;/h2&gt;

&lt;p&gt;Il est possible de stopper une boucle avec la commande break.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste=[1,2,3,4,5,6,7,8,9,10]
for i in ma_liste:
     if i &amp;gt; 5:
             print(&amp;quot;On stoppe la boucle: les valeurs qui suivent sont supérieures à 5.&amp;quot;)
             break
     print(i)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
2
3
4
5
On stoppe la boucle: les valeurs qui suivent sont supérieures à 5.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;produits = [&#39;smartphone&#39;,&#39;chaussures&#39;,&#39;console&#39;]
for i in produits:
    if i ==&#39;chaussures&#39;:
        break
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;smartphone
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut  lire la suite du code et passer directement à la boucle suivante avec continue&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#ne pas lire la suite du code et passer directement à la boucle suivante avec continue
for i in produits:
    if i ==&#39;chaussures&#39;:
        continue
    print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;smartphone
console
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5- Les boucles en Python - Exercice</title>
      <link>/courses/formation_python/5-les_boucles-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/5-les_boucles-exercice/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h1&gt; TP : Manipuler une liste contenant les prix de 58 maisons&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;    1- Créer de la liste &amp;quot;prix_de_58_maisons&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;prix_de_58_maisons=list(range(125000,700000,10000))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    2- Combien de maisons ont un prix supérieur ou égal à 300000 euros ?

    3- Combien de maisons ont un prix compris entre 250000 et 400000 euros ?

    4- Combien de maisons ont un prix qui n’est pas supérieur à 600000 euros ?

    5- Combien de maisons ont un prix inférieur à 150000 euros ou supérieur à 650000 euros ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Indice: parcourir la liste avec une boucle, utiliser des instructions de condition if et un compteur pour compter les résultats vrais.&lt;/p&gt;

&lt;p&gt;1 Création de la liste &amp;ldquo;prix_de_58_maisons&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;prix_de_58_maisons=list(range(125000,700000,10000))  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2. Combien de maisons ont un prix supérieur à 300000 euros ?
# on définit notre compteur
nombre_maisons=0
for prix in prix_de_58_maisons:    # on va parcours notre liste avec une boucle for 
    if prix &amp;gt;= 300000:             # si notre condition est rencontrée, on incrémente notre compteur 
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Le nombre de maisons avec un prix supérieur ou égal à 300000 euros est de : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le nombre de maisons avec un prix supérieur ou égal à 300000 euros est de : 40
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2. Combien de maisons ont un prix compris entre 250000 et 400000 euros ?
# on définit notre compteur
nombre_maisons=0
for prix in prix_de_58_maisons:  # on va parcours notre liste avec une boucle for    
    if (prix &amp;gt;= 250000) and (prix &amp;lt;= 400000): # si notre condition est rencontrée, on incrémente notre compteur
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Le nombre de maisons qui ont un prix compris entre 250000 et 400000 euros est de : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le nombre de maisons qui ont un prix compris entre 250000 et 400000 euros est de : 15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3. Combien de maisons ont un prix qui n&#39;est pas supérieur à 600000 euros ?
nombre_maisons=0
for prix in prix_de_58_maisons:
    if not(prix &amp;gt; 600000):
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Le nombre de maisons qui ont un prix qui n&#39;est pas supérieur à 600000 euros est de : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le nombre de maisons qui ont un prix qui n&#39;est pas supérieur à 600000 euros est de : 48
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 4. Combien de maisons ont un prix inférieur à 150000 euros OU supérieur à 650000 euros ?
nombre_maisons=0
for prix in prix_de_58_maisons:
    if (prix &amp;lt; 150000) or (prix &amp;gt; 650000):
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Le nombre de maisons qui ont un prix inférieur à 150000 euros OU supérieur à 650000 euros est de : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Le nombre de maisons qui ont un prix inférieur à 150000 euros OU supérieur à 650000 euros est de : 8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>6- Les fonctions en Python - Cours</title>
      <link>/courses/formation_python/6-les_fonctions/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/6-les_fonctions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;les-fonctions-en-python&#34;&gt;Les fonctions en Python:&lt;/h2&gt;

&lt;h2 id=&#34;6-1-les-librairies&#34;&gt;6.1- Les librairies:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une librairie&lt;/li&gt;
&lt;li&gt;Importer une librairie&lt;/li&gt;
&lt;li&gt;Importer un module précis d&amp;rsquo;une librairie&lt;/li&gt;
&lt;li&gt;Utiliser les alias&lt;/li&gt;
&lt;li&gt;Utiliser la librairie math&lt;/li&gt;
&lt;li&gt;Installer, mettre à jour et vérifier la config d&amp;rsquo;une librairie avec PIP&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-1-1-les-bibliothèques-python&#34;&gt;6.1.1-  Les bibliothèques Python:&lt;/h2&gt;

&lt;p&gt;Pour faciliter le traitement, la manipulation et la visualisation des données, Python possède de nombreuses librairies.&lt;/p&gt;

&lt;p&gt;Les bibliothèques de Python permettent d&amp;rsquo;importer des codes et fonctions qui faciliteront nos analyses.&lt;/p&gt;

&lt;p&gt;Voici les bibliothèques les plus populaires:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;numpy, math: mathématique ou calculs scientifiques : &lt;a href=&#34;http://www.numpy.org/&#34; target=&#34;_blank&#34;&gt;http://www.numpy.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pandas: manipulations de données: &lt;a href=&#34;http://pandas.pydata.org/&#34; target=&#34;_blank&#34;&gt;http://pandas.pydata.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;matplotlib, seaborn, Plotly: visualisation des données: &lt;a href=&#34;https://matplotlib.org/&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;scikit-learn: machine learning: &lt;a href=&#34;https://scikit-learn.org&#34; target=&#34;_blank&#34;&gt;https://scikit-learn.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Datetime: formatage de dates:&lt;a href=&#34;https://docs.python.org/2/library/datetime.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/library/datetime.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keras, Tensorflow: deep learning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour importer une librairie sous Python, on utilise la fonction : &lt;b&gt;import&lt;/b&gt; + nom_bibliothèque&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;liste_1=[1,2,3,4,5,6,7,8,9,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;liste_1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous allons importer la librairie mathématie Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En dehors des tutoriels en ligne, chaque librairie importée sous python possède une aide.&lt;/p&gt;

&lt;p&gt;Pour savoir ce que contient une librairie, on utilise la fonction: dir()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Exemple: dir(numpy)    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(numpy)   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une fois une fonction ciblée, La fonction &lt;b&gt;help()&lt;/b&gt; permet d&amp;rsquo;obtenir une aide sur une fonction de la librairie&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Exemple: help(numpy.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(numpy.mean)    # pour obtenir une aide sur une fonction d&#39;une librairie         
# on peut distinguer les arguments optionnels et obligatoires
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Help on function mean in module numpy:

mean(a, axis=None, dtype=None, out=None, keepdims=&amp;lt;no value&amp;gt;)
    Compute the arithmetic mean along the specified axis.

    Returns the average of the array elements.  The average is taken over
    the flattened array by default, otherwise over the specified axis.
    `float64` intermediate and return values are used for integer inputs.

    Parameters
    ----------
    a : array_like
        Array containing numbers whose mean is desired. If `a` is not an
        array, a conversion is attempted.
    axis : None or int or tuple of ints, optional
        Axis or axes along which the means are computed. The default is to
        compute the mean of the flattened array.

        .. versionadded:: 1.7.0

        If this is a tuple of ints, a mean is performed over multiple axes,
        instead of a single axis or all the axes as before.
    dtype : data-type, optional
        Type to use in computing the mean.  For integer inputs, the default
        is `float64`; for floating point inputs, it is the same as the
        input dtype.
    out : ndarray, optional
        Alternate output array in which to place the result.  The default
        is ``None``; if provided, it must have the same shape as the
        expected output, but the type will be cast if necessary.
        See `doc.ufuncs` for details.

    keepdims : bool, optional
        If this is set to True, the axes which are reduced are left
        in the result as dimensions with size one. With this option,
        the result will broadcast correctly against the input array.

        If the default value is passed, then `keepdims` will not be
        passed through to the `mean` method of sub-classes of
        `ndarray`, however any non-default value will be.  If the
        sub-class&#39; method does not implement `keepdims` any
        exceptions will be raised.

    Returns
    -------
    m : ndarray, see dtype parameter above
        If `out=None`, returns a new array containing the mean values,
        otherwise a reference to the output array is returned.

    See Also
    --------
    average : Weighted average
    std, var, nanmean, nanstd, nanvar

    Notes
    -----
    The arithmetic mean is the sum of the elements along the axis divided
    by the number of elements.

    Note that for floating-point input, the mean is computed using the
    same precision the input has.  Depending on the input data, this can
    cause the results to be inaccurate, especially for `float32` (see
    example below).  Specifying a higher-precision accumulator using the
    `dtype` keyword can alleviate this issue.

    By default, `float16` results are computed using `float32` intermediates
    for extra precision.

    Examples
    --------
    &amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2], [3, 4]])
    &amp;gt;&amp;gt;&amp;gt; np.mean(a)
    2.5
    &amp;gt;&amp;gt;&amp;gt; np.mean(a, axis=0)
    array([ 2.,  3.])
    &amp;gt;&amp;gt;&amp;gt; np.mean(a, axis=1)
    array([ 1.5,  3.5])

    In single precision, `mean` can be inaccurate:

    &amp;gt;&amp;gt;&amp;gt; a = np.zeros((2, 512*512), dtype=np.float32)
    &amp;gt;&amp;gt;&amp;gt; a[0, :] = 1.0
    &amp;gt;&amp;gt;&amp;gt; a[1, :] = 0.1
    &amp;gt;&amp;gt;&amp;gt; np.mean(a)
    0.54999924

    Computing the mean in float64 is more accurate:

    &amp;gt;&amp;gt;&amp;gt; np.mean(a, dtype=np.float64)
    0.55000000074505806
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numpy.mean(liste_1)  # nom de la biliothèque + nom de la fonction pour appeller la fonction 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numpy.max(liste_1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from math import sqrt 
sqrt(25)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from math import pi as p
p
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3.141592653589793
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-1-2-la-librairie-pip&#34;&gt;6.1.2-  La librairie PIP:&lt;/h2&gt;

&lt;p&gt;PiP est un gestionnaire de librairie très important à connaitre. il permet d&amp;rsquo;installer, de désinstaler et de mettre à jour vos librairies&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;! pip list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Package                            Version    
---------------------------------- -----------
affine                             2.3.0      
alabaster                          0.7.12     
anaconda-client                    1.7.2      
anaconda-navigator                 1.9.12     
anaconda-project                   0.8.2      
asn1crypto                         0.24.0     
astroid                            2.2.5      
...   
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;! pip show pandas
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Name: pandas
Version: 0.24.2
Summary: Powerful data structures for data analysis, time series, and statistics
Home-page: http://pandas.pydata.org
Author: None
Author-email: None
License: BSD
Location: d:\utilisateurs\guillaume\anaconda3\lib\site-packages
Requires: python-dateutil, pytz, numpy
Required-by: xshape, xarray, seaborn, geopandas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour installer une librairie:
! pip install plotly
Pour mettre à jour une librairie:
! pip install plotly &amp;ndash;upgrade&lt;/p&gt;

&lt;h2 id=&#34;6-2-les-fonctions&#34;&gt;6.2- Les fonctions:&lt;/h2&gt;

&lt;h2&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comprendre ce qu&amp;rsquo;est une fonction&lt;/li&gt;
&lt;li&gt;Créer sa première fonction&lt;/li&gt;
&lt;li&gt;Intégrer des paramètres à une fonction&lt;/li&gt;
&lt;li&gt;Ajouter des paramètres optionnels&lt;/li&gt;
&lt;li&gt;Ajouter une nomenclature à vos paramètres&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-2-1-les-fonctions-natives&#34;&gt;6.2.1- Les fonctions natives:&lt;/h2&gt;

&lt;p&gt;Il existe des fonctions natives à python (ou built-in). Elles n&amp;rsquo;ont donc pas besoin d&amp;rsquo;être importées.&lt;/p&gt;

&lt;p&gt;Voici une liste de ces fonctions: &lt;a href=&#34;https://docs.python.org/3/library/functions.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/3/library/functions.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;en-voici-quelques-exemples&#34;&gt;En voici quelques exemples:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;abs(-1)  # abs(x) Retourne une valeur absolue 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len([1,2,3]) # len(s) Retourne le nombre d&#39;items d&#39;un objet.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max([1,3,2,6,99,1])    #Retourne la valeur la plus élévée pour max() et la plus basse pour min()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;99
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;round(1.2)  # Arrondi un nombre.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = [&amp;quot;olivier&amp;quot;, &amp;quot;bruce&amp;quot;, &amp;quot;john&amp;quot;]
b = [&amp;quot;engel&amp;quot;, &amp;quot;wayne&amp;quot;, &amp;quot;Wayne&amp;quot;]
zip(a,b)                         # Permet de regrouper sous la forme d&#39;un tuple les items de listes.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;zip at 0x5fd5048&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-2-création-de-notre-première-fonction-en-python&#34;&gt;6.2.2- Création de notre première fonction en python:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;une fonction permet de rendre notre code plus fluide et lisible:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Syntaxe: pour écrire une fonction, on commence par le mot clef Python def()&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;def sum(a, b):        # on definit les paramètres
    return a+b       # mot clef return pour retourner la variable résultat&lt;br /&gt;
- On ne précise pas le type de retour, il est dynamiquement résolu au moment de l&amp;rsquo;exécution du programme.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Appel de la fonction : result = sum(12,4)   # result = 16&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def ma_fonction():
print(&amp;quot;ma première fonction&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_fonction()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ma première fonction&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-2-3-les-paramètres-des-fonctions&#34;&gt;6.2.3- Les paramètres des fonctions:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def bienvenue(userName):
    print(&#39;Bienvenue &#39;+userName)

nom = input(&#39;votre nom:&#39;)
bienvenue(nom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;votre nom:Guillaume
Bienvenue Guillaume
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def bienvenue(userName):
    print(&#39;Bienvenue &#39;+userName+ &#39; ! &#39; )
    humeur = input(&#39;comment allez-vous ? &#39;)
    print(&#39;votre humeur : &#39;+humeur)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nom = input(&#39;votre nom&#39;)
bienvenue(nom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;votre nomGuillaume 
Bienvenue Guillaume  ! 
comment allez-vous ? Bien 
votre humeur : Bien 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-4-retourner-une-ou-plusieurs-valeurs-avec-une-fonction&#34;&gt;6.2.4- Retourner une ou plusieurs valeurs avec une fonction:&lt;/h2&gt;

&lt;p&gt;Pour retourner une valeur:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calculPrixTTC(prixht,TVA):
    prixttc = prixht*(1+TVA)
    return prixttc

prixPdt = calculPrixTTC(10,0.20)
prixPdt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;12.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour retourner plusieurs valeurs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calculPrixTTC(prixht,TVA):
    prixttc = prixht*(1+TVA)
    coutTVA = prixttc - prixht
    return prixttc, coutTVA

prixPdt = calculPrixTTC(20,0.20)
prixPdt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(24.0, 4.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut stocker ce retour de valeurs dans deux variables disctinctes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;prixPdt, coutTVA = calculPrixTTC(20,0.20)
print(prixPdt)
print(coutTVA)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;24.0
4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-5-les-options-sur-les-paramètres&#34;&gt;6.2.5- Les options sur les paramètres:&lt;/h2&gt;

&lt;p&gt;Si on oublie un paramètre dans une fonction à deux paramètres :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# et si on oubli un paramètre ?
test = calculPrixTTC(20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&amp;lt;ipython-input-25-6633a6f65415&amp;gt; in &amp;lt;module&amp;gt;
      1 # et si on oubli un paramètre ?
----&amp;gt; 2 test = calculPrixTTC(20)


TypeError: calculPrixTTC() missing 1 required positional argument: &#39;TVA&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python supporte pour cela  les arguments mot clef (keyword argument).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                def sum(a, b):        # on definit les paramètres 
                    return a+b       # mot clef return pour retourner la variable résultat 
                result = sum(12,b=4)
            -----------------------------
                def sum(a, b=4):        # on definit les paramètres 
                      return a+b       # mot clef return pour retourner la variable résultat
                result = sum(12)                    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def calculPrixTTC(prixht,TVA=0.20):
    prixttc = prixht*(1+TVA)
    coutTVA = prixttc - prixht
    return prixttc, coutTVA

test1 = calculPrixTTC(20)
print(test1)
test2 = calculPrixTTC(20,0.05)
print(test2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(24.0, 4.0)
(21.0, 1.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-6-définition-d-args&#34;&gt;6.2.6- Définition d&amp;rsquo;*args:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Syntaxe spéciale en python qui permet de gérer un nombre de paramètres variable en appel d&amp;rsquo;une fonction&lt;/li&gt;
&lt;li&gt;C&amp;rsquo;est le * qui compte&lt;/li&gt;
&lt;li&gt;args est une convention&lt;/li&gt;
&lt;li&gt;*args est une liste de paramètres contenant les paramètres d&amp;rsquo;une fonction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntaxe *args:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def print_ingredients(*args):
            for ingredient in args: 
                print(ingredient)

        print_ingredients(&#39;Tomatoes&#39;)
        print_ingredients(&#39;Tomatoes&#39;,Banana)
        print_ingredients(&#39;Tomatoes&#39;,Banana,apple)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sum(*args):
    total = 0 
    for number in args: 
        total += number 
    print(total)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(2,3)
sum(2,3,10,90,23)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
128
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def second_sum(*args):    
    def real_sum(*nums):
        total=0
        for number in nums:
            total += number
        return total
    
    print(real_sum(*args))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;second_sum(10,20,30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;60
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-2-7-définition-d-kwargs&#34;&gt;6.2.7- Définition d&amp;rsquo;**kwargs:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comme *args, mais pour les arguments mot-clé (keyword arguments)&lt;/li&gt;
&lt;li&gt;C&amp;rsquo;est le * qui compte&lt;/li&gt;
&lt;li&gt;**kwargs est un dictionnaire python contenant les clés/valeurs des paramètres d&amp;rsquo;une fonction&lt;/li&gt;
&lt;li&gt;il doit toujours être présent en dernier dans la liste des paramètres d&amp;rsquo;une fonction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntaxe **kwargs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def print_languages(**args):
            for language, definition in kwargs.items():
                print(&#39;{} is {}&#39;.format(language, definition))  

        print_languages(Python=&#39;awesome&#39;)
        print_languages(Python=&#39;awesome&#39;,Java=&#39;verbose&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def capitals(**kwargs):
    for country, capital in kwargs.items():
        print(&amp;quot;The capital of {} in {}&amp;quot;.format(country, capital))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;capitals(France = &#39;Paris&#39;, Germany=&#39;Berlin&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The capital of France in Paris
The capital of Germany in Berlin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def capitals(title, ending=&#39;&#39;,  **kwargs):
    print(title)
    for country, capital in kwargs.items():
        print(&amp;quot;The capital of {} in {}&amp;quot;.format(country, capital))
    if ending:
        print(ending)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;capitals(&amp;quot;List of countries&amp;quot;,
    France = &#39;Paris&#39;, Germany=&#39;Berlin&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;List of countries
The capital of France in Paris
The capital of Germany in Berlin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;keywords = {&#39;france&#39;: &#39;Paris&#39;, &#39;Germany&#39; : &#39;Allemage&#39;}
capitals(&amp;quot;List of countries 2 &amp;quot;, **keywords)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;List of countries 2 
The capital of france in Paris
The capital of Germany in Allemage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-3-importer-ses-propres-fonctions&#34;&gt;6.3-Importer ses propres fonctions:&lt;/h2&gt;

&lt;p&gt;Les modules font référence à un fichier contenant des instructions et des définitions Python.&lt;/p&gt;

&lt;p&gt;Un fichier contenant du code Python, par exemple: example.py, est appelé un module et son nom de module serait un exemple.&lt;/p&gt;

&lt;p&gt;Nous utilisons des modules pour décomposer de gros programmes en petits fichiers gérables et organisés. De plus, les modules assurent la réutilisation du code.&lt;/p&gt;

&lt;p&gt;Nous pouvons définir nos fonctions les plus utilisées dans un module et l&amp;rsquo;importer, au lieu de copier leurs définitions dans différents programmes.&lt;/p&gt;

&lt;p&gt;Ici, nous avons défini différentes fonctions à l&amp;rsquo;intérieur d&amp;rsquo;un module nommé my_functions.&lt;/p&gt;

&lt;p&gt;Nous utilisons le mot-clé import pour importer notre module puis nos fonctions. Pour importer notre exemple de module précédemment défini, nous tapons ce qui suit dans l&amp;rsquo;invite Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import my_functions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;def addition(a, b):
   &amp;ldquo;&amp;rdquo;&amp;ldquo;This program adds two
   numbers and return the result&amp;rdquo;&amp;ldquo;&amp;rdquo;
   result = a + b
   return result&lt;/p&gt;

&lt;p&gt;def substraction(a, b):
   &amp;ldquo;&amp;rdquo;&amp;ldquo;This program subs two
   numbers and return the result&amp;rdquo;&amp;ldquo;&amp;rdquo;
   result = a - b
   return result&lt;/p&gt;

&lt;p&gt;def multiplication(a, b):
   &amp;ldquo;&amp;rdquo;&amp;ldquo;This program multiplies two
   numbers and return the result&amp;rdquo;&amp;ldquo;&amp;rdquo;
   result = a * b
   return result&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(my_functions)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;__builtins__&#39;,
 &#39;__cached__&#39;,
 &#39;__doc__&#39;,
 &#39;__file__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;addition&#39;,
 &#39;multiplication&#39;,
 &#39;substraction&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En utilisant le nom du module, nous pouvons accéder à la fonction en utilisant le point. opérateur. Par exemple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_functions.substraction(4,6)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(my_functions.substraction)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Help on function substraction in module my_functions:

substraction(a, b)
    This program subs two
    numbers and return the result
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>6- Les fonctions en Python - Exercice</title>
      <link>/courses/formation_python/6-les_fonctions-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/6-les_fonctions-exercice/</guid>
      <description>&lt;h1&gt;TP : Analyse des données brutes des passagers du Titanic (3/3)&lt;/h1&gt;

&lt;p&gt;Dans ce TP, l&amp;rsquo;objectif va être de créer pas à pas une fonction donnant le pourcentage de survie pour un certain type de passagers !
Exemple : quel est le taux de survie des hommes par rapport à celui des femmes ? &lt;br&gt; &lt;br&gt;
Pour cela, nous allons utiliser les listes vues lors d&amp;rsquo;une session précédente. &lt;br&gt;
Pour rappel toutes les listes font la même longueur et correspondent au nombre de passagers.&lt;br&gt;
Chaque numéros d&amp;rsquo;emplacements dans les listes correspondent à la même personne. &lt;br&gt; Exemple ci-dessous :
Heikkinen, Miss. Laina était une femme de 35 ans, qui a survecue.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;survided = [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]
age = [22.0, 38.0, 26.0, 35.0, 35.0, 23.0, 54.0, 2.0, 27.0, 14.0, 4.0, 58.0, 20.0, 39.0, 14.0, 55.0, 2.0, 23.0, 31.0, 23.0, 35.0, 34.0, 15.0, 28.0, 8.0, 38.0, 23.0, 19.0, 23.0, 23.0, 40.0, 23.0, 23.0, 66.0, 28.0, 42.0, 23.0, 21.0, 18.0, 14.0, 40.0, 27.0, 23.0, 3.0, 19.0, 23.0, 23.0, 23.0, 23.0, 18.0, 7.0, 21.0, 49.0, 29.0, 65.0, 23.0, 21.0, 28.5, 5.0, 11.0, 22.0, 38.0, 45.0, 4.0, 23.0, 23.0, 29.0, 19.0, 17.0, 26.0, 32.0, 16.0, 21.0, 26.0, 32.0, 25.0, 23.0, 23.0, 0.82999999999999996, 30.0, 22.0, 29.0, 23.0, 28.0, 17.0, 33.0, 16.0, 23.0, 23.0, 24.0, 29.0, 20.0, 46.0, 26.0, 59.0, 23.0, 71.0, 23.0, 34.0, 34.0, 28.0, 23.0, 21.0, 33.0, 37.0, 28.0, 21.0, 23.0, 38.0, 23.0, 47.0, 14.5, 22.0, 20.0, 17.0, 21.0, 70.5, 29.0, 24.0, 2.0, 21.0, 23.0, 32.5, 32.5, 54.0, 12.0, 23.0, 24.0, 23.0, 45.0, 33.0, 20.0, 47.0, 29.0, 25.0, 23.0, 19.0, 37.0, 16.0, 24.0, 23.0, 22.0, 24.0, 19.0, 18.0, 19.0, 27.0, 9.0, 36.5, 42.0, 51.0, 22.0, 55.5, 40.5, 23.0, 51.0, 16.0, 30.0, 23.0, 23.0, 44.0, 40.0, 26.0, 17.0, 1.0, 9.0, 23.0, 45.0, 23.0, 28.0, 61.0, 4.0, 1.0, 21.0, 56.0, 18.0, 23.0, 50.0, 30.0, 36.0, 23.0, 23.0, 9.0, 1.0, 4.0, 23.0, 23.0, 45.0, 40.0, 36.0, 32.0, 19.0, 19.0, 3.0, 44.0, 58.0, 23.0, 42.0, 23.0, 24.0, 28.0, 23.0, 34.0, 45.5, 18.0, 2.0, 32.0, 26.0, 16.0, 40.0, 24.0, 35.0, 22.0, 30.0, 23.0, 31.0, 27.0, 42.0, 32.0, 30.0, 16.0, 27.0, 51.0, 23.0, 38.0, 22.0, 19.0, 20.5, 18.0, 23.0, 35.0, 29.0, 59.0, 5.0, 24.0, 23.0, 44.0, 8.0, 19.0, 33.0, 23.0, 23.0, 29.0, 22.0, 30.0, 44.0, 25.0, 24.0, 37.0, 54.0, 23.0, 29.0, 62.0, 30.0, 41.0, 29.0, 23.0, 30.0, 35.0, 50.0, 23.0, 3.0, 52.0, 40.0, 23.0, 36.0, 16.0, 25.0, 58.0, 35.0, 23.0, 25.0, 41.0, 37.0, 23.0, 63.0, 45.0, 23.0, 7.0, 35.0, 65.0, 28.0, 16.0, 19.0, 23.0, 33.0, 30.0, 22.0, 42.0, 22.0, 26.0, 19.0, 36.0, 24.0, 24.0, 23.0, 23.5, 2.0, 23.0, 50.0, 23.0, 23.0, 19.0, 23.0, 23.0, 0.92000000000000004, 23.0, 17.0, 30.0, 30.0, 24.0, 18.0, 26.0, 28.0, 43.0, 26.0, 24.0, 54.0, 31.0, 40.0, 22.0, 27.0, 30.0, 22.0, 23.0, 36.0, 61.0, 36.0, 31.0, 16.0, 23.0, 45.5, 38.0, 16.0, 23.0, 23.0, 29.0, 41.0, 45.0, 45.0, 2.0, 24.0, 28.0, 25.0, 36.0, 24.0, 40.0, 23.0, 3.0, 42.0, 23.0, 23.0, 15.0, 25.0, 23.0, 28.0, 22.0, 38.0, 23.0, 23.0, 40.0, 29.0, 45.0, 35.0, 23.0, 30.0, 60.0, 23.0, 23.0, 24.0, 25.0, 18.0, 19.0, 22.0, 3.0, 23.0, 22.0, 27.0, 20.0, 19.0, 42.0, 1.0, 32.0, 35.0, 23.0, 18.0, 1.0, 36.0, 23.0, 17.0, 36.0, 21.0, 28.0, 23.0, 24.0, 22.0, 31.0, 46.0, 23.0, 28.0, 39.0, 26.0, 21.0, 28.0, 20.0, 34.0, 51.0, 3.0, 21.0, 23.0, 23.0, 23.0, 33.0, 23.0, 44.0, 23.0, 34.0, 18.0, 30.0, 10.0, 23.0, 21.0, 29.0, 28.0, 18.0, 23.0, 28.0, 19.0, 23.0, 32.0, 28.0, 23.0, 42.0, 17.0, 50.0, 14.0, 21.0, 24.0, 64.0, 31.0, 45.0, 20.0, 25.0, 28.0, 23.0, 4.0, 13.0, 34.0, 5.0, 52.0, 36.0, 23.0, 30.0, 49.0, 23.0, 29.0, 65.0, 23.0, 50.0, 23.0, 48.0, 34.0, 47.0, 48.0, 23.0, 38.0, 23.0, 56.0, 23.0, 0.75, 23.0, 38.0, 33.0, 23.0, 22.0, 23.0, 34.0, 29.0, 22.0, 2.0, 9.0, 23.0, 50.0, 63.0, 25.0, 23.0, 35.0, 58.0, 30.0, 9.0, 23.0, 21.0, 55.0, 71.0, 21.0, 23.0, 54.0, 23.0, 25.0, 24.0, 17.0, 21.0, 23.0, 37.0, 16.0, 18.0, 33.0, 23.0, 28.0, 26.0, 29.0, 23.0, 36.0, 54.0, 24.0, 47.0, 34.0, 23.0, 36.0, 32.0, 30.0, 22.0, 23.0, 44.0, 23.0, 40.5, 50.0, 23.0, 39.0, 23.0, 2.0, 23.0, 17.0, 23.0, 30.0, 7.0, 45.0, 30.0, 23.0, 22.0, 36.0, 9.0, 11.0, 32.0, 50.0, 64.0, 19.0, 23.0, 33.0, 8.0, 17.0, 27.0, 23.0, 22.0, 22.0, 62.0, 48.0, 23.0, 39.0, 36.0, 23.0, 40.0, 28.0, 23.0, 23.0, 24.0, 19.0, 29.0, 23.0, 32.0, 62.0, 53.0, 36.0, 23.0, 16.0, 19.0, 34.0, 39.0, 23.0, 32.0, 25.0, 39.0, 54.0, 36.0, 23.0, 18.0, 47.0, 60.0, 22.0, 23.0, 35.0, 52.0, 47.0, 23.0, 37.0, 36.0, 23.0, 49.0, 23.0, 49.0, 24.0, 23.0, 23.0, 44.0, 35.0, 36.0, 30.0, 27.0, 22.0, 40.0, 39.0, 23.0, 23.0, 23.0, 35.0, 24.0, 34.0, 26.0, 4.0, 26.0, 27.0, 42.0, 20.0, 21.0, 21.0, 61.0, 57.0, 21.0, 26.0, 23.0, 80.0, 51.0, 32.0, 23.0, 9.0, 28.0, 32.0, 31.0, 41.0, 23.0, 20.0, 24.0, 2.0, 23.0, 0.75, 48.0, 19.0, 56.0, 23.0, 23.0, 23.0, 18.0, 21.0, 23.0, 18.0, 24.0, 23.0, 32.0, 23.0, 58.0, 50.0, 40.0, 47.0, 36.0, 20.0, 32.0, 25.0, 23.0, 43.0, 23.0, 40.0, 31.0, 70.0, 31.0, 23.0, 18.0, 24.5, 18.0, 43.0, 36.0, 23.0, 27.0, 20.0, 14.0, 60.0, 25.0, 14.0, 19.0, 18.0, 15.0, 31.0, 4.0, 23.0, 25.0, 60.0, 52.0, 44.0, 23.0, 49.0, 42.0, 18.0, 35.0, 18.0, 25.0, 26.0, 39.0, 45.0, 42.0, 22.0, 23.0, 24.0, 23.0, 48.0, 29.0, 52.0, 19.0, 38.0, 27.0, 23.0, 33.0, 6.0, 17.0, 34.0, 50.0, 27.0, 20.0, 30.0, 23.0, 25.0, 25.0, 29.0, 11.0, 23.0, 23.0, 23.0, 28.5, 48.0, 35.0, 23.0, 23.0, 23.0, 36.0, 21.0, 24.0, 31.0, 70.0, 16.0, 30.0, 19.0, 31.0, 4.0, 6.0, 33.0, 23.0, 48.0, 0.67000000000000004, 28.0, 18.0, 34.0, 33.0, 23.0, 41.0, 20.0, 36.0, 16.0, 51.0, 23.0, 30.5, 23.0, 32.0, 24.0, 48.0, 57.0, 23.0, 54.0, 18.0, 23.0, 5.0, 23.0, 43.0, 13.0, 17.0, 29.0, 23.0, 25.0, 25.0, 18.0, 8.0, 1.0, 46.0, 23.0, 16.0, 23.0, 23.0, 25.0, 39.0, 49.0, 31.0, 30.0, 30.0, 34.0, 31.0, 11.0, 0.41999999999999998, 27.0, 31.0, 39.0, 18.0, 39.0, 33.0, 26.0, 39.0, 35.0, 6.0, 30.5, 23.0, 23.0, 31.0, 43.0, 10.0, 52.0, 27.0, 38.0, 27.0, 2.0, 23.0, 23.0, 1.0, 23.0, 62.0, 15.0, 0.82999999999999996, 23.0, 23.0, 18.0, 39.0, 21.0, 23.0, 32.0, 23.0, 20.0, 16.0, 30.0, 34.5, 17.0, 42.0, 23.0, 35.0, 28.0, 23.0, 4.0, 74.0, 9.0, 16.0, 44.0, 18.0, 45.0, 51.0, 24.0, 23.0, 41.0, 21.0, 48.0, 23.0, 24.0, 42.0, 27.0, 31.0, 23.0, 4.0, 26.0, 47.0, 33.0, 47.0, 28.0, 15.0, 20.0, 19.0, 23.0, 56.0, 25.0, 33.0, 22.0, 28.0, 25.0, 39.0, 27.0, 19.0, 23.0, 26.0, 32.0]
name = [&#39;Braund, Mr. Owen Harris&#39;, &#39;Cumings, Mrs. John Bradley (Florence Briggs Thayer)&#39;, &#39;Heikkinen, Miss. Laina&#39;, &#39;Futrelle, Mrs. Jacques Heath (Lily May Peel)&#39;, &#39;Allen, Mr. William Henry&#39;, &#39;Moran, Mr. James&#39;, &#39;McCarthy, Mr. Timothy J&#39;, &#39;Palsson, Master. Gosta Leonard&#39;, &#39;Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)&#39;, &#39;Nasser, Mrs. Nicholas (Adele Achem)&#39;, &#39;Sandstrom, Miss. Marguerite Rut&#39;, &#39;Bonnell, Miss. Elizabeth&#39;, &#39;Saundercock, Mr. William Henry&#39;, &#39;Andersson, Mr. Anders Johan&#39;, &#39;Vestrom, Miss. Hulda Amanda Adolfina&#39;, &#39;Hewlett, Mrs. (Mary D Kingcome) &#39;, &#39;Rice, Master. Eugene&#39;, &#39;Williams, Mr. Charles Eugene&#39;, &#39;Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)&#39;, &#39;Masselmani, Mrs. Fatima&#39;, &#39;Fynney, Mr. Joseph J&#39;, &#39;Beesley, Mr. Lawrence&#39;, &#39;McGowan, Miss. Anna &amp;quot;Annie&amp;quot;&#39;, &#39;Sloper, Mr. William Thompson&#39;, &#39;Palsson, Miss. Torborg Danira&#39;, &#39;Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)&#39;, &#39;Emir, Mr. Farred Chehab&#39;, &#39;Fortune, Mr. Charles Alexander&#39;, &#39;O\&#39;Dwyer, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;, &#39;Todoroff, Mr. Lalio&#39;, &#39;Uruchurtu, Don. Manuel E&#39;, &#39;Spencer, Mrs. William Augustus (Marie Eugenie)&#39;, &#39;Glynn, Miss. Mary Agatha&#39;, &#39;Wheadon, Mr. Edward H&#39;, &#39;Meyer, Mr. Edgar Joseph&#39;, &#39;Holverson, Mr. Alexander Oskar&#39;, &#39;Mamee, Mr. Hanna&#39;, &#39;Cann, Mr. Ernest Charles&#39;, &#39;Vander Planke, Miss. Augusta Maria&#39;, &#39;Nicola-Yarred, Miss. Jamila&#39;, &#39;Ahlin, Mrs. Johan (Johanna Persdotter Larsson)&#39;, &#39;Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott)&#39;, &#39;Kraeff, Mr. Theodor&#39;, &#39;Laroche, Miss. Simonne Marie Anne Andree&#39;, &#39;Devaney, Miss. Margaret Delia&#39;, &#39;Rogers, Mr. William John&#39;, &#39;Lennon, Mr. Denis&#39;, &amp;quot;O&#39;Driscoll, Miss. Bridget&amp;quot;, &#39;Samaan, Mr. Youssef&#39;, &#39;Arnold-Franchi, Mrs. Josef (Josefine Franchi)&#39;, &#39;Panula, Master. Juha Niilo&#39;, &#39;Nosworthy, Mr. Richard Cater&#39;, &#39;Harper, Mrs. Henry Sleeper (Myna Haxtun)&#39;, &#39;Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson)&#39;, &#39;Ostby, Mr. Engelhart Cornelius&#39;, &#39;Woolner, Mr. Hugh&#39;, &#39;Rugg, Miss. Emily&#39;, &#39;Novel, Mr. Mansouer&#39;, &#39;West, Miss. Constance Mirium&#39;, &#39;Goodwin, Master. William Frederick&#39;, &#39;Sirayanian, Mr. Orsen&#39;, &#39;Icard, Miss. Amelie&#39;, &#39;Harris, Mr. Henry Birkhardt&#39;, &#39;Skoog, Master. Harald&#39;, &#39;Stewart, Mr. Albert A&#39;, &#39;Moubarek, Master. Gerios&#39;, &#39;Nye, Mrs. (Elizabeth Ramell)&#39;, &#39;Crease, Mr. Ernest James&#39;, &#39;Andersson, Miss. Erna Alexandra&#39;, &#39;Kink, Mr. Vincenz&#39;, &#39;Jenkin, Mr. Stephen Curnow&#39;, &#39;Goodwin, Miss. Lillian Amy&#39;, &#39;Hood, Mr. Ambrose Jr&#39;, &#39;Chronopoulos, Mr. Apostolos&#39;, &#39;Bing, Mr. Lee&#39;, &#39;Moen, Mr. Sigurd Hansen&#39;, &#39;Staneff, Mr. Ivan&#39;, &#39;Moutal, Mr. Rahamin Haim&#39;, &#39;Caldwell, Master. Alden Gates&#39;, &#39;Dowdell, Miss. Elizabeth&#39;, &#39;Waelens, Mr. Achille&#39;, &#39;Sheerlinck, Mr. Jan Baptist&#39;, &#39;McDermott, Miss. Brigdet Delia&#39;, &#39;Carrau, Mr. Francisco M&#39;, &#39;Ilett, Miss. Bertha&#39;, &#39;Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson)&#39;, &#39;Ford, Mr. William Neal&#39;, &#39;Slocovski, Mr. Selman Francis&#39;, &#39;Fortune, Miss. Mabel Helen&#39;, &#39;Celotti, Mr. Francesco&#39;, &#39;Christmann, Mr. Emil&#39;, &#39;Andreasson, Mr. Paul Edvin&#39;, &#39;Chaffee, Mr. Herbert Fuller&#39;, &#39;Dean, Mr. Bertram Frank&#39;, &#39;Coxon, Mr. Daniel&#39;, &#39;Shorney, Mr. Charles Joseph&#39;, &#39;Goldschmidt, Mr. George B&#39;, &#39;Greenfield, Mr. William Bertram&#39;, &#39;Doling, Mrs. John T (Ada Julia Bone)&#39;, &#39;Kantor, Mr. Sinai&#39;, &#39;Petranec, Miss. Matilda&#39;, &#39;Petroff, Mr. Pastcho (&amp;quot;Pentcho&amp;quot;)&#39;, &#39;White, Mr. Richard Frasar&#39;, &#39;Johansson, Mr. Gustaf Joel&#39;, &#39;Gustafsson, Mr. Anders Vilhelm&#39;, &#39;Mionoff, Mr. Stoytcho&#39;, &#39;Salkjelsvik, Miss. Anna Kristine&#39;, &#39;Moss, Mr. Albert Johan&#39;, &#39;Rekic, Mr. Tido&#39;, &#39;Moran, Miss. Bertha&#39;, &#39;Porter, Mr. Walter Chamberlain&#39;, &#39;Zabour, Miss. Hileni&#39;, &#39;Barton, Mr. David John&#39;, &#39;Jussila, Miss. Katriina&#39;, &#39;Attalah, Miss. Malake&#39;, &#39;Pekoniemi, Mr. Edvard&#39;, &#39;Connors, Mr. Patrick&#39;, &#39;Turpin, Mr. William John Robert&#39;, &#39;Baxter, Mr. Quigg Edmond&#39;, &#39;Andersson, Miss. Ellis Anna Maria&#39;, &#39;Hickman, Mr. Stanley George&#39;, &#39;Moore, Mr. Leonard Charles&#39;, &#39;Nasser, Mr. Nicholas&#39;, &#39;Webber, Miss. Susan&#39;, &#39;White, Mr. Percival Wayland&#39;, &#39;Nicola-Yarred, Master. Elias&#39;, &#39;McMahon, Mr. Martin&#39;, &#39;Madsen, Mr. Fridtjof Arne&#39;, &#39;Peter, Miss. Anna&#39;, &#39;Ekstrom, Mr. Johan&#39;, &#39;Drazenoic, Mr. Jozef&#39;, &#39;Coelho, Mr. Domingos Fernandeo&#39;, &#39;Robins, Mrs. Alexander A (Grace Charity Laury)&#39;, &#39;Weisz, Mrs. Leopold (Mathilde Francoise Pede)&#39;, &#39;Sobey, Mr. Samuel James Hayden&#39;, &#39;Richard, Mr. Emile&#39;, &#39;Newsom, Miss. Helen Monypeny&#39;, &#39;Futrelle, Mr. Jacques Heath&#39;, &#39;Osen, Mr. Olaf Elon&#39;, &#39;Giglio, Mr. Victor&#39;, &#39;Boulos, Mrs. Joseph (Sultana)&#39;, &#39;Nysten, Miss. Anna Sofia&#39;, &#39;Hakkarainen, Mrs. Pekka Pietari (Elin Matilda Dolck)&#39;, &#39;Burke, Mr. Jeremiah&#39;, &#39;Andrew, Mr. Edgardo Samuel&#39;, &#39;Nicholls, Mr. Joseph Charles&#39;, &#39;Andersson, Mr. August Edvard (&amp;quot;Wennerstrom&amp;quot;)&#39;, &#39;Ford, Miss. Robina Maggie &amp;quot;Ruby&amp;quot;&#39;, &#39;Navratil, Mr. Michel (&amp;quot;Louis M Hoffman&amp;quot;)&#39;, &#39;Byles, Rev. Thomas Roussel Davids&#39;, &#39;Bateman, Rev. Robert James&#39;, &#39;Pears, Mrs. Thomas (Edith Wearne)&#39;, &#39;Meo, Mr. Alfonzo&#39;, &#39;van Billiard, Mr. Austin Blyler&#39;, &#39;Olsen, Mr. Ole Martin&#39;, &#39;Williams, Mr. Charles Duane&#39;, &#39;Gilnagh, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;, &#39;Corn, Mr. Harry&#39;, &#39;Smiljanic, Mr. Mile&#39;, &#39;Sage, Master. Thomas Henry&#39;, &#39;Cribb, Mr. John Hatfield&#39;, &#39;Watt, Mrs. James (Elizabeth &amp;quot;Bessie&amp;quot; Inglis Milne)&#39;, &#39;Bengtsson, Mr. John Viktor&#39;, &#39;Calic, Mr. Jovo&#39;, &#39;Panula, Master. Eino Viljami&#39;, &#39;Goldsmith, Master. Frank John William &amp;quot;Frankie&amp;quot;&#39;, &#39;Chibnall, Mrs. (Edith Martha Bowerman)&#39;, &#39;Skoog, Mrs. William (Anna Bernhardina Karlsson)&#39;, &#39;Baumann, Mr. John D&#39;, &#39;Ling, Mr. Lee&#39;, &#39;Van der hoef, Mr. Wyckoff&#39;, &#39;Rice, Master. Arthur&#39;, &#39;Johnson, Miss. Eleanor Ileen&#39;, &#39;Sivola, Mr. Antti Wilhelm&#39;, &#39;Smith, Mr. James Clinch&#39;, &#39;Klasen, Mr. Klas Albin&#39;, &#39;Lefebre, Master. Henry Forbes&#39;, &#39;Isham, Miss. Ann Elizabeth&#39;, &#39;Hale, Mr. Reginald&#39;, &#39;Leonard, Mr. Lionel&#39;, &#39;Sage, Miss. Constance Gladys&#39;, &#39;Pernot, Mr. Rene&#39;, &#39;Asplund, Master. Clarence Gustaf Hugo&#39;, &#39;Becker, Master. Richard F&#39;, &#39;Kink-Heilmann, Miss. Luise Gretchen&#39;, &#39;Rood, Mr. Hugh Roscoe&#39;, &#39;O\&#39;Brien, Mrs. Thomas (Johanna &amp;quot;Hannah&amp;quot; Godfrey)&#39;, &#39;Romaine, Mr. Charles Hallace (&amp;quot;Mr C Rolmane&amp;quot;)&#39;, &#39;Bourke, Mr. John&#39;, &#39;Turcin, Mr. Stjepan&#39;, &#39;Pinsky, Mrs. (Rosa)&#39;, &#39;Carbines, Mr. William&#39;, &#39;Andersen-Jensen, Miss. Carla Christine Nielsine&#39;, &#39;Navratil, Master. Michel M&#39;, &#39;Brown, Mrs. James Joseph (Margaret Tobin)&#39;, &#39;Lurette, Miss. Elise&#39;, &#39;Mernagh, Mr. Robert&#39;, &#39;Olsen, Mr. Karl Siegwart Andreas&#39;, &#39;Madigan, Miss. Margaret &amp;quot;Maggie&amp;quot;&#39;, &#39;Yrois, Miss. Henriette (&amp;quot;Mrs Harbeck&amp;quot;)&#39;, &#39;Vande Walle, Mr. Nestor Cyriel&#39;, &#39;Sage, Mr. Frederick&#39;, &#39;Johanson, Mr. Jakob Alfred&#39;, &#39;Youseff, Mr. Gerious&#39;, &#39;Cohen, Mr. Gurshon &amp;quot;Gus&amp;quot;&#39;, &#39;Strom, Miss. Telma Matilda&#39;, &#39;Backstrom, Mr. Karl Alfred&#39;, &#39;Albimona, Mr. Nassef Cassem&#39;, &#39;Carr, Miss. Helen &amp;quot;Ellen&amp;quot;&#39;, &#39;Blank, Mr. Henry&#39;, &#39;Ali, Mr. Ahmed&#39;, &#39;Cameron, Miss. Clear Annie&#39;, &#39;Perkin, Mr. John Henry&#39;, &#39;Givard, Mr. Hans Kristensen&#39;, &#39;Kiernan, Mr. Philip&#39;, &#39;Newell, Miss. Madeleine&#39;, &#39;Honkanen, Miss. Eliina&#39;, &#39;Jacobsohn, Mr. Sidney Samuel&#39;, &#39;Bazzani, Miss. Albina&#39;, &#39;Harris, Mr. Walter&#39;, &#39;Sunderland, Mr. Victor Francis&#39;, &#39;Bracken, Mr. James H&#39;, &#39;Green, Mr. George Henry&#39;, &#39;Nenkoff, Mr. Christo&#39;, &#39;Hoyt, Mr. Frederick Maxfield&#39;, &#39;Berglund, Mr. Karl Ivar Sven&#39;, &#39;Mellors, Mr. William John&#39;, &#39;Lovell, Mr. John Hall (&amp;quot;Henry&amp;quot;)&#39;, &#39;Fahlstrom, Mr. Arne Jonas&#39;, &#39;Lefebre, Miss. Mathilde&#39;, &#39;Harris, Mrs. Henry Birkhardt (Irene Wallach)&#39;, &#39;Larsson, Mr. Bengt Edvin&#39;, &#39;Sjostedt, Mr. Ernst Adolf&#39;, &#39;Asplund, Miss. Lillian Gertrud&#39;, &#39;Leyson, Mr. Robert William Norman&#39;, &#39;Harknett, Miss. Alice Phoebe&#39;, &#39;Hold, Mr. Stephen&#39;, &#39;Collyer, Miss. Marjorie &amp;quot;Lottie&amp;quot;&#39;, &#39;Pengelly, Mr. Frederick William&#39;, &#39;Hunt, Mr. George Henry&#39;, &#39;Zabour, Miss. Thamine&#39;, &#39;Murphy, Miss. Katherine &amp;quot;Kate&amp;quot;&#39;, &#39;Coleridge, Mr. Reginald Charles&#39;, &#39;Maenpaa, Mr. Matti Alexanteri&#39;, &#39;Attalah, Mr. Sleiman&#39;, &#39;Minahan, Dr. William Edward&#39;, &#39;Lindahl, Miss. Agda Thorilda Viktoria&#39;, &#39;Hamalainen, Mrs. William (Anna)&#39;, &#39;Beckwith, Mr. Richard Leonard&#39;, &#39;Carter, Rev. Ernest Courtenay&#39;, &#39;Reed, Mr. James George&#39;, &#39;Strom, Mrs. Wilhelm (Elna Matilda Persson)&#39;, &#39;Stead, Mr. William Thomas&#39;, &#39;Lobb, Mr. William Arthur&#39;, &#39;Rosblom, Mrs. Viktor (Helena Wilhelmina)&#39;, &#39;Touma, Mrs. Darwis (Hanne Youssef Razi)&#39;, &#39;Thorne, Mrs. Gertrude Maybelle&#39;, &#39;Cherry, Miss. Gladys&#39;, &#39;Ward, Miss. Anna&#39;, &#39;Parrish, Mrs. (Lutie Davis)&#39;, &#39;Smith, Mr. Thomas&#39;, &#39;Asplund, Master. Edvin Rojj Felix&#39;, &#39;Taussig, Mr. Emil&#39;, &#39;Harrison, Mr. William&#39;, &#39;Henry, Miss. Delia&#39;, &#39;Reeves, Mr. David&#39;, &#39;Panula, Mr. Ernesti Arvid&#39;, &#39;Persson, Mr. Ernst Ulrik&#39;, &#39;Graham, Mrs. William Thompson (Edith Junkins)&#39;, &#39;Bissette, Miss. Amelia&#39;, &#39;Cairns, Mr. Alexander&#39;, &#39;Tornquist, Mr. William Henry&#39;, &#39;Mellinger, Mrs. (Elizabeth Anne Maidment)&#39;, &#39;Natsch, Mr. Charles H&#39;, &#39;Healy, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;, &#39;Andrews, Miss. Kornelia Theodosia&#39;, &#39;Lindblom, Miss. Augusta Charlotta&#39;, &#39;Parkes, Mr. Francis &amp;quot;Frank&amp;quot;&#39;, &#39;Rice, Master. Eric&#39;, &#39;Abbott, Mrs. Stanton (Rosa Hunt)&#39;, &#39;Duane, Mr. Frank&#39;, &#39;Olsson, Mr. Nils Johan Goransson&#39;, &#39;de Pelsmaeker, Mr. Alfons&#39;, &#39;Dorking, Mr. Edward Arthur&#39;, &#39;Smith, Mr. Richard William&#39;, &#39;Stankovic, Mr. Ivan&#39;, &#39;de Mulder, Mr. Theodore&#39;, &#39;Naidenoff, Mr. Penko&#39;, &#39;Hosono, Mr. Masabumi&#39;, &#39;Connolly, Miss. Kate&#39;, &#39;Barber, Miss. Ellen &amp;quot;Nellie&amp;quot;&#39;, &#39;Bishop, Mrs. Dickinson H (Helen Walton)&#39;, &#39;Levy, Mr. Rene Jacques&#39;, &#39;Haas, Miss. Aloisia&#39;, &#39;Mineff, Mr. Ivan&#39;, &#39;Lewy, Mr. Ervin G&#39;, &#39;Hanna, Mr. Mansour&#39;, &#39;Allison, Miss. Helen Loraine&#39;, &#39;Saalfeld, Mr. Adolphe&#39;, &#39;Baxter, Mrs. James (Helene DeLaudeniere Chaput)&#39;, &#39;Kelly, Miss. Anna Katherine &amp;quot;Annie Kate&amp;quot;&#39;, &#39;McCoy, Mr. Bernard&#39;, &#39;Johnson, Mr. William Cahoone Jr&#39;, &#39;Keane, Miss. Nora A&#39;, &#39;Williams, Mr. Howard Hugh &amp;quot;Harry&amp;quot;&#39;, &#39;Allison, Master. Hudson Trevor&#39;, &#39;Fleming, Miss. Margaret&#39;, &#39;Penasco y Castellana, Mrs. Victor de Satode (Maria Josefa Perez de Soto y Vallejo)&#39;, &#39;Abelson, Mr. Samuel&#39;, &#39;Francatelli, Miss. Laura Mabel&#39;, &#39;Hays, Miss. Margaret Bechstein&#39;, &#39;Ryerson, Miss. Emily Borie&#39;, &#39;Lahtinen, Mrs. William (Anna Sylfven)&#39;, &#39;Hendekovic, Mr. Ignjac&#39;, &#39;Hart, Mr. Benjamin&#39;, &#39;Nilsson, Miss. Helmina Josefina&#39;, &#39;Kantor, Mrs. Sinai (Miriam Sternin)&#39;, &#39;Moraweck, Dr. Ernest&#39;, &#39;Wick, Miss. Mary Natalie&#39;, &#39;Spedden, Mrs. Frederic Oakley (Margaretta Corning Stone)&#39;, &#39;Dennis, Mr. Samuel&#39;, &#39;Danoff, Mr. Yoto&#39;, &#39;Slayter, Miss. Hilda Mary&#39;, &#39;Caldwell, Mrs. Albert Francis (Sylvia Mae Harbaugh)&#39;, &#39;Sage, Mr. George John Jr&#39;, &#39;Young, Miss. Marie Grice&#39;, &#39;Nysveen, Mr. Johan Hansen&#39;, &#39;Ball, Mrs. (Ada E Hall)&#39;, &#39;Goldsmith, Mrs. Frank John (Emily Alice Brown)&#39;, &#39;Hippach, Miss. Jean Gertrude&#39;, &#39;McCoy, Miss. Agnes&#39;, &#39;Partner, Mr. Austen&#39;, &#39;Graham, Mr. George Edward&#39;, &#39;Vander Planke, Mr. Leo Edmondus&#39;, &#39;Frauenthal, Mrs. Henry William (Clara Heinsheimer)&#39;, &#39;Denkoff, Mr. Mitto&#39;, &#39;Pears, Mr. Thomas Clinton&#39;, &#39;Burns, Miss. Elizabeth Margaret&#39;, &#39;Dahl, Mr. Karl Edwart&#39;, &#39;Blackwell, Mr. Stephen Weart&#39;, &#39;Navratil, Master. Edmond Roger&#39;, &#39;Fortune, Miss. Alice Elizabeth&#39;, &#39;Collander, Mr. Erik Gustaf&#39;, &#39;Sedgwick, Mr. Charles Frederick Waddington&#39;, &#39;Fox, Mr. Stanley Hubert&#39;, &#39;Brown, Miss. Amelia &amp;quot;Mildred&amp;quot;&#39;, &#39;Smith, Miss. Marion Elsie&#39;, &#39;Davison, Mrs. Thomas Henry (Mary E Finck)&#39;, &#39;Coutts, Master. William Loch &amp;quot;William&amp;quot;&#39;, &#39;Dimic, Mr. Jovan&#39;, &#39;Odahl, Mr. Nils Martin&#39;, &#39;Williams-Lambert, Mr. Fletcher Fellows&#39;, &#39;Elias, Mr. Tannous&#39;, &#39;Arnold-Franchi, Mr. Josef&#39;, &#39;Yousif, Mr. Wazli&#39;, &#39;Vanden Steen, Mr. Leo Peter&#39;, &#39;Bowerman, Miss. Elsie Edith&#39;, &#39;Funk, Miss. Annie Clemmer&#39;, &#39;McGovern, Miss. Mary&#39;, &#39;Mockler, Miss. Helen Mary &amp;quot;Ellie&amp;quot;&#39;, &#39;Skoog, Mr. Wilhelm&#39;, &#39;del Carlo, Mr. Sebastiano&#39;, &#39;Barbara, Mrs. (Catherine David)&#39;, &#39;Asim, Mr. Adola&#39;, &amp;quot;O&#39;Brien, Mr. Thomas&amp;quot;, &#39;Adahl, Mr. Mauritz Nils Martin&#39;, &#39;Warren, Mrs. Frank Manley (Anna Sophia Atkinson)&#39;, &#39;Moussa, Mrs. (Mantoura Boulos)&#39;, &#39;Jermyn, Miss. Annie&#39;, &#39;Aubart, Mme. Leontine Pauline&#39;, &#39;Harder, Mr. George Achilles&#39;, &#39;Wiklund, Mr. Jakob Alfred&#39;, &#39;Beavan, Mr. William Thomas&#39;, &#39;Ringhini, Mr. Sante&#39;, &#39;Palsson, Miss. Stina Viola&#39;, &#39;Meyer, Mrs. Edgar Joseph (Leila Saks)&#39;, &#39;Landergren, Miss. Aurora Adelia&#39;, &#39;Widener, Mr. Harry Elkins&#39;, &#39;Betros, Mr. Tannous&#39;, &#39;Gustafsson, Mr. Karl Gideon&#39;, &#39;Bidois, Miss. Rosalie&#39;, &#39;Nakid, Miss. Maria (&amp;quot;Mary&amp;quot;)&#39;, &#39;Tikkanen, Mr. Juho&#39;, &#39;Holverson, Mrs. Alexander Oskar (Mary Aline Towner)&#39;, &#39;Plotcharsky, Mr. Vasil&#39;, &#39;Davies, Mr. Charles Henry&#39;, &#39;Goodwin, Master. Sidney Leonard&#39;, &#39;Buss, Miss. Kate&#39;, &#39;Sadlier, Mr. Matthew&#39;, &#39;Lehmann, Miss. Bertha&#39;, &#39;Carter, Mr. William Ernest&#39;, &#39;Jansson, Mr. Carl Olof&#39;, &#39;Gustafsson, Mr. Johan Birger&#39;, &#39;Newell, Miss. Marjorie&#39;, &#39;Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengtsson)&#39;, &#39;Johansson, Mr. Erik&#39;, &#39;Olsson, Miss. Elina&#39;, &#39;McKane, Mr. Peter David&#39;, &#39;Pain, Dr. Alfred&#39;, &#39;Trout, Mrs. William H (Jessie L)&#39;, &#39;Niskanen, Mr. Juha&#39;, &#39;Adams, Mr. John&#39;, &#39;Jussila, Miss. Mari Aina&#39;, &#39;Hakkarainen, Mr. Pekka Pietari&#39;, &#39;Oreskovic, Miss. Marija&#39;, &#39;Gale, Mr. Shadrach&#39;, &#39;Widegren, Mr. Carl/Charles Peter&#39;, &#39;Richards, Master. William Rowe&#39;, &#39;Birkeland, Mr. Hans Martin Monsen&#39;, &#39;Lefebre, Miss. Ida&#39;, &#39;Sdycoff, Mr. Todor&#39;, &#39;Hart, Mr. Henry&#39;, &#39;Minahan, Miss. Daisy E&#39;, &#39;Cunningham, Mr. Alfred Fleming&#39;, &#39;Sundman, Mr. Johan Julian&#39;, &#39;Meek, Mrs. Thomas (Annie Louise Rowley)&#39;, &#39;Drew, Mrs. James Vivian (Lulu Thorne Christian)&#39;, &#39;Silven, Miss. Lyyli Karoliina&#39;, &#39;Matthews, Mr. William John&#39;, &#39;Van Impe, Miss. Catharina&#39;, &#39;Gheorgheff, Mr. Stanio&#39;, &#39;Charters, Mr. David&#39;, &#39;Zimmerman, Mr. Leo&#39;, &#39;Danbom, Mrs. Ernst Gilbert (Anna Sigrid Maria Brogren)&#39;, &#39;Rosblom, Mr. Viktor Richard&#39;, &#39;Wiseman, Mr. Phillippe&#39;, &#39;Clarke, Mrs. Charles V (Ada Maria Winfield)&#39;, &#39;Phillips, Miss. Kate Florence (&amp;quot;Mrs Kate Louise Phillips Marshall&amp;quot;)&#39;, &#39;Flynn, Mr. James&#39;, &#39;Pickard, Mr. Berk (Berk Trembisky)&#39;, &#39;Bjornstrom-Steffansson, Mr. Mauritz Hakan&#39;, &#39;Thorneycroft, Mrs. Percival (Florence Kate White)&#39;, &#39;Louch, Mrs. Charles Alexander (Alice Adelaide Slow)&#39;, &#39;Kallio, Mr. Nikolai Erland&#39;, &#39;Silvey, Mr. William Baird&#39;, &#39;Carter, Miss. Lucile Polk&#39;, &#39;Ford, Miss. Doolina Margaret &amp;quot;Daisy&amp;quot;&#39;, &#39;Richards, Mrs. Sidney (Emily Hocking)&#39;, &#39;Fortune, Mr. Mark&#39;, &#39;Kvillner, Mr. Johan Henrik Johannesson&#39;, &#39;Hart, Mrs. Benjamin (Esther Ada Bloomfield)&#39;, &#39;Hampe, Mr. Leon&#39;, &#39;Petterson, Mr. Johan Emil&#39;, &#39;Reynaldo, Ms. Encarnacion&#39;, &#39;Johannesen-Bratthammer, Mr. Bernt&#39;, &#39;Dodge, Master. Washington&#39;, &#39;Mellinger, Miss. Madeleine Violet&#39;, &#39;Seward, Mr. Frederic Kimber&#39;, &#39;Baclini, Miss. Marie Catherine&#39;, &#39;Peuchen, Major. Arthur Godfrey&#39;, &#39;West, Mr. Edwy Arthur&#39;, &#39;Hagland, Mr. Ingvald Olai Olsen&#39;, &#39;Foreman, Mr. Benjamin Laventall&#39;, &#39;Goldenberg, Mr. Samuel L&#39;, &#39;Peduzzi, Mr. Joseph&#39;, &#39;Jalsevac, Mr. Ivan&#39;, &#39;Millet, Mr. Francis Davis&#39;, &#39;Kenyon, Mrs. Frederick R (Marion)&#39;, &#39;Toomey, Miss. Ellen&#39;, &amp;quot;O&#39;Connor, Mr. Maurice&amp;quot;, &#39;Anderson, Mr. Harry&#39;, &#39;Morley, Mr. William&#39;, &#39;Gee, Mr. Arthur H&#39;, &#39;Milling, Mr. Jacob Christian&#39;, &#39;Maisner, Mr. Simon&#39;, &#39;Goncalves, Mr. Manuel Estanslas&#39;, &#39;Campbell, Mr. William&#39;, &#39;Smart, Mr. John Montgomery&#39;, &#39;Scanlan, Mr. James&#39;, &#39;Baclini, Miss. Helene Barbara&#39;, &#39;Keefe, Mr. Arthur&#39;, &#39;Cacic, Mr. Luka&#39;, &#39;West, Mrs. Edwy Arthur (Ada Mary Worth)&#39;, &#39;Jerwan, Mrs. Amin S (Marie Marthe Thuillard)&#39;, &#39;Strandberg, Miss. Ida Sofia&#39;, &#39;Clifford, Mr. George Quincy&#39;, &#39;Renouf, Mr. Peter Henry&#39;, &#39;Braund, Mr. Lewis Richard&#39;, &#39;Karlsson, Mr. Nils August&#39;, &#39;Hirvonen, Miss. Hildur E&#39;, &#39;Goodwin, Master. Harold Victor&#39;, &#39;Frost, Mr. Anthony Wood &amp;quot;Archie&amp;quot;&#39;, &#39;Rouse, Mr. Richard Henry&#39;, &#39;Turkula, Mrs. (Hedwig)&#39;, &#39;Bishop, Mr. Dickinson H&#39;, &#39;Lefebre, Miss. Jeannie&#39;, &#39;Hoyt, Mrs. Frederick Maxfield (Jane Anne Forby)&#39;, &#39;Kent, Mr. Edward Austin&#39;, &#39;Somerton, Mr. Francis William&#39;, &#39;Coutts, Master. Eden Leslie &amp;quot;Neville&amp;quot;&#39;, &#39;Hagland, Mr. Konrad Mathias Reiersen&#39;, &#39;Windelov, Mr. Einar&#39;, &#39;Molson, Mr. Harry Markland&#39;, &#39;Artagaveytia, Mr. Ramon&#39;, &#39;Stanley, Mr. Edward Roland&#39;, &#39;Yousseff, Mr. Gerious&#39;, &#39;Eustis, Miss. Elizabeth Mussey&#39;, &#39;Shellard, Mr. Frederick William&#39;, &#39;Allison, Mrs. Hudson J C (Bessie Waldo Daniels)&#39;, &#39;Svensson, Mr. Olof&#39;, &#39;Calic, Mr. Petar&#39;, &#39;Canavan, Miss. Mary&#39;, &amp;quot;O&#39;Sullivan, Miss. Bridget Mary&amp;quot;, &#39;Laitinen, Miss. Kristina Sofia&#39;, &#39;Maioni, Miss. Roberta&#39;, &#39;Penasco y Castellana, Mr. Victor de Satode&#39;, &#39;Quick, Mrs. Frederick Charles (Jane Richards)&#39;, &#39;Bradley, Mr. George (&amp;quot;George Arthur Brayton&amp;quot;)&#39;, &#39;Olsen, Mr. Henry Margido&#39;, &#39;Lang, Mr. Fang&#39;, &#39;Daly, Mr. Eugene Patrick&#39;, &#39;Webber, Mr. James&#39;, &#39;McGough, Mr. James Robert&#39;, &#39;Rothschild, Mrs. Martin (Elizabeth L. Barrett)&#39;, &#39;Coleff, Mr. Satio&#39;, &#39;Walker, Mr. William Anderson&#39;, &#39;Lemore, Mrs. (Amelia Milley)&#39;, &#39;Ryan, Mr. Patrick&#39;, &#39;Angle, Mrs. William A (Florence &amp;quot;Mary&amp;quot; Agnes Hughes)&#39;, &#39;Pavlovic, Mr. Stefo&#39;, &#39;Perreault, Miss. Anne&#39;, &#39;Vovk, Mr. Janko&#39;, &#39;Lahoud, Mr. Sarkis&#39;, &#39;Hippach, Mrs. Louis Albert (Ida Sophia Fischer)&#39;, &#39;Kassem, Mr. Fared&#39;, &#39;Farrell, Mr. James&#39;, &#39;Ridsdale, Miss. Lucy&#39;, &#39;Farthing, Mr. John&#39;, &#39;Salonen, Mr. Johan Werner&#39;, &#39;Hocking, Mr. Richard George&#39;, &#39;Quick, Miss. Phyllis May&#39;, &#39;Toufik, Mr. Nakli&#39;, &#39;Elias, Mr. Joseph Jr&#39;, &#39;Peter, Mrs. Catherine (Catherine Rizk)&#39;, &#39;Cacic, Miss. Marija&#39;, &#39;Hart, Miss. Eva Miriam&#39;, &#39;Butt, Major. Archibald Willingham&#39;, &#39;LeRoy, Miss. Bertha&#39;, &#39;Risien, Mr. Samuel Beard&#39;, &#39;Frolicher, Miss. Hedwig Margaritha&#39;, &#39;Crosby, Miss. Harriet R&#39;, &#39;Andersson, Miss. Ingeborg Constanzia&#39;, &#39;Andersson, Miss. Sigrid Elisabeth&#39;, &#39;Beane, Mr. Edward&#39;, &#39;Douglas, Mr. Walter Donald&#39;, &#39;Nicholson, Mr. Arthur Ernest&#39;, &#39;Beane, Mrs. Edward (Ethel Clarke)&#39;, &#39;Padro y Manent, Mr. Julian&#39;, &#39;Goldsmith, Mr. Frank John&#39;, &#39;Davies, Master. John Morgan Jr&#39;, &#39;Thayer, Mr. John Borland Jr&#39;, &#39;Sharp, Mr. Percival James R&#39;, &amp;quot;O&#39;Brien, Mr. Timothy&amp;quot;, &#39;Leeni, Mr. Fahim (&amp;quot;Philip Zenni&amp;quot;)&#39;, &#39;Ohman, Miss. Velin&#39;, &#39;Wright, Mr. George&#39;, &#39;Duff Gordon, Lady. (Lucille Christiana Sutherland) (&amp;quot;Mrs Morgan&amp;quot;)&#39;, &#39;Robbins, Mr. Victor&#39;, &#39;Taussig, Mrs. Emil (Tillie Mandelbaum)&#39;, &#39;de Messemaeker, Mrs. Guillaume Joseph (Emma)&#39;, &#39;Morrow, Mr. Thomas Rowan&#39;, &#39;Sivic, Mr. Husein&#39;, &#39;Norman, Mr. Robert Douglas&#39;, &#39;Simmons, Mr. John&#39;, &#39;Meanwell, Miss. (Marion Ogden)&#39;, &#39;Davies, Mr. Alfred J&#39;, &#39;Stoytcheff, Mr. Ilia&#39;, &#39;Palsson, Mrs. Nils (Alma Cornelia Berglund)&#39;, &#39;Doharr, Mr. Tannous&#39;, &#39;Jonsson, Mr. Carl&#39;, &#39;Harris, Mr. George&#39;, &#39;Appleton, Mrs. Edward Dale (Charlotte Lamson)&#39;, &#39;Flynn, Mr. John Irwin (&amp;quot;Irving&amp;quot;)&#39;, &#39;Kelly, Miss. Mary&#39;, &#39;Rush, Mr. Alfred George John&#39;, &#39;Patchett, Mr. George&#39;, &#39;Garside, Miss. Ethel&#39;, &#39;Silvey, Mrs. William Baird (Alice Munger)&#39;, &#39;Caram, Mrs. Joseph (Maria Elias)&#39;, &#39;Jussila, Mr. Eiriik&#39;, &#39;Christy, Miss. Julie Rachel&#39;, &#39;Thayer, Mrs. John Borland (Marian Longstreth Morris)&#39;, &#39;Downton, Mr. William James&#39;, &#39;Ross, Mr. John Hugo&#39;, &#39;Paulner, Mr. Uscher&#39;, &#39;Taussig, Miss. Ruth&#39;, &#39;Jarvis, Mr. John Denzil&#39;, &#39;Frolicher-Stehli, Mr. Maxmillian&#39;, &#39;Gilinski, Mr. Eliezer&#39;, &#39;Murdlin, Mr. Joseph&#39;, &#39;Rintamaki, Mr. Matti&#39;, &#39;Stephenson, Mrs. Walter Bertram (Martha Eustis)&#39;, &#39;Elsbury, Mr. William James&#39;, &#39;Bourke, Miss. Mary&#39;, &#39;Chapman, Mr. John Henry&#39;, &#39;Van Impe, Mr. Jean Baptiste&#39;, &#39;Leitch, Miss. Jessie Wills&#39;, &#39;Johnson, Mr. Alfred&#39;, &#39;Boulos, Mr. Hanna&#39;, &#39;Duff Gordon, Sir. Cosmo Edmund (&amp;quot;Mr Morgan&amp;quot;)&#39;, &#39;Jacobsohn, Mrs. Sidney Samuel (Amy Frances Christy)&#39;, &#39;Slabenoff, Mr. Petco&#39;, &#39;Harrington, Mr. Charles H&#39;, &#39;Torber, Mr. Ernst William&#39;, &#39;Homer, Mr. Harry (&amp;quot;Mr E Haven&amp;quot;)&#39;, &#39;Lindell, Mr. Edvard Bengtsson&#39;, &#39;Karaic, Mr. Milan&#39;, &#39;Daniel, Mr. Robert Williams&#39;, &#39;Laroche, Mrs. Joseph (Juliette Marie Louise Lafargue)&#39;, &#39;Shutes, Miss. Elizabeth W&#39;, &#39;Andersson, Mrs. Anders Johan (Alfrida Konstantia Brogren)&#39;, &#39;Jardin, Mr. Jose Neto&#39;, &#39;Murphy, Miss. Margaret Jane&#39;, &#39;Horgan, Mr. John&#39;, &#39;Brocklebank, Mr. William Alfred&#39;, &#39;Herman, Miss. Alice&#39;, &#39;Danbom, Mr. Ernst Gilbert&#39;, &#39;Lobb, Mrs. William Arthur (Cordelia K Stanlick)&#39;, &#39;Becker, Miss. Marion Louise&#39;, &#39;Gavey, Mr. Lawrence&#39;, &#39;Yasbeck, Mr. Antoni&#39;, &#39;Kimball, Mr. Edwin Nelson Jr&#39;, &#39;Nakid, Mr. Sahid&#39;, &#39;Hansen, Mr. Henry Damsgaard&#39;, &#39;Bowen, Mr. David John &amp;quot;Dai&amp;quot;&#39;, &#39;Sutton, Mr. Frederick&#39;, &#39;Kirkland, Rev. Charles Leonard&#39;, &#39;Longley, Miss. Gretchen Fiske&#39;, &#39;Bostandyeff, Mr. Guentcho&#39;, &amp;quot;O&#39;Connell, Mr. Patrick D&amp;quot;, &#39;Barkworth, Mr. Algernon Henry Wilson&#39;, &#39;Lundahl, Mr. Johan Svensson&#39;, &#39;Stahelin-Maeglin, Dr. Max&#39;, &#39;Parr, Mr. William Henry Marsh&#39;, &#39;Skoog, Miss. Mabel&#39;, &#39;Davis, Miss. Mary&#39;, &#39;Leinonen, Mr. Antti Gustaf&#39;, &#39;Collyer, Mr. Harvey&#39;, &#39;Panula, Mrs. Juha (Maria Emilia Ojala)&#39;, &#39;Thorneycroft, Mr. Percival&#39;, &#39;Jensen, Mr. Hans Peder&#39;, &#39;Sagesser, Mlle. Emma&#39;, &#39;Skoog, Miss. Margit Elizabeth&#39;, &#39;Foo, Mr. Choong&#39;, &#39;Baclini, Miss. Eugenie&#39;, &#39;Harper, Mr. Henry Sleeper&#39;, &#39;Cor, Mr. Liudevit&#39;, &#39;Simonius-Blumer, Col. Oberst Alfons&#39;, &#39;Willey, Mr. Edward&#39;, &#39;Stanley, Miss. Amy Zillah Elsie&#39;, &#39;Mitkoff, Mr. Mito&#39;, &#39;Doling, Miss. Elsie&#39;, &#39;Kalvik, Mr. Johannes Halvorsen&#39;, &#39;O\&#39;Leary, Miss. Hanora &amp;quot;Norah&amp;quot;&#39;, &#39;Hegarty, Miss. Hanora &amp;quot;Nora&amp;quot;&#39;, &#39;Hickman, Mr. Leonard Mark&#39;, &#39;Radeff, Mr. Alexander&#39;, &#39;Bourke, Mrs. John (Catherine)&#39;, &#39;Eitemiller, Mr. George Floyd&#39;, &#39;Newell, Mr. Arthur Webster&#39;, &#39;Frauenthal, Dr. Henry William&#39;, &#39;Badt, Mr. Mohamed&#39;, &#39;Colley, Mr. Edward Pomeroy&#39;, &#39;Coleff, Mr. Peju&#39;, &#39;Lindqvist, Mr. Eino William&#39;, &#39;Hickman, Mr. Lewis&#39;, &#39;Butler, Mr. Reginald Fenton&#39;, &#39;Rommetvedt, Mr. Knud Paust&#39;, &#39;Cook, Mr. Jacob&#39;, &#39;Taylor, Mrs. Elmer Zebley (Juliet Cummins Wright)&#39;, &#39;Brown, Mrs. Thomas William Solomon (Elizabeth Catherine Ford)&#39;, &#39;Davidson, Mr. Thornton&#39;, &#39;Mitchell, Mr. Henry Michael&#39;, &#39;Wilhelms, Mr. Charles&#39;, &#39;Watson, Mr. Ennis Hastings&#39;, &#39;Edvardsson, Mr. Gustaf Hjalmar&#39;, &#39;Sawyer, Mr. Frederick Charles&#39;, &#39;Turja, Miss. Anna Sofia&#39;, &#39;Goodwin, Mrs. Frederick (Augusta Tyler)&#39;, &#39;Cardeza, Mr. Thomas Drake Martinez&#39;, &#39;Peters, Miss. Katie&#39;, &#39;Hassab, Mr. Hammad&#39;, &#39;Olsvigen, Mr. Thor Anderson&#39;, &#39;Goodwin, Mr. Charles Edward&#39;, &#39;Brown, Mr. Thomas William Solomon&#39;, &#39;Laroche, Mr. Joseph Philippe Lemercier&#39;, &#39;Panula, Mr. Jaako Arnold&#39;, &#39;Dakic, Mr. Branko&#39;, &#39;Fischer, Mr. Eberhard Thelander&#39;, &#39;Madill, Miss. Georgette Alexandra&#39;, &#39;Dick, Mr. Albert Adrian&#39;, &#39;Karun, Miss. Manca&#39;, &#39;Lam, Mr. Ali&#39;, &#39;Saad, Mr. Khalil&#39;, &#39;Weir, Col. John&#39;, &#39;Chapman, Mr. Charles Henry&#39;, &#39;Kelly, Mr. James&#39;, &#39;Mullens, Miss. Katherine &amp;quot;Katie&amp;quot;&#39;, &#39;Thayer, Mr. John Borland&#39;, &#39;Humblen, Mr. Adolf Mathias Nicolai Olsen&#39;, &#39;Astor, Mrs. John Jacob (Madeleine Talmadge Force)&#39;, &#39;Silverthorne, Mr. Spencer Victor&#39;, &#39;Barbara, Miss. Saiide&#39;, &#39;Gallagher, Mr. Martin&#39;, &#39;Hansen, Mr. Henrik Juul&#39;, &#39;Morley, Mr. Henry Samuel (&amp;quot;Mr Henry Marshall&amp;quot;)&#39;, &#39;Kelly, Mrs. Florence &amp;quot;Fannie&amp;quot;&#39;, &#39;Calderhead, Mr. Edward Pennington&#39;, &#39;Cleaver, Miss. Alice&#39;, &#39;Moubarek, Master. Halim Gonios (&amp;quot;William George&amp;quot;)&#39;, &#39;Mayne, Mlle. Berthe Antonine (&amp;quot;Mrs de Villiers&amp;quot;)&#39;, &#39;Klaber, Mr. Herman&#39;, &#39;Taylor, Mr. Elmer Zebley&#39;, &#39;Larsson, Mr. August Viktor&#39;, &#39;Greenberg, Mr. Samuel&#39;, &#39;Soholt, Mr. Peter Andreas Lauritz Andersen&#39;, &#39;Endres, Miss. Caroline Louise&#39;, &#39;Troutt, Miss. Edwina Celia &amp;quot;Winnie&amp;quot;&#39;, &#39;McEvoy, Mr. Michael&#39;, &#39;Johnson, Mr. Malkolm Joackim&#39;, &#39;Harper, Miss. Annie Jessie &amp;quot;Nina&amp;quot;&#39;, &#39;Jensen, Mr. Svend Lauritz&#39;, &#39;Gillespie, Mr. William Henry&#39;, &#39;Hodges, Mr. Henry Price&#39;, &#39;Chambers, Mr. Norman Campbell&#39;, &#39;Oreskovic, Mr. Luka&#39;, &#39;Renouf, Mrs. Peter Henry (Lillian Jefferys)&#39;, &#39;Mannion, Miss. Margareth&#39;, &#39;Bryhl, Mr. Kurt Arnold Gottfrid&#39;, &#39;Ilmakangas, Miss. Pieta Sofia&#39;, &#39;Allen, Miss. Elisabeth Walton&#39;, &#39;Hassan, Mr. Houssein G N&#39;, &#39;Knight, Mr. Robert J&#39;, &#39;Berriman, Mr. William John&#39;, &#39;Troupiansky, Mr. Moses Aaron&#39;, &#39;Williams, Mr. Leslie&#39;, &#39;Ford, Mrs. Edward (Margaret Ann Watson)&#39;, &#39;Lesurer, Mr. Gustave J&#39;, &#39;Ivanoff, Mr. Kanio&#39;, &#39;Nankoff, Mr. Minko&#39;, &#39;Hawksford, Mr. Walter James&#39;, &#39;Cavendish, Mr. Tyrell William&#39;, &#39;Ryerson, Miss. Susan Parker &amp;quot;Suzette&amp;quot;&#39;, &#39;McNamee, Mr. Neal&#39;, &#39;Stranden, Mr. Juho&#39;, &#39;Crosby, Capt. Edward Gifford&#39;, &#39;Abbott, Mr. Rossmore Edward&#39;, &#39;Sinkkonen, Miss. Anna&#39;, &#39;Marvin, Mr. Daniel Warner&#39;, &#39;Connaghton, Mr. Michael&#39;, &#39;Wells, Miss. Joan&#39;, &#39;Moor, Master. Meier&#39;, &#39;Vande Velde, Mr. Johannes Joseph&#39;, &#39;Jonkoff, Mr. Lalio&#39;, &#39;Herman, Mrs. Samuel (Jane Laver)&#39;, &#39;Hamalainen, Master. Viljo&#39;, &#39;Carlsson, Mr. August Sigfrid&#39;, &#39;Bailey, Mr. Percy Andrew&#39;, &#39;Theobald, Mr. Thomas Leonard&#39;, &#39;Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards)&#39;, &#39;Garfirth, Mr. John&#39;, &#39;Nirva, Mr. Iisakki Antino Aijo&#39;, &#39;Barah, Mr. Hanna Assi&#39;, &#39;Carter, Mrs. William Ernest (Lucile Polk)&#39;, &#39;Eklund, Mr. Hans Linus&#39;, &#39;Hogeboom, Mrs. John C (Anna Andrews)&#39;, &#39;Brewe, Dr. Arthur Jackson&#39;, &#39;Mangan, Miss. Mary&#39;, &#39;Moran, Mr. Daniel J&#39;, &#39;Gronnestad, Mr. Daniel Danielsen&#39;, &#39;Lievens, Mr. Rene Aime&#39;, &#39;Jensen, Mr. Niels Peder&#39;, &#39;Mack, Mrs. (Mary)&#39;, &#39;Elias, Mr. Dibo&#39;, &#39;Hocking, Mrs. Elizabeth (Eliza Needs)&#39;, &#39;Myhrman, Mr. Pehr Fabian Oliver Malkolm&#39;, &#39;Tobin, Mr. Roger&#39;, &#39;Emanuel, Miss. Virginia Ethel&#39;, &#39;Kilgannon, Mr. Thomas J&#39;, &#39;Robert, Mrs. Edward Scott (Elisabeth Walton McMillan)&#39;, &#39;Ayoub, Miss. Banoura&#39;, &#39;Dick, Mrs. Albert Adrian (Vera Gillespie)&#39;, &#39;Long, Mr. Milton Clyde&#39;, &#39;Johnston, Mr. Andrew G&#39;, &#39;Ali, Mr. William&#39;, &#39;Harmer, Mr. Abraham (David Lishin)&#39;, &#39;Sjoblom, Miss. Anna Sofia&#39;, &#39;Rice, Master. George Hugh&#39;, &#39;Dean, Master. Bertram Vere&#39;, &#39;Guggenheim, Mr. Benjamin&#39;, &#39;Keane, Mr. Andrew &amp;quot;Andy&amp;quot;&#39;, &#39;Gaskell, Mr. Alfred&#39;, &#39;Sage, Miss. Stella Anna&#39;, &#39;Hoyt, Mr. William Fisher&#39;, &#39;Dantcheff, Mr. Ristiu&#39;, &#39;Otter, Mr. Richard&#39;, &#39;Leader, Dr. Alice (Farnham)&#39;, &#39;Osman, Mrs. Mara&#39;, &#39;Ibrahim Shawah, Mr. Yousseff&#39;, &#39;Van Impe, Mrs. Jean Baptiste (Rosalie Paula Govaert)&#39;, &#39;Ponesell, Mr. Martin&#39;, &#39;Collyer, Mrs. Harvey (Charlotte Annie Tate)&#39;, &#39;Carter, Master. William Thornton II&#39;, &#39;Thomas, Master. Assad Alexander&#39;, &#39;Hedman, Mr. Oskar Arvid&#39;, &#39;Johansson, Mr. Karl Johan&#39;, &#39;Andrews, Mr. Thomas Jr&#39;, &#39;Pettersson, Miss. Ellen Natalia&#39;, &#39;Meyer, Mr. August&#39;, &#39;Chambers, Mrs. Norman Campbell (Bertha Griggs)&#39;, &#39;Alexander, Mr. William&#39;, &#39;Lester, Mr. James&#39;, &#39;Slemen, Mr. Richard James&#39;, &#39;Andersson, Miss. Ebba Iris Alfrida&#39;, &#39;Tomlin, Mr. Ernest Portage&#39;, &#39;Fry, Mr. Richard&#39;, &#39;Heininen, Miss. Wendla Maria&#39;, &#39;Mallet, Mr. Albert&#39;, &#39;Holm, Mr. John Fredrik Alexander&#39;, &#39;Skoog, Master. Karl Thorsten&#39;, &#39;Hays, Mrs. Charles Melville (Clara Jennings Gregg)&#39;, &#39;Lulic, Mr. Nikola&#39;, &#39;Reuchlin, Jonkheer. John George&#39;, &#39;Moor, Mrs. (Beila)&#39;, &#39;Panula, Master. Urho Abraham&#39;, &#39;Flynn, Mr. John&#39;, &#39;Lam, Mr. Len&#39;, &#39;Mallet, Master. Andre&#39;, &#39;McCormack, Mr. Thomas Joseph&#39;, &#39;Stone, Mrs. George Nelson (Martha Evelyn)&#39;, &#39;Yasbeck, Mrs. Antoni (Selini Alexander)&#39;, &#39;Richards, Master. George Sibley&#39;, &#39;Saad, Mr. Amin&#39;, &#39;Augustsson, Mr. Albert&#39;, &#39;Allum, Mr. Owen George&#39;, &#39;Compton, Miss. Sara Rebecca&#39;, &#39;Pasic, Mr. Jakob&#39;, &#39;Sirota, Mr. Maurice&#39;, &#39;Chip, Mr. Chang&#39;, &#39;Marechal, Mr. Pierre&#39;, &#39;Alhomaki, Mr. Ilmari Rudolf&#39;, &#39;Mudd, Mr. Thomas Charles&#39;, &#39;Serepeca, Miss. Augusta&#39;, &#39;Lemberopolous, Mr. Peter L&#39;, &#39;Culumovic, Mr. Jeso&#39;, &#39;Abbing, Mr. Anthony&#39;, &#39;Sage, Mr. Douglas Bullen&#39;, &#39;Markoff, Mr. Marin&#39;, &#39;Harper, Rev. John&#39;, &#39;Goldenberg, Mrs. Samuel L (Edwiga Grabowska)&#39;, &#39;Andersson, Master. Sigvard Harald Elias&#39;, &#39;Svensson, Mr. Johan&#39;, &#39;Boulos, Miss. Nourelain&#39;, &#39;Lines, Miss. Mary Conover&#39;, &#39;Carter, Mrs. Ernest Courtenay (Lilian Hughes)&#39;, &#39;Aks, Mrs. Sam (Leah Rosen)&#39;, &#39;Wick, Mrs. George Dennick (Mary Hitchcock)&#39;, &#39;Daly, Mr. Peter Denis &#39;, &#39;Baclini, Mrs. Solomon (Latifa Qurban)&#39;, &#39;Razi, Mr. Raihed&#39;, &#39;Hansen, Mr. Claus Peter&#39;, &#39;Giles, Mr. Frederick Edward&#39;, &#39;Swift, Mrs. Frederick Joel (Margaret Welles Barron)&#39;, &#39;Sage, Miss. Dorothy Edith &amp;quot;Dolly&amp;quot;&#39;, &#39;Gill, Mr. John William&#39;, &#39;Bystrom, Mrs. (Karolina)&#39;, &#39;Duran y More, Miss. Asuncion&#39;, &#39;Roebling, Mr. Washington Augustus II&#39;, &#39;van Melkebeke, Mr. Philemon&#39;, &#39;Johnson, Master. Harold Theodor&#39;, &#39;Balkic, Mr. Cerin&#39;, &#39;Beckwith, Mrs. Richard Leonard (Sallie Monypeny)&#39;, &#39;Carlsson, Mr. Frans Olof&#39;, &#39;Vander Cruyssen, Mr. Victor&#39;, &#39;Abelson, Mrs. Samuel (Hannah Wizosky)&#39;, &#39;Najib, Miss. Adele Kiamie &amp;quot;Jane&amp;quot;&#39;, &#39;Gustafsson, Mr. Alfred Ossian&#39;, &#39;Petroff, Mr. Nedelio&#39;, &#39;Laleff, Mr. Kristo&#39;, &#39;Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)&#39;, &#39;Shelley, Mrs. William (Imanita Parrish Hall)&#39;, &#39;Markun, Mr. Johann&#39;, &#39;Dahlberg, Miss. Gerda Ulrika&#39;, &#39;Banfield, Mr. Frederick James&#39;, &#39;Sutehall, Mr. Henry Jr&#39;, &#39;Rice, Mrs. William (Margaret Norton)&#39;, &#39;Montvila, Rev. Juozas&#39;, &#39;Graham, Miss. Margaret Edith&#39;, &#39;Johnston, Miss. Catherine Helen &amp;quot;Carrie&amp;quot;&#39;, &#39;Behr, Mr. Karl Howell&#39;, &#39;Dooley, Mr. Patrick&#39;]
sexe = [&#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;, &#39;female&#39;, &#39;male&#39;, &#39;female&#39;, &#39;female&#39;, &#39;male&#39;, &#39;male&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(name[3])
print(age[3])
print(survided[3])
print(sexe[3])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Futrelle, Mrs. Jacques Heath (Lily May Peel)
35.0
1
female
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1) récuper le nombre total de passager en consultant la longueur totale d&amp;rsquo;une des listes (peu importe laquelle, elle font la même longueur). Stocker l&amp;rsquo;information dans la variable &amp;lsquo;nbPassagers&amp;rsquo;&lt;br&gt;&lt;br&gt;
2) Créer une fonction &amp;lsquo;analyseTitanic&amp;rsquo; qui va prendre pour l&amp;rsquo;instant un seul paramètre &amp;lsquo;totalPassagers&amp;rsquo;. La fonction retourne pour l&amp;rsquo;instant la valeur &amp;lsquo;totalPassagers&amp;rsquo;. Testez votre fonction en passant en paramètre la variable &amp;lsquo;nbPassagers&amp;rsquo; &lt;br&gt;&lt;br&gt;
3) Dans cette fonction, ajoutez une boucle For qui va itérer de 1 en 1 et qui aura pour longueur le nombre total de passagers (range(&amp;hellip;)). dans cette boucle, ajoutez une fonction print() qui va afficher chaque valeur de la liste &amp;lsquo;survided&amp;rsquo;. Testez votre fonction. Si elle marche vous pouvez supprimer le print() &lt;br&gt;&lt;br&gt;
4) L&amp;rsquo;idée maintenant va être de compter le nombre de survivants (survided = 1) dans cette liste.
- juste avant votre boucle, créez une variable nbSurvivants qui sera égale à zero
- dans votre boucle, ajoutez une condition qui indique &amp;lsquo;si cette personne a survecu, alors mon compteur nbSurvivant augmente de 1&amp;rsquo;
- remplacez nbPassagers par nbSurvivants dans la valeur de retour de la fonction.
- testez votre fonction. à l&amp;rsquo;aide de la variable nbPassagers, calculez le taux de survie global sur le Titanic
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;5) Ajout d&amp;rsquo;un critère&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ajouter un deuxième paramètre &amp;lsquo;sexePassager&amp;rsquo; à la fonction qui prendra soit la valeur &amp;lsquo;male&amp;rsquo;, soit la valeur &amp;lsquo;female&amp;rsquo;&lt;/li&gt;
&lt;li&gt;juste avant votre boucle, créez une variable nbPassagersCritere qui sera égale à zero&lt;/li&gt;
&lt;li&gt;Dans votre boucle, ajouter une nouvelle condition à la suite de la première permettant de d&amp;rsquo;indiquer &amp;lsquo;si le passager à un sexe correspondant à la valeur renseignée dans la variable &amp;lsquo;sexePassager&amp;rsquo;, alors nbPassagersCritere augmente de 1&lt;/li&gt;
&lt;li&gt;Modifiez maintenant votre première condition en ajoutant la contrainte &amp;lsquo;le passager a survecu ET le passager à un sexe correspondant à la valeur renseignée dans la variable &amp;lsquo;sexePassager&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6) analyse
- A la suite de votre boucle, créez la variable &amp;lsquo;tauxDeSurvie&amp;rsquo;, qui va diviser nbSurvivants par nbPassagersCritere
- remplacez nbSurvivants par tauxDeSurvie dans la valeur de retour de la fonction.
- calculez le taux de survie des hommes et celui des femmes. Analysez les résultats.&lt;/p&gt;

&lt;p&gt;7) Aller plus loin (optionnel) &lt;br&gt;&lt;br&gt;
Faire une nouvelle fonction qui ne se basera pas sur le sexe mais sur une tranche d&amp;rsquo;age&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;1) récuper le nombre total de passager en consultant la longueur totale d&amp;rsquo;une des listes (peu importe laquelle, elle font la même longueur). Stocker l&amp;rsquo;information dans la variable &amp;lsquo;nbPassagers&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nbPassagers = len(name)
nbPassagers
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;891
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Créer une fonction &amp;lsquo;analyseTitanic&amp;rsquo; qui va prendre pour l&amp;rsquo;instant un seul paramètre &amp;lsquo;totalPassagers&amp;rsquo;. La fonction retourne pour l&amp;rsquo;instant la valeur &amp;lsquo;totalPassagers&amp;rsquo;. Testez votre fonction en passant en paramètre la variable &amp;lsquo;nbPassagers&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers):
    
    return(totalPassagers)

analyseTitanic(nbPassagers)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;891
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Dans cette fonction, ajoutez une boucle For qui va itérer de 1 en 1 et qui aura pour longueur le nombre total de passagers (range(&amp;hellip;)). dans cette boucle, ajoutez une fonction print() qui va afficher chaque valeur de la liste &amp;lsquo;survided&amp;rsquo;. Testez votre fonction. Si elle marche vous pouvez supprimer le print()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers):
    for i in range(totalPassagers):
        survided[i]
        
    return(totalPassagers)
analyseTitanic(nbPassagers)    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;891
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) L&amp;rsquo;idée maintenant va être de compter le nombre de survivants (survided = 1) dans cette liste.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;juste avant votre boucle, créez une variable nbSurvivants qui sera égale à zero&lt;/li&gt;
&lt;li&gt;dans votre boucle, ajoutez une condition qui indique &amp;lsquo;si cette personne a survecu, alors mon compteur nbSurvivant augmente de 1&amp;rsquo;&lt;/li&gt;
&lt;li&gt;remplacez nbPassagers par nbSurvivants dans la valeur de retour de la fonction.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;testez votre fonction. à l&amp;rsquo;aide de la variable nbPassagers, calculez le taux de survie global sur le Titanic&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers):
nbSurvivants = 0
    
for i in range(totalPassagers):   
        
    if survided[i] == 1:            
        nbSurvivants += 1 
            
tauxDeSurvie = (nbSurvivants/totalPassagers) * 100
    
return(tauxDeSurvie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;38.38383838383838&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5) Ajout d&amp;rsquo;un critère&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ajouter un deuxième paramètre &amp;lsquo;sexePassager&amp;rsquo; à la fonction qui prendra soit la valeur &amp;lsquo;male&amp;rsquo;, soit la valeur &amp;lsquo;female&amp;rsquo;&lt;/li&gt;
&lt;li&gt;juste avant votre boucle, créez une variable nbPassagersCritere qui sera égale à zero&lt;/li&gt;
&lt;li&gt;Dans votre boucle, ajouter une nouvelle condition à la suite de la première permettant d&amp;rsquo;indiquer &amp;lsquo;si le passager a un sexe correspondant à la valeur renseignée dans la variable &amp;lsquo;sexePassager&amp;rsquo;, alors nbPassagersCritere augmente de 1&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Modifiez maintenant votre première condition en ajoutant la contrainte &amp;lsquo;le passager a survecu ET le passager à un sexe correspondant à la valeur renseignée dans la variable &amp;lsquo;sexePassager&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers, sexePassager):
nbSurvivants = 0
nbPassagersCritere = 0
    
for i in range(totalPassagers):
        
    if sexe[i] == sexePassager:
        nbPassagersCritere += 1
            
    if survided[i] == 1 and sexe[i] == sexePassager:
        nbSurvivants += 1 
            
tauxDeSurvie = (nbSurvivants/nbPassagersCritere) * 100
    
return(tauxDeSurvie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers, &#39;male&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;18.890814558058924&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers, &#39;female&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;74.20382165605095&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6) analyse
- A la suite de votre boucle, créez la variable &amp;lsquo;tauxDeSurvie&amp;rsquo;, qui va diviser nbSurvivants par nbPassagersCritere
- remplacez nbSurvivants par tauxDeSurvie dans la valeur de retour de la fonction.
- calculez le taux de survie des hommes et celui des femmes. Analysez les résultats.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def analyseTitanic(totalPassagers, trancheAge):
    nbSurvivants = 0
    nbPassagersCritere = 0
    
    for i in range(totalPassagers):
        
        if age[i] &amp;gt; trancheAge[0] and age[i] &amp;lt;=  trancheAge[1]:
            nbPassagersCritere += 1
            
            if survided[i] == 1:
                nbSurvivants += 1 
            
    tauxDeSurvie = nbSurvivants/nbPassagersCritere
    
    return(tauxDeSurvie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers, [0,15])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.5903614457831325
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;analyseTitanic(nbPassagers, [15,100])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0.3626237623762376
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>7- La librairie Numpy - Cours</title>
      <link>/courses/formation_python/7-numpy/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/7-numpy/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/numpy.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-utilisation-de-la-librairie-numpy-numerical-python&#34;&gt;7- Utilisation de la librairie Numpy  (Numerical Python):&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bibliothèque Python importante en calcul scientifique, cette librairie est appelée dans beaucoup d&amp;rsquo;autres librairies&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Intègre une nouvelle structure de données: les ndarray (N-dimensional array). Ce sont des vecteurs (tableaux à 1 dimension), tableaux à plusieurs dimensions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Intègre un ensemble de fonctions développées en C. Calcul performant sur les calculs&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisé dans tous les projets de calculs numériques&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Les ndarray se manipulent comme les listes et les tubles MAIS ne peut contenir qu&amp;rsquo;un seul type de données.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nous allons voir comment initialiser des tableaux Numpy de plusieurs façons, accéder aux valeurs dans les tableaux, effectuer des opérations mathématiques et matricielles, et utiliser des tableaux aussi bien pour le masquage que pour les comparaisons.&lt;/p&gt;

&lt;h2 id=&#34;7-1-création-d-un-tableau-numpy-ou-ndarray&#34;&gt;7.1- Création d&amp;rsquo;un tableau Numpy ou ndarray&lt;/h2&gt;

&lt;p&gt;Plusieurs techniques sont mises à disposition pour créer des tableaux Numpy.&lt;/p&gt;

&lt;p&gt;Tout d’abord, vous devez importer Numpy avec le code suivant:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On va importer la librairie Numpy et créer un alias. 
# Les alias permettent d&#39;alléger l&#39;écriture des codes. 
import numpy as np
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Contrairement à une liste, vous ne pouvez pas créer de tableaux Numpy vides. Vous trouverez ci-dessous plusieurs façons d’initialiser un tableau Numpy en fonction de vos besoins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;array()&lt;/b&gt; pour créer un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau1 = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])
tableau1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
       18, 19, 20])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Création d&amp;rsquo;un tableau bi-dimensionnel avec des lignes et des colonnes; on crée une liste de liste. Chaque liste est une ligne du tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Exemple d&#39;un tableau avec 3 lignes et 3 colonnes
tableau2 = np.array([[1,2,3], [4,5,6]])
tableau2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Exemple d&#39;un tableau avec 3 lignes et 3 colonnes
tableau3 = np.array([[1,2,3], [4,5,6], [7,8,9]])
tableau3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;range()&lt;/b&gt; pour créer un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau4 = np.array(range(10)) # tableau avec des chiffres de 0 à 9
tableau4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;arange()&lt;/b&gt; pour créer un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(1, 100, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33,
       35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67,
       69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(0, 1, 0.1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.linspace(0, 100, 11)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([  0.,  10.,  20.,  30.,  40.,  50.,  60.,  70.,  80.,  90., 100.])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;zeros()&lt;/b&gt; pour créer un tableau Numpy avec des zéros:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau5 = np.zeros((4,3)) # tableau contenant 4 lignes et 3 colonnes de 0
tableau5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;ones()&lt;/b&gt; pour créer un tableau Numpy avec des 1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau6 = np.ones((4,3)) # tableau contenant 2 lignes 2 colonnes de 1
tableau6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;identity()&lt;/b&gt; pour créer une matrice Numpy identité:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau7 = np.identity(4) # Matrice Identité de dimension 4
tableau7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Conversion d&amp;rsquo;une liste en tableau numpy avec la fonction &lt;b&gt;array()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ma_liste = [0,1,2,3,4,5,6]
ma_liste
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[0, 1, 2, 3, 4, 5, 6]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau8 = np.array(ma_liste)
tableau8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0, 1, 2, 3, 4, 5, 6])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Utilisation de la fonction &lt;b&gt;random()&lt;/b&gt; pour créer un tableau Numpy  avec des valeurs aléatoires:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau9 = np.random.randint(100,size=(4,3))  # Exemple création d&#39;un tableau 4*3 random avec valeurs comprises entre 0 et 100 
tableau9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[81, 80, 96],
       [43, 12, 53],
       [53, 83,  5],
       [73, 73, 31]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-2-accéder-aux-données-d-un-tableau-numpy-ou-ndarray&#34;&gt;7.2- Accéder aux données d&amp;rsquo;un tableau Numpy ou ndarray&lt;/h2&gt;

&lt;p&gt;Nous pouvons accéder à un élément individuellement ou à une tranche de valeurs par slicing.&lt;/p&gt;

&lt;p&gt;Semblable aux listes, le premier élément est indexé à 0. Par exemple, array1[0,0] indique que nous accédons à la première ligne et à la première colonne.&lt;/p&gt;

&lt;p&gt;Le premier nombre du tuple [0,0] indique l’index de la ligne et le deuxième nombre indique l’index de la colonne:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau = np.array([[1,2,3], [4,5,6], [7,8,9]])
mon_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Voici quelques exemples pour accéder à des éléments individuels d&amp;rsquo;un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[1,2]     # On veut accéder à l&#39;élément situé à la ligne d&#39;index 1 et la colonne d&#39;index 2 
                 #  ndarray(row,column) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[1,-1]    # On veut accéder à l&#39;élément situé à la ligne d&#39;index 1 et à la colonne ayant le dernier index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[0,1]     # On veut accéder à l&#39;élément situé à la ligne d&#39;index 0 et la colonne d&#39;index 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[1,0]     # On veut accéder à l&#39;élément situé à la ligne d&#39;index 1 et la colonne d&#39;index 0                     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Exemples pour accéder à des tranches d&amp;rsquo;un tableau Numpy: &lt;b&gt;Slicing&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[:,0]    # On veut toutes les lignes de la colonne d&#39;index 0 (slicing)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([1, 4, 7])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[0,:]    # On veut toutes les colonnes de la ligne d&#39;index 0 (slicing)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([1, 2, 3])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[:,0:3:2] # On veut toutes les lignes et les colonnes d&#39;index de 0 à 3 avec pas de 2.
                 # Donc toutes les lignes et les colonnes 1 et 2 .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1, 3],
       [4, 6],
       [7, 9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[:,-1]  # On veut toutes les lignes de la dernière colonne
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([3, 6, 9])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[:,1:-1] # On veut toutes les lignes entre la colonne d&#39;index 1 et la dernière colonne
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[2],
       [5],
       [8]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mon_tableau[2,1:-1] # On veut les valeurs de la ligne d&#39;index 2 entre la colonne d&#39;index 1 et la dernière colonne
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([8])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-3-calculs-mathématiques-et-matriciels-sur-un-tableau-numpy&#34;&gt;7.3- Calculs mathématiques et matriciels sur un tableau Numpy:&lt;/h2&gt;

&lt;p&gt;Les tableaux Numpy sont très faciles à manipuler: on peut les concaténer, ajouter des valeurs, les multiplier, les transposer avec une seule ligne de code.&lt;/p&gt;

&lt;p&gt;Vous trouverez ci-dessous quelques exemples d’opérations arithmétiques et multiplicatives variées avec les tableaux Numpy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 = np.arange(9).reshape(3,3)
array1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2 = np.random.randint(50, size=(3,3))
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[28,  8, 34],
       [40, 44,  6],
       [23, 41, 40]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Opérations arithmétiques de base: addition, soustraction, multiplication, division&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 + 10 # ajouter une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[10, 11, 12],
       [13, 14, 15],
       [16, 17, 18]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 - 10 # soustraire une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[-10,  -9,  -8],
       [ -7,  -6,  -5],
       [ -4,  -3,  -2]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 * 100 # multiplier une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[  0, 100, 200],
       [300, 400, 500],
       [600, 700, 800]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1[:,0] * 10 # on multiplie par 10 toutes les lignes de la colonne d&#39;index 0.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 0, 30, 60])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 / 2 # diviser une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[0. , 0.5, 1. ],
       [1.5, 2. , 2.5],
       [3. , 3.5, 4. ]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;quelques fonctions et méthodes Numpy applicables sur les tableaux Numpy:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.all.html#numpy.all&#34; title=&#34;numpy.all&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;all&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.any.html#numpy.any&#34; title=&#34;numpy.any&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;any&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis&#34; title=&#34;numpy.apply_along_axis&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;apply_along_axis&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmax.html#numpy.argmax&#34; title=&#34;numpy.argmax&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argmax&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmin.html#numpy.argmin&#34; title=&#34;numpy.argmin&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argmin&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argsort.html#numpy.argsort&#34; title=&#34;numpy.argsort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argsort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.average.html#numpy.average&#34; title=&#34;numpy.average&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;average&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.bincount.html#numpy.bincount&#34; title=&#34;numpy.bincount&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;bincount&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ceil.html#numpy.ceil&#34; title=&#34;numpy.ceil&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ceil&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.clip.html#numpy.clip&#34; title=&#34;numpy.clip&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;clip&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.conj.html#numpy.conj&#34; title=&#34;numpy.conj&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;conj&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.corrcoef.html#numpy.corrcoef&#34; title=&#34;numpy.corrcoef&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;corrcoef&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cov.html#numpy.cov&#34; title=&#34;numpy.cov&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cov&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cross.html#numpy.cross&#34; title=&#34;numpy.cross&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cross&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cumprod.html#numpy.cumprod&#34; title=&#34;numpy.cumprod&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cumprod&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cumsum.html#numpy.cumsum&#34; title=&#34;numpy.cumsum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cumsum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.diff.html#numpy.diff&#34; title=&#34;numpy.diff&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;diff&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.dot.html#numpy.dot&#34; title=&#34;numpy.dot&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;dot&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.floor.html#numpy.floor&#34; title=&#34;numpy.floor&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;floor&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.inner.html#numpy.inner&#34; title=&#34;numpy.inner&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;inner&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.lexsort.html#numpy.lexsort&#34; title=&#34;numpy.lexsort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;lexsort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#max&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;max&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.maximum.html#numpy.maximum&#34; title=&#34;numpy.maximum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;maximum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.mean.html#numpy.mean&#34; title=&#34;numpy.mean&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;mean&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.median.html#numpy.median&#34; title=&#34;numpy.median&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;median&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#min&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;min&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.minimum.html#numpy.minimum&#34; title=&#34;numpy.minimum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;minimum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.nonzero.html#numpy.nonzero&#34; title=&#34;numpy.nonzero&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;nonzero&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.outer.html#numpy.outer&#34; title=&#34;numpy.outer&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;outer&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/re.html#module-re&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;re&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#round&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;round&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.sort.html#numpy.sort&#34; title=&#34;numpy.sort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;sort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.std.html#numpy.std&#34; title=&#34;numpy.std&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;std&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.sum.html#numpy.sum&#34; title=&#34;numpy.sum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;sum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.trace.html#numpy.trace&#34; title=&#34;numpy.trace&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;trace&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.transpose.html#numpy.transpose&#34; title=&#34;numpy.transpose&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;transpose&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.var.html#numpy.var&#34; title=&#34;numpy.var&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;var&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vdot.html#numpy.vdot&#34; title=&#34;numpy.vdot&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vdot&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vectorize.html#numpy.vectorize&#34; title=&#34;numpy.vectorize&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vectorize&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.where.html#numpy.where&#34; title=&#34;numpy.where&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;where&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.add(array1,10) # ajouter une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[10, 11, 12],
       [13, 14, 15],
       [16, 17, 18]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.subtract(array1,10) # soustraire une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[-10,  -9,  -8],
       [ -7,  -6,  -5],
       [ -4,  -3,  -2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.multiply(array1,100) # multiplier une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  0, 100, 200],
       [300, 400, 500],
       [600, 700, 800]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.divide(array1, 2) # diviser une valeur à tous les éléments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0. , 0.5, 1. ],
       [1.5, 2. , 2.5],
       [3. , 3.5, 4. ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1) # calcul de la moyenne du tableau Numpy à partir de la fonction mean()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.mean()  # calcul de la moyenne du tableau Numpy à partir de la méthode mean()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.min()  # calcul de la valeur minimale du tableau Numpy à partir de la méthode min()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.max()  # calcul de la valeur maximale du tableau Numpy à partir de la méthode max()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1, axis=0)  # si on veut appliquer une fonction uniquement sur les colonnes 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([3., 4., 5.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1, axis=1) # si on veut appliquer une fonction uniquement sur les lignes 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1., 4., 7.])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Opérations entre plusieurs tableaux&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(array1 +1) * array2 # multiplication de 2 tableaux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 28,  16, 102],
       [160, 220,  36],
       [161, 328, 360]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 + array2 # somme de 2 tableaux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[28,  9, 36],
       [43, 48, 11],
       [29, 48, 48]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.dot(array1, array2) # produit scalaire de 2 tableaux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 86, 126,  86],
       [359, 405, 326],
       [632, 684, 566]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-4-modifier-des-tableaux-numpy&#34;&gt;7.4- Modifier des tableaux Numpy:&lt;/h2&gt;

&lt;p&gt;Parmi les autres fonctionnalités intéressantes figurent la concaténation, le fractionnement, la transposition (changement d’éléments d’une rangée à l’autre et vice versa) et l’obtention des éléments en diagonale.&lt;/p&gt;

&lt;p&gt;a)- Pour manipuler/modifier les dimensions d&amp;rsquo;un tableau Numpy:&lt;/p&gt;

&lt;p&gt;La dimension d&amp;rsquo;un tableau est donnée par le nombres d&amp;rsquo;élélements suivant chaque axe.
On a des méthodes spécifiques et des attributs spécifiques aux ndarray():&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ndim&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Attribut pour connaitre la dimension d&#39;un tableau Numpy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;shape&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Attribut pour connaitre les dimension d&#39;un tableau Numpy &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;dtype&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Attribut pour connaitre le type de notre array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;size&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Attibut pour connaitre la taille de notre array&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.floor(10*np.random.random((3,4)))
print(a, a.shape, a.ndim)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[2. 5. 1. 0.]
 [5. 0. 0. 1.]
 [7. 7. 5. 0.]] (3, 4) 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Selon nos besoins en programmation, on peut modifier la dimension d&amp;rsquo;un tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.ravel()  # écrit notre tableau sur 1 dimension (flattened) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([2., 5., 1., 0., 5., 0., 0., 1., 7., 7., 5., 0.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.reshape(6,2)  # fonction reshape() pour modifier la dimension de notre tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[2., 5.],
       [1., 0.],
       [5., 0.],
       [0., 1.],
       [7., 7.],
       [5., 0.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.T  # méthode .T pour calculer la transposée de notre tableau. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[2., 5., 7.],
       [5., 0., 7.],
       [1., 0., 5.],
       [0., 1., 0.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(a.T.shape, a.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(4, 3) (3, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La fonction reshape renvoie son argument avec une forme modifiée, alors que la méthode ndarray.resize modifie le tableau lui-même:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.resize((2,6))
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[2., 5., 1., 0., 5., 0.],
       [0., 1., 7., 7., 5., 0.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si une dimension est définie à -1 dans une opération de reformage, les autres dimensions sont automatiquement calculées:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.reshape(4,-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[2., 5., 1.],
       [0., 5., 0.],
       [0., 1., 7.],
       [7., 5., 0.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b)- Travailler et modifier un sous-ensemble d&amp;rsquo;un tableau Numpy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notre_tableau = np.array([[1,2,3], [4,5,6], [7,8,9]])
notre_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On va sélectionner un sous-ensemble de notre tableau en prenant la ligne d&amp;rsquo;index 0 .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sous_tableau = notre_tableau[0]
sous_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On va modifier la première valeur de notre tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sous_tableau[0] = 100
sous_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([100,   2,   3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mais en modifiant notre sous tableau, on se rend compte que nous avons modifié notre_tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notre_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[100,   2,   3],
       [  4,   5,   6],
       [  7,   8,   9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une modification du sous-ensemble entraîne une modification du tableau initial .
On dit que sous_tableau est une vue de notre tableau. Raison: travailler avec des gros volumes de données.&lt;/p&gt;

&lt;p&gt;Si on veut vraiment travailler avec un sous ensemble sans modifier notre tableau d&amp;rsquo;origine, il faut faire une copie avec la fonction &lt;b&gt;copy()&lt;/b&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notre_tableau = np.array([[1,2,3], [4,5,6], [7,8,9]])
sous_tableau=notre_tableau[0].copy()
sous_tableau[0]=101
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sous_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([101,   2,   3])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notre_tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c)- Pour concatener des tableaux Numpy:&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vstack.html#numpy.vstack&#34; title=&#34;numpy.vstack&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vstack&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.column_stack.html#numpy.column_stack&#34; title=&#34;numpy.column_stack&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;column_stack&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.concatenate.html#numpy.concatenate&#34; title=&#34;numpy.concatenate&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;concatenate&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pour concatener des tableaux Numpy: fonction &lt;b&gt;concatenate()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1=np.array([[1,2,3],[4,5,6],[7,8,9]])
array1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2=np.array([[2,5,6],[9,10,11],[5,6,9]])
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 2,  5,  6],
       [ 9, 10, 11],
       [ 5,  6,  9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.concatenate([array1,array2], axis=0)   # concaténer par lignes  (axis = 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [ 2,  5,  6],
       [ 9, 10, 11],
       [ 5,  6,  9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.concatenate([array1,array2], axis=1)   # concaténer par colonnes  (axis = 1) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 1,  2,  3,  2,  5,  6],
       [ 4,  5,  6,  9, 10, 11],
       [ 7,  8,  9,  5,  6,  9]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si on souhaite concatener des tableaux n&amp;rsquo;ayant pas les mêmes dimensions, on ne va pas utiliser
la fonction concatenate(), mais:
- la fonction &lt;b&gt;vstack()&lt;/b&gt; pour empiler à la verticale
- la fonction &lt;b&gt;hstack()&lt;/b&gt; pour empliler à l&amp;rsquo;horizontale&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array3=np.array([10,20,30]) # Création d&#39;un array() de 1D.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([10, 20, 30])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array4=np.array([[1,2,3],[4,5,6],[7,8,9]]) # Création d&#39;un array() bi-dimentionnel
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array4
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#np.concatenate([array3,array4])
np.vstack([array4,array3])   #  On va concatener à la verticale les deux tableaux 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 20, 30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array5=np.array([[10],[20],[30]]) # Tableau à 2 dimensions à 2 colonnes
array5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[10],
       [20],
       [30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.hstack([array4,array5]) #  On va empiler à l&#39;horizontale les deux tableaux 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3, 10],
       [ 4,  5,  6, 20],
       [ 7,  8,  9, 30]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Une autre fonction intéressante à connaitre est la fonction &lt;b&gt;column_stack()&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Cette fonction empile des tableaux 1D sous forme de colonnes dans un tableau 2D. Cela équivaut à hstack uniquement pour les tableaux 2D.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.array([4.,2.,1.]) # on utilise un tableau 1 D, que nous souhaitons concaténer avec le tableau 2D array4
print(a.shape, array4.shape)
print(a.ndim, array4.ndim)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(3,) (3, 3)
1 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# np.hstack([array4,a]) # problème de dimension
np.column_stack([array4,a])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1., 2., 3., 4.],
       [4., 5., 6., 2.],
       [7., 8., 9., 1.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d)- Pour découper des tableaux Numpy:&lt;/p&gt;

&lt;p&gt;C&amp;rsquo;est le contraire de la concatenation.
Nous avons les fonctions split(), hsplit() et vsplit() .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array=np.array([15,16,17,12,49,52,12,14,36]) # on crée un array à 1 D. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(array) # taille de notre array 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.split(array,3) # séparer le tableau array en 3 tableaux
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[array([15, 16, 17]), array([12, 49, 52]), array([12, 14, 36])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut découper notre tableau avec des points de cassure délimités par les index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.split(array,[2,6]) # on veut couper notre tableau en 3 tableaux , les chiffres entre [] sont les points de cassures. 
                      # correspond aux index où on coupe. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[array([15, 16]), array([17, 12, 49, 52]), array([12, 14, 36])]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array2,array3=np.split(array,[2,6]) # on peut multi-assigner notre cassure
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(array1,array2,array3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[15 16] [17 12 49 52] [12 14 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array2,array3,array4=np.split(array,[2,4,6]) # selon le nombre de points de cassure, on a le nombre de tableaux. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(array1,array2,array3,array4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[15 16] [17 12] [49 52] [12 14 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour casser des tableaux à 2 dimensions. on utilise hsplit ou vsplit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2=np.array([[1,2,3],[4,5,6],[7,8,9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array1bis=np.vsplit(array2, [2]) # on coupe à la verticale au point de cassure de niveau 2 
print(array1,array1bis)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1 2 3]
 [4 5 6]] [[7 8 9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array1bis=np.hsplit(array2,[2]) # on coupe à l&#39;horizontal au point de cassure de niveau 2 
print(array1,array1bis)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1 2]
 [4 5]
 [7 8]] [[3]
 [6]
 [9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;e)- Pour supprimer des rangées et colonnes des tableaux Numpy: &lt;b&gt;delete()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array=np.array([[1,2,3],[4,5,6],[7,8,9]])
array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.delete(array,2,axis=0) # supprime la ligne d&#39;index 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.delete(array2,2,axis=1) # supprime la colonne d&#39;index 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2],
       [4, 5],
       [7, 8]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;f)- Pour calculer la transposer d&amp;rsquo;un tableau Numpy: &lt;b&gt;transpose()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.transpose(array)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 4, 7],
       [2, 5, 8],
       [3, 6, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;g)- Pour obtenir les valeurs de la diagonale d&amp;rsquo;un tableau Numpy: &lt;b&gt;diagonal()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array.diagonal() # obtenir les éléments de la diagonale de array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 5, 9])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;7-5-comparaisons-et-masques-sur-un-tableau-numpy&#34;&gt;7.5- Comparaisons et masques sur un tableau Numpy:&lt;/h2&gt;

&lt;p&gt;Avec les tableaux Numpy, il est possible d&amp;rsquo;utiliser une matrice booléenne pour filtrer et comparer des tableaux Numpy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau = np.random.randint(100,size=(6,6))  # création d&#39;un tableau 4*3 random avec valeurs comprises entre 0 et 100 
tableau
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[75, 94, 60, 30, 13, 61],
       [82, 96, 64, 97, 29, 99],
       [76, 19, 73, 74, 11,  5],
       [83, 38, 77, 58, 63, 84],
       [79, 94, 10,  5,  6, 75],
       [40, 53, 22, 67, 44, 56]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;masque = tableau&amp;gt;50# on génère ici un tableau de la même dimension que notre tableau d&#39;origine mais avec des booléens, comme un masque
masque
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ True,  True,  True, False, False,  True],
       [ True,  True,  True,  True, False,  True],
       [ True, False,  True,  True, False, False],
       [ True, False,  True,  True,  True,  True],
       [ True,  True, False, False, False,  True],
       [False,  True, False,  True, False,  True]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Étant tout deux de même dimension, nous pouvons utiliser cette matrice booléenne à notre avantage. Autrement dit, nous pouvons faire du masquage booléen. Avec cette matrice booléenne comme masque, nous pouvons l’utiliser pour sélectionner le sous-ensemble particulier de données qui nous intéresse.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau[masque] 
#tableau[tableau&amp;gt;50]  # synthaxe équivalente
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([75, 94, 60, 61, 82, 96, 64, 97, 99, 76, 73, 74, 83, 77, 58, 63, 84,
       79, 94, 75, 53, 67, 56])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous disposons de nombreux autres opérateurs de comparaison pour comparer deux tableaux tels que == (égalité), != (Non-égalité), &amp;lt;= (inférieur ou égal à). Nous pouvons même combiner deux déclarations booléennes &amp;amp; (pour les conditions “ET”) ou | (pour les conditions “OU”).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tableau[tableau&amp;gt;=50]                 # on souhaite garder uniquement les valeurs supérieures ou égales à  50.
#tableau[tableau&amp;lt;50]                      # on souhaite garder uniquement les valeurs strictement inférieures à 50.
#tableau[tableau!=50]                     # on souhaite garder uniquement les valeurs différentes de 50.
#tableau[tableau==50]                     # on souhaite garder uniquement les valeurs égales 50. 
#tableau[(tableau &amp;gt;=50) &amp;amp; (tableau &amp;lt;=70)]   # on souhaite garder uniquement les valeurs comprises entre 50 et 70 inclusivement.
tableau[(tableau&amp;gt;=50) | (tableau&amp;lt;=40)]     # on souhaite garder uniquement les valeurs non comprises entre 40 et 50. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([75, 94, 60, 30, 13, 61, 82, 96, 64, 97, 29, 99, 76, 19, 73, 74, 11,
        5, 83, 38, 77, 58, 63, 84, 79, 94, 10,  5,  6, 75, 40, 53, 22, 67,
       56])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>7- La librairie Numpy - Exercice</title>
      <link>/courses/formation_python/7-numpy-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/7-numpy-exercice/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;h1&gt; TP : Analyse de données de station &lt;/h1&gt;&lt;/p&gt;

&lt;p&gt;Objectifs: manipuler des données ascii de stations uniquement avec la librairie Numpy.&lt;/p&gt;

&lt;p&gt;Ensemble : lecture du fichier contenant les données journalières de précipitation et de température pour la station d&amp;rsquo;Ottawa pour l&amp;rsquo;année 2017&lt;/p&gt;

&lt;p&gt;1- Créer un tableau Numpy ayant une colonne pour la température et une colonne pour la précipitation. (avec deux tableaux Numpy 1D, créer un tableau 2D (365 lignes et 2 colonnes).&lt;/p&gt;

&lt;p&gt;2- Convertir les données de températures en Celcius (T[Celcius] = T[Kelvin] - 273.15).&lt;/p&gt;

&lt;p&gt;3- Combien de journées ont une accumulation supérieure à 25mm ?&lt;/p&gt;

&lt;p&gt;4- Quelle température a été enregistrée pour la journée présentant la plus grande accumulation.&lt;/p&gt;

&lt;p&gt;5- Calculer le nombre de degrés jours (&amp;gt;0degC) pour l&amp;rsquo;année 2017.&lt;/p&gt;

&lt;p&gt;6- Calculer le cumul journalier de précipitation pour l&amp;rsquo;année 2017 et assigner cette variable au tableau cumul_precipitation. Ajouter le tableau cumul_precipitation au tableau.&lt;/p&gt;

&lt;p&gt;7- Juste pour l’exercice, splitter (casser) l’array en 2 tableaux, puis les concaténer à nouveau pour obtenir le tableau initial.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
# pour lire un fichier csv avec numpy: appel de la fonction genfromtxt()
temperature = np.genfromtxt(&amp;quot;./OTTAWA_tasmoy_2017.csv&amp;quot;, dtype=float)
precipitation = np.genfromtxt(&amp;quot;./OTTAWA_PrecTOT_2017.csv&amp;quot;, dtype=float)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(temperature.shape, precipitation.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(365,) (365,)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#1- Créer un tableau Numpy ayant une colonne pour la température et une colonne pour la précipitation. 
#   (avec deux tableaux Numpy 1D, créer un tableau 2D (365 lignes et 2 colonnes).

tableau = np.column_stack([temperature,precipitation])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tableau = np.hstack([temperature,precipitation])
tableau = np.hstack([temperature.reshape(len(temperature),-1),precipitation.reshape(len(precipitation),-1)])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tableau.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(365, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#2- Convertir les données de températures en Celcius (T[Celcius] = T[Kelvin] - 273.15).
tableau[:,0]=tableau[:,0]-273.15  # on prend toutes les lignes de la première colonne 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3- Combien de journées ont une accumulation supérieure à 25mm ?
tableau[tableau[:,1]&amp;gt;=25]    # On filtre toutes les lignes de la 2ème colonne 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in greater_equal






array([[-1.8 , 26.57],
       [ 2.3 , 25.84],
       [ 3.3 , 28.49],
       [ 4.5 , 31.14],
       [ 8.8 , 35.22],
       [ 8.3 , 40.12],
       [16.  , 25.84],
       [17.3 , 37.26],
       [16.  , 26.04],
       [15.8 , 45.01]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# pour connaitre le nombre de jours, on utilise la fonction len()
len(tableau[tableau[:,1]&amp;gt;=25])  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:2: RuntimeWarning: invalid value encountered in greater_equal






10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 4- Quelle température a été enregistrée pour la journée présentant la plus grande accumulation.
precipitation_max = np.nanmax(tableau[:,1]) # on cherche le maximum d&#39;accumulation avec la fonction max()
print(precipitation_max)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;45.01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tableau[tableau[:,1] == precipitation_max] # on cherche sur toutes les lignes de la deuxième colonne celle qui correspond à notre variable precipitation_max
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[15.8 , 45.01]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 5- Calculer le nombre de degrés jours (&amp;gt;0degC) pour l&#39;année 2017. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(tableau[:,1][tableau[:,1]&amp;gt;0])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in greater
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.





1328.5300000000002
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 6- Calculer le cumul journalier de précipitation pour l&#39;année 2017
cumul_precipitation = np.nancumsum(tableau[:,1])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Ajouter le tableau cumul_precipitation au tableau. 
tableau = np.column_stack([tableau, cumul_precipitation])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 7. spliter (casser) l’array en 3 tableaux, puis concaténer à nouveau pour obtenir le tableau initial.

# on assigne les trois tableaux et on fait une coupure horizontale avec la fonction hsplit()
temperature2,precipitation2,cumul2 = np.hsplit(tableau, 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pour revenir à notre tableau original, on utilise la fonction concatenate avec l&#39;option axis = 1 
tableau_original=np.concatenate([temperature2+273.15, precipitation2], axis = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>8- La librairie Pandas - Exercice</title>
      <link>/courses/formation_python/8-pandas-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/8-pandas-exercice/</guid>
      <description>&lt;h1&gt;TP: Analyse d&#39;un listing de 10 000 chaussures vendues en ligne&lt;/h1&gt;

&lt;p&gt;source du dataset : &lt;a href=&#34;https://www.kaggle.com/datafiniti/womens-shoes-prices&#34; target=&#34;_blank&#34;&gt;https://www.kaggle.com/datafiniti/womens-shoes-prices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nous allons analyser un data set contenant 10 000 chaussures avec de nombreuse caractéristiques comme le prix, les couleurs disponibles, les tailles disponibles, leurs poids&amp;hellip;&lt;/p&gt;

&lt;p&gt;Voici une traduction de la description des colonnes principales :
- asins : Une liste des ASIN (identificateurs d&amp;rsquo;Amazon) utilisés pour ce produit.
- brand : Le nom de marque de ce produit.
- categories : Une liste de mots-clés de catégorie utilisés pour ce produit dans plusieurs sources.
- colors : Une liste de couleurs disponibles pour ce produit.
- count : Le nombre d&amp;rsquo;unités incluses dans l&amp;rsquo;emballage du produit. Peut inclure une description de l&amp;rsquo;unité.
- dateAdded : La date à laquelle ce produit a été ajouté pour la première fois à la base de données des produits.
- dateUpdated : La date la plus récente à laquelle ce produit a été mis à jour ou vu par notre système.
- descriptions : Une liste des descriptions de ce produit provenant de diverses sources. Chaque description contient :
- dimension : La longueur, la largeur et la hauteur de ce produit. Unités incluses.
- ean : Les codes EAN de ce produit. Il peut y avoir plus d&amp;rsquo;un EAN dans la liste lorsqu&amp;rsquo;un produit a plusieurs variantes,
- financingAndLeasing : Une liste des conditions de financement ou de location associées à ce produit
- features : Une liste des caractéristiques associées à ce produit. La liste des caractéristiques peut être obtenue à partir des sections de caractéristiques spécifiques disponibles dans la liste des produits du produit.
- manufacturer : Numéro du fabricant
- merchants : Une liste des marchands qui vendent ce produit. Il s&amp;rsquo;agit généralement de marchands tiers que l&amp;rsquo;on trouve sur les sites Web de commerce électronique.
- name : dénomination du produit
- prices : Une liste de prix pour ce produit.
- primaryCategories : Une liste des catégories normalisées auxquelles ce produit appartient. Les valeurs des catégories peuvent être trouvées ici.
- quantities : Une liste des quantités disponibles pour ce produit. Les quantités indiquent combien d&amp;rsquo;unités du produit sont disponibles auprès d&amp;rsquo;une source spécifique à un moment donné.
- reviews : Une liste de commentaires pour ce produit.
- sizes : Une liste des tailles disponibles pour ce produit.
- skus : Une liste des références de ce produit. Les SKU sont typiquement spécifiques aux détaillants individuels ou aux sites Web.
- sourceURLs : Une liste d&amp;rsquo;URLs utilisées pour générer les données de ce produit.
- upc : Le code CUP de ce produit.
- websiteIDs : Une liste d&amp;rsquo;identifiants de site Web pour ce produit. Les ID de site Web sont liés à un détaillant en ligne spécifique. Il s&amp;rsquo;agit de l&amp;rsquo;identifiant unique utilisé par le site Web. Ils sont utilisés par Datafiniti lorsque d&amp;rsquo;autres identificateurs uniques ne sont pas disponibles pour un produit.
- weight : Le poids du produit. Unités incluses.&lt;/p&gt;

&lt;p&gt;La source &lt;a href=&#34;https://developer.datafiniti.co/docs/product-data-schema&#34; target=&#34;_blank&#34;&gt;https://developer.datafiniti.co/docs/product-data-schema&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; Exercices &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Découverte du data set&lt;/b&gt;&lt;br&gt;
1) à l&amp;rsquo;aide de la fonction read_csv, importez entièrement le data set de enregistrez dans le dataframe &amp;lsquo;Shoes&amp;rsquo; &lt;br&gt;
2) Utilisez la méthode .head() pour afficher les premières lignes &lt;br&gt;
3) Il y a trop de colonnes&amp;hellip;Pour avoir une vue d&amp;rsquo;ensemble changez le paramétrage de pandas avec set_option pour afficher les 34 colonnes. Une fois cela fait, affichez à nouveau le head de la page &lt;br&gt;
4) On va garder uniquement les colonnes qui nous interessent. grace à la méthode de sélection de plusieurs colonnes, créez un dataframe &amp;lsquo;ShoesLight&amp;rsquo;, comprenant unique les colonnes suivantes :&amp;lsquo;id&amp;rsquo;,&amp;lsquo;name&amp;rsquo;,&amp;lsquo;dateUpdated&amp;rsquo;,&amp;lsquo;colors&amp;rsquo;,&amp;lsquo;prices.amountMax&amp;rsquo;,&amp;lsquo;prices.amountMin&amp;rsquo;,&amp;lsquo;prices.merchant&amp;rsquo;. &lt;br&gt;Affichez le head de ShoesLight.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; data cleaning &lt;/b&gt; &lt;br&gt;
5) A l&amp;rsquo;aide de la méthode .dtypes, consultez les types de chaque colonne. Ecrivez en markdown celles devant être corrigées et comment. &lt;br&gt;
6) A l&amp;rsquo;aide des méthodes .isnull, .sum() et len(), calculez le % de valeurs maquantes par colonne. Notez en markdown celles qui sont problématiques. &lt;br&gt;
7) Il manque trop de valeurs pour les colonnes des e-commercant et des couleurs. Retirez les du dataframe shoesLight &lt;br&gt;
8) A l&amp;rsquo;aide de la méthode .to_datetime, transformez la colonne &amp;lsquo;dateUpdated&amp;rsquo;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; features modeling &lt;/b&gt; &lt;br&gt;
9) caculez la colonne &amp;lsquo;prices.amountAverage&amp;rsquo; en additionnant les colonnes &amp;lsquo;prices.amountMax&amp;rsquo; et &amp;lsquo;prices.amountMin&amp;rsquo; et en divisant par 2 &lt;br&gt;
10) grace à la méthode dt.weekday, créez une colonne &amp;lsquo;dayOfweekUpdated&amp;rsquo;, permettant de connaitre à partir de dateUpdated le jour de la semaine où les produits sont mis à jour&lt;/p&gt;

&lt;p&gt;&lt;b&gt; data analyse &lt;/b&gt; &lt;br&gt;&lt;/p&gt;

&lt;p&gt;11) Analyser le prix moyen des chaussures avec la methode .desribe() &lt;br&gt;
12) Y-a-t-il de grandes différences de prix en fonction de la marque ? A l&amp;rsquo;aide des methodes groupby(), mean() et sort_values(), créez une varaible &amp;lsquo;Luxe&amp;rsquo; contenant les 10 marques les plus chères, puis la variable &amp;lsquo;lowCost&amp;rsquo; contenant les 10 marques les moins chères. &lt;br&gt;
13) grace à la méthode value_counts(), determinez le jour de la semaine où les produits sont le plus souvent mis à jour &lt;br&gt;
14) (optionnel) donnez le prix moyen des produits de la marque &amp;lsquo;easy street&amp;rsquo; mis à jour un jeudi&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;Découverte du data set&lt;/b&gt;&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
from tabulate import tabulate
shoes = pd.read_csv(&#39;Datafiniti_Womens_Shoes.csv&#39;, encoding = &#39;latin-1&#39;, sep=&#39;,&#39;)
pd.set_option(&amp;quot;display.max_columns&amp;quot;, 35)
print(tabulate(shoes.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | id                   | dateAdded            | dateUpdated          |   asins | brand       | categories                                                          | primaryCategories   | colors                         | dimension                |          ean | imageURLs| keys                                                                                                                                                                                                                           | manufacturer   | manufacturerNumber   | name                                                          |   prices.amountMax |   prices.amountMin | prices.availability   | prices.color       | prices.condition   | prices.currency   | prices.dateAdded     | prices.dateSeen                                   | prices.isSale   | prices.merchant   |   prices.offer |   prices.returnPolicy | prices.shipping   | prices.size   | prices.sourceURLs                                                                                                                                                                                                                             | sizes                                                                                                                             | sourceURLs|          upc |   weight |
|---:|:---------------------|:---------------------|:---------------------|--------:|:------------|:--------------------------------------------------------------------|:--------------------|:-------------------------------|:-------------------------|-------------:||:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------|:---------------------|:--------------------------------------------------------------|-------------------:|-------------------:|:----------------------|:-------------------|:-------------------|:------------------|:---------------------|:--------------------------------------------------|:----------------|:------------------|---------------:|----------------------:|:------------------|:--------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------||-------------:|---------:|
|  0 | AVpfEf_hLJeJML431ueH | 2015-05-04T12:13:08Z | 2018-01-29T04:38:43Z |     nan | Naturalizer | Clothing,Shoes,Women&#39;s Shoes,All Women&#39;s Shoes,Heels,Sandals        | Shoes               | Silver,Cream Watercolor Floral | nan                      | nan          | https://i5.walmartimages.com/asr/861ca6cf-fa55-4a48-904d-b764d7c00f0c_1.1a2bb39923e1486d05bdafe37ad832e3.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/efe9ba1e-daed-4534-9e2e-11804bbb30f1_1.62e3e7f0268f641323a245d5caebdd6d.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/0c717815-228e-4c9b-a8fc-d033576461c9_1.f08402e0a5165746e133ddeb589c73e0.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/f46703c8-2cdb-4bf2-a3ea-819f24aab134_1.df725b76ca0112d64bdf566ad97760a9.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/f652f354-a1fb-47ac-b507-7f97eb216b14_1.39e78b87e2328421803115869ee8b950.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,http://ak1.ostkcdn.com/images/products/84/146/P16141204.jpg,http://s1.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_tp.jpg,http://s3.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_sl.jpg,http://s2.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_rt.jpg,http://s3.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_45.jpg,http://s2.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_hl.jpg,http://s1.shoes.com/images/br021/womens-naturalizer-danya-soft-silver-crosshatch-shiny-377672_366_lt.jpg,http://ak1.ostkcdn.com/images/products/85/115/P16454357.jpg | naturalizer/47147sc022,017136472311,womensnaturalizerdanyasoftsilvercrosshatchshinypatent/16141204,womensnaturalizerdanyasoftsilvercrosshatchshinypatent/377672,womensnaturalizerdanyasoftsilvercrosshatchshinypatent/16454357 | nan            | 47147SC022           | Naturalizer Danya Women N/S Open Toe Synthetic Silver Sandals |              55.99 |              55.99 | nan                   | UWomens  M Regular | nan                | USD               | 2017-03-28T11:40:25Z | 2017-03-25T09:19:24.819Z,2017-03-25T09:19:19.600Z | False           | Overstock.com     |            nan |                   nan | nan               | S             | https://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Soft-Silver-Crosshatch-Shiny-Patent/8925023/product.html,https://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Silver-Crosshatch-Patent-PU/9291843/product.html | 6W,9W,7.5W,12W,8.5M,9N,9M,9.5M,10.5M,10W,8.5W,7M,7.5M,7N,9.5W,10N,10M,5M,12M,5.5M,8W,11W,8N,8M,4.5M,6.5M,6M,11M,6N,11N,6.5W,4M,7W | https://www.walmart.com/ip/Naturalizer-Danya-Women-N-S-Open-Toe-Synthetic-Silver-Sandals/136041884,https://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Soft-Silver-Crosshatch-Shiny-Patent/8925023/product.html,http://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Soft-Silver-Crosshatch-Shiny-Patent/8925023/product.html?refccid=O7POPZJCH6AJFPCMWNSBVDYJGI&amp;amp;searchidx=6749,https://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Silver-Crosshatch-Patent-PU/9291843/product.html,http://www.shoes.com/womens-naturalizer-danya-soft-silver-crosshatch-shiny-p2_id332635,http://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Silver-Crosshatch-Patent-PU/9291843/product.html?refccid=JEHJMDO4H2ZK5FKIT6XGVPS7B4&amp;amp;searchidx=4871,http://www.overstock.com/Clothing-Shoes/Womens-Naturalizer-Danya-Silver-Crosshatch-Patent-PU/9291843/product.html?refccid=Y6DKPF6YL5DIRFCPAK7JMVETL4&amp;amp;searchidx=4245 | 017136472311 |      nan |
|  1 | AVpi74XfLJeJML43qZAc | 2017-01-27T01:23:39Z | 2018-01-03T05:21:54Z |     nan | MUK LUKS    | Clothing,Shoes,Women&#39;s Shoes,Women&#39;s Casual Shoes,All Women&#39;s Shoes | Shoes               | Grey                           | nan                      |   3.3977e+10 | https://i5.walmartimages.com/asr/421de5d5-3a74-4ca2-ae91-a75787f7da41_1.375e3cf74dc82303ce37bdf6a9742610.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/202d5a0e-b2aa-4d47-b63c-661fc3f9cd69_1.a61c1848859953067192fb2ce1c4f916.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/55a10ffd-de74-406b-8aa5-ae5be3569ee3_1.4b179b9702f0076cdf701afd0e7dcda2.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/138e9ecf-fac8-4e9d-946a-7ca33dfa46aa_1.e4211c14f2a6ecf891e3d440402b5f82.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/8c6c1ee4-7708-4d45-b48a-b30f974a5f2f_1.857088c50496451990583941d955218d.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/a486d1cf-f2b5-49ca-b0f8-3e2db896c51c_1.de1c99ac6fdfcf3dc3ddbd9c1c6c72b1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg| mukluks/00173650206,033977045743,muklukswomensjanesuedemoccasin/553406801,0033977045743                                                                                                                                        | Muk Luks       | 0017365020-6         | MUK LUKS Womens Jane Suede Moccasin                           |              47    |              35.25 | In Stock              | Grey               | New                | USD               | 2018-01-03T05:21:54Z | 2017-12-08T14:24:00.000Z,2017-11-01T02:52:00.000Z | True            | Walmart.com       |            nan |                   nan | Standard          | 6             | https://www.walmart.com/ip/MUK-LUKS-Womens-Jane-Suede-Moccasin/41271362                                                                                                                                                                       | 10,7,6,9,8                                                                                                                        | https://www.walmart.com/ip/MUK-LUKS-Womens-Jane-Suede-Moccasin| 033977045743 |      nan |
|  2 | AVpi74XfLJeJML43qZAc | 2017-01-27T01:23:39Z | 2018-01-03T05:21:54Z |     nan | MUK LUKS    | Clothing,Shoes,Women&#39;s Shoes,Women&#39;s Casual Shoes,All Women&#39;s Shoes | Shoes               | Grey                           | nan                      |   3.3977e+10 | https://i5.walmartimages.com/asr/421de5d5-3a74-4ca2-ae91-a75787f7da41_1.375e3cf74dc82303ce37bdf6a9742610.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/202d5a0e-b2aa-4d47-b63c-661fc3f9cd69_1.a61c1848859953067192fb2ce1c4f916.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/55a10ffd-de74-406b-8aa5-ae5be3569ee3_1.4b179b9702f0076cdf701afd0e7dcda2.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/138e9ecf-fac8-4e9d-946a-7ca33dfa46aa_1.e4211c14f2a6ecf891e3d440402b5f82.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/8c6c1ee4-7708-4d45-b48a-b30f974a5f2f_1.857088c50496451990583941d955218d.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/a486d1cf-f2b5-49ca-b0f8-3e2db896c51c_1.de1c99ac6fdfcf3dc3ddbd9c1c6c72b1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg| mukluks/00173650206,033977045743,muklukswomensjanesuedemoccasin/553406801,0033977045743                                                                                                                                        | Muk Luks       | 0017365020-6         | MUK LUKS Womens Jane Suede Moccasin                           |              35.25 |              35.25 | In Stock              | Grey               | New                | USD               | 2017-12-06T05:02:42Z | 2017-11-10T15:11:00.000Z,2017-11-18T08:00:00.000Z | False           | Slippers Dot Com  |            nan |                   nan | Value             | 6             | https://www.walmart.com/ip/MUK-LUKS-Womens-Jane-Suede-Moccasin/41271362                                                                                                                                                                       | 10,7,6,9,8                                                                                                                        | https://www.walmart.com/ip/MUK-LUKS-Womens-Jane-Suede-Moccasin| 033977045743 |      nan |
|  3 | AVpjXyCc1cnluZ0-V-Gj | 2017-01-27T01:25:56Z | 2018-01-04T11:52:35Z |     nan | MUK LUKS    | Clothing,Shoes,Women&#39;s Shoes,All Women&#39;s Shoes,Women&#39;s Slippers     | Shoes,Shoes         | Black                          | 6.0 in x 6.0 in x 1.0 in |   3.3977e+10 | https://i5.walmartimages.com/asr/950d38a5-0113-4111-952d-33fdcde53902_1.d2dd17888ccb2856f3227e0273d911f8.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/cd183ae0-efea-4771-b3fd-d341a57887cf_1.24ec8674bb4d7a783a92fe8c33656327.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/68891305-0fb3-4249-b7de-7dabd8702994_1.0f4a323222d690fca9dc9bb8f70f2761.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/d43b85d9-b4de-43fc-a9ca-0979e2f50455_1.5e4d5516a1443339e7dc329feb348cd1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/0ef94daa-fa39-420d-bb4c-e6156c441ce3_1.52cd0a9a611b0238ce83767b4dcf205e.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/3fece502-09aa-4981-ac4f-e1b7c4d5f954_1.e12aa766531546eea0f4143b37b8e4c1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,http://i5.walmartimages.com/dfw/dce07b8c-a7ea/k2-_46c4321b-d9d6-43b8-bc25-375ae7b82de0.v1.jpg,http://i5.walmartimages.com/dfw/dce07b8c-5142/k2-_74fbfb19-88d1-4a20-bd31-58b6a4b908ef.v1.jpg,http://i5.walmartimages.com/dfw/dce07b8c-2bb2/k2-_70437d33-1a05-4563-8eb6-a2b5f303580d.v2.jpg                                                                                                                                                                                                                                                                                                                               | 033977045903,muklukswomensdawnsuedescuffslipper/553409417,mukluks/00173660016,0033977045903                                                                                                                                    | Muk Luks       | 0017366001-6         | MUK LUKS Womens Dawn Suede Scuff Slipper                      |              24.75 |              24.75 | In Stock              | Black              | New                | USD               | 2018-01-04T11:52:35Z | 2017-12-07T16:37:00.000Z                          | False           | Slippers Dot Com  |            nan |                   nan | Value             | 6             | https://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper/41288600                                                                                                                                                                  | 10,7,6,9,8                                                                                                                        | https://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper/41288600,http://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper| 033977045903 |      nan |
|  4 | AVphGKLPilAPnD_x1Nrm | 2017-01-27T01:25:56Z | 2018-01-18T03:55:18Z |     nan | MUK LUKS    | Clothing,Shoes,Women&#39;s Shoes,All Women&#39;s Shoes,Women&#39;s Slippers     | Shoes               | Grey                           | 6.0 in x 6.0 in x 1.0 in |   3.3977e+10 | https://i5.walmartimages.com/asr/5e137bc3-c900-4886-8b34-b668151f701b_1.84e3c472b6a11bf7a4591a29bc82e9d2.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/7daeac49-7810-406f-9c26-d4114c95f45d_1.a15e4690332f4ff0ff36ca920e8e524c.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/91daf35f-626a-4fbd-8f18-5eda881bd8c9_1.37f9328c0a254b6448fb81cd45161967.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/4189df99-e20a-4d15-8c84-2d2099b22268_1.fb873895715fea71bc31f0e89abca53d.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/366cacbc-afd6-4f00-a9e4-0f55dbb0ecfc_1.5d03f6fc3bff935a2295ed3ec1653da1.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF,https://i5.walmartimages.com/asr/5752e61a-01c2-4791-85a1-726a40accaf8_1.64d856d974c88497ac10a6ca5444291f.jpeg?odnHeight=450&amp;amp;odnWidth=450&amp;amp;odnBg=FFFFFF                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         | mukluks/00173660206,033977045958,0033977045958,muklukswomensdawnsuedescuffslipper/553409491                                                                                                                                    | nan            | 0017366020-6         | MUK LUKS Womens Dawn Suede Scuff Slipper                      |              33    |              30.39 | In Stock              | Grey               | New                | USD               | 2017-12-04T21:35:47Z | 2017-11-17T21:15:00.000Z                          | True            | Walmart.com       |            nan |                   nan | Expedited         | 6             | https://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper/41288525                                                                                                                                                                  | 10,7,6,9,8                                                                                                                        | https://www.walmart.com/ip/MUK-LUKS-Womens-Dawn-Suede-Scuff-Slipper/41288525,https://www.walmart.com/ip/Women-s-MUK-LUKS-Dawn-Suede-Scuff/41288525,https://www.walmart.com/ip| 033977045958 |      nan |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight = shoes[[&#39;id&#39;,&#39;name&#39;,&#39;dateUpdated&#39;,&#39;colors&#39;,&#39;prices.amountMax&#39;,&#39;prices.amountMin&#39;,&#39;prices.merchant&#39;]]
print(tabulate(shoesLight.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | id                   | name                                                          | dateUpdated          | colors                         |   prices.amountMax |   prices.amountMin | prices.merchant   |
|---:|:---------------------|:--------------------------------------------------------------|:---------------------|:-------------------------------|-------------------:|-------------------:|:------------------|
|  0 | AVpfEf_hLJeJML431ueH | Naturalizer Danya Women N/S Open Toe Synthetic Silver Sandals | 2018-01-29T04:38:43Z | Silver,Cream Watercolor Floral |              55.99 |              55.99 | Overstock.com     |
|  1 | AVpi74XfLJeJML43qZAc | MUK LUKS Womens Jane Suede Moccasin                           | 2018-01-03T05:21:54Z | Grey                           |              47    |              35.25 | Walmart.com       |
|  2 | AVpi74XfLJeJML43qZAc | MUK LUKS Womens Jane Suede Moccasin                           | 2018-01-03T05:21:54Z | Grey                           |              35.25 |              35.25 | Slippers Dot Com  |
|  3 | AVpjXyCc1cnluZ0-V-Gj | MUK LUKS Womens Dawn Suede Scuff Slipper                      | 2018-01-04T11:52:35Z | Black                          |              24.75 |              24.75 | Slippers Dot Com  |
|  4 | AVphGKLPilAPnD_x1Nrm | MUK LUKS Womens Dawn Suede Scuff Slipper                      | 2018-01-18T03:55:18Z | Grey                           |              33    |              30.39 | Walmart.com       |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;id                   object
name                 object
dateUpdated          object
colors               object
prices.amountMax    float64
prices.amountMin    float64
prices.merchant      object
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;dateUpdated doit etre passé en datetime&lt;/li&gt;

&lt;li&gt;&lt;p&gt;colors doit etre passé en liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight.isnull().sum()/len(shoesLight)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;id                  0.0000
name                0.0000
dateUpdated         0.0000
colors              0.7369
prices.amountMax    0.0000
prices.amountMin    0.0000
prices.merchant     0.9565
dtype: float64&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il manque 75% des valeurs pour les couelurs et quasi tous les noms des e-commercants.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight = shoes[[&#39;id&#39;,&#39;name&#39;,&#39;brand&#39;,&#39;dateUpdated&#39;,&#39;prices.amountMax&#39;,&#39;prices.amountMin&#39;]]
print(tabulate(shoesLight.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | id                   | name                                                          | brand       | dateUpdated          |   prices.amountMax |   prices.amountMin |
|---:|:---------------------|:--------------------------------------------------------------|:------------|:---------------------|-------------------:|-------------------:|
|  0 | AVpfEf_hLJeJML431ueH | Naturalizer Danya Women N/S Open Toe Synthetic Silver Sandals | Naturalizer | 2018-01-29T04:38:43Z |              55.99 |              55.99 |
|  1 | AVpi74XfLJeJML43qZAc | MUK LUKS Womens Jane Suede Moccasin                           | MUK LUKS    | 2018-01-03T05:21:54Z |              47    |              35.25 |
|  2 | AVpi74XfLJeJML43qZAc | MUK LUKS Womens Jane Suede Moccasin                           | MUK LUKS    | 2018-01-03T05:21:54Z |              35.25 |              35.25 |
|  3 | AVpjXyCc1cnluZ0-V-Gj | MUK LUKS Womens Dawn Suede Scuff Slipper                      | MUK LUKS    | 2018-01-04T11:52:35Z |              24.75 |              24.75 |
|  4 | AVphGKLPilAPnD_x1Nrm | MUK LUKS Womens Dawn Suede Scuff Slipper                      | MUK LUKS    | 2018-01-18T03:55:18Z |              33    |              30.39 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight[&#39;dateUpdated&#39;] = pd.to_datetime(shoesLight[&#39;dateUpdated&#39;])
shoesLight[&#39;dateUpdated&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.





0      2018-01-29 04:38:43+00:00
1      2018-01-03 05:21:54+00:00
2      2018-01-03 05:21:54+00:00
3      2018-01-04 11:52:35+00:00
4      2018-01-18 03:55:18+00:00
5      2018-10-23 21:26:11+00:00
6      2018-10-15 15:50:13+00:00
7      2018-10-15 15:50:13+00:00
8      2018-01-03 05:22:07+00:00
9      2018-01-30 06:18:34+00:00
10     2018-01-30 06:18:34+00:00
11     2018-01-23 04:13:40+00:00
12     2018-01-04 11:52:59+00:00
13     2018-01-04 11:52:59+00:00
14     2018-01-04 08:03:19+00:00
15     2018-01-28 10:16:47+00:00
16     2018-01-28 10:16:47+00:00
17     2018-01-28 10:16:47+00:00
18     2018-01-28 10:52:04+00:00
19     2018-01-28 10:52:04+00:00
20     2018-01-09 21:18:52+00:00
21     2018-06-05 22:29:16+00:00
22     2018-01-04 11:52:59+00:00
23     2018-01-04 08:02:27+00:00
24     2018-01-04 08:03:26+00:00
25     2018-01-03 05:21:54+00:00
26     2018-01-03 05:21:54+00:00
27     2018-04-21 12:44:31+00:00
28     2018-04-21 12:44:31+00:00
29     2018-04-21 12:44:03+00:00
                  ...           
9970   2018-04-06 21:35:55+00:00
9971   2018-04-06 21:35:47+00:00
9972   2018-04-06 21:35:47+00:00
9973   2018-04-06 21:35:46+00:00
9974   2018-04-06 21:35:46+00:00
9975   2018-04-06 21:35:46+00:00
9976   2018-04-06 21:35:43+00:00
9977   2018-04-06 21:35:43+00:00
9978   2018-04-06 21:35:38+00:00
9979   2018-04-06 21:35:38+00:00
9980   2018-04-06 21:35:37+00:00
9981   2018-04-06 21:35:36+00:00
9982   2018-04-06 21:35:34+00:00
9983   2018-04-06 21:35:34+00:00
9984   2018-04-06 21:35:34+00:00
9985   2018-04-06 21:35:34+00:00
9986   2018-04-06 21:35:34+00:00
9987   2018-04-06 21:35:34+00:00
9988   2018-04-06 21:02:08+00:00
9989   2018-04-06 21:02:08+00:00
9990   2018-04-06 21:02:08+00:00
9991   2018-04-06 21:02:08+00:00
9992   2018-04-06 21:02:08+00:00
9993   2018-04-06 21:02:08+00:00
9994   2018-04-06 21:02:08+00:00
9995   2018-04-06 21:02:04+00:00
9996   2018-04-06 21:02:04+00:00
9997   2018-04-06 21:02:01+00:00
9998   2018-04-06 21:01:53+00:00
9999   2018-04-06 21:01:50+00:00
Name: dateUpdated, Length: 10000, dtype: datetime64[ns, UTC]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight[&#39;prices.amountAverage&#39;] =  (shoesLight[&#39;prices.amountMax&#39;] + shoesLight[&#39;prices.amountMin&#39;]) / 2
shoesLight[&#39;prices.amountAverage&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.





0    55.990
1    41.125
2    35.250
3    24.750
4    31.695
Name: prices.amountAverage, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shoesLight[&#39;prices.amountAverage&#39;].describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count    10000.000000
mean        60.177376
std         18.786193
min          5.375000
25%         49.990000
50%         56.875000
75%         67.490000
max        359.950000
Name: prices.amountAverage, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>8- La lirairie Pandas - Cours</title>
      <link>/courses/formation_python/8-pandas/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/8-pandas/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pandas.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;la-librairie-pandas&#34;&gt;La librairie Pandas:&lt;/h2&gt;

&lt;p&gt;Pandas est une bibliothèque spécialisée dans la manipulation de données.
Cette bibliothèque regroupe un ensemble de fonctions optimisées pour manipuler de gros jeux de données.
Elle permet de créer et exporter des tables de données à partir de fichiers textes (séparateurs, .csv, format fixe, compressés), binaires (HDF5 avec Pytable), HTML, XML, JSON, MongoDB, SQL&amp;hellip;&lt;/p&gt;

&lt;p&gt;Une nouvelle structure de donnée est utilisée avec cette bibliothèque: le DataFrame .
Il existe deux types de données avec pandas: les séries et les dataframes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Un dataframe est un tableau qui est crée avec des dictionnaires ou des listes&lt;/li&gt;
&lt;li&gt;Ils sont basés sur des tableaux Numpy ou ndarray&lt;/li&gt;
&lt;li&gt;Ils peuvent avoir des noms de colonnes et des noms de lignes&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ils ont la particularité de pouvoir mélanger les types de données: str, float, Nan, Int&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On peut les visualiser comme une feuille excell mais avec un nombre important de volumes de données ainsi qu&amp;rsquo;un nombre importants de fonctions et attributs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction-sur-les-séries&#34;&gt;- Introduction sur les séries -&lt;/h2&gt;

&lt;p&gt;Une série est un objet unidimensionnel. Les séries représentent les valeurs d&amp;rsquo;une variable statistique.
Variables quantitatives ou des variables qualitatives.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# on va charger la librairie pandas 
import pandas as pd      # création d&#39;un alias pour alléger les codes 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On va créer une série. On peut soit utiliser des listes, soit des dictionnaires.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie = pd.Series([11,15,12,13,14])
print(serie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    11
1    15
2    12
3    13
4    14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons dans les séries, les index et les valeurs. On peut remplacer ces index par du texte avec l&amp;rsquo;option index. Attention, le nombre d&amp;rsquo;index doit correspondre au nombre de valeurs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie = pd.Series([11,15,12,13,14], index=[&amp;quot;Montréal&amp;quot;, &amp;quot;Ottawa&amp;quot;, &amp;quot;Toronto&amp;quot;, &amp;quot;Gatineau&amp;quot;, &amp;quot;Québec&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(serie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montréal    11
Ottawa      15
Toronto     12
Gatineau    13
Québec      14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La méthode describe() nous donne la distribution de nos données dans la série.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count     5.000000
mean     13.000000
std       1.581139
min      11.000000
25%      12.000000
50%      13.000000
75%      14.000000
max      15.000000
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut accéder à une valeur en utilisant l&amp;rsquo;index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[&amp;quot;Montréal&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mais on peut toujours utiliser le numéro de l&amp;rsquo;index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[3]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut accéder à plusieurs index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[[&amp;quot;Montréal&amp;quot;, &amp;quot;Québec&amp;quot;, &amp;quot;Toronto&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montréal    11
Québec      14
Toronto     12
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il exite d&amp;rsquo;autres méthodes intéressantes pour faire des calculs sur la série.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.min()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.max()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut utiliser des opérateurs de comparaison.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[serie&amp;gt;12]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Ottawa      15
Gatineau    13
Québec      14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie&amp;gt;12 # c est l&#39;ensemble de booléens.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montréal    False
Ottawa       True
Toronto     False
Gatineau     True
Québec       True
dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-les-dataframes&#34;&gt;8- Les dataframes:&lt;/h2&gt;

&lt;p&gt;Un dataframe est un tableau avec des observations ou individus sur les lignes et des attributs sur les colonnes qui décrivent les individus.&lt;/p&gt;

&lt;p&gt;Un DataFrame est une structure de données tabulaire bidimensionnelle à taille variable, potentiellement hétérogène avec des axes étiquetés (lignes et colonnes).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataframe_shadow.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Les attributs peuvent être soit qualitatif soit quantitatif.&lt;/p&gt;

&lt;h2 id=&#34;8-1-création-d-un-dataframe&#34;&gt;8.1- Création d&amp;rsquo;un Dataframe:&lt;/h2&gt;

&lt;p&gt;Dans le monde réel, un DataFrame sera créé en chargeant les jeux de données à partir du stockage existant, le stockage peut être par exemple une base de données SQL, un fichier CSV ou un fichier Excel.&lt;/p&gt;

&lt;p&gt;Le DataFrame peut aussi être créé à partir de listes, d&amp;rsquo;un dictionnaire et d&amp;rsquo;une liste de dictionnaires, etc.&lt;/p&gt;

&lt;p&gt;Voici quelques façons de créer un dataframe:&lt;/p&gt;

&lt;h2 id=&#34;8-1-1-création-d-un-dataframe-à-partir-d-un-array-numpy&#34;&gt;8.1.1- Création d&amp;rsquo;un DataFrame à partir d&amp;rsquo;un array Numpy:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np  # on importe la librairie numpy
stations = np.genfromtxt(&amp;quot;./DATA/DATA_Barrage_1963_2017_5.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;, dtype=&#39;float&#39;)   # on assigne une variable. 
stations
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  39.7       ,   39.09      ,   39.55645161,   23.23      ,
          22.5       ,   22.85903226, 2390.52612903, 3164.97      ,
        1673.8       ],
       [  41.16      ,   40.96      ,   41.08806452,   23.22      ,
          22.43      ,   22.7583871 , 2227.28290323, 3008.18      ,
        1697.87      ],
       [  41.15      ,   41.05      ,   41.11322581,   23.35      ,
          22.87      ,   23.15548387, 2851.27419355, 3231.8       ,
        2367.85      ],
       [  41.09      ,   40.61      ,   40.9683871 ,   23.78      ,
          22.7       ,   23.03258065, 2635.03774194, 3967.33      ,
        2069.65      ],
       [  41.09      ,   39.6       ,   40.26967742,   24.24      ,
          22.87      ,   23.64580645, 3924.23451613, 5407.32      ,
        2417.89      ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour créer le dataframe, on utilise la fonction &lt;b&gt;DataFrame()&lt;/b&gt; de pandas. C&amp;rsquo;est à cette étape qu&amp;rsquo;on définit le nom de nos colonnes.  En entrée on met le tableau Numpy .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.DataFrame(stations, columns=[&amp;quot;Amont Max&amp;quot;, &amp;quot;Amont Min&amp;quot;, &amp;quot;Amont Moyen&amp;quot;, &amp;quot;Aval Max&amp;quot;, &amp;quot;Aval Max&amp;quot;, &amp;quot;Aval Moyen&amp;quot;, &amp;quot;Debit Moyen&amp;quot;, &amp;quot;Debit Max&amp;quot;,&amp;quot;Debit Min&amp;quot;])
dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Amont Max |   Amont Min |   Amont Moyen |   Aval Max |   Aval Max |   Aval Moyen |   Debit Moyen |   Debit Max |   Debit Min |
|---:|------------:|------------:|--------------:|-----------:|-----------:|-------------:|--------------:|------------:|------------:|
|  0 |       39.7  |       39.09 |       39.5565 |      23.23 |      22.5  |      22.859  |       2390.53 |     3164.97 |     1673.8  |
|  1 |       41.16 |       40.96 |       41.0881 |      23.22 |      22.43 |      22.7584 |       2227.28 |     3008.18 |     1697.87 |
|  2 |       41.15 |       41.05 |       41.1132 |      23.35 |      22.87 |      23.1555 |       2851.27 |     3231.8  |     2367.85 |
|  3 |       41.09 |       40.61 |       40.9684 |      23.78 |      22.7  |      23.0326 |       2635.04 |     3967.33 |     2069.65 |
|  4 |       41.09 |       39.6  |       40.2697 |      24.24 |      22.87 |      23.6458 |       3924.23 |     5407.32 |     2417.89 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-1-2-création-d-un-dataframe-à-partir-de-series&#34;&gt;8.1.2- Création d&amp;rsquo;un DataFrame à partir de series:&lt;/h2&gt;

&lt;p&gt;On a vu précédemment comment créer une Série. On peut s&amp;rsquo;en servir pour créer des Dataframes.&lt;/p&gt;

&lt;p&gt;Lors de la création d&amp;rsquo;un DataFrame, chaque série définira une colonne.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# on crée une première série 
groupe1=pd.Series([11,15,12,13], index=[&amp;quot;Fred&amp;quot;, &amp;quot;Jeanne&amp;quot;, &amp;quot;Julie&amp;quot;, &amp;quot;Julien&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;groupe1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Fred      11
Jeanne    15
Julie     12
Julien    13
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# on crée une deuxième série mais avec des nouveaux élèves en plus et des élèves absents.   
groupe2=pd.Series([11,15,15,11], index=[&amp;quot;Fred&amp;quot;, &amp;quot;Jeanne&amp;quot;, &amp;quot;Damien&amp;quot;, &amp;quot;Samuel&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On crée notre DataFrame avec nos deux séries.
Pour cela on utilise des dictionnaire pour créer un dataframe avec des séries, donc on utilise des {}, avec des clés et des valeurs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.DataFrame({&amp;quot;Groupe1&amp;quot; : groupe1, &amp;quot;Groupe2&amp;quot; : groupe2})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|        |   Groupe1 |   Groupe2 |
|:-------|----------:|----------:|
| Damien |       nan |        15 |
| Fred   |        11 |        11 |
| Jeanne |        15 |        15 |
| Julie  |        12 |       nan |
| Julien |        13 |       nan |
| Samuel |       nan |        11 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NaN: la valeur n&amp;rsquo;est pas disponible.&lt;/p&gt;

&lt;h2 id=&#34;8-1-3-création-d-un-dataframe-à-partir-d-un-fichier-csv-fonctions-b-read-table-b-ou-b-read-csv&#34;&gt;8.1.3- Création d&amp;rsquo;un DataFrame à partir d&amp;rsquo;un fichier csv: fonctions &lt;b&gt;read_table()&lt;/b&gt; ou &lt;b&gt;read_csv():&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;read_table()&lt;/b&gt; et &lt;b&gt;read_csv()&lt;/b&gt; sont les fonctions les plus utiles sous Pandas pour lire des fichiers textes et générer un objet de type DataFrame.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On va travailler avec un jeu de données issu d&amp;rsquo;un barrage hydraulique.&lt;/p&gt;

&lt;p&gt;Notre fichier csv possède 9 variables, la première ligne nous renvoie les noms des variables (ou labels).&lt;/p&gt;

&lt;p&gt;On peut lire un document csv avec la fonction &lt;b&gt;read_table()&lt;/b&gt; , en mettant en attribut le séparateur &amp;ldquo;,&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barrage = pd.read_table(&amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;, sep=&amp;quot;,&amp;quot;)
barrage.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Amont_max |   Amont_min |   Amont_moyen |   Aval_max |   Aval_min |   Aval_moyen |   Debit_Moyen |   Debit_max |   Debit_min |
|---:|------------:|------------:|--------------:|-----------:|-----------:|-------------:|--------------:|------------:|------------:|
|  0 |       39.7  |       39.09 |       39.5565 |      23.23 |      22.5  |      22.859  |       2390.53 |     3164.97 |     1673.8  |
|  1 |       41.16 |       40.96 |       41.0881 |      23.22 |      22.43 |      22.7584 |       2227.28 |     3008.18 |     1697.87 |
|  2 |       41.15 |       41.05 |       41.1132 |      23.35 |      22.87 |      23.1555 |       2851.27 |     3231.8  |     2367.85 |
|  3 |       41.09 |       40.61 |       40.9684 |      23.78 |      22.7  |      23.0326 |       2635.04 |     3967.33 |     2069.65 |
|  4 |       41.09 |       39.6  |       40.2697 |      24.24 |      22.87 |      23.6458 |       3924.23 |     5407.32 |     2417.89 |


D:\Utilisateurs\guillaume\Anaconda3\lib\site-packages\ipykernel_launcher.py:1: FutureWarning: read_table is deprecated, use read_csv instead.
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cependant, si on sait que notre fichier à lire est un csv, on peut utiliser une fonction plus simple de Pandas qui est &lt;b&gt;read_csv()&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Pas besoin de l&amp;rsquo;option sep=&amp;rdquo; . Il trouvera le séparateur par défault.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barrage = pd.read_csv(&amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;)

barrage.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Amont_max |   Amont_min |   Amont_moyen |   Aval_max |   Aval_min |   Aval_moyen |   Debit_Moyen |   Debit_max |   Debit_min |
|---:|------------:|------------:|--------------:|-----------:|-----------:|-------------:|--------------:|------------:|------------:|
|  0 |       39.7  |       39.09 |       39.5565 |      23.23 |      22.5  |      22.859  |       2390.53 |     3164.97 |     1673.8  |
|  1 |       41.16 |       40.96 |       41.0881 |      23.22 |      22.43 |      22.7584 |       2227.28 |     3008.18 |     1697.87 |
|  2 |       41.15 |       41.05 |       41.1132 |      23.35 |      22.87 |      23.1555 |       2851.27 |     3231.8  |     2367.85 |
|  3 |       41.09 |       40.61 |       40.9684 |      23.78 |      22.7  |      23.0326 |       2635.04 |     3967.33 |     2069.65 |
|  4 |       41.09 |       39.6  |       40.2697 |      24.24 |      22.87 |      23.6458 |       3924.23 |     5407.32 |     2417.89 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#help(pd.read_csv)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Plusieurs options sont mises à disposition de la fonction read_csv(). Il est important de connaître la liste des possibilités et options offertes par cette simple commande.&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;path&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Chemin ou non du fichier ou URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;sep&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;délimiteur comme , ; | \t ou \s+ pour un nombre variable d’espaces&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;header&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;défaut 0, la première ligne contient le nom des variables ; si None les noms sont générés ou définis par ailleurs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;index_col&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Noms ou numéros de colonnes définissant les index de lignes, index pouvant être hiérarchisés comme les facteurs d’un plan d’expérience.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;names&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Si header=None, liste des noms des variables.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;nrows&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Utile pour tester et limiter le nombre de ligne à lire&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;skiprow&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Liste de lignes à sauter en lecture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;skip_footer&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Nombre de lignes à sauter en fin de fichier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;na_values&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Définition du ou des codes signalant des valeurs manquantes. Ils
peuvent être définis dans un dictionnaire pour associer variables et codes
de valeurs manquantes spécifiques&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;usecols&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Sélectionne une liste des variable à lire pour éviter de lire des
champs ou variables volumineuses et inutiles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;skip_blank_lines&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Si &lt;b&gt;True&lt;/b&gt;, on saute les lignes blanches &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;thousand&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Séparateur des miliers : &#34;.&#34; ou &#34;,&#34;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;file1 = &amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;
col_names = [&#39;Variable1&#39;, &#39;Variable2&#39;, &#39;Variable3&#39;]
df2 = pd.read_csv(file1, skiprows=1, usecols=[0, 1, 3], names=col_names)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
df2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Variable1 |   Variable2 |   Variable3 |
|---:|------------:|------------:|------------:|
|  0 |       39.7  |       39.09 |       23.23 |
|  1 |       41.16 |       40.96 |       23.22 |
|  2 |       41.15 |       41.05 |       23.35 |
|  3 |       41.09 |       40.61 |       23.78 |
|  4 |       41.09 |       39.6  |       24.24 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-1-4-création-d-un-dataframe-à-partir-d-un-fichier-txt&#34;&gt;8.1.4- Création d&amp;rsquo;un DataFrame à partir d&amp;rsquo;un fichier txt:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;./DATA/Daily_Precipitation_1963-2017.txt&#39;, &#39;r&#39;) as file:
        rows = file.read()      
dataset = [float(row) for row in rows.split()]   
df3 = pd.DataFrame({&amp;quot;Precipitation&amp;quot; : dataset})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Precipitation |
|---:|----------------:|
|  0 |               0 |
|  1 |               0 |
|  2 |               0 |
|  3 |               0 |
|  4 |               0 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-1-5-création-d-un-dataframe-à-partir-d-un-fichier-excell-ou-xls-fonction-b-read-excel-b&#34;&gt;8.1.5- Création d&amp;rsquo;un DataFrame à partir d&amp;rsquo;un fichier excell ou (.xls): fonction &lt;b&gt;read_excel()&lt;/b&gt;&lt;/h2&gt;

&lt;p&gt;Nous allons ouvrir ici un fichier excell (d&amp;rsquo;extension .xls). Ce fichier est une base de données contenant de l&amp;rsquo;information sur toutes les stations homogénéisées de température d&amp;rsquo;Environnement et Changement Climatique Canada.&lt;/p&gt;

&lt;p&gt;Cette base de données présente 11 colonnes avec des données commençant à la 4 ème ligne.&lt;/p&gt;

&lt;p&gt;On va définir la colonne Province comme index de notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df4 = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, index_col=0,skiprows = range(0, 3))
from tabulate import tabulate
print(tabulate(df4.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|
| BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
| BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
| BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
| BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
| BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt; 8.2- Premiers pas sur un DataFrame:&lt;/h2&gt; 

&lt;p&gt;Une fois le dataframe crée, on peut appliquer quelques fonctions et méthodes pour effectuer une première exploration du jeu de données.&lt;/p&gt;

&lt;p&gt;Il existe plusieurs fonctions, méthodes ou attributs qu&amp;rsquo;on peut appliquer sur les DataFrame:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nous allons présenter quelques fonctions utiles lors de l&amp;rsquo;exploration d&amp;rsquo;un jeu de données.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
from tabulate import tabulate
print(tabulate(dataframe.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |      Tmax |   Tmax90p |      Tmin |   Tmin10p |      DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|----------:|----------:|----------:|----------:|---------:|
|  0 |            0 | BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              | nan       |  nan      | nan       | nan       |  nan     |
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |   5.63043 |   18.9033 |  -3.46052 | -19.235   |  860.083 |
|  2 |            2 | BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              | nan       |  nan      | nan       | nan       |  nan     |
|  3 |            3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |  12.628   |   23.6417 |   4.01748 |  -3.646   | 1798.09  |
|  4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 | N              |  12.1556  |   20.2007 |   6.77689 |   1.09467 | 2518.68  |
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;La méthode &lt;b&gt;.info()&lt;/b&gt; :&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;&lt;strong&gt;Pandas dtype&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;&lt;strong&gt;Python type&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;&lt;strong&gt;Numpy type&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;object&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;str or mixed&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;string_,unicode_,mixed types&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Text or mixed numeric and non-numeric values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;int64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;int_,int8,int16,int32,int64,uint8,uint16,uint32,uint64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Integer numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;float64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;float_, float16, float32, float64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Floating point numbers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;bool_&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;True/False values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;datetime64&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;datetime64[ns]&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Date and time values&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;timedelta[ns]&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Differences between two datetimes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr style=&#34;height: 13px;&#34;&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;category&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;NA&lt;/td&gt;
&lt;td style=&#34;height: 13px;&#34;&gt;Finite list of text values&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 289 entries, 0 to 288
Data columns (total 17 columns):
Unnamed: 0        289 non-null int64
Prov              289 non-null object
Nom de station    289 non-null object
stnid             289 non-null object
année déb.        289 non-null int64
mois déb.         289 non-null int64
année fin.        289 non-null int64
mois fin.         289 non-null int64
lat (deg)         289 non-null float64
long (deg)        289 non-null float64
élév (m)          289 non-null int64
stns jointes      289 non-null object
Tmax              172 non-null float64
Tmax90p           172 non-null float64
Tmin              171 non-null float64
Tmin10p           171 non-null float64
DG0               171 non-null float64
dtypes: float64(7), int64(6), object(4)
memory usage: 38.5+ KB
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.dtypes()&lt;/b&gt;:  nous fournit les types de variables de notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unnamed: 0          int64
Prov               object
Nom de station     object
stnid              object
année déb.          int64
mois déb.           int64
année fin.          int64
mois fin.           int64
lat (deg)         float64
long (deg)        float64
élév (m)            int64
stns jointes       object
Tmax              float64
Tmax90p           float64
Tmin              float64
Tmin10p           float64
DG0               float64
dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.Prov.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dtype(&amp;lsquo;O&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.shape&lt;/b&gt; : retourne un tuple sur la dimension de notre DataFrame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.shape # nous avons donc 289 lignes et 17 colonnes dans notre base de données.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(289, 17)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.columns&lt;/b&gt;: retourne les noms des colonnes de notre DataFrame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Index([&amp;lsquo;Unnamed: 0&amp;rsquo;, &amp;lsquo;Prov&amp;rsquo;, &amp;lsquo;Nom de station&amp;rsquo;, &amp;lsquo;stnid&amp;rsquo;, &amp;lsquo;année déb.&amp;rsquo;,
       &amp;lsquo;mois déb.&amp;rsquo;, &amp;lsquo;année fin.&amp;rsquo;, &amp;lsquo;mois fin.&amp;rsquo;, &amp;lsquo;lat (deg)&amp;rsquo;, &amp;lsquo;long (deg)&amp;rsquo;,
       &amp;lsquo;élév (m)&amp;rsquo;, &amp;lsquo;stns jointes&amp;rsquo;, &amp;lsquo;Tmax&amp;rsquo;, &amp;lsquo;Tmax90p&amp;rsquo;, &amp;lsquo;Tmin&amp;rsquo;, &amp;lsquo;Tmin10p&amp;rsquo;,
       &amp;lsquo;DG0&amp;rsquo;],
      dtype=&amp;lsquo;object&amp;rsquo;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;La méthode &lt;b&gt;.isnull&lt;/b&gt;:  nous informe si la valeur est NaN ou non
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On va imbriquer deux méthodes pour connaître le nombre de valeurs manquantes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- .isnull(): nous informe si la valeur est NaN ou non 

- .sum(): effectue la somme. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.isnull().sum() # information sur la somme des NaN par catégorie
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Unnamed: 0          0
Prov                0
Nom de station      0
stnid               0
année déb.          0
mois déb.           0
année fin.          0
mois fin.           0
lat (deg)           0
long (deg)          0
élév (m)            0
stns jointes        0
Tmax              117
Tmax90p           117
Tmin              118
Tmin10p           118
DG0               118
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.describe()&lt;/b&gt;:  permet d&amp;rsquo;avoir un apperçu de notre DataFrame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;count&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1919.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.77509&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.8166&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.7494&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-96.5974&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;338.315&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.91631&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.565&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.27754&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.6113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1397.74&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;std&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;83.5713&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.9921&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.60092&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.3012&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.58285&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.34345&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6708&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;314.664&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.52463&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.39633&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.25505&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.05387&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;544.373&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;min&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-140.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.3665&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.74167&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.9351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-42.8867&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58.6167&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;25%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-116.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.36465&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5659&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.03064&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.6402&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1106.85&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;50%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1916&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-99.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;251&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98805&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.5307&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.2296&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.8553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1366.14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;75%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1940&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54.82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-75.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;546&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.0182&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0746&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.691542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.6338&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1676.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;max&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1580&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.1055&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30.8767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.01629&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.949&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2807.09&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.describe(include=&amp;quot;all&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;count&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;172&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;171&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;unique&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;289&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;top&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WOODSTOCK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;250M001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;freq&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;224&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1919.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.77509&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.8166&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.7494&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-96.5974&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;338.315&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.91631&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.565&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.27754&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.6113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1397.74&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;std&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;83.5713&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.9921&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.60092&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.3012&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.58285&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.34345&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6708&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;314.664&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.52463&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.39633&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.25505&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.05387&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;544.373&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;min&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-140.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.3665&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.74167&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.9351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-42.8867&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58.6167&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;25%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-116.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.36465&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5659&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.03064&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.6402&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1106.85&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;50%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;144&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1916&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-99.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;251&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98805&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.5307&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.2296&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.8553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1366.14&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;75%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1940&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54.82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-75.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;546&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.0182&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0746&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.691542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.6338&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1676.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;max&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1580&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.1055&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30.8767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.01629&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.949&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2807.09&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On peut faire directement des statistiques sur des variables quantitatives.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&amp;quot;Tmin&amp;quot;].describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count    171.000000
mean      -2.277538
std        5.255046
min      -21.935075
25%       -4.030637
50%       -2.229597
75%        0.691542
max        7.016292
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-3-naviguer-dans-un-dataframe-et-accéder-aux-éléments&#34;&gt;8.3- Naviguer dans un Dataframe et accéder aux éléments:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|---:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|
|  0 | BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
|  1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
|  2 | BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
|  3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
|  4 | BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avant exploration d&amp;rsquo;un Dataframe, on peut modifier l&amp;rsquo;index pour faciliter l&amp;rsquo;analyse d&amp;rsquo;un jeu de données. Pour cela, on utilise la fonction &lt;b&gt;.set_index()&lt;/b&gt; . On doit créer un nouvel objet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index = dataframe.set_index(&amp;quot;Prov&amp;quot;).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|
| BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
| BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
| BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
| BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
| BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour accéder à un élément dans un dataframe, il existe deux méthodes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;la méthode &lt;b&gt;iloc()&lt;/b&gt; pour accéder aux données à partir des numéros d&amp;rsquo;index&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;la méthode &lt;b&gt;loc()&lt;/b&gt; pour accéder aux données à partir des labels&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/pandas_selection.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-3-1-la-méthode-iloc&#34;&gt;8.3.1-  La méthode iloc()&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;iloc:  on veut les extraire les valeurs localiées à la colonne d&amp;rsquo;index 1 et ligne d&amp;rsquo;index 4 [row, column]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.iloc[4,1]      
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1060841&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iloc: pour accéder aux 4 premières lignes et toutes les colonnes de notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.iloc[0:4,:]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iloc: pour accéder aux 4 premières colonnes et toutes les lignes de notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.iloc[:,0:4]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Slicing sur les colonnes et les lignes: on veut les lignes d&amp;rsquo;index 2 à 5 et les colonnes d&amp;rsquo;index 3 à 8&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.iloc[2:5,3:8]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;## 8.3.2-  La méthode loc():&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;loc: On veut extraire pour accéder à toutes les valeurs d&amp;rsquo;un index, utilisation du slicing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.loc[&amp;quot;BC&amp;quot;,&amp;quot;stnid&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prov
BC    1100120
BC    1200560
BC    1090660
BC    1130771
BC    1060841
Name: stnid, dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.loc[&amp;quot;BC&amp;quot;,:]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;loc pour sélectionner toutes les lignes de 3 labels .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.loc[:,[&amp;quot;Nom de station&amp;quot;, &amp;quot;année déb.&amp;quot;, &amp;quot;année fin.&amp;quot;]].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;8-3-3-faire-des-boucles-dans-un-dataframe&#34;&gt;8.3.3-  Faire des boucles dans un dataframe:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for row_index,row in dataframe_Prov_index.head(5).iterrows():
    print (row_index)
    print(row[&#39;année déb.&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BC
1893
BC
1905
BC
1888
BC
1939
BC
1895
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for key,value in dataframe_Prov_index.head(2).iteritems():
    print(key)
    print(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Nom de station
Prov
BC    AGASSIZ
BC      ATLIN
Name: Nom de station, dtype: object
stnid
Prov
BC    1100120
BC    1200560
Name: stnid, dtype: object
année déb.
Prov
BC    1893
BC    1905
Name: année déb., dtype: int64
mois déb.
Prov
BC    1
BC    8
Name: mois déb., dtype: int64
année fin.
Prov
BC    2017
BC    2017
Name: année fin., dtype: int64
mois fin.
Prov
BC    12
BC    12
Name: mois fin., dtype: int64
lat (deg)
Prov
BC    49.25
BC    59.57
Name: lat (deg), dtype: float64
long (deg)
Prov
BC   -121.77
BC   -133.70
Name: long (deg), dtype: float64
élév (m)
Prov
BC     15
BC    674
Name: élév (m), dtype: int64
stns jointes
Prov
BC    N
BC    N
Name: stns jointes, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-4-data-cleaning-d-un-dataframe&#34;&gt;8.4- &amp;ldquo;Data cleaning&amp;rdquo; d&amp;rsquo;un dataframe:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)

dataframe.head(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |      Tmax |   Tmax90p |      Tmin |   Tmin10p |     DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|----------:|----------:|----------:|----------:|--------:|
|  0 |            0 | BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              | nan       |  nan      | nan       |   nan     | nan     |
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |   5.63043 |   18.9033 |  -3.46052 |   -19.235 | 860.083 |
|  2 |            2 | BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              | nan       |  nan      | nan       |   nan     | nan     |
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.replace()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.replace(&#39;N&#39;,np.nan, inplace=True)

dataframe.head(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.isnull()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.isnull().head(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.isnull().sum()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unnamed: 0          0
Prov                0
Nom de station      0
stnid               0
année déb.          0
mois déb.           0
année fin.          0
mois fin.           0
lat (deg)           0
long (deg)          0
élév (m)            0
stns jointes       65
Tmax              117
Tmax90p           117
Tmin              118
Tmin10p           118
DG0               118
dtype: int64&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.isnull().sum()/len(dataframe)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unnamed: 0        0.000000
Prov              0.000000
Nom de station    0.000000
stnid             0.000000
année déb.        0.000000
mois déb.         0.000000
année fin.        0.000000
mois fin.         0.000000
lat (deg)         0.000000
long (deg)        0.000000
élév (m)          0.000000
stns jointes      0.224913
Tmax              0.404844
Tmax90p           0.404844
Tmin              0.408304
Tmin10p           0.408304
DG0               0.408304
dtype: float64&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.fillna()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe.fillna(0).head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.dropna()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe.dropna(axis=1).head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe.dropna(axis=0).head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLUE RIVER&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1160899&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;683&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.4408&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.12501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.5823&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;987.363&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;COMOX&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021830&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-124.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.7376&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1023&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.42485&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.526&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2444.39&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CRANBROOK&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1152105&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1901&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-115.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;940&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.3203&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.403836&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.3553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1383.26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;DARFIELD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1162265&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-120.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;412&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.8902&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.6917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.82373&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.12333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1525.71&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unnamed: 0          int64
Prov               object
Nom de station     object
stnid              object
année déb.          int64
mois déb.           int64
année fin.          int64
mois fin.           int64
lat (deg)         float64
long (deg)        float64
élév (m)            int64
stns jointes       object
Tmax              float64
Tmax90p           float64
Tmin              float64
Tmin10p           float64
DG0               float64
dtype: object&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.map()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Tmax&#39;] = dataframe[&#39;Tmax&#39;].map(int,na_action=&#39;ignore&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.unique()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(dataframe[&#39;Prov&#39;].unique())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;14&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def multiple_unique(liste):
if len(liste) == 0:
    result = np.nan
elif len(liste) == 1:
    result = &#39;unique&#39;
else:
    result = &#39;multiples&#39;
return result
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Prov&#39;] = multiple_unique(dataframe[&#39;Prov&#39;])
dataframe[&#39;Prov&#39;].unique()
#Ne fonctionne pas car il prend toute la colonne en tant que liste
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([&amp;lsquo;multiples&amp;rsquo;], dtype=object)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;uniq&#39;] = dataframe[&#39;Prov&#39;].apply(lambda x: multiple_unique(x))
dataframe[&#39;uniq&#39;].value_counts()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;multiples    289
Name: uniq, dtype: int64&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt;.sort_values()&lt;/b&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe.sort_values([&#39;Prov&#39;] ,ascending=False).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;uniq&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;145&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;145&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PILGER&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4056120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1911&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2011&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-105.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;552&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.419&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.86342&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.695&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1270.17&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;197&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;197&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MINE CENTRE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6025205&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1915&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-92.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;361&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;196&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;196&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MADAWASKA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6080192&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1915&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-77.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;316&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;195&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;195&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LONDON&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6144478&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-81.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;278&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.21358&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.20833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2377.23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Quelques méthodes sur les chaînes de caractères: &lt;b&gt;.lower()&lt;/b&gt;, &lt;b&gt;.upper()&lt;/b&gt;, &lt;b&gt;.len()&lt;/b&gt;, &lt;b&gt;.contains()&lt;/b&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.lower().head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0          agassiz
1            atlin
2      barkerville
3       beaverdell
4    blind channel
Name: Nom de station, dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.upper().head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0          AGASSIZ
1            ATLIN
2      BARKERVILLE
3       BEAVERDELL
4    BLIND CHANNEL
Name: Nom de station, dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.len().head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0     7
1     5
2    11
3    10
4    13
Name: Nom de station, dtype: int64&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe[dataframe[&#39;Nom de station&#39;].str.contains(&#39;CRANBROOK&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;uniq&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CRANBROOK&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1152105&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1901&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-115.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;940&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.3203&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.403836&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.3553&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1383.26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;multiples&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.strip().head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0          AGASSIZ
1            ATLIN
2      BARKERVILLE
3       BEAVERDELL
4    BLIND CHANNEL
Name: Nom de station, dtype: object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Nom de station&#39;].str.split(&#39;,&#39;).head(5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0          [AGASSIZ]
1            [ATLIN]
2      [BARKERVILLE]
3       [BEAVERDELL]
4    [BLIND CHANNEL]
Name: Nom de station, dtype: object&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;## 8.5-  Modifier un DataFrame et introduction au &amp;ldquo;feature modeling&amp;rdquo;:&lt;/p&gt;

&lt;p&gt;Il existe plusieurs fonctions, méthodes ou attributs qu&amp;rsquo;on peut appliquer sur les DataFrame:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nous allons présenter quelques fonctions utiles lors de l&amp;rsquo;exploration d&amp;rsquo;un jeu de données.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe_Prov_index.head()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|
| BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
| BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
| BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
| BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
| BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-1-création-d-une-variable-depuis-un-dataframe&#34;&gt;8.5.1-  Création d&amp;rsquo;une variable depuis un DataFrame:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delta_year = (dataframe_Prov_index[&amp;quot;année fin.&amp;quot;] - dataframe_Prov_index[&amp;quot;année déb.&amp;quot;]) + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delta_year.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
BC    125
BC    113
BC    128
BC     68
BC    123
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-2-ajout-d-une-variable-dans-un-dataframe&#34;&gt;8.5.2- Ajout d&amp;rsquo;une variable dans un DataFrame:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index[&amp;quot;total année&amp;quot;] = delta_year
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe_Prov_index.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |   total année |
|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|--------------:|
| BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |           125 |
| BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |           113 |
| BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |           128 |
| BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |            68 |
| BC     | BELLA COOLA      | 1060841 |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |           123 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;## 8.5.3- Suppression d&amp;rsquo;une variable dans un DataFrame:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;drop()&lt;/b&gt;, en entrée on spécifie une liste&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
dataframe_Prov_index.drop([&amp;quot;stns jointes&amp;quot;], axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total année&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;113&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;128&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;68&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;méthode &lt;b&gt;pop()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print (&amp;quot;Deleting &#39;stnid&#39; column using POP function:&amp;quot;)
dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.pop(&#39;stnid&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deleting &amp;lsquo;stnid&amp;rsquo; column using POP function:
|    | Prov   | Nom de station   |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |
|&amp;mdash;:|:&amp;mdash;&amp;mdash;-|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|
|  0 | BC     | AGASSIZ          |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              |
|  1 | BC     | ATLIN            |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |
|  2 | BC     | BARKERVILLE      |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              |
|  3 | BC     | BEAVERDELL       |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |
|  4 | BC     | BELLA COOLA      |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 | Y              |&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fonction &lt;b&gt;del()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print (&amp;quot;Deleting &#39;stns jointes&#39; column using DEL function:&amp;quot;)
del dataframe[&#39;stns jointes&#39;]
dataframe.head()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deleting &amp;lsquo;stns jointes&amp;rsquo; column using DEL function:
|    | Prov   | Nom de station   |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |
|&amp;mdash;:|:&amp;mdash;&amp;mdash;-|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|
|  0 | BC     | AGASSIZ          |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 |
|  1 | BC     | ATLIN            |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 |
|  2 | BC     | BARKERVILLE      |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 |
|  3 | BC     | BEAVERDELL       |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 |
|  4 | BC     | BELLA COOLA      |         1895 |           5 |         2017 |          11 |       52.37 |      -126.68 |         18 |&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;8-5-4-appliquer-des-fonctions&#34;&gt;8.5.4- Appliquer des fonctions:&lt;/h2&gt;

&lt;p&gt;Pour appliquer vos propres fonctions ou celles d&amp;rsquo;une autre bibliothèque à des objets Pandas, vous devez connaître les trois méthodes importantes. La méthode appropriée à utiliser dépend du fait que votre fonction prévoit de fonctionner sur un DataFrame entier, par ligne ou par colonne ou par élément.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Application d&amp;rsquo;une fonction au niveau de la table: &lt;b&gt; .pipe () &lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Application d&amp;rsquo;une fonction de ligne ou de colonne: &lt;b&gt; .apply () &lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Application d&amp;rsquo;une fonction par élément: &lt;b&gt; .applymap () &lt;/b&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;8-5-4-1-la-méthode-b-apply-b&#34;&gt;8.5.4.1- La méthode &lt;b&gt;.apply()&lt;/b&gt;:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;La méthode &lt;b&gt;.apply()&lt;/b&gt; permet d&amp;rsquo;appliquer une fonction sur l&amp;rsquo;ensemble des valeurs d&amp;rsquo;une colonnes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Des fonctions arbitraires peuvent être appliquées le long des axes d&amp;rsquo;un DataFrame ou d&amp;rsquo;un Panel à l&amp;rsquo;aide de la méthode apply (), qui, comme les méthodes de statistiques descriptives, prend un argument d&amp;rsquo;axe facultatif. Par défaut, l&amp;rsquo;opération s&amp;rsquo;effectue en colonnes, en prenant chaque colonne comme un tableau.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
dataframe[&amp;quot;stns jointes&amp;quot;]=dataframe[&amp;quot;stns jointes&amp;quot;].apply(lambda x: x.replace(&amp;quot;N&amp;quot;, &amp;quot;NaN&amp;quot;))
dataframe[&amp;quot;stns jointes&amp;quot;]=dataframe[&amp;quot;stns jointes&amp;quot;].apply(lambda x: x.replace(&amp;quot;Y&amp;quot;, &amp;quot;1&amp;quot;))
dataframe = dataframe.dropna() 
print(tabulate(dataframe.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |     Tmax |   Tmax90p |     Tmin |   Tmin10p |      DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|---------:|----------:|---------:|----------:|---------:|
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 |            nan |  5.63043 |   18.9033 | -3.46052 | -19.235   |  860.083 |
|  3 |            3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 |              1 | 12.628   |   23.6417 |  4.01748 |  -3.646   | 1798.09  |
|  4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 |            nan | 12.1556  |   20.2007 |  6.77689 |   1.09467 | 2518.68  |
|  5 |            5 | BC     | BLUE RIVER       | 1160899 |         1946 |           9 |         2017 |          12 |       52.13 |      -119.28 |        683 |              1 | 10.4408  |   25.9917 | -1.12501 | -12.5823  |  987.363 |
|  9 |            9 | BC     | COMOX            | 1021830 |         1935 |          11 |         2017 |          12 |       49.72 |      -124.9  |         26 |              1 | 13.7376  |   23.1023 |  6.42485 |  -0.526   | 2444.39  |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = dataframe.dropna(axis=0)
dataframe[&amp;quot;Tmin&amp;quot;]=dataframe[&amp;quot;Tmin&amp;quot;].apply(lambda x: int(x))
print(tabulate(dataframe.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |     Tmax |   Tmax90p |   Tmin |   Tmin10p |      DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|---------:|----------:|-------:|----------:|---------:|
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 |            nan |  5.63043 |   18.9033 |     -3 | -19.235   |  860.083 |
|  3 |            3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 |              1 | 12.628   |   23.6417 |      4 |  -3.646   | 1798.09  |
|  4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 |            nan | 12.1556  |   20.2007 |      6 |   1.09467 | 2518.68  |
|  5 |            5 | BC     | BLUE RIVER       | 1160899 |         1946 |           9 |         2017 |          12 |       52.13 |      -119.28 |        683 |              1 | 10.4408  |   25.9917 |     -1 | -12.5823  |  987.363 |
|  9 |            9 | BC     | COMOX            | 1021830 |         1935 |          11 |         2017 |          12 |       49.72 |      -124.9  |         26 |              1 | 13.7376  |   23.1023 |      6 |  -0.526   | 2444.39  |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-5-filtrer-des-données&#34;&gt;8.5.5- Filtrer des données:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#On veut toutes les valeurs mais uniquement pour une Province
print(tabulate(dataframe.loc[dataframe[&amp;quot;Prov&amp;quot;]==&amp;quot;NB&amp;quot;,:], headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|     |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |    Tmax |   Tmax90p |   Tmin |   Tmin10p |     DG0 |
|----:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|--------:|----------:|-------:|----------:|--------:|
| 256 |          256 | NB     | CHATHAM MIRA.    | 8100989 |         1873 |           1 |         2017 |          12 |       47.02 |       -65.47 |         33 |              1 | 10.6661 |   26.0853 |      0 |  -16.9597 | 1564.13 |
| 258 |          258 | NB     | FREDERICTON      | 8101505 |         1871 |          12 |         2017 |          12 |       45.87 |       -66.53 |         21 |              1 | 11.4353 |   26.306  |      0 |  -14.8207 | 1747.27 |
| 259 |          259 | NB     | MONCTON          | 8103201 |         1898 |           5 |         2017 |          12 |       46.1  |       -64.68 |         71 |              1 | 10.7642 |   25.392  |      0 |  -13.9483 | 1715.35 |
| 260 |          260 | NB     | SAINT JOHN       | 8104901 |         1871 |           1 |         2017 |          12 |       45.32 |       -65.88 |        109 |              1 | 10.4343 |   23.0513 |      0 |  -14.5553 | 1548.77 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(dataframe.loc[dataframe[&amp;quot;DG0&amp;quot;]&amp;gt;=2500,:], headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|     |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |    Tmax |   Tmax90p |   Tmin |   Tmin10p |     DG0 |
|----:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|--------:|----------:|-------:|----------:|--------:|
|   4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 |            nan | 12.1556 |   20.2007 |      6 |  1.09467  | 2518.68 |
|  27 |           27 | BC     | MCINNES ISLAND   | 1065010 |         1955 |           1 |         2017 |          12 |       52.27 |      -128.72 |         26 |            nan | 11.3032 |   17.164  |      7 |  1.949    | 2587.88 |
|  44 |           44 | BC     | VANCOUVER        | 1108395 |         1896 |           2 |         2017 |          12 |       49.2  |      -123.18 |          4 |              1 | 13.9542 |   22.404  |      7 | -0.182667 | 2673.56 |
| 190 |          190 | ON     | HARROW           | 6130257 |         1917 |           4 |         2017 |          12 |       42.03 |       -82.9  |        182 |              1 | 14.7701 |   29.0533 |      5 | -8.03733  | 2655.17 |
| 210 |          210 | ON     | TORONTO          | 6158355 |         1840 |           3 |         2017 |          12 |       43.67 |       -79.4  |        113 |              1 | 13.1046 |   27.0743 |      5 | -7.532    | 2807.09 |
| 211 |          211 | ON     | VINELAND         | 6139148 |         1924 |          10 |         2017 |          12 |       43.18 |       -79.68 |         79 |              1 | 13.4847 |   27.5757 |      5 | -7.63633  | 2551.13 |
| 214 |          214 | ON     | WINDSOR          | 6139527 |         1940 |           8 |         2017 |          12 |       42.27 |       -82.97 |        190 |              1 | 14.4231 |   28.7953 |      5 | -7.38467  | 2803.45 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut combiner des filtres:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(dataframe.loc[(dataframe[&amp;quot;Prov&amp;quot;]==&amp;quot;QC&amp;quot;) &amp;amp; (dataframe[&amp;quot;Tmin&amp;quot;]&amp;gt;0),:], headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|     |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) |   stns jointes |    Tmax |   Tmax90p |   Tmin |   Tmin10p |     DG0 |
|----:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|---------------:|--------:|----------:|-------:|----------:|--------:|
| 224 |          224 | QC     | DRUMMONDVILLE    | 7022160 |         1913 |          11 |         2017 |           8 |       45.88 |       -72.48 |         82 |            nan | 11.0868 |   26.6117 |      1 |  -15.8633 | 2110.86 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;## 8.5.6- Grouper un DataFrame sur une ou plusieurs colonnes (groupby):&lt;/p&gt;

&lt;p&gt;Toute opération groupby implique l&amp;rsquo;une des opérations suivantes sur l&amp;rsquo;objet d&amp;rsquo;origine. Ce sont -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Fractionner l&#39;objet

- Application d&#39;une fonction

- Combiner les résultats
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans de nombreuses situations, nous divisons les données en ensembles et nous appliquons certaines fonctionnalités à chaque sous-ensemble. Nous pouvons effectuer les opérations suivantes -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Agrégation - calcul d&#39;une statistique récapitulative

- Transformation - effectuer une opération spécifique au groupe

- Filtration - rejet des données avec certaines conditions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Créons maintenant un objet DataFrame et effectuons toutes les opérations dessus -&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
print(tabulate(dataframe.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |      Tmax |   Tmax90p |      Tmin |   Tmin10p |      DG0 |
|---:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|----------:|----------:|----------:|----------:|---------:|
|  0 |            0 | BC     | AGASSIZ          | 1100120 |         1893 |           1 |         2017 |          12 |       49.25 |      -121.77 |         15 | N              | nan       |  nan      | nan       | nan       |  nan     |
|  1 |            1 | BC     | ATLIN            | 1200560 |         1905 |           8 |         2017 |          12 |       59.57 |      -133.7  |        674 | N              |   5.63043 |   18.9033 |  -3.46052 | -19.235   |  860.083 |
|  2 |            2 | BC     | BARKERVILLE      | 1090660 |         1888 |           2 |         2015 |           3 |       53.07 |      -121.52 |       1265 | N              | nan       |  nan      | nan       | nan       |  nan     |
|  3 |            3 | BC     | BEAVERDELL       | 1130771 |         1939 |           1 |         2006 |           9 |       49.48 |      -119.05 |        838 | Y              |  12.628   |   23.6417 |   4.01748 |  -3.646   | 1798.09  |
|  4 |            4 | BC     | BLIND CHANNEL    | 1021480 |         1958 |           7 |         2016 |           2 |       50.42 |      -125.5  |         23 | N              |  12.1556  |   20.2007 |   6.77689 |   1.09467 | 2518.68  |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En observant le DataFrame ci-dessus, nous voyons qu&amp;rsquo;il y a, au minimum, 3 variables que nous pouvons utiliser pour grouper notre jeu de données. On peut par exemple grouper nos données par province (Prov) , par année de début d&amp;rsquo;enregistrement ou année de fin d&amp;rsquo;enregistrement .&lt;/p&gt;

&lt;p&gt;Nous allons utiliser le module groupeby de Pandas pour grouper nos données.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Méthode &lt;b&gt;.unique()&lt;/b&gt; : méthode permet d&amp;rsquo;extraire les valeurs uniques d&amp;rsquo;une colonne. On peut ainsi s&amp;rsquo;assurer que notre variable à grouper possède plusieurs catégories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&amp;quot;Prov&amp;quot;].unique() 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([&amp;lsquo;BC&amp;rsquo;, &amp;lsquo;YT&amp;rsquo;, &amp;lsquo;N   YT&amp;rsquo;, &amp;lsquo;NT&amp;rsquo;, &amp;lsquo;NU&amp;rsquo;, &amp;lsquo;AB&amp;rsquo;, &amp;lsquo;SK&amp;rsquo;, &amp;lsquo;MB&amp;rsquo;, &amp;lsquo;ON&amp;rsquo;, &amp;lsquo;QC&amp;rsquo;,
       &amp;lsquo;NB&amp;rsquo;, &amp;lsquo;NS&amp;rsquo;, &amp;lsquo;PE&amp;rsquo;, &amp;lsquo;NL&amp;rsquo;], dtype=object)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;8-5-6-1-fractionner-les-données-en-groupes&#34;&gt;8.5.6.1- Fractionner les données en groupes:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Prov = dataframe.groupby(&#39;Prov&#39;)
df_Prov.groups
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;AB&#39;: Int64Index([ 96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
             109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
             122, 123, 124, 125, 126, 127, 128, 129, 130],
            dtype=&#39;int64&#39;),
 &#39;BC&#39;: Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
             17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
             34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50],
            dtype=&#39;int64&#39;),
 &#39;MB&#39;: Int64Index([156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
             169, 170, 171, 172, 173, 174, 175],
            dtype=&#39;int64&#39;),
 &#39;N   YT&#39;: Int64Index([52], dtype=&#39;int64&#39;),
 &#39;NB&#39;: Int64Index([254, 255, 256, 257, 258, 259, 260, 261], dtype=&#39;int64&#39;),
 &#39;NL&#39;: Int64Index([275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
             288],
            dtype=&#39;int64&#39;),
 &#39;NS&#39;: Int64Index([262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273], dtype=&#39;int64&#39;),
 &#39;NT&#39;: Int64Index([61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], dtype=&#39;int64&#39;),
 &#39;NU&#39;: Int64Index([74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
             91, 92, 93, 94, 95],
            dtype=&#39;int64&#39;),
 &#39;ON&#39;: Int64Index([176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
             189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
             202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
             215],
            dtype=&#39;int64&#39;),
 &#39;PE&#39;: Int64Index([274], dtype=&#39;int64&#39;),
 &#39;QC&#39;: Int64Index([216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
             229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
             242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253],
            dtype=&#39;int64&#39;),
 &#39;SK&#39;: Int64Index([131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
             144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155],
            dtype=&#39;int64&#39;),
 &#39;YT&#39;: Int64Index([51, 53, 54, 55, 56, 57, 58, 59, 60], dtype=&#39;int64&#39;)}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sélectionner un groupe: méthode &lt;b&gt;.get_group()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(df_Prov.get_group(&#39;QC&#39;).head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AMOS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;709CEE9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;305&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAGOTVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7060400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;159&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.28139&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.2973&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.83359&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8117&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1528.41&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;218&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;218&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAUCEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7027283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-70.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.5515&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0783&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.37634&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.6283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1509.36&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;219&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BROME&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7020840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1890&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2014&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-72.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;206&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1409&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.1767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.294151&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1676.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;220&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;220&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On peut faire un .groupeby() sur plusieurs catégories.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(dataframe.groupby([&amp;quot;Prov&amp;quot;, &amp;quot;année fin.&amp;quot;])[&amp;quot;Tmin&amp;quot;].describe().head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|              |   count |      mean |       std |       min |       25% |       50% |       75% |       max |
|:-------------|--------:|----------:|----------:|----------:|----------:|----------:|----------:|----------:|
| (&#39;AB&#39;, 2011) |       0 | nan       | nan       | nan       | nan       | nan       | nan       | nan       |
| (&#39;AB&#39;, 2013) |       1 |  -4.21653 | nan       |  -4.21653 |  -4.21653 |  -4.21653 |  -4.21653 |  -4.21653 |
| (&#39;AB&#39;, 2016) |       1 |  -2.49021 | nan       |  -2.49021 |  -2.49021 |  -2.49021 |  -2.49021 |  -2.49021 |
| (&#39;AB&#39;, 2017) |      17 |  -3.01535 |   1.45026 |  -6.54421 |  -3.42227 |  -3.11709 |  -2.92727 |  -0.1559  |
| (&#39;BC&#39;, 2006) |       1 |   4.01748 | nan       |   4.01748 |   4.01748 |   4.01748 |   4.01748 |   4.01748 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-2-itérer-au-travers-des-groupes&#34;&gt;8.5.6.2- Itérer au travers des  groupes:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped = dataframe.groupby(&#39;Prov&#39;)

for name,group in grouped:
   print(name)
   print(group)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;AB
     Unnamed: 0 Prov   Nom de station    stnid  année déb.  mois déb.  \
96           96   AB        ATHABASCA  3060L20        1918          6   
97           97   AB            BANFF  3050519        1887         11   
98           98   AB      BEAVERLODGE  3070600        1913          4   
99           99   AB          CALGARY  3031092        1885          1   
100         100   AB           CALMAR  3011120        1915         11   
101         101   AB          CAMPSIE  3061200        1912          9   
102         102   AB          CAMROSE  3011240        1946          3   
103         103   AB           CARWAY  3031402        1914          8   
104         104   AB        COLD LAKE  3081680        1925          7   
105         105   AB       CORONATION  3011887        1924          4   
106         106   AB         EDMONTON  3012216        1880          7   
107         107   AB            EDSON  3062246        1914          2   
108         108   AB         ENTRANCE  306A009        1917          6   
109         109   AB         FAIRVIEW  3072525        1931         10   
110         110   AB   FORT CHIPEWYAN  3072655        1883         10   
111         111   AB    FORT MCMURRAY  3062696        1916          1   
112         112   AB   FORT VERMILION  3072723        1908          7   
113         113   AB         GLEICHEN  3032801        1903          7   
114         114   AB   GRANDE PRAIRIE  3072921        1922          8   
115         115   AB     HIGH PRAIRIE  3063165        1926          9   
116         116   AB       HIGH RIVER  3033250        1902          8   
117         117   AB           JASPER  3053536        1926          9   
118         118   AB          LACOMBE  3023722        1907         12   
119         119   AB       LETHBRIDGE  3033890        1902          1   
120         120   AB      MANYBERRIES  3044923        1928          8   
121         121   AB     MEDICINE HAT  3034485        1883          8   
122         122   AB             OLDS  3024925        1914          4   
123         123   AB      PEACE RIVER  3075041        1907         10   
124         124   AB    PINCHER CREEK  3035198        1893          8   
125         125   AB         RANFURLY  3015401        1905          1   
126         126   AB  ROCKY MTN HOUSE  3015523        1915          8   
127         127   AB       SLAVE LAKE  3065995        1922          8   
128         128   AB   STETTLER NORTH  3016124        1918          9   
129         129   AB         VAUXHALL  3036682        1913         10   
130         130   AB       WHITECOURT  3067373        1942         12   

     année fin.  mois fin.  lat (deg)  long (deg)  élév (m) stns jointes  \
96         2017         12      54.82     -113.53       626            Y   
97         2017         12      51.20     -115.55      1397            Y   
98         2017         12      55.20     -119.40       745            Y   
99         2017         12      51.12     -114.02      1084            Y   
100        2016         12      53.28     -113.85       720            N   
101        2013         10      54.13     -114.68       671            N   
102        2017         12      53.03     -112.82       739            N   
103        2017         12      49.00     -113.37      1354            Y   
104        2017         12      54.42     -110.28       541            Y   
105        2017         12      52.08     -111.45       791            Y   
106        2017         12      53.57     -113.52       723            Y   
107        2017         12      53.58     -116.47       927            Y   
108        2017         12      53.37     -117.70       991            Y   
109        2017         12      56.07     -118.38       655            Y   
110        2017         12      58.77     -111.12       238            Y   
111        2017         12      56.65     -111.22       369            Y   
112        2017         12      58.38     -116.03       289            Y   
113        2017         12      50.88     -113.05       905            Y   
114        2017         12      55.18     -118.88       669            Y   
115        2017          9      55.40     -116.48       602            Y   
116        2011          9      50.48     -114.17      1580            Y   
117        2017         12      52.93     -118.03      1020            Y   
118        2017         12      52.45     -113.75       860            Y   
119        2017         12      49.63     -112.80       929            Y   
120        2017         12      49.12     -110.47       935            Y   
121        2017         12      50.02     -110.72       717            Y   
122        2017         12      51.78     -114.10      1046            Y   
123        2017         12      56.23     -117.43       571            Y   
124        2017         12      49.52     -113.98      1190            Y   
125        2017         12      53.42     -111.73       673            Y   
126        2017         12      52.43     -114.92       988            Y   
127        2017         12      55.30     -114.78       583            Y   
128        2017         12      52.33     -112.72       821            Y   
129        2017         12      50.05     -112.13       779            Y   
130        2016          6      54.15     -115.78       782            Y   

          Tmax    Tmax90p      Tmin    Tmin10p          DG0  
96    8.240395  24.018667 -3.362346 -21.040000  1168.233333  
97    8.906518  23.132000 -3.084884 -15.858333   750.370000  
98    8.158459  23.086667 -2.927270 -18.997667  1051.916667  
99   10.834976  24.467333 -1.444606 -15.235000  1172.050000  
100        NaN        NaN       NaN        NaN          NaN  
101   9.214514  24.548333 -4.216529 -21.218333   979.166667  
102   8.964966  24.175667 -3.714421 -20.588000  1048.130000  
103  11.139694  24.925000 -1.618858 -13.980000   956.836667  
104   7.724485  24.273667 -3.037595 -21.203667  1303.950000  
105        NaN        NaN       NaN        NaN          NaN  
106   8.982117  24.328000 -3.117089 -19.190667  1095.933333  
107        NaN        NaN       NaN        NaN          NaN  
108        NaN        NaN       NaN        NaN          NaN  
109        NaN        NaN       NaN        NaN          NaN  
110   4.282190  23.566000 -6.544206 -28.629667  1135.113333  
111   7.080704  24.609667 -4.511516 -23.883667  1145.983333  
112        NaN        NaN       NaN        NaN          NaN  
113        NaN        NaN       NaN        NaN          NaN  
114   8.185239  23.771333 -3.374008 -20.712667  1126.333333  
115        NaN        NaN       NaN        NaN          NaN  
116        NaN        NaN       NaN        NaN          NaN  
117   9.831020  24.132000 -3.341606 -16.509667   761.946667  
118        NaN        NaN       NaN        NaN          NaN  
119        NaN        NaN       NaN        NaN          NaN  
120        NaN        NaN       NaN        NaN          NaN  
121  12.648926  28.497333 -0.155900 -15.783333  1563.866667  
122        NaN        NaN       NaN        NaN          NaN  
123   7.358369  23.566333 -3.784061 -21.467667  1121.106667  
124  10.973669  25.435000 -0.837767 -14.170000  1166.016667  
125   8.434513  24.951667 -2.982488 -19.998333  1204.603333  
126        NaN        NaN       NaN        NaN          NaN  
127   7.481366  22.464333 -3.422267 -20.380333  1131.030000  
128        NaN        NaN       NaN        NaN          NaN  
129        NaN        NaN       NaN        NaN          NaN  
130   8.458045  23.313333 -2.490207 -17.834000  1104.916667  
BC
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-3-fonctions-dites-d-agrégation&#34;&gt;8.5.6.3- Fonctions dites d&amp;rsquo;agrégation:&lt;/h2&gt;

&lt;p&gt;Une fonction agrégée renvoie une seule valeur agrégée pour chaque groupe. Une fois le groupe par objet créé, plusieurs opérations d&amp;rsquo;agrégation peuvent être effectuées sur les données groupées.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
grouped = dataframe.groupby(&#39;Prov&#39;)
grouped[&#39;Tmin&#39;].agg(np.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
AB        -3.050928
BC         1.578024
MB        -4.493900
N   YT          NaN
NB         0.341750
NL        -1.324334
NS         2.542629
NT        -8.518655
NU       -16.522658
ON         0.031970
PE         1.986827
QC        -1.992695
SK        -3.208984
YT        -8.995421
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-4-appliquer-plusieurs-fonctions&#34;&gt;8.5.6.4-  Appliquer plusieurs fonctions:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(grouped[&#39;Tmin&#39;].agg([np.min, np.mean, np.max, np.std]), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| Prov   |       amin |        mean |       amax |        std |
|:-------|-----------:|------------:|-----------:|-----------:|
| AB     |  -6.54421  |  -3.05093   |  -0.1559   |   1.40133  |
| BC     |  -6.06858  |   1.57802   |   7.01629  |   3.89638  |
| MB     | -10.0943   |  -4.4939    |  -1.98027  |   2.61835  |
| N   YT | nan        | nan         | nan        | nan        |
| NB     |  -0.491043 |   0.34175   |   0.840796 |   0.598429 |
| NL     |  -8.02478  |  -1.32433   |   1.81275  |   3.42585  |
| NS     |   1.21413  |   2.54263   |   3.75946  |   0.982653 |
| NT     | -12.4518   |  -8.51865   |  -6.68323  |   2.16937  |
| NU     | -21.9351   | -16.5227    | -12.2332   |   3.0491   |
| ON     |  -7.48484  |   0.0319696 |   5.91872  |   3.64788  |
| PE     |   1.98683  |   1.98683   |   1.98683  | nan        |
| QC     |  -8.76805  |  -1.99269   |   1.62212  |   2.70668  |
| SK     |  -5.01656  |  -3.20898   |  -1.42885  |   1.03055  |
| YT     | -10.2177   |  -8.99542   |  -7.77313  |   1.72858  |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-5-transformations&#34;&gt;8.5.6.5- Transformations:&lt;/h2&gt;

&lt;p&gt;La transformation sur un groupe ou une colonne renvoie un objet indexé de la même taille que celui en cours de regroupement.&lt;/p&gt;

&lt;p&gt;Par conséquent, la transformation doit renvoyer un résultat de la même taille que celui d&amp;rsquo;un bloc de groupe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped = dataframe.groupby(&#39;Prov&#39;)
and_stand = lambda x: (x - x.mean()) / x.std()
grouped[&#39;Tmin&#39;].transform(and_stand).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0         NaN
1   -1.293133
2         NaN
3    0.626082
4    1.334280
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-5-6-6-filtration&#34;&gt;8.5.6.6- Filtration:&lt;/h2&gt;

&lt;p&gt;La filtration filtre les données selon des critères définis et renvoie le sous-ensemble de données. La fonction filter () est utilisée pour filtrer les données.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(dataframe.groupby(&#39;Prov&#39;).filter(lambda x: len(x) == 1), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|     |   Unnamed: 0 | Prov   | Nom de station   |   stnid |   année déb. |   mois déb. |   année fin. |   mois fin. |   lat (deg) |   long (deg) |   élév (m) | stns jointes   |     Tmax |   Tmax90p |      Tmin |   Tmin10p |     DG0 |
|----:|-------------:|:-------|:-----------------|--------:|-------------:|------------:|-------------:|------------:|------------:|-------------:|-----------:|:---------------|---------:|----------:|----------:|----------:|--------:|
|  52 |           52 | N   YT | HAINES JUNCTIO   | 2100630 |         1944 |          10 |         2017 |          12 |       60.75 |      -137.5  |        596 | N              | nan      |  nan      | nan       |  nan      |  nan    |
| 274 |          274 | PE     | CHARLOTTETOWN    | 8300301 |         1872 |          11 |         2017 |          12 |       46.28 |       -63.13 |         49 | Y              |  10.0063 |   23.7683 |   1.98683 |  -12.0367 | 1912.16 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-6-rassembler-plusieurs-dataframes&#34;&gt;8.6-  Rassembler plusieurs Dataframes:&lt;/h2&gt;

&lt;h2 id=&#34;8-6-1-jointure-de-dataframes&#34;&gt;8.6.1- Jointure de DataFrames:&lt;/h2&gt;

&lt;p&gt;Il s’agit de &amp;ldquo;jointer&amp;rdquo; deux tables partageant la même clef ou encore de concaténer horizontalement les lignes en faisant correspondre les valeurs d’une variable clef qui peuvent ne pas être uniques.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/join.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left_dataframe = pd.DataFrame({
   &#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;MONTREAL TAVISH&#39;, &#39;QUEBEC&#39;, &#39;TADOUSSAC&#39;,&#39;OKA&#39;],
   &#39;variable&#39;:[&#39;var1&#39;,&#39;var2&#39;,&#39;var6&#39;,&#39;var5&#39;]})

right_dataframe = pd.DataFrame(
   {&#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;TORONTO&#39;, &#39;OTTAWA&#39;, &#39;KINGSTON&#39;,&#39;CHAPLEAU&#39;],
   &#39;variable&#39;:[&#39;var3&#39;,&#39;var1&#39;,&#39;var6&#39;,&#39;var5&#39;]})
left_dataframe
print(tabulate(left_dataframe, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station   | variable   |
|---:|-----:|:-----------------|:-----------|
|  0 |    1 | MONTREAL TAVISH  | var1       |
|  1 |    2 | QUEBEC           | var2       |
|  2 |    3 | TADOUSSAC        | var6       |
|  3 |    4 | OKA              | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tabulate(right_dataframe, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station   | variable   |
|---:|-----:|:-----------------|:-----------|
|  0 |    1 | TORONTO          | var3       |
|  1 |    2 | OTTAWA           | var1       |
|  2 |    3 | KINGSTON         | var6       |
|  3 |    4 | CHAPLEAU         | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-6-1-1-assembler-deux-dataframes-sur-une-clé&#34;&gt;8.6.1.1-  Assembler deux DataFrames sur une clé:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=pd.merge(left_dataframe,right_dataframe,on=&#39;id&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station_x   | variable_x   | Nom de station_y   | variable_y   |
|---:|-----:|:-------------------|:-------------|:-------------------|:-------------|
|  0 |    1 | MONTREAL TAVISH    | var1         | TORONTO            | var3         |
|  1 |    2 | QUEBEC             | var2         | OTTAWA             | var1         |
|  2 |    3 | TADOUSSAC          | var6         | KINGSTON           | var6         |
|  3 |    4 | OKA                | var5         | CHAPLEAU           | var5         |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=pd.merge(left_dataframe,right_dataframe,on=[&#39;id&#39;,&#39;variable&#39;])
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station_x   | variable   | Nom de station_y   |
|---:|-----:|:-------------------|:-----------|:-------------------|
|  0 |    3 | TADOUSSAC          | var6       | KINGSTON           |
|  1 |    4 | OKA                | var5       | CHAPLEAU           |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-6-1-2-fusionner-deux-dataframes-en-utilisant-l-argument-how&#34;&gt;8.6.1.2-  Fusionner deux DataFrames en utilisant l&amp;rsquo;argument &amp;lsquo;How&amp;rsquo;:&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;argument &amp;ldquo;how&amp;rdquo; permet de  déterminer les clés à inclure dans la table résultante.&lt;/p&gt;

&lt;p&gt;Si aucune combinaison de clés n&amp;rsquo;apparaît dans les tableaux de gauche ou de droite, les valeurs du tableau joint seront NaN.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Left Join
data=pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;left&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id_x | Nom de station_x   | variable   |   id_y | Nom de station_y   |
|---:|-------:|:-------------------|:-----------|-------:|:-------------------|
|  0 |      1 | MONTREAL TAVISH    | var1       |      2 | OTTAWA             |
|  1 |      2 | QUEBEC             | var2       |    nan | nan                |
|  2 |      3 | TADOUSSAC          | var6       |      3 | KINGSTON           |
|  3 |      4 | OKA                | var5       |      4 | CHAPLEAU           |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# right Join
data=pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;right&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id_x | Nom de station_x   | variable   |   id_y | Nom de station_y   |
|---:|-------:|:-------------------|:-----------|-------:|:-------------------|
|  0 |      1 | MONTREAL TAVISH    | var1       |      2 | OTTAWA             |
|  1 |      3 | TADOUSSAC          | var6       |      3 | KINGSTON           |
|  2 |      4 | OKA                | var5       |      4 | CHAPLEAU           |
|  3 |    nan | nan                | var3       |      1 | TORONTO            |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# inner Join
data=pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;inner&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id_x | Nom de station_x   | variable   |   id_y | Nom de station_y   |
|---:|-------:|:-------------------|:-----------|-------:|:-------------------|
|  0 |      1 | MONTREAL TAVISH    | var1       |      2 | OTTAWA             |
|  1 |      3 | TADOUSSAC          | var6       |      3 | KINGSTON           |
|  2 |      4 | OKA                | var5       |      4 | CHAPLEAU           |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# outer Join
data=pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;outer&#39;)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id_x | Nom de station_x   | variable   |   id_y | Nom de station_y   |
|---:|-------:|:-------------------|:-----------|-------:|:-------------------|
|  0 |      1 | MONTREAL TAVISH    | var1       |      2 | OTTAWA             |
|  1 |      2 | QUEBEC             | var2       |    nan | nan                |
|  2 |      3 | TADOUSSAC          | var6       |      3 | KINGSTON           |
|  3 |      4 | OKA                | var5       |      4 | CHAPLEAU           |
|  4 |    nan | nan                | var3       |      1 | TORONTO            |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-6-2-concatenation-de-dataframes&#34;&gt;8.6.2- Concatenation de DataFrames:&lt;/h2&gt;

&lt;p&gt;Pandas offre diverses fonctionnalités pour combiner facilement des objets DataFrame.&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;objs&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;This is a sequence or mapping of Series, DataFrame objects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;axis&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt; {0, 1, ...}, default 0. This is the axis to concatenate along.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;join&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;{‘inner’, ‘outer’}, default ‘outer’. How to handle indexes on other axis(es). Outer for union and inner for intersection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ignore_index&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;boolean, default False. If True, do not use the index values on the concatenation axis. The resulting axis will be labeled 0, ..., n - 1.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;join_axes&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt; This is the list of Index objects. Specific indexes to use for the other (n-1) axes instead of performing inner/outer set logic.&lt;/td&gt;

&lt;/tbody&gt;
&lt;/table&gt;    

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe1 = pd.DataFrame({
   &#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;MONTREAL TAVISH&#39;, &#39;QUEBEC&#39;, &#39;TADOUSSAC&#39;,&#39;OKA&#39;],
   &#39;variable&#39;:[&#39;var1&#39;,&#39;var2&#39;,&#39;var6&#39;,&#39;var5&#39;]})

dataframe2 = pd.DataFrame(
   {&#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;TORONTO&#39;, &#39;OTTAWA&#39;, &#39;KINGSTON&#39;,&#39;CHAPLEAU&#39;],
   &#39;variable&#39;:[&#39;var3&#39;,&#39;var1&#39;,&#39;var6&#39;,&#39;var5&#39;]})

data=pd.concat([dataframe1,dataframe2])
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station   | variable   |
|---:|-----:|:-----------------|:-----------|
|  0 |    1 | MONTREAL TAVISH  | var1       |
|  1 |    2 | QUEBEC           | var2       |
|  2 |    3 | TADOUSSAC        | var6       |
|  3 |    4 | OKA              | var5       |
|  0 |    1 | TORONTO          | var3       |
|  1 |    2 | OTTAWA           | var1       |
|  2 |    3 | KINGSTON         | var6       |
|  3 |    4 | CHAPLEAU         | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=pd.concat([dataframe1,dataframe2],keys=[&#39;QC&#39;,&#39;ON&#39;])
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|           |   id | Nom de station   | variable   |
|:----------|-----:|:-----------------|:-----------|
| (&#39;QC&#39;, 0) |    1 | MONTREAL TAVISH  | var1       |
| (&#39;QC&#39;, 1) |    2 | QUEBEC           | var2       |
| (&#39;QC&#39;, 2) |    3 | TADOUSSAC        | var6       |
| (&#39;QC&#39;, 3) |    4 | OKA              | var5       |
| (&#39;ON&#39;, 0) |    1 | TORONTO          | var3       |
| (&#39;ON&#39;, 1) |    2 | OTTAWA           | var1       |
| (&#39;ON&#39;, 2) |    3 | KINGSTON         | var6       |
| (&#39;ON&#39;, 3) |    4 | CHAPLEAU         | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=pd.concat([dataframe1,dataframe2],axis=1)
data
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;Nom de station&lt;/th&gt;
      &lt;th&gt;variable&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;Nom de station&lt;/th&gt;
      &lt;th&gt;variable&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;MONTREAL TAVISH&lt;/td&gt;
      &lt;td&gt;var1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;TORONTO&lt;/td&gt;
      &lt;td&gt;var3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;QUEBEC&lt;/td&gt;
      &lt;td&gt;var2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;OTTAWA&lt;/td&gt;
      &lt;td&gt;var1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;TADOUSSAC&lt;/td&gt;
      &lt;td&gt;var6&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;KINGSTON&lt;/td&gt;
      &lt;td&gt;var6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;OKA&lt;/td&gt;
      &lt;td&gt;var5&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;CHAPLEAU&lt;/td&gt;
      &lt;td&gt;var5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;concaténation-avec-append&#34;&gt;Concaténation avec append&lt;/h2&gt;

&lt;p&gt;Un raccourci utile pour concatérer sont les méthodes d&amp;rsquo;instance d&amp;rsquo;ajout sur DataFrame. Ils concaténent le long de l&amp;rsquo;axe = 0, à savoir l&amp;rsquo;indice&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=dataframe1.append(dataframe2)
print(tabulate(data, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   id | Nom de station   | variable   |
|---:|-----:|:-----------------|:-----------|
|  0 |    1 | MONTREAL TAVISH  | var1       |
|  1 |    2 | QUEBEC           | var2       |
|  2 |    3 | TADOUSSAC        | var6       |
|  3 |    4 | OKA              | var5       |
|  0 |    1 | TORONTO          | var3       |
|  1 |    2 | OTTAWA           | var1       |
|  2 |    3 | KINGSTON         | var6       |
|  3 |    4 | CHAPLEAU         | var5       |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;9-sauver-un-dataframe&#34;&gt;9-  Sauver un DataFrame:&lt;/h2&gt;

&lt;p&gt;Pour l’écriture d&amp;rsquo;un DataFrame on utilise les fonctions &lt;b&gt;.to_csv&lt;/b&gt; ou &lt;b&gt;_table&lt;/b&gt; avec des options similaires que read_csv() vues précédemment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.to_csv(&amp;quot;./DATA/mon_nouveau_dataframe.csv&amp;quot;, index = False, header = True, sep = &#39;,&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;10-les-dates&#34;&gt;10- Les dates:&lt;/h2&gt;

&lt;p&gt;Une fois un Dataframe crée, il peut être très pertinent d&amp;rsquo;ajouter au besoin un index temporel afin de faciliter nos analyses.&lt;/p&gt;

&lt;p&gt;En utilisant la fonction &lt;b&gt; date.range () &lt;/b&gt;, nous pouvons créer la série de dates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.date_range(&#39;1/1/2011&#39;, periods=5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-01&#39;, &#39;2011-01-02&#39;, &#39;2011-01-03&#39;, &#39;2011-01-04&#39;,
               &#39;2011-01-05&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour modifier la fréquence:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.date_range(&#39;1/1/2011&#39;, periods=5,freq=&#39;M&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-31&#39;, &#39;2011-02-28&#39;, &#39;2011-03-31&#39;, &#39;2011-04-30&#39;,
               &#39;2011-05-31&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;M&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;bdate_range()&lt;/b&gt; permet de travailler avec des ours ouvrés.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.bdate_range(&#39;1/1/2011&#39;, periods=10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DatetimeIndex([&amp;lsquo;2011-01-03&amp;rsquo;, &amp;lsquo;2011-01-04&amp;rsquo;, &amp;lsquo;2011-01-05&amp;rsquo;, &amp;lsquo;2011-01-06&amp;rsquo;,
               &amp;lsquo;2011-01-07&amp;rsquo;, &amp;lsquo;2011-01-10&amp;rsquo;, &amp;lsquo;2011-01-11&amp;rsquo;, &amp;lsquo;2011-01-12&amp;rsquo;,
               &amp;lsquo;2011-01-13&amp;rsquo;, &amp;lsquo;2011-01-14&amp;rsquo;],
              dtype=&amp;lsquo;datetime64[ns]&amp;lsquo;, freq=&amp;lsquo;B&amp;rsquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;start = pd.datetime(2011, 1, 1)
end = pd.datetime(2011, 1, 5)
pd.date_range(start, end)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DatetimeIndex([&amp;lsquo;2011-01-01&amp;rsquo;, &amp;lsquo;2011-01-02&amp;rsquo;, &amp;lsquo;2011-01-03&amp;rsquo;, &amp;lsquo;2011-01-04&amp;rsquo;,
               &amp;lsquo;2011-01-05&amp;rsquo;],
              dtype=&amp;lsquo;datetime64[ns]&amp;lsquo;, freq=&amp;rsquo;D&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt; 11- Formater des dates avec le module Datetime:&lt;/h2&gt;   

&lt;p&gt;Python fournit ne nombreuses fonctionnalités pour travailler avec des dates et le temps de manière plus générale.&lt;/p&gt;

&lt;p&gt;Datetime est un module qui permet de manipuler des dates et des durées sous forme d’objets. L’idée est simple: vous manipulez l’objet pour faire tous vos calculs, et quand vous avez besoin de l’afficher, vous formatez l’objet en chaîne de caractères.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/datetime.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/library/datetime.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On peut créer artificiellement un objet datetime suivant les paramètres suivant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    datetime(année, mois, jour, heure, minute, seconde, microseconde, fuseau horaire)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Les paramètres “année”, “mois” et “jour” sont obligatoires.&lt;/p&gt;

&lt;p&gt;Le module datetime fournit les classes suivantes:
&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;
   &lt;tr&gt;
    &lt;th&gt;Classe&lt;/th&gt;
    &lt;th&gt;Description&lt;/th&gt;
  &lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.date&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Une instance de date représente une date&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.datetime&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Une instance de datetime représente une date et l&amp;rsquo;heure selon le calendrier Gregorian
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.time&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Une instance de time représente le temps (time), à l&amp;rsquo;exception de la date (date).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.timedelta&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;La classe timedelta est utilisée pour conserver les différences entre deux objets temporels ou datés.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;&lt;b&gt;datetime.tzinfo&lt;/b&gt;&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;La classe tzinfo est utilisée pour implémenter la prise en charge du fuseau horaire pour les objets time et datetime.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;Nous allons voir dans ce qui suit quelques exemples d&amp;rsquo;utilisation de DateTime et de ses classes.  Par la suite, nous verrons qu&amp;rsquo;une combinaise du module de datetime nous offre une grande aisance dans le traitement des données.&lt;/p&gt;

&lt;h2 id=&#34;11-1-la-classe-b-datetime-b-du-module-datetime&#34;&gt;11.1- La classe &lt;b&gt;datetime&lt;/b&gt; du module datetime:&lt;/h2&gt;

&lt;h2 id=&#34;11-1-1-création-d-un-objet-datetime&#34;&gt;11.1.1- Création d&amp;rsquo;un objet datetime:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
datetime(2019, 3, 1)       # ceci est une instance de datetime
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 0, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant = datetime.now()
maintenant
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 9, 8, 11, 24, 42, 424718)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant = datetime.utcnow()
maintenant
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 9, 8, 15, 24, 42, 649731)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lors de l&amp;rsquo;ouverture d&amp;rsquo;un fichier csv ou text, nous avons une information sur la date et le temps des mesures mais sous forme de chaînes de caractères: &amp;ldquo;2018-11-01 15:20&amp;rdquo; ou &amp;ldquo;2017/12/1 16:35:22&amp;rdquo; &amp;hellip;&lt;/p&gt;

&lt;p&gt;Il est possible lors de la lecture de convertir ces chaînes de caractères en objet datetime.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;2018/11/01 15:20&amp;quot;, &amp;quot;%Y/%m/%d %H:%M&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2018, 11, 1, 15, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;2017/12/1 16:35:22&amp;quot;, &amp;quot;%Y/%m/%d %H:%M:%S&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2017, 12, 1, 16, 35, 22)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;01/11/19 10-35:22&amp;quot;, &amp;quot;%d/%m/%y %H-%M:%S&amp;quot;)
dt

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 11, 1, 10, 35, 22)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;1Mar 2019 à 09h35&amp;quot;, &amp;quot;%d%b %Y à %Hh%M&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 9, 35)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;11-1-2-manipuler-un-objet-datetime&#34;&gt;11.1.2- Manipuler un objet datetime:&lt;/h2&gt;

&lt;p&gt;Depuis un objet ou instance de datetime, on peut récupérer l&amp;rsquo;heure et la date.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant.year
#maintenant.month
#maintenant.day
#maintenant.hour
maintenant.minute
#maintenant.second
#maintenant.microsecond
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut modifier une instance datetime.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant.replace(year=1995) # on créer un nouvel objet
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(1995, 9, 8, 15, 24, 42, 649731)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant.replace(month=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 1, 8, 15, 24, 42, 649731)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut ensuite écrire en format string un objet datetime&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = datetime.now(); print(d)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2020-09-08 11:24:46.451948
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Heures et minutes
d.strftime(&amp;quot;%H:%M&amp;quot;), d.strftime(&amp;quot;%Hh%Mmin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(&#39;11:24&#39;, &#39;11h24min&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Année ,mois , heure
d.strftime(&amp;quot;%Y-%m %H:%M&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;2020-09 11:24&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Nous sommes le {0:%d} {0:%B} et il est {0:%Hh%Mmin} &#39;.format(d, &amp;quot;day&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;time&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;Nous sommes le 08 September et il est 11h24min &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Les classes &lt;b&gt;date&lt;/b&gt; et &lt;b&gt;time&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces deux classes peuvent être utilisées pour créer une instance datetime&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime, date, time
d = date(2005, 7, 14)
t = time(12, 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.combine(d, t)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2005, 7, 14, 12, 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;maintenant = datetime.utcnow()
maintenant.date()
maintenant.time()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.time(15, 24, 48, 669075)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;La classe &lt;b&gt;timedelta&lt;/b&gt; du module datetime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cette classe permet de calculer la différence entre deux dates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import timedelta
delta = timedelta(days=3, seconds=100)    # on crée notre propre timedelta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now() + delta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 9, 11, 11, 26, 29, 150102)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now() + timedelta(days=2, hours=4, minutes=3, seconds=12)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2020, 9, 10, 15, 28, 1, 290110)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;duree = datetime(2010, 12, 31) - datetime(1981, 12, 31)
duree
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.timedelta(days=10592)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut ainsi générer des dates pour des séries temporelles avec un pas de temps arbitraire:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import timedelta
dt = timedelta(days = 5, hours = 6, minutes = 25)
d0 = datetime(2000, 2, 21)
[str(d0 + i * dt) for i in range(10)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;2000-02-21 00:00:00&#39;,
 &#39;2000-02-26 06:25:00&#39;,
 &#39;2000-03-02 12:50:00&#39;,
 &#39;2000-03-07 19:15:00&#39;,
 &#39;2000-03-13 01:40:00&#39;,
 &#39;2000-03-18 08:05:00&#39;,
 &#39;2000-03-23 14:30:00&#39;,
 &#39;2000-03-28 20:55:00&#39;,
 &#39;2000-04-03 03:20:00&#39;,
 &#39;2000-04-08 09:45:00&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;13-bonus-modifier-le-paramétrage-de-pandas&#34;&gt;13- bonus : modifier le paramétrage de pandas:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.set_option(&amp;quot;display.max_row&amp;quot;,30)  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.reset_option(&amp;quot;display.max_rows&amp;quot;)
#https://www.programcreek.com/python/example/101355/pandas.set_option
#https://pandas.pydata.org/pandas-docs/stable/generated/pandas.set_option.html
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>9- La visualisation grapgique avec Python - Exercice</title>
      <link>/courses/formation_python/9-visualisation-exercice/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/9-visualisation-exercice/</guid>
      <description>

&lt;h2 id=&#34;tp-data-visualisation&#34;&gt;TP Data visualisation&lt;/h2&gt;

&lt;p&gt;Digimon, abréviation de &amp;ldquo;monstres numériques&amp;rdquo;, est une franchise qui s&amp;rsquo;articule autour d&amp;rsquo;une mécanique de base qui consiste à capturer, soigner et entraîner les monstres pour ensuite s&amp;rsquo;engager dans le combat avec eux. C&amp;rsquo;est similaire aux Pokémon. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Ce fichier contient une liste de tous les Digimon du jeu, avec leur niveau, leur coquille, leur attribut, leur mémoire et le nombre de slots d&amp;rsquo;équipement. Toutes les statistiques (HP, SP, attaque, défense, intelligence et vitesse) sont pour ce Digimon au niveau 50.&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;pour toute la suite de cet exercice vous pouvez prendre pour modèle ce que nous avons fait pendant le cours (si vous êtes perdus). Et pour chaque questions n&amp;rsquo;hesitez pas à écrire vos observations/analyses ! &lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;1) importez le fichier DigiDB_digimonlist.csv et affichez le header&lt;br&gt;&lt;/p&gt;

&lt;p&gt;2) A l&amp;rsquo;aide de la fonction .info() de pandas, vérifiez le type des colonnes et si des valeurs manquent dans certaines d&amp;rsquo;entre elle&lt;br&gt;&lt;/p&gt;

&lt;p&gt;3) à l&amp;rsquo;aide de matplotlib, affichez un bar chart du nombre de digimons par niveau (Stage). &lt;br&gt;&lt;/p&gt;

&lt;p&gt;4) faites le même exercice avec les attributs. Il y a plus de valeurs&amp;hellip;adaptez la largeur du graphique pour que cela reste simple à consulter&lt;br&gt;&lt;/p&gt;

&lt;p&gt;5) en utilisant sns.distplot, affichez la répartition de la colonne Memory&lt;br&gt;&lt;/p&gt;

&lt;p&gt;6) en utiliant sns.kdeplot, affichez uniquement la courbe de répartition de la colonne &amp;lsquo;Lv 50 HP&amp;rsquo;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;7) en utilisant scatter_matrix de Pandas, affichez la répartition et les nuages de point des 6 dernières colonnes du data set&lt;br&gt;&lt;/p&gt;

&lt;p&gt;8) Il semble y avoir quelque chose d&amp;rsquo;intéréssant entre &amp;lsquo;Lv50 SP&amp;rsquo; et &amp;lsquo;Lv50 Int&amp;rsquo;&amp;hellip;utilisez sns.jointplot pour voir cela plus en détail&lt;br&gt;&lt;/p&gt;

&lt;p&gt;9) en utilisant sns.lmplot, ajoutez le niveau des digimons (Stage) sur le nuage de points réalisé en point 8.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;10) En utilisant sns.violinplot, visionnez la réparition de &amp;lsquo;Lv 50 HP&amp;rsquo; en fonction du stage du digimon.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;1) importez le fichier DigiDB_digimonlist.csv et affichez le header&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&#39;./DATA/DigiDB_digimonlist.csv&#39;,encoding=&#39;latin-1&#39;, sep=&#39;,&#39;)
data.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Number&lt;/th&gt;
      &lt;th&gt;Digimon&lt;/th&gt;
      &lt;th&gt;Stage&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Attribute&lt;/th&gt;
      &lt;th&gt;Memory&lt;/th&gt;
      &lt;th&gt;Equip Slots&lt;/th&gt;
      &lt;th&gt;Lv 50 HP&lt;/th&gt;
      &lt;th&gt;Lv50 SP&lt;/th&gt;
      &lt;th&gt;Lv50 Atk&lt;/th&gt;
      &lt;th&gt;Lv50 Def&lt;/th&gt;
      &lt;th&gt;Lv50 Int&lt;/th&gt;
      &lt;th&gt;Lv50 Spd&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Kuramon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;590&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;79&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;95&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Pabumon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;950&lt;/td&gt;
      &lt;td&gt;62&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;69&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Punimon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;870&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;97&lt;/td&gt;
      &lt;td&gt;87&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
      &lt;td&gt;75&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Botamon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;690&lt;/td&gt;
      &lt;td&gt;68&lt;/td&gt;
      &lt;td&gt;77&lt;/td&gt;
      &lt;td&gt;95&lt;/td&gt;
      &lt;td&gt;76&lt;/td&gt;
      &lt;td&gt;61&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Poyomon&lt;/td&gt;
      &lt;td&gt;Baby&lt;/td&gt;
      &lt;td&gt;Free&lt;/td&gt;
      &lt;td&gt;Neutral&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;540&lt;/td&gt;
      &lt;td&gt;98&lt;/td&gt;
      &lt;td&gt;54&lt;/td&gt;
      &lt;td&gt;59&lt;/td&gt;
      &lt;td&gt;95&lt;/td&gt;
      &lt;td&gt;86&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;2) A l&amp;rsquo;aide de la fonction .info() de pandas, vérifiez le type des colonnes et si des valeurs manquent dans certaines d&amp;rsquo;entre elle&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.info()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 249 entries, 0 to 248
Data columns (total 13 columns):
Number         249 non-null int64
Digimon        249 non-null object
Stage          249 non-null object
Type           249 non-null object
Attribute      249 non-null object
Memory         249 non-null int64
Equip Slots    249 non-null int64
Lv 50 HP       249 non-null int64
Lv50 SP        249 non-null int64
Lv50 Atk       249 non-null int64
Lv50 Def       249 non-null int64
Lv50 Int       249 non-null int64
Lv50 Spd       249 non-null int64
dtypes: int64(9), object(4)
memory usage: 25.4+ KB
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.isnull().sum()/len(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Number         0.0
Digimon        0.0
Stage          0.0
Type           0.0
Attribute      0.0
Memory         0.0
Equip Slots    0.0
Lv 50 HP       0.0
Lv50 SP        0.0
Lv50 Atk       0.0
Lv50 Def       0.0
Lv50 Int       0.0
Lv50 Spd       0.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) à l&amp;rsquo;aide de matplotlib, affichez un bar chart du nombre de digimons par niveau (Stage).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stages = data[&#39;Stage&#39;].value_counts()
import matplotlib.pyplot as plt
fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.bar(range(len(stages)),stages)
tick_positions = range(0,len(stages))
ax1.set_xticks(tick_positions)
ax1.set_xticklabels(stages.index, rotation=45)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[Text(0, 0, &#39;Mega&#39;),
 Text(0, 0, &#39;Ultimate&#39;),
 Text(0, 0, &#39;Champion&#39;),
 Text(0, 0, &#39;Rookie&#39;),
 Text(0, 0, &#39;In-Training&#39;),
 Text(0, 0, &#39;Ultra&#39;),
 Text(0, 0, &#39;Baby&#39;),
 Text(0, 0, &#39;Armor&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) faites le même exercice avec les attributs. Il y a plus de valeurs&amp;hellip;adaptez la largeur du graphique pour que cela reste simple à consulter&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Type = data[&#39;Attribute&#39;].value_counts()

fig = plt.figure(figsize=(12,5))
ax1 = fig.add_subplot(111)
ax1.bar(range(len(Type)),Type)
tick_positions = range(0,len(Type))
ax1.set_xticks(tick_positions)
ax1.set_xticklabels(Type.index, rotation=45)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[Text(0, 0, &#39;Dark&#39;),
 Text(0, 0, &#39;Fire&#39;),
 Text(0, 0, &#39;Light&#39;),
 Text(0, 0, &#39;Neutral&#39;),
 Text(0, 0, &#39;Plant&#39;),
 Text(0, 0, &#39;Electric&#39;),
 Text(0, 0, &#39;Water&#39;),
 Text(0, 0, &#39;Earth&#39;),
 Text(0, 0, &#39;Wind&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz1_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5) en utilisant sns.distplot, affichez la répartition de la colonne Memory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
sns.distplot(data[&#39;Memory&#39;])
sns.set()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz1_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6) en utiliant sns.kdeplot, affichez uniquement la courbe de répartition de la colonne &amp;lsquo;Lv 50 HP&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.kdeplot(data[&#39;Lv 50 HP&#39;], shade = True)
sns.set()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz1_3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;7) en utilisant scatter_matrix de Pandas, affichez la répartition et les nuages de point des 6 dernières colonnes du data set&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pandas.plotting import scatter_matrix
scatter_matrix(data[data.columns[-6:]], figsize=(15,15))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D40BC88&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D431550&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D456EB8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D483860&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D4B11D0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D4D5B38&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D5044E0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D52AE80&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D52AEB8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D587198&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D5ADB00&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D5DC4A8&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D600E10&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D62E7B8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D65D160&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D682AC8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D6B2470&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D6D8DD8&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D704780&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D734128&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D759A90&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D788438&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D7AEDA0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D7DB748&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D80A0F0&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D832A58&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D860400&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D885D68&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D8B3710&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D8E20B8&amp;gt;],
       [&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D907A20&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D9373C8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D95BD30&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D9896D8&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D9BA080&amp;gt;,
        &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x000000000D9DE9E8&amp;gt;]],
      dtype=object)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz1_4.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;8) Il semble y avoir quelque chose d&amp;rsquo;intéréssant entre &amp;lsquo;Lv50 SP&amp;rsquo; et &amp;lsquo;Lv50 Int&amp;rsquo;&amp;hellip;utilisez sns.jointplot pour voir cela plus en détail&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(&amp;quot;Lv50 SP&amp;quot;, &amp;quot;Lv50 Int&amp;quot;, data=data, kind=&amp;quot;reg&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz1_5.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;9) en utilisant sns.lmplot, ajoutez le niveau des digimons (Stage) sur le nuage de points réalisé en point 8.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&amp;quot;Lv50 SP&amp;quot;, y= &amp;quot;Lv50 Int&amp;quot;, hue=&amp;quot;Stage&amp;quot;, data=data, fit_reg = False)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz1_6.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;10) En utilisant sns.violinplot, visionnez la réparition de &amp;lsquo;Lv 50 HP&amp;rsquo; en fonction du stage du digimon.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()
fig.set_size_inches(12,8)
sns.violinplot(x=&amp;quot;Stage&amp;quot;, y=&amp;quot;Lv 50 HP&amp;quot;, data=data)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz1_7.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>9- La visualisation graphique avec Python - Cours</title>
      <link>/courses/formation_python/9-visualisation/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/9-visualisation/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/formation/matplotlib.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;objectifs&#34;&gt;Objectifs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comment générer des graphiques en Python avec matplotlib&lt;/li&gt;
&lt;li&gt;Gerer plusieurs données dans un même graphique&lt;/li&gt;
&lt;li&gt;Gérer les figures multi-graphiques&lt;/li&gt;
&lt;li&gt;Créer des bar charts, histogrammes, courbes, nuages de points et boites à moustaches&lt;/li&gt;
&lt;li&gt;Utiliser la librairie Seaborn &lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La bibliothèque Matplotlib est l&amp;rsquo;une des bibliothèques les plus utilisées pour tracer des données en Python.&lt;/p&gt;

&lt;p&gt;De nombreux types de graphiques peuvent être développés avec cette bibliothèque:
&lt;a href=&#34;https://matplotlib.org/gallery/index.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/gallery/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pour illustrer certaines fonctionnalités du module Python matplotlib.pyplot (qui fournit un système de traçage similaire à celui de MATLAB), nous utiliserons une base de données de la station UQAM.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
import numpy as np
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
import matplotlib.pyplot as plt

dataframe_UQAM = pd.read_csv(&#39;./DATA/UQAM_DATA_STATION_2018.csv&#39;)
dataframe_UQAM[&#39;Date&#39;]=pd.to_datetime(dataframe_UQAM[&#39;Date&#39;])
dataframe_UQAM = dataframe_UQAM.set_index(&amp;quot;Date&amp;quot;, drop=True)
dataframe_UQAM.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Temperature minimale&lt;/th&gt;
      &lt;th&gt;Temperature maximale&lt;/th&gt;
      &lt;th&gt;Temperature moyenne&lt;/th&gt;
      &lt;th&gt;Precipitation totale&lt;/th&gt;
      &lt;th&gt;Dir_wind&lt;/th&gt;
      &lt;th&gt;Mod_wind&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-01&lt;/th&gt;
      &lt;td&gt;-4.6&lt;/td&gt;
      &lt;td&gt;0.9&lt;/td&gt;
      &lt;td&gt;-1.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;244.0&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-02&lt;/th&gt;
      &lt;td&gt;-6.2&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;-3.5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;163.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-03&lt;/th&gt;
      &lt;td&gt;-4.8&lt;/td&gt;
      &lt;td&gt;0.5&lt;/td&gt;
      &lt;td&gt;-1.2&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;255.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-04&lt;/th&gt;
      &lt;td&gt;-9.9&lt;/td&gt;
      &lt;td&gt;-4.8&lt;/td&gt;
      &lt;td&gt;-8.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;148.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2014-02-05&lt;/th&gt;
      &lt;td&gt;-9.9&lt;/td&gt;
      &lt;td&gt;-6.3&lt;/td&gt;
      &lt;td&gt;-7.6&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;261.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2 id=&#34;1-générer-son-premier-graphique&#34;&gt;1- Générer son premier graphique&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Option &lt;b&gt; marqueur &lt;/b&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://matplotlib.org/api/markers_api.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/api/markers_api.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Option &lt;b&gt; linestyle &lt;/b&gt;: supprimer ou non les lignes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], marker=&#39;x&#39;, linestyle=&amp;quot;--&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], marker=&#39;x&#39;, linestyle=&amp;quot;--&amp;quot;)
plt.xlabel(&amp;quot; L&#39;axe des abscisses&amp;quot;)
plt.ylabel(&amp;quot;L&#39;axe des ordonnées&amp;quot;)
plt.title(&amp;quot;Ma deuxième courbe !&amp;quot;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;)
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkred&#39;)

plt.xlabel(&amp;quot; L&#39;axe des abscisses&amp;quot;)
plt.ylabel(&amp;quot;L&#39;axe des ordonnées&amp;quot;)
plt.title(&amp;quot;multi-courbes&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz4.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fonction &lt;b&gt; scatter &lt;/b&gt;: la fonction vous permet de créer un nuage de points&lt;/li&gt;

&lt;li&gt;&lt;p&gt;La méthode &lt;b&gt; .rcParams &lt;/b&gt; est utilisée pour agrandir la fenêtre graphique&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]  
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz5.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pour utiliser l&amp;rsquo;option scatter color, python veut une liste d&amp;rsquo;entrée et non un dictionnaire&lt;/li&gt;

&lt;li&gt;&lt;p&gt;option couleur: c = list ()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], c=list(year_to_plot[&#39;Temperature moyenne&#39;]))
plt.xlabel(&amp;quot;Temps&amp;quot;)
plt.ylabel(&amp;quot;Température&amp;quot;)
plt.title(&amp;quot;Temperature&amp;quot;, y=1.05)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz6.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nous avons utilisé la couleur de dispersion par défaut ()&lt;/li&gt;
&lt;li&gt;avec l&amp;rsquo;option &lt;b&gt; cmap &lt;/b&gt;, nous pouvons choisir notre panel de couleurs: &lt;a href=&#34;https://matplotlib.org/examples/color/colormaps_reference.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/examples/color/colormaps_reference.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;on choisira par exemple la palette de couleurs &amp;ldquo;sismique&amp;rdquo; via l&amp;rsquo;option &lt;b&gt; cmap &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;pour changer la forme et la taille des points: utilisez les options &lt;b&gt; marqueur &lt;/b&gt; et &lt;b&gt; s &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;pour enregistrer un graphe: fonction pyplot: &lt;b&gt; savefig () &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;Pour ajouter une barre de couleur: fonction &lt;b&gt; colorbar () &lt;/b&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pour faire pivoter les étiquettes dans x: function &lt;b&gt; xticks () &lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], c=list(year_to_plot[&#39;Temperature moyenne&#39;]),
        cmap=&amp;quot;seismic&amp;quot;,
        marker=&amp;quot;D&amp;quot;, 
        s=100)
plt.xlabel(&amp;quot;Time&amp;quot;)
plt.ylabel(&amp;quot;Temperature&amp;quot;)
plt.title(&amp;quot;Temperature&amp;quot;, y=1.05)
plt.colorbar()
plt.xticks(rotation=45)
plt.show()
plt.savefig(&amp;quot;figures/my_graph.png&amp;quot;, bbox_inches=&amp;quot;tight&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz7.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Figure size 1152x648 with 0 Axes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;2- Figure et multi graph &lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()               # je crée un nouvel espace de création pour mes graphique
ax = fig.add_subplot(111)        # je crée un nouveau graphique appelé &#39;ax&#39; et j&#39;indique ses coordonnées
ax.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;) # je ne dis plus plt mais ax pour indiquer ce qui est présent
ax.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkgreen&#39;)
ax.set_xlabel(&amp;quot; L&#39;axe des abscisses&amp;quot;)
ax.set_ylabel(&amp;quot;L&#39;axe des ordonnées&amp;quot;)
ax.set_title(&amp;quot;multi-courbes&amp;quot;)
plt.xticks(rotation=45)
plt.show() #c&#39;est plt qui continue d&#39;indiquer l&#39;affichage du graphique


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz8.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Résumé des principaux éléments dans un graphique matplotlib &lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/resume_matplotlib.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)

ax1.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;) # je ne dis plus plt mais ax pour indiquer ce qui est présent
ax2.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkgreen&#39;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz9.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;matplotlib-subplot&#34;&gt;Matplotlib subplot&lt;/h2&gt;

&lt;p&gt;Lors de la création d&amp;rsquo;un graphique, matplotlib:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stocke un conteneur pour tous les graphiques&lt;/li&gt;
&lt;li&gt;stocke un conteneur pour que le graphique soit positionné sur une grille&lt;/li&gt;
&lt;li&gt;stocke les symboles visuels sur le graphique&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vous pouvez tracer différentes choses dans la même figure en utilisant la fonction de sous-tracé. Voici un exemple:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/subplot.png&#34; alt=&#34;SUBPLOT.PNG&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()
ax1 = fig.add_subplot(2,2,1) # up and left 
ax2 = fig.add_subplot(2,2,2) # up and right 
ax3 = fig.add_subplot(2,2,3) # down and left 
ax4 = fig.add_subplot(2,2,4) # down and right
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz10.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Voici une documentation sur le sous-intrigue:
&lt;a href=&#34;https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(10,5))
ax1 = fig.add_subplot(121)
ax2 = fig.add_subplot(122)
ax1.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;) # je ne dis plus plt mais ax pour indiquer ce qui est présent
ax2.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkgreen&#39;)
ax1.legend(loc=&#39;upper left&#39;)
ax2.legend(loc=&#39;upper left&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz11.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(10,5))
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

ax1.plot(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature minimale&#39;], color=&#39;lightblue&#39;) # je ne dis plus plt mais ax pour indiquer ce qui est présent
ax2.scatter(dataframe_UQAM[&#39;2015&#39;].index,year_to_plot[&#39;Temperature maximale&#39;], color=&#39;darkgreen&#39;)

plt.savefig(&amp;quot;foo.png&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz12.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(15, 8))
colors = [&#39;green&#39;, &#39;blue&#39;, &#39;red&#39;,&#39;orange&#39;]
for i in range(4):
    ax = fig.add_subplot(2,2,i+1)
    year = str(2014+i)
    label=year
    plt.plot(dataframe_UQAM[year].index,dataframe_UQAM[year][&#39;Temperature moyenne&#39;], c=colors[i], label = label)
    plt.legend(loc=&#39;upper left&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz13.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;3- Présentation des principales représentations graphiques &lt;/h2&gt;
&lt;h3&gt; a- Le bar chart &lt;/h3&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Exemple 1 : 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&#39;./DATA/train.csv&#39;,encoding=&#39;latin-1&#39;, sep=&#39;,&#39;)
data.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;PassengerId&lt;/th&gt;
      &lt;th&gt;Survived&lt;/th&gt;
      &lt;th&gt;Pclass&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Sex&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;SibSp&lt;/th&gt;
      &lt;th&gt;Parch&lt;/th&gt;
      &lt;th&gt;Ticket&lt;/th&gt;
      &lt;th&gt;Fare&lt;/th&gt;
      &lt;th&gt;Cabin&lt;/th&gt;
      &lt;th&gt;Embarked&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Braund, Mr. Owen Harris&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;A/5 21171&lt;/td&gt;
      &lt;td&gt;7.2500&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Cumings, Mrs. John Bradley (Florence Briggs Th...&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;PC 17599&lt;/td&gt;
      &lt;td&gt;71.2833&lt;/td&gt;
      &lt;td&gt;C85&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Heikkinen, Miss. Laina&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;STON/O2. 3101282&lt;/td&gt;
      &lt;td&gt;7.9250&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Futrelle, Mrs. Jacques Heath (Lily May Peel)&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;113803&lt;/td&gt;
      &lt;td&gt;53.1000&lt;/td&gt;
      &lt;td&gt;C123&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Allen, Mr. William Henry&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;373450&lt;/td&gt;
      &lt;td&gt;8.0500&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Répartition du nombre de personnes par class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;passagersClasses = data[&#39;Pclass&#39;].value_counts()
passagersClasses
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3    491
1    216
2    184
Name: Pclass, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.bar(range(len(passagersClasses)),passagersClasses)   # création du graphique
tick_positions = range(0,len(passagersClasses))          # définition de la position des échelles sur les axes
ax1.set_xticks(tick_positions)                           # ajout des échelles 
ax1.set_xticklabels(passagersClasses.index, rotation=45) # ajout des labels

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz14.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Exemple 2 : 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Répartition des classes avec un filtre&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;passagersClassesWomen = data[&#39;Pclass&#39;][data[&#39;Sex&#39;] == &#39;female&#39;].value_counts()
print(passagersClassesWomen)
passagersClassesMen = data[&#39;Pclass&#39;][data[&#39;Sex&#39;] == &#39;male&#39;].value_counts()
print(passagersClassesMen)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3    144
1     94
2     76
Name: Pclass, dtype: int64
3    347
1    122
2    108
Name: Pclass, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;largeurBar = 0.25
position1W = np.arange(len(passagersClassesWomen))
position1M = [x + largeurBar for x in position1W]
print(position1W)
print(position1M)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0 1 2]
[0.25, 1.25, 2.25]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)

ax1.bar(position1W,passagersClassesWomen, width=largeurBar, label=&#39;Femmes&#39;)

ax1.bar(position1M,passagersClassesMen, width=largeurBar,label=&#39;Hommes&#39;)

tick_positions = range(0,len(passagersClasses))
ax1.set_xticks(tick_positions)
ax1.set_xticklabels(passagersClasses.index, rotation=45)

plt.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz15.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Exemple 3 : 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Création de bar empilé&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;passagersVieClasses = data[&#39;Pclass&#39;][data[&#39;Survived&#39;] == 1].value_counts()
print(passagersVieClasses)
passagersMortClasses = data[&#39;Pclass&#39;][data[&#39;Survived&#39;] == 0].value_counts()
print(passagersMortClasses)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1    136
3    119
2     87
Name: Pclass, dtype: int64
3    372
2     97
1     80
Name: Pclass, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;largeurBar = 0.5
position1 = np.arange(len(passagersVieClasses))

fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)

ax1.bar(position1,passagersVieClasses, width=largeurBar, label=&#39;Vie&#39;)

ax1.bar(position1,passagersMortClasses, width=largeurBar,label=&#39;décès&#39;,bottom=passagersVieClasses)

tick_positions = range(0,len(passagersClasses))
ax1.set_xticks(tick_positions)
ax1.set_xticklabels(passagersClasses.index, rotation=45)

plt.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz16.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;b-l-histogramme&#34;&gt;b- L&amp;rsquo; histogramme&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)

ax1.hist(data[&#39;Age&#39;].dropna())          #on pousse la liste age en supprimant les valeurs manquantes
ax1.set_title(&amp;quot;repartition de l&#39;age&amp;quot;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz17.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)

# on ajoute des filtres 
ageEnVie = data[&#39;Age&#39;][data[&#39;Survived&#39;] == 1].dropna()    
ageDeces = data[&#39;Age&#39;][data[&#39;Survived&#39;] == 0].dropna()
# on va pousser deux listes dans notre histogramme
ax1.hist([ageEnVie,ageDeces],bins=20,stacked=True,density = True)
ax1.set_title(&amp;quot;Répartition de l&#39;âge en fonction de la survie (en bleu) ou du décès (en orange)&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz18.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3&gt; c- Le nuage de points &lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.scatter(data[&#39;Age&#39;],data[&#39;Fare&#39;])
ax1.set_title(&amp;quot;Prix du bilet en fonction de l&#39;age&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz19.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.scatter(data[&#39;Age&#39;],data[&#39;Fare&#39;])
ax1.set_title(&amp;quot;Prix du bilet en fonction de l&#39;age&amp;quot;)
ax1.set_ylim(top=100)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz20.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(7,5))
ax1 = fig.add_subplot(111)
ax1.scatter(data[&#39;Pclass&#39;],data[&#39;Fare&#39;])
ax1.set_title(&amp;quot;Prix du bilet en fonction de la classe&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz21.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pandas.plotting import scatter_matrix
scatter_matrix(data[[&#39;Survived&#39;,&#39;Pclass&#39;,&#39;Age&#39;,&#39;SibSp&#39;,&#39;Fare&#39;]], figsize=(15,15))
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz22.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-aller-plus-loin-avec-seaborn&#34;&gt;4- Aller plus loin avec Seaborn&lt;/h2&gt;

&lt;p&gt;Pour compléter et enrichir nos visualiations, une nouvelle bibliothèque Python sera utilisée: &lt;b&gt; Seaborn &lt;/b&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la bibliothèque Seaborn est basée sur matplotlib.&lt;/li&gt;
&lt;li&gt;il permet de dessiner des graphiques plus complexes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour plus d&amp;rsquo;informations:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&#34; target=&#34;_blank&#34;&gt;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ce lien présente une galerie de types de graphiques à réaliser avec Seaborn:
&lt;a href=&#34;https://seaborn.pydata.org/examples/index.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/examples/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src = &#34;./figures/seaborn.png&#34; alt = &#34;Seaborn&#34; width = &#34;60%&#34; height = &#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/examples/index.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/examples/index.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
sns.distplot(data[&amp;quot;Age&amp;quot;].dropna())
sns.set()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz23.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.kdeplot(data[&amp;quot;Age&amp;quot;].dropna(), shade=True)
sns.set()
plt.xlabel(&amp;quot;Age&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz24.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&amp;quot;Age&amp;quot;, y=&amp;quot;Fare&amp;quot;, hue=&amp;quot;Pclass&amp;quot;, data=data,fit_reg=False)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz25.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(&amp;quot;Age&amp;quot;, &amp;quot;Fare&amp;quot;, data=data, kind=&amp;quot;reg&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz26.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(&amp;quot;Age&amp;quot;, &amp;quot;Fare&amp;quot;, data=data, kind=&amp;quot;hex&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz27.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.boxplot(x=data[&amp;quot;Age&amp;quot;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz28.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/moustache.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.boxplot(x=&amp;quot;Pclass&amp;quot;, y=&amp;quot;Age&amp;quot;, data=data)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz29.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.violinplot(x=&amp;quot;Pclass&amp;quot;, y=&amp;quot;Age&amp;quot;, data=data)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz30.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()
fig.set_size_inches(12, 8)
sns.violinplot(x=&amp;quot;Pclass&amp;quot;, y=&amp;quot;Age&amp;quot;, data=data)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/dataviz31.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Afin de mettre en pratique ce que nous venons de voir, une section exercice est proposée. Deux projets complets sur des analyses de stations météorologiques sont également proposées.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Projet sur les données de précipitations ECCC</title>
      <link>/courses/formation_python/project2-eccc_precipitation/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/project2-eccc_precipitation/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/formation/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;objectifs&#34;&gt;Objectifs&lt;/h2&gt;

&lt;h2 id=&#34;projet-2-données-de-précipitation-d-environnement-et-changement-climatique-canada&#34;&gt;Projet 2: Données de précipitation d&amp;rsquo;Environnement et Changement Climatique Canada&lt;/h2&gt;

&lt;p&gt;Nous continuerons de découvrir la fonctionnalité de ces bibliothèques dans un cas pratique en analysant maintenant les données de précipitations quotidiennes enregistrées par les stations ECCC situées à l&amp;rsquo;aéroport de Montréal Trudeau entre la période 1961 et 2010.&lt;/p&gt;

&lt;p&gt;Nous utiliserons le fichier &amp;lsquo;MONTREAL_preacc_1961_2010.dat&amp;rsquo; dans le répertoire .data /.&lt;/p&gt;

&lt;h2 id=&#34;1-ouverture-et-lecture-de-nos-séries-de-données&#34;&gt;1- Ouverture et lecture de nos séries de données&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
import datetime
from datetime import date
import numpy as np 
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)

df_Precipitation = pd.DataFrame()
# Ouverture du fichier text  
with open(&#39;./DATA/MONTREAL_preacc_1961_2010.dat&#39;, &#39;r&#39;) as file:
     rows = file.read()
data_EC_Montreal = [float(row) for row in rows.split()]  

# We know that the time series begins on January 1, 1961
# and ends on December 31, 2010
# We can rebuild the index of Dataframes

start = date(1961, 1, 1)
end = date(2010, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)

# Create a column from the datetime datatype
df_Precipitation[&#39;datetime&#39;] = rng
# Set the datetime column as the index
df_Precipitation.index = df_Precipitation[&#39;datetime&#39;] 

# Create a column from the numeric score variable
df_Precipitation[&#39;Precipitation Montreal&#39;] = data_EC_Montreal
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;Precipitation Montreal&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-01&lt;/th&gt;
      &lt;td&gt;1961-01-01&lt;/td&gt;
      &lt;td&gt;22.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-02&lt;/th&gt;
      &lt;td&gt;1961-01-02&lt;/td&gt;
      &lt;td&gt;1.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-03&lt;/th&gt;
      &lt;td&gt;1961-01-03&lt;/td&gt;
      &lt;td&gt;1.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-04&lt;/th&gt;
      &lt;td&gt;1961-01-04&lt;/td&gt;
      &lt;td&gt;0.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-05&lt;/th&gt;
      &lt;td&gt;1961-01-05&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(df_Precipitation.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            | datetime            |   Precipitation Montreal |
|:--------------------|:--------------------|-------------------------:|
| 1961-01-01 00:00:00 | 1961-01-01 00:00:00 |                    22.66 |
| 1961-01-02 00:00:00 | 1961-01-02 00:00:00 |                     1.05 |
| 1961-01-03 00:00:00 | 1961-01-03 00:00:00 |                     1.05 |
| 1961-01-04 00:00:00 | 1961-01-04 00:00:00 |                     0.66 |
| 1961-01-05 00:00:00 | 1961-01-05 00:00:00 |                     0    |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-application-des-indices-de-précipitations&#34;&gt;2- Application des indices de précipitations:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CDD: calcul du nombre maximum de jours secs consécutifs (Précipitations &amp;lt;1mm)&lt;/li&gt;
&lt;li&gt;CWD: calcul du nombre maximum de jours de pluie consécutifs (Précipitations&amp;gt; 1mm)&lt;/li&gt;
&lt;li&gt;Prcp1: calcul du pourcentage de jours de précipitations (Précipitations&amp;gt; 1mm)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SDII: calcul de l&amp;rsquo;intensité moyenne des précipitations pour les jours de pluie (Précipitations&amp;gt; 1mm&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# calculation of the maximum number of consecutive dry days (inf to 1mm) 
# on the incoming signal (less than 20% of missing values) 
def CDD(S):
 import numpy as np
 ind_CDD=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if ((N2/N) &amp;lt; 0.8): 
     ind_CDD = np.empty(1)
     ind_CDD = np.nan
 else:
     temp = 0
     ind_CDD = 0 
     j =0
     while (j &amp;lt; N2):
         while (j &amp;lt; N2 ) and (S_no_nan[j] &amp;lt; 1.0 ):
             j += 1
             temp +=1
         if ind_CDD &amp;lt; temp:
             ind_CDD = temp
         temp = 0
         j += 1 
 return ind_CDD      
 
# calculation of the maximum number of consecutive wet days (sup to 1mm) 
# on the incoming signal (less than 20% of missing values) 
def CWD(S):
 import numpy as np
 ind_CWD=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if ((N2/N) &amp;lt; 0.8): 
     ind_CWD = np.empty(1)
     ind_CWD = np.nan
 else:
     temp = 0
     ind_CWD = 0 
     j =0
     while (j &amp;lt; N2):
         while (j &amp;lt; N2 ) and (S_no_nan[j] &amp;gt; 1.0 ):
             j += 1
             temp +=1
         if ind_CWD &amp;lt; temp:
             ind_CWD = temp
         temp = 0
         j += 1 
 return ind_CWD  

# Calculation of the percentage of precipitation days 
# on the incoming signal (less than 20% of missing values)
def Prcp1(S):
 import numpy as np
 ind_Prcp1=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if (N2 == 0):
     N2=1
         
 if ((N2/N) &amp;lt; 0.8): 
     ind_Prcp1 = np.empty(1)
     ind_Prcp1 = np.nan
 else:
     ind_Prcp1 = 0
     for row in S_no_nan:
         if row &amp;gt;= 1 :
             ind_Prcp1 += 1 
                 
     ind_Prcp1 = 100 * (ind_Prcp1/N2)
 return ind_Prcp1     

# average precipitation intensity for wet days (PR greater than 1mm) (less than 20% missing values)

def SDII(S):
 import numpy as np
 ind_SDII=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if ((N2/N) &amp;lt; 0.8): 
     ind_SDII = np.empty(1)
     ind_SDII = np.nan
 else:
     SS = S[S &amp;gt; 1]        
     ind_SDII = np.nanmean(SS)
 return ind_SDII      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les fonctions précédentes permettent de calculer des indices de précipitations sur un signal journalier. Nous voulons appliquer ces fonctions chaque mois.&lt;/p&gt;

&lt;p&gt;Nous devons donc travailler avec un sous-ensemble de notre dataframe &lt;b&gt; df_Precipitation &lt;/b&gt; groupé par mois.&lt;/p&gt;

&lt;p&gt;De la même manière que la section précédente sur les températures, nous appliquerons la méthode &lt;b&gt; .resample (&amp;rsquo;M&amp;rsquo;) &lt;/b&gt;: &amp;ldquo;M&amp;rdquo; pendant des mois (il est possible ici de travailler à l&amp;rsquo;échelle de la semaine, de la saison ou de l&amp;rsquo;année)
Pour rappel, à ce stade il n&amp;rsquo;y a pas de calcul, les données sont simplement triées sur une base mensuelle.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Precipitation_resamp = df_Precipitation.resample(&#39;M&#39;)
df_Precipitation_resamp.count().head()            
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;Precipitation Montreal&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-31&lt;/th&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-02-28&lt;/th&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-03-31&lt;/th&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-04-30&lt;/th&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-05-31&lt;/th&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(df_Precipitation_resamp.count().head() , headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |   datetime |   Precipitation Montreal |
|:--------------------|-----------:|-------------------------:|
| 1961-01-31 00:00:00 |         31 |                       31 |
| 1961-02-28 00:00:00 |         28 |                       28 |
| 1961-03-31 00:00:00 |         31 |                       31 |
| 1961-04-30 00:00:00 |         30 |                       30 |
| 1961-05-31 00:00:00 |         31 |                       31 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous pouvons maintenant appliquer nos fonctions définies précédemment pour chaque mois de notre DataFrame. Pour cela, nous utiliserons la méthode &lt;b&gt; .agg () &lt;/b&gt; sur notre sous-ensemble groupé par mois.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation = df_Precipitation_resamp.agg([CDD, CWD, Prcp1, SDII, np.sum, np.mean])
indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan=&#34;6&#34; halign=&#34;left&#34;&gt;Precipitation Montreal&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;CDD&lt;/th&gt;
      &lt;th&gt;CWD&lt;/th&gt;
      &lt;th&gt;Prcp1&lt;/th&gt;
      &lt;th&gt;SDII&lt;/th&gt;
      &lt;th&gt;sum&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-31&lt;/th&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;29.032258&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;55.09&lt;/td&gt;
      &lt;td&gt;1.777097&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-02-28&lt;/th&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;28.571429&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;80.87&lt;/td&gt;
      &lt;td&gt;2.888214&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-03-31&lt;/th&gt;
      &lt;td&gt;16.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;25.806452&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;97.59&lt;/td&gt;
      &lt;td&gt;3.148065&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-04-30&lt;/th&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;50.000000&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;102.70&lt;/td&gt;
      &lt;td&gt;3.423333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-05-31&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;41.935484&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;70.22&lt;/td&gt;
      &lt;td&gt;2.265161&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(indice_precipitation.head() , headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |   (&#39;Precipitation Montreal&#39;, &#39;CDD&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;CWD&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;Prcp1&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;SDII&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;sum&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;mean&#39;) |
|:--------------------|------------------------------------:|------------------------------------:|--------------------------------------:|-------------------------------------:|------------------------------------:|-------------------------------------:|
| 1961-01-31 00:00:00 |                                  14 |                                   3 |                               29.0323 |                              5.69111 |                               55.09 |                              1.7771  |
| 1961-02-28 00:00:00 |                                  12 |                                   3 |                               28.5714 |                              9.895   |                               80.87 |                              2.88821 |
| 1961-03-31 00:00:00 |                                  16 |                                   3 |                               25.8065 |                             11.8687  |                               97.59 |                              3.14806 |
| 1961-04-30 00:00:00 |                                   4 |                                   3 |                               50      |                              6.68333 |                              102.7  |                              3.42333 |
| 1961-05-31 00:00:00 |                                   5 |                                   3 |                               41.9355 |                              5.13    |                               70.22 |                              2.26516 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-filtrer-les-données-directement-sur-notre-dataframe&#34;&gt;3- Filtrer les données directement sur notre DataFrame&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;les données peuvent être filtrées selon une condition sur une colonne.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On n&amp;rsquo;extraira par exemple que les données de précipitations supérieures ou égales à 1 mm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SDII2=df_Precipitation[df_Precipitation[&amp;quot;Precipitation Montreal&amp;quot;]&amp;gt;=1.0]
SDII2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;Precipitation Montreal&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-01&lt;/th&gt;
      &lt;td&gt;1961-01-01&lt;/td&gt;
      &lt;td&gt;22.66&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-02&lt;/th&gt;
      &lt;td&gt;1961-01-02&lt;/td&gt;
      &lt;td&gt;1.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-03&lt;/th&gt;
      &lt;td&gt;1961-01-03&lt;/td&gt;
      &lt;td&gt;1.05&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-06&lt;/th&gt;
      &lt;td&gt;1961-01-06&lt;/td&gt;
      &lt;td&gt;8.65&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-07&lt;/th&gt;
      &lt;td&gt;1961-01-07&lt;/td&gt;
      &lt;td&gt;4.05&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(SDII2.head() , headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            | datetime            |   Precipitation Montreal |
|:--------------------|:--------------------|-------------------------:|
| 1961-01-01 00:00:00 | 1961-01-01 00:00:00 |                    22.66 |
| 1961-01-02 00:00:00 | 1961-01-02 00:00:00 |                     1.05 |
| 1961-01-03 00:00:00 | 1961-01-03 00:00:00 |                     1.05 |
| 1961-01-06 00:00:00 | 1961-01-06 00:00:00 |                     8.65 |
| 1961-01-07 00:00:00 | 1961-01-07 00:00:00 |                     4.05 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons d&amp;rsquo;abord créé un masque de type booléen sur la colonne «Précipitation Montréal» qui a ensuite été appliqué à notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(df_Precipitation[&amp;quot;Precipitation Montreal&amp;quot;]&amp;gt;1.0).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime
1961-01-01     True
1961-01-02     True
1961-01-03     True
1961-01-04    False
1961-01-05    False
Name: Precipitation Montreal, dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous regroupons ensuite notre DataFrame par mois et nous appliquons une fonction en appelant la méthode .agg ().&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SDII2 = SDII2.resample(&#39;M&#39;).agg({&#39;SDII2&#39;: lambda x: x.mean()})
SDII2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;SDII2&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Precipitation Montreal&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-31&lt;/th&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-02-28&lt;/th&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-03-31&lt;/th&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-04-30&lt;/th&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-05-31&lt;/th&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(SDII2.head() , headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |   (&#39;SDII2&#39;, &#39;Precipitation Montreal&#39;) |
|:--------------------|--------------------------------------:|
| 1961-01-31 00:00:00 |                               5.69111 |
| 1961-02-28 00:00:00 |                               9.895   |
| 1961-03-31 00:00:00 |                              11.8688  |
| 1961-04-30 00:00:00 |                               6.68333 |
| 1961-05-31 00:00:00 |                               5.13    |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-mise-à-jour-de-notre-dataframe-initial&#34;&gt;4- Mise à jour de notre DataFrame initial&lt;/h2&gt;

&lt;p&gt;Nous voulons ajouter à notre DataFrame initial la variable SDII2 précédemment créée.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation[&amp;quot;SDII2&amp;quot;]=SDII2[:].values
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan=&#34;6&#34; halign=&#34;left&#34;&gt;Precipitation Montreal&lt;/th&gt;
      &lt;th&gt;SDII2&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;CDD&lt;/th&gt;
      &lt;th&gt;CWD&lt;/th&gt;
      &lt;th&gt;Prcp1&lt;/th&gt;
      &lt;th&gt;SDII&lt;/th&gt;
      &lt;th&gt;sum&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-31&lt;/th&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;29.032258&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;55.09&lt;/td&gt;
      &lt;td&gt;1.777097&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-02-28&lt;/th&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;28.571429&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;80.87&lt;/td&gt;
      &lt;td&gt;2.888214&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-03-31&lt;/th&gt;
      &lt;td&gt;16.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;25.806452&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;97.59&lt;/td&gt;
      &lt;td&gt;3.148065&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-04-30&lt;/th&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;50.000000&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;102.70&lt;/td&gt;
      &lt;td&gt;3.423333&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-05-31&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;41.935484&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;70.22&lt;/td&gt;
      &lt;td&gt;2.265161&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(indice_precipitation.head() , headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |   (&#39;Precipitation Montreal&#39;, &#39;CDD&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;CWD&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;Prcp1&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;SDII&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;sum&#39;) |   (&#39;Precipitation Montreal&#39;, &#39;mean&#39;) |   (&#39;SDII2&#39;, &#39;&#39;) |
|:--------------------|------------------------------------:|------------------------------------:|--------------------------------------:|-------------------------------------:|------------------------------------:|-------------------------------------:|----------------:|
| 1961-01-31 00:00:00 |                                  14 |                                   3 |                               29.0323 |                              5.69111 |                               55.09 |                              1.7771  |         5.69111 |
| 1961-02-28 00:00:00 |                                  12 |                                   3 |                               28.5714 |                              9.895   |                               80.87 |                              2.88821 |         9.895   |
| 1961-03-31 00:00:00 |                                  16 |                                   3 |                               25.8065 |                             11.8687  |                               97.59 |                              3.14806 |        11.8688  |
| 1961-04-30 00:00:00 |                                   4 |                                   3 |                               50      |                              6.68333 |                              102.7  |                              3.42333 |         6.68333 |
| 1961-05-31 00:00:00 |                                   5 |                                   3 |                               41.9355 |                              5.13    |                               70.22 |                              2.26516 |         5.13    |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.columns = indice_precipitation.columns.droplevel(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;CDD&lt;/th&gt;
      &lt;th&gt;CWD&lt;/th&gt;
      &lt;th&gt;Prcp1&lt;/th&gt;
      &lt;th&gt;SDII&lt;/th&gt;
      &lt;th&gt;sum&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-31&lt;/th&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;29.032258&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;55.09&lt;/td&gt;
      &lt;td&gt;1.777097&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-02-28&lt;/th&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;28.571429&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;80.87&lt;/td&gt;
      &lt;td&gt;2.888214&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-03-31&lt;/th&gt;
      &lt;td&gt;16.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;25.806452&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;97.59&lt;/td&gt;
      &lt;td&gt;3.148065&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-04-30&lt;/th&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;50.000000&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;102.70&lt;/td&gt;
      &lt;td&gt;3.423333&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-05-31&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;41.935484&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;70.22&lt;/td&gt;
      &lt;td&gt;2.265161&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(indice_precipitation.head() , headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |   CDD |   CWD |   Prcp1 |     SDII |    sum |    mean |          |
|:--------------------|------:|------:|--------:|---------:|-------:|--------:|---------:|
| 1961-01-31 00:00:00 |    14 |     3 | 29.0323 |  5.69111 |  55.09 | 1.7771  |  5.69111 |
| 1961-02-28 00:00:00 |    12 |     3 | 28.5714 |  9.895   |  80.87 | 2.88821 |  9.895   |
| 1961-03-31 00:00:00 |    16 |     3 | 25.8065 | 11.8687  |  97.59 | 3.14806 | 11.8688  |
| 1961-04-30 00:00:00 |     4 |     3 | 50      |  6.68333 | 102.7  | 3.42333 |  6.68333 |
| 1961-05-31 00:00:00 |     5 |     3 | 41.9355 |  5.13    |  70.22 | 2.26516 |  5.13    |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En utilisant la colonne index datetime, nous voulons créer de nouvelles colonnes avec l&amp;rsquo;année et le mois.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation[&#39;year&#39;]  = indice_precipitation.index.year
indice_precipitation[&#39;month&#39;]  = indice_precipitation.index.month
indice_precipitation[&#39;month&#39;] = indice_precipitation.index.strftime(&#39;%b&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;CDD&lt;/th&gt;
      &lt;th&gt;CWD&lt;/th&gt;
      &lt;th&gt;Prcp1&lt;/th&gt;
      &lt;th&gt;SDII&lt;/th&gt;
      &lt;th&gt;sum&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;month&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-31&lt;/th&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;29.032258&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;55.09&lt;/td&gt;
      &lt;td&gt;1.777097&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Jan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-02-28&lt;/th&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;28.571429&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;80.87&lt;/td&gt;
      &lt;td&gt;2.888214&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Feb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-03-31&lt;/th&gt;
      &lt;td&gt;16.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;25.806452&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;97.59&lt;/td&gt;
      &lt;td&gt;3.148065&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Mar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-04-30&lt;/th&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;50.000000&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;102.70&lt;/td&gt;
      &lt;td&gt;3.423333&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Apr&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-05-31&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;41.935484&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;70.22&lt;/td&gt;
      &lt;td&gt;2.265161&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;May&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(indice_precipitation.head() , headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |   CDD |   CWD |   Prcp1 |     SDII |    sum |    mean |          |   year | month   |
|:--------------------|------:|------:|--------:|---------:|-------:|--------:|---------:|-------:|:--------|
| 1961-01-31 00:00:00 |    14 |     3 | 29.0323 |  5.69111 |  55.09 | 1.7771  |  5.69111 |   1961 | Jan     |
| 1961-02-28 00:00:00 |    12 |     3 | 28.5714 |  9.895   |  80.87 | 2.88821 |  9.895   |   1961 | Feb     |
| 1961-03-31 00:00:00 |    16 |     3 | 25.8065 | 11.8687  |  97.59 | 3.14806 | 11.8688  |   1961 | Mar     |
| 1961-04-30 00:00:00 |     4 |     3 | 50      |  6.68333 | 102.7  | 3.42333 |  6.68333 |   1961 | Apr     |
| 1961-05-31 00:00:00 |     5 |     3 | 41.9355 |  5.13    |  70.22 | 2.26516 |  5.13    |   1961 | May     |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous voulons sauvegarder notre Dataframe &lt;b&gt; indice_precipitation &lt;/b&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.to_csv(&#39;indice_precipitation.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-visualisation-des-résultats&#34;&gt;4- Visualisation des résultats&lt;/h2&gt;

&lt;p&gt;Nous allons visualiser notre dataframe final &lt;b&gt; index_precipitation &lt;/b&gt; avec la bibliothèque Seaborn.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/seaborn.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Cependant, nous verrons quelques exemples avec des graphiques multidimensionnels.
- Boxplot: fonction &lt;b&gt; boxplot () &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Utilisons notre DataFrame de précipitations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns 
import matplotlib.pyplot as plt 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;CDD&lt;/th&gt;
      &lt;th&gt;CWD&lt;/th&gt;
      &lt;th&gt;Prcp1&lt;/th&gt;
      &lt;th&gt;SDII&lt;/th&gt;
      &lt;th&gt;sum&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;month&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-31&lt;/th&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;29.032258&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;55.09&lt;/td&gt;
      &lt;td&gt;1.777097&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Jan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-02-28&lt;/th&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;28.571429&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;80.87&lt;/td&gt;
      &lt;td&gt;2.888214&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Feb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-03-31&lt;/th&gt;
      &lt;td&gt;16.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;25.806452&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;97.59&lt;/td&gt;
      &lt;td&gt;3.148065&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Mar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-04-30&lt;/th&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;50.000000&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;102.70&lt;/td&gt;
      &lt;td&gt;3.423333&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Apr&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-05-31&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;41.935484&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;70.22&lt;/td&gt;
      &lt;td&gt;2.265161&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;May&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(indice_precipitation.head() , headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |   CDD |   CWD |   Prcp1 |     SDII |    sum |    mean |          |   year | month   |
|:--------------------|------:|------:|--------:|---------:|-------:|--------:|---------:|-------:|:--------|
| 1961-01-31 00:00:00 |    14 |     3 | 29.0323 |  5.69111 |  55.09 | 1.7771  |  5.69111 |   1961 | Jan     |
| 1961-02-28 00:00:00 |    12 |     3 | 28.5714 |  9.895   |  80.87 | 2.88821 |  9.895   |   1961 | Feb     |
| 1961-03-31 00:00:00 |    16 |     3 | 25.8065 | 11.8687  |  97.59 | 3.14806 | 11.8688  |   1961 | Mar     |
| 1961-04-30 00:00:00 |     4 |     3 | 50      |  6.68333 | 102.7  | 3.42333 |  6.68333 |   1961 | Apr     |
| 1961-05-31 00:00:00 |     5 |     3 | 41.9355 |  5.13    |  70.22 | 2.26516 |  5.13    |   1961 | May     |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous voulons visualiser le nombre de jours avec des précipitations par mois. Nous allons ensuite tracer la variable Prcp1 à partir de notre DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
import matplotlib.pyplot as plt 
ax = plt.axes()
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;Prcp1&amp;quot;, data=indice_precipitation, palette=&amp;quot;Set1&amp;quot;) 

ax.set_title(&#39;Number of days with precipitation in Montreal from 1948 to 2017&#39;)
ax.set_ylabel(&#39;%&#39;)

figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/prec1.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Histogramme: fonction &lt;b&gt; barplot () &lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour cet exemple, nous allons tracer l&amp;rsquo;accumulation moyenne de la pré-participation par mois, pour ce faire, nous devons utiliser la variable «sum».&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.barplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;sum&amp;quot;, data=indice_precipitation)
ax.set_title(&#39;Monthly mean of cumulated precipitation in Montréal from 1948 to 2017&#39;)
ax.set_ylabel(&#39;mm&#39;)

figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/prec2.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;graphe bivarié: fonction &lt;b&gt; jointplot () &lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jointplot affiche une relation entre 2 variables (bivariée)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.jointplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.jointplot.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(x=&amp;quot;Prcp1&amp;quot;, y=&amp;quot;sum&amp;quot;, data=indice_precipitation,kind=&#39;reg&#39;,
                   space=0, height=6, ratio=4)
plt.show()

# kind = &#39;kde&#39; 
# kind=&amp;quot;hex&amp;quot;
# kind=&amp;quot;reg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/prec3.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;graphe bivarié: fonction &lt;b&gt; pairplot () &lt;/b&gt;
&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.pairplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.pairplot.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Attributes of interest
cols = [&#39;CWD&#39;, 
    &#39;SDII&#39;, 
    &#39;sum&#39;, 
    &#39;Prcp1&#39;, 
    &#39;mean&#39;]

pp = sns.pairplot(indice_precipitation[cols], 
              height=1.8, aspect=1.2, markers=&amp;quot;+&amp;quot;,
              plot_kws=dict(edgecolor=&amp;quot;k&amp;quot;, linewidth=0.5),
              diag_kws=dict(shade=True), # &amp;quot;diag&amp;quot; adjusts/tunes the diagonal plots
              diag_kind=&amp;quot;kde&amp;quot;) # use &amp;quot;kde&amp;quot; for diagonal plots

fig = pp.fig 
fig.subplots_adjust(top=0.93, wspace=0.3)
fig.suptitle(&#39;Indice de précipitation Pairwise Plots&#39;, 
          fontsize=14, fontweight=&#39;bold&#39;)
plt.show()



&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/prec4.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Matrice de corrélation:
La bibliothèque Pandas dispose d&amp;rsquo;une méthode pour calculer les corrélations entre chaque colonne d&amp;rsquo;un DataFrame.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;CDD&lt;/th&gt;
      &lt;th&gt;CWD&lt;/th&gt;
      &lt;th&gt;Prcp1&lt;/th&gt;
      &lt;th&gt;SDII&lt;/th&gt;
      &lt;th&gt;sum&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;month&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-31&lt;/th&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;29.032258&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;55.09&lt;/td&gt;
      &lt;td&gt;1.777097&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Jan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-02-28&lt;/th&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;28.571429&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;80.87&lt;/td&gt;
      &lt;td&gt;2.888214&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Feb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-03-31&lt;/th&gt;
      &lt;td&gt;16.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;25.806452&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;97.59&lt;/td&gt;
      &lt;td&gt;3.148065&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Mar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-04-30&lt;/th&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;50.000000&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;102.70&lt;/td&gt;
      &lt;td&gt;3.423333&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Apr&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-05-31&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;41.935484&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;70.22&lt;/td&gt;
      &lt;td&gt;2.265161&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;May&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(indice_precipitation.head() , headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |   CDD |   CWD |   Prcp1 |     SDII |    sum |    mean |          |   year | month   |
|:--------------------|------:|------:|--------:|---------:|-------:|--------:|---------:|-------:|:--------|
| 1961-01-31 00:00:00 |    14 |     3 | 29.0323 |  5.69111 |  55.09 | 1.7771  |  5.69111 |   1961 | Jan     |
| 1961-02-28 00:00:00 |    12 |     3 | 28.5714 |  9.895   |  80.87 | 2.88821 |  9.895   |   1961 | Feb     |
| 1961-03-31 00:00:00 |    16 |     3 | 25.8065 | 11.8687  |  97.59 | 3.14806 | 11.8688  |   1961 | Mar     |
| 1961-04-30 00:00:00 |     4 |     3 | 50      |  6.68333 | 102.7  | 3.42333 |  6.68333 |   1961 | Apr     |
| 1961-05-31 00:00:00 |     5 |     3 | 41.9355 |  5.13    |  70.22 | 2.26516 |  5.13    |   1961 | May     |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous supprimons d&amp;rsquo;abord la colonne «année», puis appliquons la méthode .corr ().&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation2 = indice_precipitation.drop([&amp;quot;year&amp;quot;], axis=1)
corr_matrix = indice_precipitation2.corr()
corr_matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;CDD&lt;/th&gt;
      &lt;th&gt;CWD&lt;/th&gt;
      &lt;th&gt;Prcp1&lt;/th&gt;
      &lt;th&gt;SDII&lt;/th&gt;
      &lt;th&gt;sum&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;CDD&lt;/th&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.288579&lt;/td&gt;
      &lt;td&gt;-0.687758&lt;/td&gt;
      &lt;td&gt;0.025358&lt;/td&gt;
      &lt;td&gt;-0.480416&lt;/td&gt;
      &lt;td&gt;-0.481019&lt;/td&gt;
      &lt;td&gt;0.025172&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CWD&lt;/th&gt;
      &lt;td&gt;-0.288579&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.631665&lt;/td&gt;
      &lt;td&gt;-0.040071&lt;/td&gt;
      &lt;td&gt;0.418940&lt;/td&gt;
      &lt;td&gt;0.417954&lt;/td&gt;
      &lt;td&gt;-0.039654&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Prcp1&lt;/th&gt;
      &lt;td&gt;-0.687758&lt;/td&gt;
      &lt;td&gt;0.631665&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;-0.064514&lt;/td&gt;
      &lt;td&gt;0.661685&lt;/td&gt;
      &lt;td&gt;0.663935&lt;/td&gt;
      &lt;td&gt;-0.064554&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;SDII&lt;/th&gt;
      &lt;td&gt;0.025358&lt;/td&gt;
      &lt;td&gt;-0.040071&lt;/td&gt;
      &lt;td&gt;-0.064514&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.659944&lt;/td&gt;
      &lt;td&gt;0.661113&lt;/td&gt;
      &lt;td&gt;0.999642&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;sum&lt;/th&gt;
      &lt;td&gt;-0.480416&lt;/td&gt;
      &lt;td&gt;0.418940&lt;/td&gt;
      &lt;td&gt;0.661685&lt;/td&gt;
      &lt;td&gt;0.659944&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.997694&lt;/td&gt;
      &lt;td&gt;0.660287&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;td&gt;-0.481019&lt;/td&gt;
      &lt;td&gt;0.417954&lt;/td&gt;
      &lt;td&gt;0.663935&lt;/td&gt;
      &lt;td&gt;0.661113&lt;/td&gt;
      &lt;td&gt;0.997694&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.661422&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;td&gt;0.025172&lt;/td&gt;
      &lt;td&gt;-0.039654&lt;/td&gt;
      &lt;td&gt;-0.064554&lt;/td&gt;
      &lt;td&gt;0.999642&lt;/td&gt;
      &lt;td&gt;0.660287&lt;/td&gt;
      &lt;td&gt;0.661422&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(corr_matrix, headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|       |        CDD |        CWD |      Prcp1 |       SDII |       sum |      mean |            |
|:------|-----------:|-----------:|-----------:|-----------:|----------:|----------:|-----------:|
| CDD   |  1         | -0.288579  | -0.687758  |  0.0253577 | -0.480416 | -0.481019 |  0.0251715 |
| CWD   | -0.288579  |  1         |  0.631665  | -0.0400715 |  0.41894  |  0.417954 | -0.0396542 |
| Prcp1 | -0.687758  |  0.631665  |  1         | -0.0645136 |  0.661685 |  0.663935 | -0.0645538 |
| SDII  |  0.0253577 | -0.0400715 | -0.0645136 |  1         |  0.659944 |  0.661113 |  0.999642  |
| sum   | -0.480416  |  0.41894   |  0.661685  |  0.659944  |  1        |  0.997694 |  0.660287  |
| mean  | -0.481019  |  0.417954  |  0.663935  |  0.661113  |  0.997694 |  1        |  0.661422  |
|       |  0.0251715 | -0.0396542 | -0.0645538 |  0.999642  |  0.660287 |  0.661422 |  1         |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous pouvons appeler la fonction &lt;b&gt; .heatmap () &lt;/b&gt; pour visualiser notre matrice de corrélation et ainsi faciliter nos interprétations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, (ax) = plt.subplots(1, 1, figsize=(10,6))
hm = sns.heatmap(corr_matrix, 
                 ax=ax,           # Axes in which to draw the plot, otherwise use the currently-active Axes.
                 cmap=&amp;quot;coolwarm&amp;quot;, # Color Map.
                 #square=True,    # If True, set the Axes aspect to “equal” so each cell will be square-shaped.
                 annot=True, 
                 fmt=&#39;.2f&#39;,       # String formatting code to use when adding annotations.
                 #annot_kws={&amp;quot;size&amp;quot;: 14},
                 linewidths=.05)

fig.subplots_adjust(top=0.93)
fig.suptitle(&#39;Correlation Matrix: Precipitation Indices Montreal Station&#39;, 
              fontsize=14, 
              fontweight=&#39;bold&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/prec5.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;bonus-ajoutez-des-indices-de-corrélation-avec-la-bibliothèque-scipy&#34;&gt;Bonus: ajoutez des indices de corrélation avec la bibliothèque scipy&lt;/h3&gt;

&lt;p&gt;Le module &lt;b&gt; stats &lt;/b&gt; de la &lt;b&gt; bibliothèque Scipy &lt;/b&gt; possède de nombreuses fonctions statistiques.
&lt;a href=&#34;https://docs.scipy.org/doc/scipy/reference/stats.html&#34; target=&#34;_blank&#34;&gt;https://docs.scipy.org/doc/scipy/reference/stats.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def corr_pearson(x, y, **kws):
    r, p = stats.pearsonr(x, y)
    p_stars = &#39;&#39;
    if p &amp;lt;= 0.05:
        p_stars = &#39;*&#39;
    if p &amp;lt;= 0.01:
        p_stars = &#39;**&#39;
    if p &amp;lt;= 0.001:
        p_stars = &#39;***&#39;
   # r, _ = stats.spearmanr(x, y)
    ax = plt.gca()   
    pos = (0, .9) 
    color2=&#39;red&#39;                                                                   
    ax.annotate(&amp;quot;Pearson = {:.2f}&amp;quot;.format(r) + p_stars,
                xy=pos, xycoords=ax.transAxes, color=color2, fontweight=&#39;bold&#39;)
    

def corr_spearman(x, y, **kws):
    r, p = stats.spearmanr(x, y)
    p_stars = &#39;&#39;
    if p &amp;lt;= 0.05:
        p_stars = &#39;*&#39;
    if p &amp;lt;= 0.01:
        p_stars = &#39;**&#39;
    if p &amp;lt;= 0.001:
        p_stars = &#39;***&#39;
   # r, _ = stats.spearmanr(x, y)
    ax = plt.gca()  
    pos = (0, .6) 
    color2=&#39;darkgreen&#39; 
    ax.annotate(&amp;quot;Spearman = {:.2f}&amp;quot;.format(r) + p_stars,
                xy=pos, xycoords=ax.transAxes, color=color2, fontweight=&#39;bold&#39;)

def corr_kendall(x, y, **kws):
    r, p = stats.kendalltau(x, y)
    p_stars = &#39;&#39;
    if p &amp;lt;= 0.05:
        p_stars = &#39;*&#39;
    if p &amp;lt;= 0.01:
        p_stars = &#39;**&#39;
    if p &amp;lt;= 0.001:
        p_stars = &#39;***&#39;
   # r, _ = stats.spearmanr(x, y)
    ax = plt.gca()   
    pos = (0, .3) 
    color2=&#39;darkorange&#39; 
    ax.annotate(&amp;quot;Kendall = {:.2f}&amp;quot;.format(r) + p_stars,
                xy=pos, xycoords=ax.transAxes, color=color2, fontweight=&#39;bold&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;CDD&lt;/th&gt;
      &lt;th&gt;CWD&lt;/th&gt;
      &lt;th&gt;Prcp1&lt;/th&gt;
      &lt;th&gt;SDII&lt;/th&gt;
      &lt;th&gt;sum&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;month&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-01-31&lt;/th&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;29.032258&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;55.09&lt;/td&gt;
      &lt;td&gt;1.777097&lt;/td&gt;
      &lt;td&gt;5.691111&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Jan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-02-28&lt;/th&gt;
      &lt;td&gt;12.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;28.571429&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;80.87&lt;/td&gt;
      &lt;td&gt;2.888214&lt;/td&gt;
      &lt;td&gt;9.895000&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Feb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-03-31&lt;/th&gt;
      &lt;td&gt;16.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;25.806452&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;97.59&lt;/td&gt;
      &lt;td&gt;3.148065&lt;/td&gt;
      &lt;td&gt;11.868750&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Mar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-04-30&lt;/th&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;50.000000&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;102.70&lt;/td&gt;
      &lt;td&gt;3.423333&lt;/td&gt;
      &lt;td&gt;6.683333&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;Apr&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1961-05-31&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;41.935484&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;70.22&lt;/td&gt;
      &lt;td&gt;2.265161&lt;/td&gt;
      &lt;td&gt;5.130000&lt;/td&gt;
      &lt;td&gt;1961&lt;/td&gt;
      &lt;td&gt;May&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_month=indice_precipitation[[&amp;quot;CWD&amp;quot;, &amp;quot;SDII&amp;quot;, &amp;quot;sum&amp;quot;, &amp;quot;Prcp1&amp;quot;]].loc[(indice_precipitation[&amp;quot;month&amp;quot;]==&amp;quot;Jan&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from scipy import stats
import seaborn as sns; sns.set()

g = sns.PairGrid(indice_month[[&amp;quot;CWD&amp;quot;, &amp;quot;SDII&amp;quot;, &amp;quot;sum&amp;quot;, &amp;quot;Prcp1&amp;quot;]]) 

g.map_upper(corr_pearson) 
g.map_upper(corr_spearman) 
g.map_upper(corr_kendall) 
g.map_lower(sns.regplot) 
g.map_diag(plt.hist) 
g.set(alpha=0.5)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/prec6.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Projet sur les données de températures ECCC</title>
      <link>/courses/formation_python/project1-eccc_temperature/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/formation_python/project1-eccc_temperature/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/formation/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;objectifs&#34;&gt;Objectifs&lt;/h2&gt;

&lt;h2 id=&#34;projet-1-données-de-température-d-environnement-et-changement-climatique-canada&#34;&gt;Projet 1: Données de température d&amp;rsquo;Environnement et Changement Climatique Canada&lt;/h2&gt;

&lt;p&gt;Dans les sections précédentes, nous avons présenté comment utiliser la bibliothèque Pandas qui nous a permis de traiter et de manipuler des ensembles de données.&lt;/p&gt;

&lt;p&gt;En combinant cela avec les bibliothèques Datetime et Matplotlib de Python, nous avons pu visualiser rapidement nos données.&lt;/p&gt;

&lt;p&gt;Nous continuerons à découvrir la fonctionnalité de ces bibliothèques dans un cas pratique en analysant les données quotidiennes de température enregistrées par l&amp;rsquo;une des stations d&amp;rsquo;Environnement et Changement climatique Canada situées à Montréal / McTavish entre la période 1948 et 2017 (fichier nommé &amp;lsquo;MONTREAL_tasmoy_1948_2017.txt&amp;rsquo; &amp;lsquo; dans le répertoire ./DATA)&lt;/p&gt;

&lt;p&gt;Pour compléter et enrichir notre analyse, une nouvelle bibliothèque Python sera utilisée: &lt;b&gt; Seaborn &lt;/b&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;la bibliothèque Seaborn est basée sur matplotlib.&lt;/li&gt;
&lt;li&gt;il permet de dessiner des graphiques plus complexes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour plus d&amp;rsquo;informations:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&#34; target=&#34;_blank&#34;&gt;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ce lien présente une galerie de types de graphiques à réaliser avec Seaborn:
&lt;a href=&#34;https://seaborn.pydata.org/examples/index.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/examples/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-ouverture-et-lecture-de-nos-séries-de-données&#34;&gt;1- Ouverture et lecture de nos séries de données&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
import datetime
from datetime import date
import numpy as np 
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)

df = pd.DataFrame()

# We open ascii file and store information in a new DataFrame
with open(&#39;./DATA/MONTREAL_tasmoy_1948_2017.txt&#39;, &#39;r&#39;) as file:
     rows = file.read()
data_EC_Montreal = [float(row) for row in rows.split()]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons créé un champ 1D mais nous n&amp;rsquo;avons aucune information temporelle dans notre fichier.&lt;/p&gt;

&lt;p&gt;Sachant que notre enregistrement couvre la période 1948-2017, nous formaterons nos dates avec le module &lt;b&gt; datetime &lt;/b&gt; de Python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We know that the time series starts on January 1, 1948 and ends on December 31, 2017 inclusively
# We create a Datetime object instance to complete our DataFrame
start = date(1948, 1, 1)
end = date(2017, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)

# We will use DateTime object as DataFrame index
df[&#39;datetime&#39;] = rng
df.index = df[&#39;datetime&#39;] 

df[&#39;Temperature Montreal&#39;] = data_EC_Montreal
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;Temperature Montreal&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-01-01&lt;/th&gt;
      &lt;td&gt;1948-01-01&lt;/td&gt;
      &lt;td&gt;-12.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-01-02&lt;/th&gt;
      &lt;td&gt;1948-01-02&lt;/td&gt;
      &lt;td&gt;-8.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-01-03&lt;/th&gt;
      &lt;td&gt;1948-01-03&lt;/td&gt;
      &lt;td&gt;-3.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-01-04&lt;/th&gt;
      &lt;td&gt;1948-01-04&lt;/td&gt;
      &lt;td&gt;-3.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-01-05&lt;/th&gt;
      &lt;td&gt;1948-01-05&lt;/td&gt;
      &lt;td&gt;-3.1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(df.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            | datetime            |   Temperature Montreal |
|:--------------------|:--------------------|-----------------------:|
| 1948-01-01 00:00:00 | 1948-01-01 00:00:00 |                  -12   |
| 1948-01-02 00:00:00 | 1948-01-02 00:00:00 |                   -8.9 |
| 1948-01-03 00:00:00 | 1948-01-03 00:00:00 |                   -3.4 |
| 1948-01-04 00:00:00 | 1948-01-04 00:00:00 |                   -3.4 |
| 1948-01-05 00:00:00 | 1948-01-05 00:00:00 |                   -3.1 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(df) # the dir () function allows to list the functions that are applicable to our DataFrame object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;T&#39;,
 &#39;_AXIS_ALIASES&#39;,
 &#39;_AXIS_IALIASES&#39;,
 &#39;_AXIS_LEN&#39;,
 ...
 &#39;var&#39;,
 &#39;where&#39;,
 &#39;xs&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons attribué notre série temporelle dans un Pandas DataFrame, puis formaté la date en tant qu&amp;rsquo;objet Datetime.&lt;/p&gt;

&lt;p&gt;Il est désormais facile de manipuler l&amp;rsquo;ensemble de données et d&amp;rsquo;appliquer quelques fonctions simples.&lt;/p&gt;

&lt;h2 id=&#34;2-calcul-d-indices-de-température&#34;&gt;2- Calcul d&amp;rsquo;indices de température&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nous développerons et appliquerons une fonction pour calculer les quantiles de notre distribution&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;En rééchantillonnant notre série avec la méthode &lt;b&gt; .resample () &lt;/b&gt; de Pandas, nous verrons comment appliquer les fonctions natives de numpy et appliquer notre propre fonction.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Creating our index that calculates the quantile of the distribution
# We use the numpy .percentile () function
def percentile(n):
def percentile_(x):
    return np.nanpercentile(x, n)
percentile_.__name__ = &#39;percentile_%s&#39; % n
return percentile_         
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Méthodes &lt;b&gt; .resample () &lt;/b&gt; et &lt;b&gt; .agg () &lt;/b&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La méthode &lt;b&gt; .resample () &lt;/b&gt; est très utile pour la conversion de fréquence et le rééchantillonnage de séries chronologiques. L&amp;rsquo;objet (ici DataFrame) doit avoir un index data / time (DatetimeIndex) pour être utilisé.
Plusieurs fréquences de rééchantillonnage sont disponibles (heure, semaine, mois, saison, année &amp;hellip;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.resample.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.resample.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;La méthode &lt;b&gt; .agg () &lt;/b&gt; est utilisée pour l&amp;rsquo;agrégation des données selon une liste de fonctions à appliquer à chaque colonne, aboutissant à un résultat agrégé avec un index hiérarchique.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.agg.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.agg.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dans notre exemple, nous rééchantillonnerons notre ensemble de données par mois et calculerons pour chaque mois la moyenne, le minimum, le maximum et les 90e et 95e quantiles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal = df.resample(&#39;M&#39;).agg([np.mean, np.min, np.max, percentile(90), percentile(95)])
resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th colspan=&#34;5&#34; halign=&#34;left&#34;&gt;Temperature Montreal&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;amin&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
      &lt;th&gt;percentile_90&lt;/th&gt;
      &lt;th&gt;percentile_95&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-01-31&lt;/th&gt;
      &lt;td&gt;-10.990323&lt;/td&gt;
      &lt;td&gt;-23.4&lt;/td&gt;
      &lt;td&gt;-3.1&lt;/td&gt;
      &lt;td&gt;-3.60&lt;/td&gt;
      &lt;td&gt;-3.40&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-02-29&lt;/th&gt;
      &lt;td&gt;-9.586207&lt;/td&gt;
      &lt;td&gt;-20.8&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;-2.64&lt;/td&gt;
      &lt;td&gt;-0.32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-03-31&lt;/th&gt;
      &lt;td&gt;-2.461290&lt;/td&gt;
      &lt;td&gt;-17.8&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;5.60&lt;/td&gt;
      &lt;td&gt;6.40&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-04-30&lt;/th&gt;
      &lt;td&gt;6.640000&lt;/td&gt;
      &lt;td&gt;-1.7&lt;/td&gt;
      &lt;td&gt;14.5&lt;/td&gt;
      &lt;td&gt;12.08&lt;/td&gt;
      &lt;td&gt;13.13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-05-31&lt;/th&gt;
      &lt;td&gt;12.664516&lt;/td&gt;
      &lt;td&gt;6.7&lt;/td&gt;
      &lt;td&gt;21.7&lt;/td&gt;
      &lt;td&gt;16.70&lt;/td&gt;
      &lt;td&gt;18.35&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(resamp_Montreal.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |   (&#39;Temperature Montreal&#39;, &#39;mean&#39;) |   (&#39;Temperature Montreal&#39;, &#39;amin&#39;) |   (&#39;Temperature Montreal&#39;, &#39;amax&#39;) |   (&#39;Temperature Montreal&#39;, &#39;percentile_90&#39;) |   (&#39;Temperature Montreal&#39;, &#39;percentile_95&#39;) |
|:--------------------|-----------------------------------:|-----------------------------------:|-----------------------------------:|--------------------------------------------:|--------------------------------------------:|
| 1948-01-31 00:00:00 |                          -10.9903  |                              -23.4 |                               -3.1 |                                       -3.6  |                                       -3.4  |
| 1948-02-29 00:00:00 |                           -9.58621 |                              -20.8 |                                3.6 |                                       -2.64 |                                       -0.32 |
| 1948-03-31 00:00:00 |                           -2.46129 |                              -17.8 |                                7.5 |                                        5.6  |                                        6.4  |
| 1948-04-30 00:00:00 |                            6.64    |                               -1.7 |                               14.5 |                                       12.08 |                                       13.13 |
| 1948-05-31 00:00:00 |                           12.6645  |                                6.7 |                               21.7 |                                       16.7  |                                       18.35 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# simple step to remove the row &#39;Temperature Montreal&#39; 
resamp_Montreal = resamp_Montreal.loc[:,&#39;Temperature Montreal&#39;] 
resamp_Montreal.head() 
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;amin&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
      &lt;th&gt;percentile_90&lt;/th&gt;
      &lt;th&gt;percentile_95&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-01-31&lt;/th&gt;
      &lt;td&gt;-10.990323&lt;/td&gt;
      &lt;td&gt;-23.4&lt;/td&gt;
      &lt;td&gt;-3.1&lt;/td&gt;
      &lt;td&gt;-3.60&lt;/td&gt;
      &lt;td&gt;-3.40&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-02-29&lt;/th&gt;
      &lt;td&gt;-9.586207&lt;/td&gt;
      &lt;td&gt;-20.8&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;-2.64&lt;/td&gt;
      &lt;td&gt;-0.32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-03-31&lt;/th&gt;
      &lt;td&gt;-2.461290&lt;/td&gt;
      &lt;td&gt;-17.8&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;5.60&lt;/td&gt;
      &lt;td&gt;6.40&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-04-30&lt;/th&gt;
      &lt;td&gt;6.640000&lt;/td&gt;
      &lt;td&gt;-1.7&lt;/td&gt;
      &lt;td&gt;14.5&lt;/td&gt;
      &lt;td&gt;12.08&lt;/td&gt;
      &lt;td&gt;13.13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-05-31&lt;/th&gt;
      &lt;td&gt;12.664516&lt;/td&gt;
      &lt;td&gt;6.7&lt;/td&gt;
      &lt;td&gt;21.7&lt;/td&gt;
      &lt;td&gt;16.70&lt;/td&gt;
      &lt;td&gt;18.35&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(resamp_Montreal.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |      mean |   amin |   amax |   percentile_90 |   percentile_95 |
|:--------------------|----------:|-------:|-------:|----------------:|----------------:|
| 1948-01-31 00:00:00 | -10.9903  |  -23.4 |   -3.1 |           -3.6  |           -3.4  |
| 1948-02-29 00:00:00 |  -9.58621 |  -20.8 |    3.6 |           -2.64 |           -0.32 |
| 1948-03-31 00:00:00 |  -2.46129 |  -17.8 |    7.5 |            5.6  |            6.4  |
| 1948-04-30 00:00:00 |   6.64    |   -1.7 |   14.5 |           12.08 |           13.13 |
| 1948-05-31 00:00:00 |  12.6645  |    6.7 |   21.7 |           16.7  |           18.35 |
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-quelques-exemples-graphique-avec-la-librairie-seaborn&#34;&gt;3- Quelques exemples graphique avec la librairie Seaborn&lt;/h2&gt;

&lt;p&gt;Maintenant que nous avons quelques statistiques sur notre DataFrame, nous allons utiliser la bibliothèque Seaborn de Python pour les visualiser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/seaborn.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exemple: Heatmap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.heatmap.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.heatmap.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Par exemple, nous aimerions observer la variation de la température moyenne pour tous les mois de l&amp;rsquo;année et toutes les années. Nous allons définir deux nouvelles colonnes dans notre DataFrame dans lesquelles seront attribuées uniquement les années et les mois respectivement.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal[&#39;year&#39;]  = resamp_Montreal.index.year
resamp_Montreal[&#39;MonthNo&#39;] = resamp_Montreal.index.month
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;amin&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
      &lt;th&gt;percentile_90&lt;/th&gt;
      &lt;th&gt;percentile_95&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;MonthNo&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-01-31&lt;/th&gt;
      &lt;td&gt;-10.990323&lt;/td&gt;
      &lt;td&gt;-23.4&lt;/td&gt;
      &lt;td&gt;-3.1&lt;/td&gt;
      &lt;td&gt;-3.60&lt;/td&gt;
      &lt;td&gt;-3.40&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-02-29&lt;/th&gt;
      &lt;td&gt;-9.586207&lt;/td&gt;
      &lt;td&gt;-20.8&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;-2.64&lt;/td&gt;
      &lt;td&gt;-0.32&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-03-31&lt;/th&gt;
      &lt;td&gt;-2.461290&lt;/td&gt;
      &lt;td&gt;-17.8&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;5.60&lt;/td&gt;
      &lt;td&gt;6.40&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-04-30&lt;/th&gt;
      &lt;td&gt;6.640000&lt;/td&gt;
      &lt;td&gt;-1.7&lt;/td&gt;
      &lt;td&gt;14.5&lt;/td&gt;
      &lt;td&gt;12.08&lt;/td&gt;
      &lt;td&gt;13.13&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-05-31&lt;/th&gt;
      &lt;td&gt;12.664516&lt;/td&gt;
      &lt;td&gt;6.7&lt;/td&gt;
      &lt;td&gt;21.7&lt;/td&gt;
      &lt;td&gt;16.70&lt;/td&gt;
      &lt;td&gt;18.35&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(resamp_Montreal.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |      mean |   amin |   amax |   percentile_90 |   percentile_95 |   year |   MonthNo |
|:--------------------|----------:|-------:|-------:|----------------:|----------------:|-------:|----------:|
| 1948-01-31 00:00:00 | -10.9903  |  -23.4 |   -3.1 |           -3.6  |           -3.4  |   1948 |         1 |
| 1948-02-29 00:00:00 |  -9.58621 |  -20.8 |    3.6 |           -2.64 |           -0.32 |   1948 |         2 |
| 1948-03-31 00:00:00 |  -2.46129 |  -17.8 |    7.5 |            5.6  |            6.4  |   1948 |         3 |
| 1948-04-30 00:00:00 |   6.64    |   -1.7 |   14.5 |           12.08 |           13.13 |   1948 |         4 |
| 1948-05-31 00:00:00 |  12.6645  |    6.7 |   21.7 |           16.7  |           18.35 |   1948 |         5 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Avant de tracer notre &amp;ldquo;heatmap&amp;rdquo;, nous devons réorganiser notre dataframe.
- La méthode &lt;b&gt; .pivot_table () &lt;/b&gt;: cette méthode permet de croiser des tables de manière dynamique.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nous aimerions visualiser uniquement les températures mensuelles moyennes, donc travaillez avec la colonne «moyenne», mettez l&amp;rsquo;année dans Index et ayez un mois par colonne. La méthode &lt;b&gt; .pivot_table () &lt;/b&gt; nous permet de faire cela.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Montreal_pivot = resamp_Montreal.pivot_table(values=&#39;mean&#39;,index=&#39;year&#39;,columns=[&#39;MonthNo&#39;])
Montreal_pivot.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;MonthNo&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;th&gt;12&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1948&lt;/th&gt;
      &lt;td&gt;-10.990323&lt;/td&gt;
      &lt;td&gt;-9.586207&lt;/td&gt;
      &lt;td&gt;-2.461290&lt;/td&gt;
      &lt;td&gt;6.640000&lt;/td&gt;
      &lt;td&gt;12.664516&lt;/td&gt;
      &lt;td&gt;17.746667&lt;/td&gt;
      &lt;td&gt;21.490323&lt;/td&gt;
      &lt;td&gt;21.106452&lt;/td&gt;
      &lt;td&gt;17.150000&lt;/td&gt;
      &lt;td&gt;9.100000&lt;/td&gt;
      &lt;td&gt;5.983333&lt;/td&gt;
      &lt;td&gt;-2.522581&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1949&lt;/th&gt;
      &lt;td&gt;-5.774194&lt;/td&gt;
      &lt;td&gt;-5.692857&lt;/td&gt;
      &lt;td&gt;-2.196774&lt;/td&gt;
      &lt;td&gt;7.516667&lt;/td&gt;
      &lt;td&gt;13.512903&lt;/td&gt;
      &lt;td&gt;20.560000&lt;/td&gt;
      &lt;td&gt;22.870968&lt;/td&gt;
      &lt;td&gt;21.545161&lt;/td&gt;
      &lt;td&gt;14.620000&lt;/td&gt;
      &lt;td&gt;12.025806&lt;/td&gt;
      &lt;td&gt;-0.193333&lt;/td&gt;
      &lt;td&gt;-3.219355&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1950&lt;/th&gt;
      &lt;td&gt;-5.348387&lt;/td&gt;
      &lt;td&gt;-9.796429&lt;/td&gt;
      &lt;td&gt;-4.893548&lt;/td&gt;
      &lt;td&gt;4.710000&lt;/td&gt;
      &lt;td&gt;14.116129&lt;/td&gt;
      &lt;td&gt;18.956667&lt;/td&gt;
      &lt;td&gt;21.325806&lt;/td&gt;
      &lt;td&gt;19.112903&lt;/td&gt;
      &lt;td&gt;13.616667&lt;/td&gt;
      &lt;td&gt;10.100000&lt;/td&gt;
      &lt;td&gt;3.956667&lt;/td&gt;
      &lt;td&gt;-4.835484&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1951&lt;/th&gt;
      &lt;td&gt;-7.354839&lt;/td&gt;
      &lt;td&gt;-6.485714&lt;/td&gt;
      &lt;td&gt;-0.490323&lt;/td&gt;
      &lt;td&gt;7.296667&lt;/td&gt;
      &lt;td&gt;14.409677&lt;/td&gt;
      &lt;td&gt;18.270000&lt;/td&gt;
      &lt;td&gt;21.312903&lt;/td&gt;
      &lt;td&gt;18.667742&lt;/td&gt;
      &lt;td&gt;15.133333&lt;/td&gt;
      &lt;td&gt;10.370968&lt;/td&gt;
      &lt;td&gt;0.180000&lt;/td&gt;
      &lt;td&gt;-5.312903&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1952&lt;/th&gt;
      &lt;td&gt;-7.803226&lt;/td&gt;
      &lt;td&gt;-5.272414&lt;/td&gt;
      &lt;td&gt;-0.987097&lt;/td&gt;
      &lt;td&gt;7.996667&lt;/td&gt;
      &lt;td&gt;12.406452&lt;/td&gt;
      &lt;td&gt;19.600000&lt;/td&gt;
      &lt;td&gt;23.080645&lt;/td&gt;
      &lt;td&gt;20.732258&lt;/td&gt;
      &lt;td&gt;16.030000&lt;/td&gt;
      &lt;td&gt;7.674194&lt;/td&gt;
      &lt;td&gt;3.656667&lt;/td&gt;
      &lt;td&gt;-3.183871&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(Montreal_pivot.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|   year |         1 |        2 |         3 |       4 |       5 |       6 |       7 |       8 |       9 |       10 |        11 |       12 |
|-------:|----------:|---------:|----------:|--------:|--------:|--------:|--------:|--------:|--------:|---------:|----------:|---------:|
|   1948 | -10.9903  | -9.58621 | -2.46129  | 6.64    | 12.6645 | 17.7467 | 21.4903 | 21.1065 | 17.15   |  9.1     |  5.98333  | -2.52258 |
|   1949 |  -5.77419 | -5.69286 | -2.19677  | 7.51667 | 13.5129 | 20.56   | 22.871  | 21.5452 | 14.62   | 12.0258  | -0.193333 | -3.21935 |
|   1950 |  -5.34839 | -9.79643 | -4.89355  | 4.71    | 14.1161 | 18.9567 | 21.3258 | 19.1129 | 13.6167 | 10.1     |  3.95667  | -4.83548 |
|   1951 |  -7.35484 | -6.48571 | -0.490323 | 7.29667 | 14.4097 | 18.27   | 21.3129 | 18.6677 | 15.1333 | 10.371   |  0.18     | -5.3129  |
|   1952 |  -7.80323 | -5.27241 | -0.987097 | 7.99667 | 12.4065 | 19.6    | 23.0806 | 20.7323 | 16.03   |  7.67419 |  3.65667  | -3.18387 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On applique ensuite la méthode &lt;b&gt;.heatmap()&lt;/b&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns 
import matplotlib.pyplot as plt 
ax = plt.axes()
sns.heatmap(Montreal_pivot)
figure = ax.get_figure()    
figure.set_size_inches(15, 10) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/temp1.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On peut améliorer notre affichage:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.heatmap(Montreal_pivot, cmap=&#39;RdYlGn_r&#39;, linewidths=0.5, annot=True , ax = ax,vmin=-30, vmax=30,center=0, fmt=&#39;.1f&#39;,yticklabels=True, cbar_kws={&#39;label&#39;: &#39;Celcius&#39;})
ax.set_title(&#39;Mean temperature&#39;, weight=&#39;bold&#39;, fontsize=&amp;quot;x-large&amp;quot;)
figure = ax.get_figure()    
figure.set_size_inches(22, 15) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/temp2.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d&amp;rsquo;autres: Boxplot,  violin plot, line plot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.boxplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.boxplot.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.violinplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.violinplot.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.lineplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.lineplot.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dans un premier temps, nous créons une nouvelle variable contenant les mois mais en chaîne de caractères. Pour cela, nous appliquons la méthode &lt;b&gt; .strftime () &lt;/b&gt; de datetime.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal[&#39;month&#39;] = resamp_Montreal.index.strftime(&amp;quot;%b&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;amin&lt;/th&gt;
      &lt;th&gt;amax&lt;/th&gt;
      &lt;th&gt;percentile_90&lt;/th&gt;
      &lt;th&gt;percentile_95&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;MonthNo&lt;/th&gt;
      &lt;th&gt;month&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;datetime&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-01-31&lt;/th&gt;
      &lt;td&gt;-10.990323&lt;/td&gt;
      &lt;td&gt;-23.4&lt;/td&gt;
      &lt;td&gt;-3.1&lt;/td&gt;
      &lt;td&gt;-3.60&lt;/td&gt;
      &lt;td&gt;-3.40&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Jan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-02-29&lt;/th&gt;
      &lt;td&gt;-9.586207&lt;/td&gt;
      &lt;td&gt;-20.8&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;-2.64&lt;/td&gt;
      &lt;td&gt;-0.32&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Feb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-03-31&lt;/th&gt;
      &lt;td&gt;-2.461290&lt;/td&gt;
      &lt;td&gt;-17.8&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;5.60&lt;/td&gt;
      &lt;td&gt;6.40&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Mar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-04-30&lt;/th&gt;
      &lt;td&gt;6.640000&lt;/td&gt;
      &lt;td&gt;-1.7&lt;/td&gt;
      &lt;td&gt;14.5&lt;/td&gt;
      &lt;td&gt;12.08&lt;/td&gt;
      &lt;td&gt;13.13&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Apr&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1948-05-31&lt;/th&gt;
      &lt;td&gt;12.664516&lt;/td&gt;
      &lt;td&gt;6.7&lt;/td&gt;
      &lt;td&gt;21.7&lt;/td&gt;
      &lt;td&gt;16.70&lt;/td&gt;
      &lt;td&gt;18.35&lt;/td&gt;
      &lt;td&gt;1948&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;May&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(resamp_Montreal.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| datetime            |      mean |   amin |   amax |   percentile_90 |   percentile_95 |   year |   MonthNo | month   |
|:--------------------|----------:|-------:|-------:|----------------:|----------------:|-------:|----------:|:--------|
| 1948-01-31 00:00:00 | -10.9903  |  -23.4 |   -3.1 |           -3.6  |           -3.4  |   1948 |         1 | Jan     |
| 1948-02-29 00:00:00 |  -9.58621 |  -20.8 |    3.6 |           -2.64 |           -0.32 |   1948 |         2 | Feb     |
| 1948-03-31 00:00:00 |  -2.46129 |  -17.8 |    7.5 |            5.6  |            6.4  |   1948 |         3 | Mar     |
| 1948-04-30 00:00:00 |   6.64    |   -1.7 |   14.5 |           12.08 |           13.13 |   1948 |         4 | Apr     |
| 1948-05-31 00:00:00 |  12.6645  |    6.7 |   21.7 |           16.7  |           18.35 |   1948 |         5 | May     |
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Boxplot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;Set1&amp;quot;)  
figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/temp3.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Violin plot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.violinplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;Set1&amp;quot;)  
figure = ax.get_figure()    
figure.set_size_inches(12, 8)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/temp4.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Line plot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.lineplot(x=resamp_Montreal.index.year, y=&amp;quot;mean&amp;quot;,
         hue=&amp;quot;month&amp;quot;,
         data=resamp_Montreal,
         palette=&amp;quot;tab10&amp;quot;)
figure = ax.get_figure()    
figure.set_size_inches(12, 8)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/temp5.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.catplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;percentile_90&amp;quot;, data=resamp_Montreal, kind=&amp;quot;swarm&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/temp6.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On peut combiner plusieurs graphiques Seaborn:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
ax1 = plt.subplot2grid((2, 2), (0, 0), colspan=2)
sns.lineplot(x=resamp_Montreal.index.year, y=&amp;quot;mean&amp;quot;, hue=&amp;quot;month&amp;quot;, data=resamp_Montreal, palette=&amp;quot;tab10&amp;quot;)
ax2 = plt.subplot2grid((2, 2), (1, 0), colspan=1)
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;tab10&amp;quot;) 
ax3 = plt.subplot2grid((2, 2), (1, 1), colspan=1)
sns.violinplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;tab10&amp;quot;) 
figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/formation/temp7.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 1</title>
      <link>/courses/example/example1/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/example/example1/</guid>
      <description>

&lt;p&gt;In this tutorial, I&amp;rsquo;ll share my top 10 tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-1&#34;&gt;Tip 1&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;

&lt;h2 id=&#34;tip-2&#34;&gt;Tip 2&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1 Netcdf Part 1</title>
      <link>/courses/tutorial_python_netcdf/1-netcdf_tutorial/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python_netcdf/1-netcdf_tutorial/</guid>
      <description>

&lt;p&gt;Using Network Common Data Form (Netcdf)  is a way to create, access, and share scientific data in a format that is self-documenting and transparent for many types of machines.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/xarray.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Netcdf file itself has information describing the data it contains.&lt;/p&gt;

&lt;p&gt;A NetCDF file has dimensions, variables, and attributes.&lt;/p&gt;

&lt;p&gt;Here is a small example of a NetCDF file, to illustrate these concepts of dimensions, variables and attributes.&lt;/p&gt;

&lt;p&gt;The notation used to describe this NetCDF file is called Network Common Data Language (CDL). It gives a &amp;ldquo;text&amp;rdquo; version that allows an easy understanding of the structure and contents of a binary NetCDF file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;netcdf ./data/NARR_tasmax_201701.nc {
  dimensions:
x = 349;
y = 277;
time = 31;
  variables:
float lon(y=277, x=349);
  :units = &amp;quot;degrees_east&amp;quot;;
  :long_name = &amp;quot;Longitude&amp;quot;;
  :CoordinateAxisType = &amp;quot;Lon&amp;quot;;

float lat(y=277, x=349);
  :units = &amp;quot;degrees_north&amp;quot;;
  :long_name = &amp;quot;Latitude&amp;quot;;
  :CoordinateAxisType = &amp;quot;Lat&amp;quot;;

double time(time=31);
  :long_name = &amp;quot;Time&amp;quot;;
  :delta_t = &amp;quot;&amp;quot;;

float tasmax(time=31, y=277, x=349);
  :long_name = &amp;quot;Daily maximum temperature&amp;quot;;
  :units = &amp;quot;Celcius&amp;quot;;
  :missing_value = -999.0; // double
  :coordinates = &amp;quot;lon lat&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Panoply is an apensource software used to quickly read aned visualize Netcdf file:
&lt;a href=&#34;https://www.giss.nasa.gov/tools/panoply/download/&#34; target=&#34;_blank&#34;&gt;https://www.giss.nasa.gov/tools/panoply/download/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The python module that we will use in this section is netCDF4:
&lt;a href=&#34;https://pypi.org/project/netCDF4/&#34; target=&#34;_blank&#34;&gt;https://pypi.org/project/netCDF4/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install it under anaconda: &lt;b&gt;conda install -c anaconda netcdf4&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/CanESM2_rcp85_r1i1p1_global_tos.jpg&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-create-a-netcdf-file&#34;&gt;1- Create a Netcdf file:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from netCDF4 import Dataset
import os 
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)

file_name = &amp;quot;./DATA/2D_Temperature.nc&amp;quot;
if os.path.isfile(file_name):
    os.remove(file_name)
    
#open the file for writing, you can Also specify format=&amp;quot;NETCDF4_CLASSIC&amp;quot; or &amp;quot;NETCDF3_CLASSIC&amp;quot;
#The format is NETCDF4 by default
ds = Dataset(file_name, mode=&amp;quot;w&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Netcdf4-python: &lt;b&gt;createDimension&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will create here a 2D field: (20,20)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds.createDimension(&amp;quot;x&amp;quot;, 20)
ds.createDimension(&amp;quot;y&amp;quot;, 20)
ds.createDimension(&amp;quot;time&amp;quot;, None)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;netCDF4._netCDF4.Dimension&#39;&amp;gt; (unlimited): name = &#39;time&#39;, size = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Netcdf4-python: &lt;b&gt;createVariable&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;var1 = ds.createVariable(&amp;quot;field1&amp;quot;, &amp;quot;f4&amp;quot;, (&amp;quot;time&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;))
var2 = ds.createVariable(&amp;quot;field2&amp;quot;, &amp;quot;f4&amp;quot;, (&amp;quot;time&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;))

#add netcdf attributes
var1.units = &amp;quot;Celcius&amp;quot;
var1.long_name = &amp;quot;Surface air temperature&amp;quot;

var2.units = &amp;quot;Kelvin&amp;quot;
var2.long_name = &amp;quot;Surface air temperature&amp;quot;

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can now assign our field or variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#generate random data and tell the program where it should go
import numpy as np
data = np.random.randn(10, 20, 20)
var1[:] = data
var2[:] =  data + 273.15
#actually write data to the disk
ds.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-read-a-netcdf-file&#34;&gt;2- Read a Netcdf file&lt;/h2&gt;

&lt;p&gt;We will read the file Netcdf4 that we created previously.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from netCDF4 import Dataset
ds = Dataset(&amp;quot;./DATA/2D_Temperature.nc&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will select our variables of interest: no data is loaded at this level.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Which variables are in our Netcdf file ?
print(ds.variables.keys())

data1_var = ds.variables[&amp;quot;field1&amp;quot;]
data2_var = ds.variables[&amp;quot;field2&amp;quot;]

#What&#39;s the dimension ?
print(data1_var.dimensions, data1_var.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;odict_keys([&#39;field1&#39;, &#39;field2&#39;])
(&#39;time&#39;, &#39;x&#39;, &#39;y&#39;) (10, 20, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now read our file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#now we ask to really read the data into the memory
all_data = data1_var[:]
#print all_data.shape
data1 = data1_var[1,:,:]
data2 = data2_var[2,:,:]
#data1
print(data1.shape, all_data.shape, all_data.mean(axis = 0).mean(axis = 0).mean(axis = 0))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(20, 20) (10, 20, 20) 0.0055584796
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-examples-of-manipulations-of-a-netcdf-file&#34;&gt;3- Examples of manipulations of a Netcdf file&lt;/h2&gt;

&lt;p&gt;In this example we will work with daily maximum temperature data for all January months from 1971 to 2000 from the CRCM5 regional model developed at the ESCER center.&lt;/p&gt;

&lt;p&gt;We will import our own module for calculating temperature indices, this module is calld Indices_Temperature.&lt;/p&gt;

&lt;p&gt;At first we will import the necessary libraries and define the input parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from netCDF4 import Dataset
import Indices_Temperature
import numpy as np

Mois=&#39;01&#39;
model=&#39;CRCM5-v1_NAM-44_ll_CCCma-CanESM2&#39;
path_model=&#39;CRCM5-v1_CCCma-CanESM2_historical&#39;
variable=&#39;tasmax&#39;
indice = &#39;Tmax90p&#39;
yi = 1971
yf = 2000
#########################################################
rep_data=&#39;./DATA/CRCM5/&#39;
rep_out=&#39;./DATA/CRCM5/&#39;
tot=(yf-yi)+1 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s open &amp;lsquo;CRCM5-v1_NAM-44_ll_CCCma-CanESM2_historical_tasmax_197101.nc&amp;rsquo; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nc_Modc=Dataset(&#39;./DATA/CRCM5/&#39;+model+&#39;_historical_&#39;+variable+&#39;_197101.nc&#39;,&#39;r&#39;)
lats=nc_Modc.variables[&#39;lat&#39;][:]
lons=nc_Modc.variables[&#39;lon&#39;][:]
varc=nc_Modc.variables[variable][:]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## Quick look of our file: 
print(&#39;-----------------------------------------&#39;)
print(&#39;Temperature dimension = &#39;,varc.shape)
print(&#39;Minimum of temperature = &#39;, np.nanmin(varc))
print(&#39;Maximum of temperature = &#39;, np.nanmax(varc))
print(&#39;-----------------------------------------&#39;)
print(&#39;-----------------------------------------&#39;)
print(&#39;Latitude dimension= &#39;,lats.shape)
print(&#39;Minimum of latitude = &#39;, np.min(lats))
print(&#39;Maximum of latitude = &#39;, np.max(lats))
print(&#39;-----------------------------------------&#39;)
print(&#39;-----------------------------------------&#39;)
print(&#39;Longitude dimesion = &#39;,lons.shape)
print(&#39;Minimum of longitude = &#39;, np.min(lons))
print(&#39;Maximum of longitude = &#39;, np.max(lons))

Temperature dimension =  (31, 130, 155)
Minimum of temperature =  -57.66677
Maximum of temperature =  30.657953
Latitude dimension=  (130, 155)
Minimum of latitude =  12.538727
Maximum of latitude =  75.86
Longitude dimesion =  (130, 155)
Minimum of longitude =  -170.71053
Maximum of longitude =  -23.28948
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can now loop over all our Netcdf files and apply a function to calculate our indice.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nt=0
IND = np.zeros((tot,130,155),dtype=float)
for year in range(yi,yf+1):
    ###### ouverture et lecture des fichiers Netcdf
    hist=model+&#39;_historical_&#39;+variable+&#39;_&#39;+str(year)+Mois+&#39;.nc&#39;     
    modelc=rep_data+&#39;/&#39;+hist
    nc_Modc=Dataset(modelc,&#39;r&#39;)
    lats=nc_Modc.variables[&#39;lat&#39;][:]
    lons=nc_Modc.variables[&#39;lon&#39;][:]
    varc=nc_Modc.variables[variable][:]
    
    ###### boucle sur tous les points de grille et calcul de l&#39;indice
    for ni in range(0, len(varc[0])):
        for nj in range(0, len(varc[0][0])):
            if indice == &#39;Mean_tasmax&#39;:
                IND[nt,ni,nj]=Indices_Temperature.MOY(varc[:,ni,nj])
                description=&#39;Monthly Mean of tasmax&#39;
                unite=&#39;°Celcius&#39;
            elif indice == &#39;Tmax90p&#39;:
                IND[nt,ni,nj]=Indices_Temperature.Tmax90p(varc[:,ni,nj])
                description=&#39;Monthly Mean of Tmax90p&#39; 
                unite=&#39;°Celcius&#39;               
    nt+=1 
    
    ###### Écriture du fichier Netcdf en sortie
C = Dataset(rep_out+model+&#39;_historical_&#39;+indice+&#39;_&#39;+str(yi)+&#39;-&#39;+str(yf)+&#39;_&#39;+Mois+&#39;.nc&#39;, &#39;w&#39;)
C.description = &#39;Indice temperature&#39;
C.conventions = &#39;CF-1.0&#39;  
C.model_id = model
C.grid=&#39;latlon&#39;
C.CDO = &#39;Climate Data Operators version 1.6.2 (http://code.zmaw.de/projects/cdo)&#39;
C.institution = &#39;UQAM - ESCER Center, University of Quebec in Montreal&#39;
C.contact = &#39;Guillaume Dueymes&#39;
########################################
# Dimensions
C.createDimension(&#39;x&#39;, len(varc[0][0]))
C.createDimension(&#39;y&#39;, len(varc[0]))
C.createDimension(&#39;time&#39;, tot)

var=C.createVariable(str(indice), np.float32, (&#39;time&#39;,&#39;y&#39;,&#39;x&#39;)) 
var.long_name = str(description)
var.unit = str(unite)
lat=C.createVariable(&#39;lat&#39;, np.float32, (&#39;y&#39;,&#39;x&#39;))
lon=C.createVariable(&#39;lon&#39;, np.float32, (&#39;y&#39;,&#39;x&#39;)) 

time = C.createVariable(&#39;time&#39;, np.float64, (&#39;time&#39;,))
time.long_name = &#39;time&#39;

for var in [&#39;lon&#39;,&#39;lat&#39;,&#39;time&#39;]:
    for att in nc_Modc.variables[var].ncattrs():
        setattr(C.variables[var],att,getattr(nc_Modc.variables[var],att))

time[:]=range(1,nt+1)
lat[:,:] = lats
lon[:,:] = lons
C.variables[str(indice)][:,:,:] = IND[::]
C.close()
    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;IND.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(30, 130, 155)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-netcdf-gridpoint-extraction&#34;&gt;4- Netcdf gridpoint extraction&lt;/h2&gt;

&lt;p&gt;In this example we will work with maximum daily temperature data from Regional Reanalysis (NARR) Regional Reanalysis. For more information about this product:&lt;/p&gt;

&lt;p&gt;www.emc.ncep.noaa.gov/mmb/rreanl&lt;/p&gt;

&lt;p&gt;The Netcdf files that we will open are daily values from January 1, 2017 to December 31, 2017. Files are archived by month.&lt;/p&gt;

&lt;p&gt;The NARR grid point closest to the ECCC Montréal / McTavish weather station (45.5N, -73.8W) will be extracted here.&lt;/p&gt;

&lt;p&gt;We first import the libraries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import netCDF4
import numpy as np
import pandas as pd
import datetime
from datetime import date, timedelta
from dateutil.relativedelta import relativedelta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rep1=&#39;./DATA/NARR/&#39;
model=&#39;NARR&#39;
variable=&#39;tasmax&#39;
variable_name=&#39;Temperature maximale&#39;
yeari=2017
monthi=1
yearf = 2017
monthf = 12
station=&#39;Montreal&#39; 
lati = 45.5
loni = -73.8

day_start=1
day_end = pd.date_range(&#39;{}-{}&#39;.format(yearf, monthf), periods=1, freq=&#39;M&#39;).day.tolist()[0]
start=datetime.datetime(yeari,monthi,day_start)
end=datetime.datetime(yearf,monthf,day_end)
d0 = date(yeari, monthi, day_start)
d1 = date(yearf, monthf, day_end)
delta = d1 - d0
nb_days = delta.days+1
var_data=np.zeros(nb_days)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We define a function that will calculate the distance between each grid point of the Netcdf file and our reference latitude / longitude. We then deduce the minimum distance.&lt;/p&gt;

&lt;p&gt;The other function allows us to increment our months when reading Netcdf files.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def getclosest_ij(lats,lons,latpt,lonpt):
     # find squared distance of every point on grid
     dist_sq = (lats-latpt)**2 + (lons-lonpt)**2 
     # 1D index of minimum dist_sq element
     minindex_flattened = dist_sq.argmin()
     # Get 2D index for latvals and lonvals arrays from 1D index
     return np.unravel_index(minindex_flattened, lats.shape)

def add_month(now):
    try:
        then = (now + relativedelta(months=1)).replace(day=now.day)
    except ValueError:
        then = (now + relativedelta(months=2)).replace(day=1)
    return then
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can know apply our function over each grid point, month by month and save the value into a DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
i=0
IND=[]
# Début de notre boucle temporelle
incr=start
while incr &amp;lt;= end:
    filename= rep1 + model + &#39;_&#39; + variable + &#39;_&#39; + str(incr.year) + &#39;{:02d}&#39;.format(incr.month) + &#39;.nc&#39;   
    f = netCDF4.Dataset(filename)
   # print(f.variables.keys()) # get all variable names
    var = f.variables[variable] # temperature variable
    #print(temp) 
    #temp.dimensions
    #temp.shape
    lat, lon = f.variables[&#39;lat&#39;], f.variables[&#39;lon&#39;]
    #print(lat)
    #print(lon)
    #print(lat[:])
    # extract lat/lon values (in degrees) to numpy arrays
    latvals = lat[:]; lonvals = lon[:] 
    # a function to find the index of the point closest pt
    # (in squared distance) to give lat/lon value.    
    iy_min, ix_min = getclosest_ij(latvals, lonvals, lati, loni)
    #print(iy_min)
    #print(ix_min)
    IND.append(var[:,iy_min,ix_min])
    incr=add_month(incr)
    
flattened_list = [y for x in IND for y in x]
start=datetime.datetime(yeari,monthi,day_start)
TIME=[]
for i in range(0,nb_days,1): 
 #   TIME.append((start+timedelta(days=i)).strftime(&amp;quot;%Y-%m-%d&amp;quot;))
    TIME.append((start+timedelta(days=i)))
dataFrame_NARR = pd.DataFrame({&#39;Date&#39;: TIME, variable_name: flattened_list}, columns = [&#39;Date&#39;,variable_name]) 
dataFrame_NARR = dataFrame_NARR.set_index(&#39;Date&#39;)   
dataFrame_NARR.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature maximale&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.893957&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.53144&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.73783&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.240698&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.791754&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We save our DataFrame in csv.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataFrame_NARR.to_csv(&#39;./DATA/NARR/NARR_&#39;+station+&#39;_1pt_&#39;+str(variable)+&#39;_&#39;+ &#39;{:02d}&#39;.format(monthi) + str(yeari)+&#39;_&#39;+ &#39;{:02d}&#39;.format(monthf) + str(yearf)+&#39;.csv&#39;)    
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Observation vs NARR
Now we have extracted our gridpoint near Montreal, we can compare these values with observations.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will extract the data from the Montreal McTavish station and put them in the NARR dataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_station = pd.read_csv(&#39;./DATA/station/MONTREAL_TAVISH_tasmax_1948_2017.csv&#39;, header=None, names=[&#39;Maximum temperature: OBS&#39;])
start = date(1948, 1, 1)
end = date(2017, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)

dataframe_station[&#39;datetime&#39;] = rng
dataframe_station.index = dataframe_station[&#39;datetime&#39;] 
dataframe_station = dataframe_station.drop([&amp;quot;datetime&amp;quot;], axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_station.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Maximum temperature: OBS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataFrame_NARR = dataFrame_NARR.rename(columns={&amp;quot;Temperature maximale&amp;quot;: &amp;quot;Maximum temperature: NARR&amp;quot;})
df_NARR_Station = pd.concat([dataframe_station,dataFrame_NARR],axis=1)
df_NARR_Station.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Maximum temperature: OBS&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Maximum temperature: NARR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-27 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.819&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.3721&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.4532&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.2088&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.7728&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We want to plot valeurs for 2016 and 2017 years.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df=df_NARR_Station.loc[&#39;2016&#39; : &#39;2017&#39;]
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Maximum temperature: OBS&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Maximum temperature: NARR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2016-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2016-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2016-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2016-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2016-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
color = [&#39;black&#39;, &#39;red&#39;]
fig = plt.figure(figsize=(16,8))
plt.plot(df.index, df[&#39;Maximum temperature: NARR&#39;][:],  label=&#39;NARR Temperature&#39;, linewidth=2, c=color[0])
plt.plot(df.index, df[&#39;Maximum temperature: OBS&#39;][:],  label=&#39;Observation Temperature&#39;, linewidth=2, c=color[1])

# Autre méthode pour tracer avec Pandas
#df_NARR_Station[&#39;2017&#39;].plot(figsize=(10,5))

plt.xlabel(&amp;quot;Time&amp;quot;)
plt.ylabel(&amp;quot;Temperature&amp;quot;, {&#39;color&#39;: &#39;black&#39;, &#39;fontsize&#39;: 10})
plt.title(&amp;quot;Time serie: Station MTL vs NARR&amp;quot;, y=1.05)
plt.legend(loc=&#39;upper left&#39;, ncol=1, bbox_to_anchor=(0, 1, 1, 0),fontsize =10)
plt.savefig(&amp;quot;figures/NARR_time_Serie_temperature.png&amp;quot;, dpi=300, bbox_inches=&#39;tight&#39;)   # bbox_inches= : option qui permet de propostionner le graphique lors de l&#39;enregistrement
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/NARR_time_Serie_temperature.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Example of using the &lt;b&gt; .rolling () &amp;lt;/ b&amp;gt; function to calculate a moving average on a signal.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
df_NARR_Station[&#39;rollingmean5 Station&#39;]=  df_NARR_Station[&#39;Maximum temperature: OBS&#39;].rolling(window=5).mean()
df_NARR_Station[&#39;rollingmean5 NARR&#39;]=  df_NARR_Station[&#39;Maximum temperature: NARR&#39;].rolling(window=5).mean()
df_NARR_Station.tail()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Maximum temperature: OBS&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Maximum temperature: NARR&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;rollingmean5 Station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;rollingmean5 NARR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-27 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.819&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.31893&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.3721&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.0995&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.4532&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.6478&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.2088&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.6138&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2017-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.7728&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.5252&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_NARR_Station[&#39;2017-01&#39;:&#39;2017-12&#39;].plot(figsize=(16,8))
plt.xlabel(&amp;quot;Temps&amp;quot;)
plt.ylabel(&amp;quot;Température&amp;quot;)
plt.title(&amp;quot;Maximum temperature time serie: Station MTL vs NARR&amp;quot;, y=1.05)
plt.savefig(&amp;quot;figures/NARR_time_Serie_temperature2.png&amp;quot;, dpi=300, bbox_inches=&#39;tight&#39;)   # bbox_inches= : option qui permet de propostionner le graphique lors de l&#39;enregistrement
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/NARR_time_Serie_temperature2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2 Netcdf Part 2</title>
      <link>/courses/tutorial_python_netcdf/2-netcdf_tutorial_2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python_netcdf/2-netcdf_tutorial_2/</guid>
      <description>&lt;p&gt;Instead of extracting a grid point, we may want to extract a domain / box delimited by latitudes and longitudes.&lt;/p&gt;

&lt;p&gt;In this example we will work with the annual mean of daily maximum temperature data from several regional models of CORDEX-NAM44.&lt;/p&gt;

&lt;p&gt;We will extract all the grid points from the region between &lt;b&gt; 47degN and 51degN of latitude and between -72degW and -64degW of longitude &lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;We will then plot the inter-annual variability of the mean annual temperature anomalies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/CORDEX_domaine.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we first inmport librairies
import netCDF4
import numpy as np
import pandas as pd
from datetime import datetime
import matplotlib.pylab as plt
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
import seaborn as sns
from matplotlib import gridspec

# path and variable name
rep=&#39;./DATA/Inter_annual_anomaly/&#39;
variable_in = &#39;Mean_tasmax&#39;

# list of periods we want to use
list_period = [&#39;2011-2040&#39;,&#39;2041-2070&#39;,&#39;2071-2100&#39;]

# list of models
list_rcp45 = [&#39;CRCM5-v1_NAM-44_ll_CCCma-CanESM2_rcp45&#39;, &#39;CRCM5-v1_NAM-44_ll_MPI-M-MPI-ESM-LR_rcp45&#39; ]

# Area to extract
latbounds = [ 47 , 51 ]
lonbounds = [ -72 , -64 ] 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will make a loop over each model and period to make the extraction:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 
df_rcp45 = []
matrix_45 = []
for period in list_period: 
    globals()[&#39;flattened_list_&#39;+period] = []  # we define a global variable 
    for i in range(0,len(list_rcp45)):
        filename= rep +&#39;anomalie_&#39; +  list_rcp45[i] +  &#39;_&#39; + variable_in + &#39;_&#39; + period  + &#39;_1971-2000.nc&#39;   
        nc = netCDF4.Dataset(filename)
        # we here read netcdf values
        var = nc.variables[variable_in][:]  
        lats = nc.variables[&#39;lat&#39;][:]; lons = nc.variables[&#39;lon&#39;][:]
        # in this part, we extract our domain 
        subset = ((lats &amp;gt; latbounds[0]) &amp;amp; (lats &amp;lt; latbounds[1]) &amp;amp; 
             (lons &amp;gt; lonbounds[0]) &amp;amp; (lons &amp;lt; lonbounds[1]))
        data=pd.DataFrame(var[:,subset], dtype=&#39;float&#39;) 
        globals()[&#39;flattened_list_&#39;+period].append(data.mean(axis=1))
        
    df_rcp45.append(pd.DataFrame(globals()[&#39;flattened_list_&#39;+period]).T) 
    
df_rcp45 = pd.concat(df_rcp45)
df_rcp45.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.72084&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.288691&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4762&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.885357&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.581686&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.541863&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.390671&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0141989&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.14842&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.29417&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can add datetime index in our DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TIME=[]
for y in range(int(list_period[0].split(&#39;-&#39;)[0]),int(list_period[-1].split(&#39;-&#39;)[-1])+1,1):
    TIME.append(datetime.strptime(str(y), &#39;%Y&#39;))
    
df_rcp45[&#39;Date&#39;] = TIME   
df_rcp45.index = df_rcp45[&#39;Date&#39;]
df_rcp45 = df_rcp45.drop([&amp;quot;Date&amp;quot;], axis=1) 
df_rcp45.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2011-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.72084&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.288691&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2012-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4762&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.885357&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2013-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.581686&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.541863&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.390671&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0141989&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.14842&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.29417&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We then want, for each year, the intra-model variability. For this, we will calculate the minimum and maximum values by applying the &lt;b&gt; .apply &lt;/b&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_rcp45[&#39;min&#39;] = df_rcp45.apply(np.min, axis=1)
df_rcp45[&#39;max&#39;] = df_rcp45.apply(np.max, axis=1)
df_rcp45[&#39;mean&#39;] = df_rcp45.apply(np.mean, axis=1)
df_rcp45.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2011-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.72084&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.288691&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.288691&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.72084&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.716076&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2012-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4762&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.885357&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.885357&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.4762&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.18078&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2013-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.581686&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.541863&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.541863&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.581686&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.561774&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.390671&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0141989&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0141989&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.390671&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.188236&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.14842&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.29417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.14842&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.29417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.2213&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We will make the same work with RCMs in future condition with rcp8.5 scenario and RCMs in historical conditions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_rcp85 = [&#39;CRCM5-v1_NAM-44_ll_CCCma-CanESM2_rcp85&#39;,&#39;CRCM5-v1_NAM-44_ll_MPI-M-MPI-ESM-MR_rcp85&#39;]
df_rcp85 = []
matrix_85 = []
for period in list_period: 
    globals()[&#39;flattened_list_&#39;+period] = []
    for i in range(0,len(list_rcp85)):
        filename= rep + &#39;anomalie_&#39; +  list_rcp85[i] +  &#39;_&#39; + variable_in + &#39;_&#39; + period  + &#39;_1971-2000.nc&#39;   
        nc = netCDF4.Dataset(filename)
        var = nc.variables[variable_in][:]  
        lats = nc.variables[&#39;lat&#39;][:]; lons = nc.variables[&#39;lon&#39;][:]            
        subset = ((lats &amp;gt; latbounds[0]) &amp;amp; (lats &amp;lt; latbounds[1]) &amp;amp; 
             (lons &amp;gt; lonbounds[0]) &amp;amp; (lons &amp;lt; lonbounds[1]))
        #mask = np.where(subset)
        data=pd.DataFrame(var[:,subset], dtype=&#39;float&#39;) 
        globals()[&#39;flattened_list_&#39;+period].append(data.mean(axis=1))        
    df_rcp85.append(pd.DataFrame(globals()[&#39;flattened_list_&#39;+period]).T) 
    
df_rcp85 = pd.concat(df_rcp85)
df_rcp85[&#39;Date&#39;] = TIME   
df_rcp85.index = df_rcp85[&#39;Date&#39;]
df_rcp85 = df_rcp85.drop([&amp;quot;Date&amp;quot;], axis=1)  

df_rcp85[&#39;min&#39;] = df_rcp85.apply(np.min, axis=1)
df_rcp85[&#39;max&#39;] = df_rcp85.apply(np.max, axis=1)
df_rcp85[&#39;mean&#39;] = df_rcp85.apply(np.mean, axis=1)

### historical RCMs
list_histo = [&#39;CRCM5-v1_NAM-44_ll_CCCma-CanESM2_historical&#39;, &#39;CRCM5-v1_NAM-44_ll_MPI-M-MPI-ESM-LR_historical&#39;]
df_histo = []
globals()[&#39;flattened_list_&#39;+period] = []
for i in range(0,len(list_histo)):
    filename= rep + &#39;anomalie_&#39; +  list_histo[i] +  &#39;_&#39; + variable_in + &#39;_1971-2000_1971-2000.nc&#39;   
    nc = netCDF4.Dataset(filename)
    var = nc.variables[variable_in][:]  
    lats = nc.variables[&#39;lat&#39;][:]; lons = nc.variables[&#39;lon&#39;][:]
    
    subset = ((lats &amp;gt; latbounds[0]) &amp;amp; (lats &amp;lt; latbounds[1]) &amp;amp; 
         (lons &amp;gt; lonbounds[0]) &amp;amp; (lons &amp;lt; lonbounds[1]))
    #mask = np.where(subset)
    data=pd.DataFrame(var[:,subset], dtype=&#39;float&#39;) 
    globals()[&#39;flattened_list_&#39;+period].append(data.mean(axis=1))        
df_histo.append(pd.DataFrame(globals()[&#39;flattened_list_&#39;+period]).T) 
TIME=[]
for y in range(1971,2001,1):
    TIME.append(datetime.strptime(str(y), &#39;%Y&#39;))  
    
df_histo = pd.concat(df_histo)
df_histo[&#39;Date&#39;] = TIME   
df_histo.index = df_histo[&#39;Date&#39;]
df_histo = df_histo.drop([&amp;quot;Date&amp;quot;], axis=1)  

df_histo[&#39;min&#39;] = df_histo.apply(np.min, axis=1)
df_histo[&#39;max&#39;] = df_histo.apply(np.max, axis=1)
df_histo[&#39;mean&#39;] = df_histo.apply(np.mean, axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We put all results in the same DataFrame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;result = []
result = pd.DataFrame({&#39;min_rcp45&#39;: df_rcp45[&#39;min&#39;], &#39;max_rcp45&#39;: df_rcp45[&#39;max&#39;],&#39;mean_rcp45&#39;: df_rcp45[&#39;mean&#39;],
                       &#39;min_rcp85&#39;: df_rcp85[&#39;min&#39;], &#39;max_rcp85&#39;: df_rcp85[&#39;max&#39;],&#39;mean_rcp85&#39;: df_rcp85[&#39;mean&#39;],
                       &#39;min_histo&#39;: df_histo[&#39;min&#39;], &#39;max_histo&#39;: df_histo[&#39;max&#39;],&#39;mean_histo&#39;: df_histo[&#39;mean&#39;]},
        columns = [&#39;min_rcp45&#39;,&#39;max_rcp45&#39;,&#39;mean_rcp45&#39;,&#39;min_rcp85&#39;,&#39;max_rcp85&#39;,&#39;mean_rcp85&#39;,&#39;min_histo&#39;,&#39;max_histo&#39;,&#39;mean_histo&#39;]) 

result.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min_rcp45&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max_rcp45&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean_rcp45&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min_rcp85&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max_rcp85&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean_rcp85&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min_histo&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max_histo&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean_histo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2096-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.89008&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.49628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.19318&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.44184&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.03633&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.73908&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2097-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.86389&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.06262&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.46325&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.10506&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.35563&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.73034&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2098-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.28996&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.60365&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.4468&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.58306&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.14778&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.86542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2099-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.94984&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.26892&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.60938&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.40518&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.04316&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.72417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2100-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.99867&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.27685&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.13776&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.16794&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.96608&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.56701&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can now plot our inter-annual variability:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;color = [&#39;black&#39;,&#39;blue&#39;, &#39;red&#39;]
fig = plt.figure(figsize=(10, 6)) 
gs = gridspec.GridSpec(1, 2, width_ratios=[6, 1]) 
gs.update( wspace=0.04)
ax1 = plt.subplot(gs[0])

plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]       #  
plt.plot(result.index.year, result[&#39;mean_histo&#39;][:],  label=&#39;RCMs historical&#39;, linewidth=2, c=color[0])
plt.plot(result.index.year, result[&#39;mean_rcp45&#39;][:],  label=&#39;RCMs scenario rcp 4.5&#39;, linewidth=2, c=color[1])
plt.plot(result.index.year, result[&#39;mean_rcp85&#39;][:],  label=&#39;RCMs scenario rcp 8.5&#39;, linewidth=2, c=color[2])

plt.fill_between(result.index.year,result[&#39;min_histo&#39;],result[&#39;max_histo&#39;], color = color[0], alpha=.2)
plt.fill_between(result.index.year,result[&#39;min_rcp45&#39;],result[&#39;max_rcp45&#39;], color =  color[1], alpha=.2)
plt.fill_between(result.index.year,result[&#39;min_rcp85&#39;],result[&#39;max_rcp85&#39;], color =  color[2], alpha=.2)
plt.legend(loc=&amp;quot;upper left&amp;quot;, markerscale=1., scatterpoints=1, fontsize=20)

plt.xticks(range(result.index.year[0]-1, result.index.year[-1]+1, 10), fontsize=14)
plt.yticks( fontsize=14)

ax1.grid(axis = &amp;quot;x&amp;quot;, linestyle = &amp;quot;--&amp;quot;, color=&#39;black&#39;, linewidth=0.25, alpha=0.5)
ax1.grid(axis = &amp;quot;y&amp;quot;, linestyle = &amp;quot;--&amp;quot;, color=&#39;black&#39;, linewidth=0.25, alpha=0.5)

plt.setp(plt.gca().get_xticklabels(), rotation=45, ha=&amp;quot;right&amp;quot;)

plt.xlabel(&#39;Date&#39;, fontsize=20, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.ylabel(&#39;°C&#39;, fontsize=20, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.title(&#39;Annual change in daily maximum temperature: (1971-2100) compared with normal (1971-2000)&#39;, fontsize=20, color=&#39;black&#39;, weight=&#39;semibold&#39;)
 
ax1.set_facecolor(&#39;white&#39;)
plt.yticks( fontsize=14)
plt.show()  

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_13_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We would add next to our chart a boxplot on all models for the period 1971-2000 and 2071-2100 only.
We will extract these periods from our matrix result = []&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_to_remove = [&#39;min&#39;,&#39;max&#39;,&#39;mean&#39;]
df_histo = df_histo.drop(list_to_remove, axis=1)  
df_rcp45 = df_rcp45.drop(list_to_remove, axis=1)  
df_rcp85 = df_rcp85.drop(list_to_remove, axis=1) 
df_histo = df_histo.loc[&#39;1971&#39; : &#39;2010&#39;].stack()
df_rcp45 = df_rcp45.loc[&#39;2071&#39; : &#39;2100&#39;].stack()
df_rcp85 = df_rcp85.loc[&#39;2071&#39; : &#39;2100&#39;].stack()

matrix_box = pd.DataFrame({&#39;RCMs_histo&#39;: df_histo, &#39;RCMs_rcp45&#39;: df_rcp45,&#39;RCMs_rcp85&#39;: df_rcp85},
        columns = [&#39;RCMs_histo&#39;,&#39;RCMs_rcp45&#39;,&#39;RCMs_rcp85&#39;])
matrix_box.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;RCMs_histo&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;RCMs_rcp45&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;RCMs_rcp85&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(Timestamp(&amp;lsquo;1971-01-01 00:00:00&amp;rsquo;), 0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.34157&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(Timestamp(&amp;lsquo;1971-01-01 00:00:00&amp;rsquo;), 1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.12412&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(Timestamp(&amp;lsquo;1972-01-01 00:00:00&amp;rsquo;), 0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.641267&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(Timestamp(&amp;lsquo;1972-01-01 00:00:00&amp;rsquo;), 1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0350673&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(Timestamp(&amp;lsquo;1973-01-01 00:00:00&amp;rsquo;), 0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0541643&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;color = [&#39;black&#39;,&#39;blue&#39;, &#39;red&#39;]
fig = plt.figure(figsize=(22, 12)) 
gs = gridspec.GridSpec(1, 2, width_ratios=[6, 1]) 
gs.update( wspace=0.04)
ax1 = plt.subplot(gs[0])

plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]       #  
plt.plot(result.index.year, result[&#39;mean_histo&#39;][:],  label=&#39;RCMs historical&#39;, linewidth=2, c=color[0])
plt.plot(result.index.year, result[&#39;mean_rcp45&#39;][:],  label=&#39;RCMs scenario rcp 4.5&#39;, linewidth=2, c=color[1])
plt.plot(result.index.year, result[&#39;mean_rcp85&#39;][:],  label=&#39;RCMs scenario rcp 8.5&#39;, linewidth=2, c=color[2])

plt.fill_between(result.index.year,result[&#39;min_histo&#39;],result[&#39;max_histo&#39;], color = color[0], alpha=.2)
plt.fill_between(result.index.year,result[&#39;min_rcp45&#39;],result[&#39;max_rcp45&#39;], color =  color[1], alpha=.2)
plt.fill_between(result.index.year,result[&#39;min_rcp85&#39;],result[&#39;max_rcp85&#39;], color =  color[2], alpha=.2)
plt.legend(loc=&amp;quot;upper left&amp;quot;, markerscale=1., scatterpoints=1, fontsize=20)

#ax.set_xlim(result.index.year[0], result.index.year[-1])
plt.xticks(range(result.index.year[0]-1, result.index.year[-1]+1, 10), fontsize=14)
plt.yticks( fontsize=14)

ax1.grid(axis = &amp;quot;x&amp;quot;, linestyle = &amp;quot;--&amp;quot;, color=&#39;black&#39;, linewidth=0.25, alpha=0.5)
ax1.grid(axis = &amp;quot;y&amp;quot;, linestyle = &amp;quot;--&amp;quot;, color=&#39;black&#39;, linewidth=0.25, alpha=0.5)

plt.setp(plt.gca().get_xticklabels(), rotation=45, ha=&amp;quot;right&amp;quot;)

plt.xlabel(&#39;Date&#39;, fontsize=20, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.ylabel(&#39;°C&#39;, fontsize=20, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.title(&#39;Annual change in daily maximum temperature: (1971-2100) compared with normal (1971-2000)&#39;, fontsize=20, color=&#39;black&#39;, weight=&#39;semibold&#39;)


my_pal = {&amp;quot;RCMs_histo&amp;quot;: &amp;quot;grey&amp;quot;, &amp;quot;RCMs_rcp45&amp;quot;: &amp;quot;blue&amp;quot;, &amp;quot;RCMs_rcp85&amp;quot;:&amp;quot;red&amp;quot;}
ax2 = plt.subplot(gs[1])
#ax2 = matrix_box.boxplot(column=[&#39;RCMs_histo&#39;, &#39;RCMs_rcp45&#39;, &#39;RCMs_rcp85&#39;])
ax2 = sns.boxplot(data=matrix_box, palette=my_pal)  
# Add transparency to colors
for patch in ax2.artists:
 r, g, b, a = patch.get_facecolor()
 patch.set_facecolor((r, g, b, .2))
plt.setp(plt.gca().get_xticklabels(), rotation=45, ha=&amp;quot;right&amp;quot;)
 
ax1.set_facecolor(&#39;white&#39;)
ax2.set_facecolor(&#39;white&#39;)
ax2.spines[&#39;top&#39;].set_visible(False)
ax2.spines[&#39;bottom&#39;].set_visible(False)
ax2.spines[&#39;right&#39;].set_visible(False)
ax2.spines[&#39;left&#39;].set_visible(False)

medians = matrix_box.median().values
median_labels = [str(np.round(s, 2))+&#39; °C&#39; for s in medians]
pos = range(len(medians))
i=0
for tick,label in zip(pos,ax2.get_xticklabels()):
    ax2.text(pos[tick], medians[tick] + 0.1, median_labels[tick], 
            horizontalalignment=&#39;center&#39;, size=&#39;medium&#39;, color = color[i], weight=&#39;semibold&#39;)
    i+=1
x1, x2, x3 = 0, 1, 2
ax2.text(x1, matrix_box.min().min().round()-0.15 , &amp;quot;1971-2000&amp;quot;, ha=&#39;center&#39;, va=&#39;bottom&#39;, size=&#39;medium&#39;, color=&#39;black&#39;, weight=&#39;semibold&#39;)   
ax2.text((x2+x3)*.5, matrix_box.min().median()-0.4 , &amp;quot;2071-2100&amp;quot;, ha=&#39;center&#39;, va=&#39;bottom&#39;, size=&#39;medium&#39;, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.yticks( fontsize=14)
    
plt.savefig(&#39;./figures/VI_YEAR_Mean_tasmax.png&#39;, bbox_inches=&#39;tight&#39;, format=&#39;png&#39;, dpi=1000)
plt.show()  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/VI_YEAR_Mean_tasmax.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>3 Cartopy</title>
      <link>/courses/tutorial_python_netcdf/3-cartopy_library/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python_netcdf/3-cartopy_library/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/netcdf/cartopy.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Cartopy python library allows you to analyze, process and plot georeferenced data with the help of Matplotlib.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://scitools.org.uk/cartopy/docs/latest/#&#34; target=&#34;_blank&#34;&gt;https://scitools.org.uk/cartopy/docs/latest/#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install the library under the prompt of anaconda:
 conda install -c conda-forge cartopy&lt;/p&gt;

&lt;h2 id=&#34;1-example-of-drawing-a-2d-netcdf-field&#34;&gt;1 - Example of drawing a 2D Netcdf field&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We will work climatology (1981-2010) monthly minimum daily temperature&lt;/li&gt;
&lt;li&gt;At first we will import the Python libraries and open the Netcdf file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Dataset class of the netCDF4 module is used to open and read Netcdf files.
Here we will store the Netcdf file in the variable nc_fid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from netCDF4 import Dataset
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)

filename=&#39;./DATA/ANUSPLIN/ANUSPLIN_NLDAS_10km_CLIMATO_TASMIN_1981_2010_06.nc&#39;
nc_fid=Dataset(filename,&#39;r&#39;)
nc_fid.variables
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;OrderedDict([(&#39;lon&#39;, &amp;lt;class &#39;netCDF4._netCDF4.Variable&#39;&amp;gt;
              float32 lon(y, x)
                  units: degrees_east
                  long_name: Longitude
                  CoordinateAxisType: Lon
              unlimited dimensions: 
              current shape = (1068, 420)
              filling on, default _FillValue of 9.969209968386869e+36 used),
             (&#39;lat&#39;, &amp;lt;class &#39;netCDF4._netCDF4.Variable&#39;&amp;gt;
              float32 lat(y, x)
                  units: degrees_north
                  long_name: Latitude
                  CoordinateAxisType: Lat
              unlimited dimensions: 
              current shape = (1068, 420)
              filling on, default _FillValue of 9.969209968386869e+36 used),
             (&#39;time&#39;, &amp;lt;class &#39;netCDF4._netCDF4.Variable&#39;&amp;gt;
              float64 time(time)
                  long_name: Time
                  delta_t: 
                  units: Days
              unlimited dimensions: 
              current shape = (1,)
              filling on, default _FillValue of 9.969209968386869e+36 used),
             (&#39;TASMIN&#39;, &amp;lt;class &#39;netCDF4._netCDF4.Variable&#39;&amp;gt;
              float32 TASMIN(time, y, x)
                  long_name: Daily minimum temperature
                  units: Celcius
                  missing_value: -999.0
                  coordinates: lon lat
              unlimited dimensions: 
              current shape = (1, 1068, 420)
              filling on, default _FillValue of 9.969209968386869e+36 used)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will read TASMIN, lat and lon variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lats = nc_fid.variables[&#39;lat&#39;][:]
lons = nc_fid.variables[&#39;lon&#39;][:]
time = nc_fid.variables[&#39;time&#39;][:]
Vals = nc_fid.variables[&#39;TASMIN&#39;][:].squeeze()
print( Vals.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1068, 420)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will now call the cartopy and matplotlib libraries from Python to create a graphical instance.
The carto library brings functions to visually enrich maps made with cartopy: adding a scale &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pylab as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import numpy as np
import matplotlib as mpl
from carto import scale_bar
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We create an instance of Cartopy to create a map. We choose here our projection, grid orientation and total coverage.&lt;/p&gt;

&lt;p&gt;Here is a very useful link to choose a projection type: &lt;a href=&#34;https://scitools.org.uk/cartopy/docs/latest/crs/projections.html&#34; target=&#34;_blank&#34;&gt;https://scitools.org.uk/cartopy/docs/latest/crs/projections.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;projections = [ccrs.PlateCarree(),
               ccrs.Robinson(),
               ccrs.Mercator(),
               ccrs.Orthographic(),
               ccrs.InterruptedGoodeHomolosine(),
               ccrs.LambertConformal(),
              ]


for proj in projections:
    plt.figure()
    ax = plt.axes(projection=proj)
    ax.stock_img()
    ax.coastlines()
    ax.set_title(f&#39;{type(proj)}&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_7_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_7_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_7_2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_7_3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_7_4.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_7_5.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, we will work with a so-called &amp;ldquo;LambertConformal&amp;rdquo; projection.
To create a regional map, we use the GeoAxis set_extent method to limit the size of our region.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig=plt.figure(figsize=(5,3), frameon=True)   
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-100,-60,18,62])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_9_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We will add some products to our map with Cartopy&amp;rsquo;s cartopy.feature method:
&lt;a href=&#34;https://scitools.org.uk/cartopy/docs/v0.14/matplotlib/feature_interface.html&#34; target=&#34;_blank&#34;&gt;https://scitools.org.uk/cartopy/docs/v0.14/matplotlib/feature_interface.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;|  |  |
|&amp;ndash;|&amp;ndash;|
| cartopy.feature.&lt;b&gt;BORDERS&lt;/b&gt; | Borders |
| cartopy.feature.&lt;b&gt;COASTLINE&lt;/b&gt; | Coast |
| cartopy.feature.&lt;b&gt;LAKES&lt;/b&gt; | Lakes |
| cartopy.feature.&lt;b&gt;LAND&lt;/b&gt; | Continents |
| cartopy.feature.&lt;b&gt;OCEAN&lt;/b&gt; | Ocean |
| cartopy.feature.&lt;b&gt;RIVERS&lt;/b&gt; | Rivers |
| cartopy.feature.&lt;b&gt;STATES&lt;/b&gt; | States |&lt;/p&gt;

&lt;p&gt;We will also add the provinces with Cartopy&amp;rsquo;s NaturalEarthFeature class:
&lt;a href=&#34;https://scitools.org.uk/cartopy/docs/v0.16/matplotlib/feature_interface.html#cartopy.feature.NaturalEarthFeature&#34; target=&#34;_blank&#34;&gt;https://scitools.org.uk/cartopy/docs/v0.16/matplotlib/feature_interface.html#cartopy.feature.NaturalEarthFeature&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We work here by adding layers.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# adding caost:
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-130,-60,18,62])
ax.coastlines(resolution=&#39;110m&#39;);
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_11_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# adding land and oceanss:

ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-130,-60,18,62])
ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_12_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# adding lakes and rivers
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-130,-60,18,62])
ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_13_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Adding states
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-130,-60,18,62])
ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;50m&#39;,
        facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_14_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can now fill our map with our georeferenced field with the method pcolormesh of matplotlib: &lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pcolormesh.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pcolormesh.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here Lat Lon coordinates are in 2D, so in each grid point we know the latitude and longitude of our fields.&lt;/p&gt;

&lt;p&gt;It is possible that for a netcdf file Lat and Lon are in 1D. We must then write them in 2D with the following command:&lt;/p&gt;

&lt;p&gt;-lon, lat = np.meshgrid (lons, lats)&lt;/p&gt;

&lt;p&gt;We will also produce our own color palette. Here is a useful link to select our colors and create our palette: &lt;a href=&#34;http://colorbrewer2.org/#type=diverging&amp;amp;scheme=RdYlBu&amp;amp;n=8&#34; target=&#34;_blank&#34;&gt;http://colorbrewer2.org/#type=diverging&amp;amp;scheme=RdYlBu&amp;amp;n=8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use one of the color palettes predefined by Matplotlip: &lt;a href=&#34;https://matplotlib.org/examples/color/colormaps_reference.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/examples/color/colormaps_reference.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use to draw our map type pcolormesh matplotib. Other types of plots are available: &lt;a href=&#34;https://matplotlib.org/basemap/users/examples.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/basemap/users/examples.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To improve the reading of our map, we can at this level add:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a legend under the map: cbar.set_label&lt;/li&gt;

&lt;li&gt;&lt;p&gt;add a color bar with a display interval: plt.colorbar&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Y=np.array([[77,0,111],[115,14,181],[160,17,222],[195,14,240],\
           [0,0,93],[21,38,177],[33,95,227],[32,162,247],[59,224,248],[202,255,250],\
           [4,255,179],[37,181,139],[32,132,81],[72,162,60],[157,240,96],[213,255,166],\
           [241,247,132],[248,185,68],[255,124,4],[235,78,14],[215,32,24],[189,24,40],[162,16,56],[135,16,65],[107,15,73]])/255.

colbar=mpl.colors.ListedColormap(Y)
fig=plt.figure(figsize=(10,6), frameon=True)  
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-130,-60,18,62])

mm = ax.pcolormesh(lons,\
               lats,\
               Vals,\
               vmin=-28,\
               vmax=28, \
               transform=ccrs.PlateCarree(),\
               cmap=colbar )


ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))

states_provinces = cfeature.NaturalEarthFeature(
    category=&#39;cultural&#39;,
    name=&#39;admin_1_states_provinces_lines&#39;,
    scale=&#39;50m&#39;,
    facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  
ax.stock_img();
plt.show() 

&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_16_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If the pallet is not suitable, it is possible to use a palette of Matplotlib.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig=plt.figure(figsize=(10,6), frameon=True)  
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-130,-60,18,62])

mm = ax.pcolormesh(lons,\
                   lats,\
                   Vals,\
                   vmin=-28,\
                   vmax=28, \
                   transform=ccrs.PlateCarree(),\
                   cmap=&#39;jet&#39; )


ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))

states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;50m&#39;,
        facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  
ax.stock_img();
plt.show() 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_18_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can finally add:
    - a title to our chart: plt.title
    - a color bar plt.colorbar
    - a title to our color bar: plt.xlabel
    - latitudes and longitudes with the function: gridlines ()
    - a scale bar: scale_bar ()&lt;/p&gt;

&lt;p&gt;Then save our chart with the command: plt.savefig&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Y=np.array([[77,0,111],[115,14,181],[160,17,222],[195,14,240],\
               [0,0,93],[21,38,177],[33,95,227],[32,162,247],[59,224,248],[202,255,250],\
               [4,255,179],[37,181,139],[32,132,81],[72,162,60],[157,240,96],[213,255,166],\
               [241,247,132],[248,185,68],[255,124,4],[235,78,14],[215,32,24],[189,24,40],[162,16,56],[135,16,65],[107,15,73]])/255.

colbar=mpl.colors.ListedColormap(Y)
fig=plt.figure(figsize=(22,12), frameon=True)  
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-130,-60,18,62])

mm = ax.pcolormesh(lons,\
                   lats,\
                   Vals,\
                   vmin=-28,\
                   vmax=28, \
                   transform=ccrs.PlateCarree(),\
                   cmap=colbar )


ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))

states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;50m&#39;,
        facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  
ax.stock_img();

# Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)
ax.gridlines()

# Standard 6,000 km scale bar.
scale_bar(ax, (0.85, 0.2), 500 ,plot_kwargs = dict(linestyle=&#39;dashed&#39;, color=&#39;black&#39;))

cbar = plt.colorbar(mm, orientation=&#39;horizontal&#39;, shrink=0.75, drawedges=&#39;True&#39;, ticks=np.arange(-28, 28.1, 4),extend=&#39;both&#39;)
cbar.set_label(u&#39;\n Projection = Lambert Conformal Conic / Lambert Conique Conforme\nResolution: 5 Arcs-Minutes (10 km)\nData provided by Natural Resources Canada and the University of Washington/ Données fournies par Ressources Naturelles Canada et l Université de Washington&#39;, size=&#39;medium&#39;) # Affichage de la légende de la barre de couleur
cbar.ax.tick_params(labelsize=17) 
 
plt.xlabel(u&#39;\n\n\nTemperature / Température (°C)&#39;,size=&#39;x-large&#39;)
string_title=u&#39;Daily Minimum Temperature / Température Minimale Quotidienne\n in June / en Juin \nMonthly Mean Climatology / Climatologie Moyenne Mensuelle (1981 - 2010)\n\n&#39;
plt.title(string_title, size=&#39;xx-large&#39;)
plt.savefig(&#39;./figures/ANUSPLIN_NLDAS_10km_CLIM_TASMIN_06_1981-2010.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.1)
plt.show() 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_20_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-another-example-2d-netcdf&#34;&gt;2 - Another example  2D Netcdf&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We will work with the climatology of the total monthly precipitation accumulation  (1981-2010) for the month of December.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from netCDF4 import Dataset
import matplotlib.pylab as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import numpy as np
from carto import scale_bar
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rep_data=&#39;./DATA/ANUSPLIN/&#39;
fic=rep_data+&#39;ANUSPLIN_NLDAS_10km_CLIMATO_PrecTOT_1981_2010_12.nc&#39;
dset=Dataset(fic)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;precip=dset.variables[&#39;PrecTOT&#39;][:].squeeze()
lon=dset.variables[&#39;lon&#39;][:].squeeze()
lat=dset.variables[&#39;lat&#39;][:].squeeze()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## Interrogeons un peu chaque variable
print(&#39;-----------------------------------------&#39;)
print(&#39;dimension de precipitation = &#39;,precip.shape)
print(&#39;Min de precip est = &#39;, np.nanmin(precip))
print(&#39;Max de precip est = &#39;, np.nanmax(precip))
print(&#39;-----------------------------------------&#39;)
print(&#39;-----------------------------------------&#39;)
print(&#39;dimension de latitude = &#39;,lat.shape)
print(&#39;Min de lat est = &#39;, np.min(lat))
print(&#39;Max de lat est = &#39;, np.max(lat))
print(&#39;-----------------------------------------&#39;)
print(&#39;-----------------------------------------&#39;)
print(&#39;dimension de longitude = &#39;,lon.shape)
print(&#39;Min de lon est = &#39;, np.min(lon))
print(&#39;Max de lon est = &#39;, np.max(lon))
print(&#39;-----------------------------------------&#39;)
dimension de precipitation =  (1068, 420)
Min de precip est =  2.2327309
Max de precip est =  809.1944
dimension de latitude =  (1068, 420)
Min de lat est =  25.125
Max de lat est =  60.041664
dimension de longitude =  (1068, 420)
Min de lon est =  -140.95833
Max de lon est =  -52.04167
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(22,12))

ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-130,-60,18,62])
ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))

## Choisissons une colormap
cmap0=plt.cm.jet_r
cmap0.set_under(&#39;w&#39;) ## on met en blanc les valeurs inferieures au min de clev
cmap0.set_over(&#39;darkblue&#39;) ## bleu fonce pour les valeurs extremes de pluie

mm = ax.pcolormesh(lon,\
               lat,\
               precip,\
               vmin=0,\
               vmax=150, \
               transform=ccrs.PlateCarree(),\
               cmap=cmap0 )

states_provinces = cfeature.NaturalEarthFeature(
    category=&#39;cultural&#39;,
    name=&#39;admin_1_states_provinces_lines&#39;,
    scale=&#39;50m&#39;,
    facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  
ax.stock_img();

ax.gridlines()

# Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)

fig.canvas.draw()

# Standard 6,000 km scale bar.
scale_bar(ax, (0.85, 0.2), 500 ,plot_kwargs = dict(linestyle=&#39;dashed&#39;, color=&#39;black&#39;))

cbar = plt.colorbar(mm, shrink=0.75, drawedges=&#39;True&#39;, ticks=np.arange(0, 150.1, 20),extend=&#39;both&#39;)
cbar.ax.tick_params(labelsize=17) 

plt.xlabel(u&#39;\Precipitation (mm)&#39;,size=&#39;x-large&#39;)
string_title=u&#39;Precipitation climatology ANUSPLIN: December 1981-2010&#39;
plt.title(string_title, size=&#39;xx-large&#39;)
plt.savefig(&#39;./figures/My_2Dlalon_plot.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.1,  dpi=150)
plt.show()  
plt.close()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_26_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-cartopy-example-with-overplot&#34;&gt;3 - Cartopy: example with overplot&lt;/h2&gt;

&lt;p&gt;Sometimes we want to have many plots on the same picture.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will work the climatologies of the total monthly accumulation of precipitation (1981-2010) for all the months of the year.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will produce the same previous operation but for each month using a loop for.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;## we import librairies that we need

from netCDF4 import Dataset
import matplotlib.pylab as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import numpy as np
from carto import scale_bar

month_name=[&amp;quot;Jan&amp;quot;,&amp;quot;Feb&amp;quot;,&amp;quot;Mar&amp;quot;,&amp;quot;Apr&amp;quot;,&amp;quot;May&amp;quot;,&amp;quot;June&amp;quot;,&amp;quot;Jul&amp;quot;,&amp;quot;Aug&amp;quot;,&amp;quot;Sep&amp;quot;,&amp;quot;Oct&amp;quot;,&amp;quot;Nov&amp;quot;,&amp;quot;Dec&amp;quot;]
rep_data=&#39;./DATA/ANUSPLIN/&#39;

fig=plt.figure(figsize=(12,15))
clevs=np.arange(5,150.1,5)
## Colormap we will use
cmap0=plt.cm.jet_r
cmap0.set_under(&#39;w&#39;) 
cmap0.set_over(&#39;darkblue&#39;)

for imonth in np.arange(1,13):  # loop over 12 months
    ax=fig.add_subplot(4,3,imonth, projection=ccrs.LambertConformal())   
    fic=rep_data+&#39;ANUSPLIN_NLDAS_10km_CLIMATO_PrecTOT_1981_2010_&#39;+&#39;{:02d}&#39;.format(imonth)+&#39;.nc&#39;
    dset=Dataset(fic)
    precip=dset.variables[&#39;PrecTOT&#39;][:].squeeze()
    lon=dset.variables[&#39;lon&#39;][:].squeeze()
    lat=dset.variables[&#39;lat&#39;][:].squeeze()
    
    ax.set_extent([-130,-60,18,62])
    ax.coastlines(resolution=&#39;110m&#39;);
    ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))
    ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))
    ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))
    ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))

    mm = ax.pcolormesh(lon,\
                   lat,\
                   precip,\
                   vmin=0,\
                   vmax=150, \
                   transform=ccrs.PlateCarree(),\
                   cmap=cmap0 )
    plt.title(&#39;Normale &#39;+ month_name[imonth-1],fontsize=12)
    states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;50m&#39;,
        facecolor=&#39;none&#39;)

    ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  
    ax.stock_img();
    ax.gridlines();
    # Standard 6,000 km scale bar.
    scale_bar(ax, (0.85, 0.2), 500 ,plot_kwargs = dict(linestyle=&#39;dashed&#39;, color=&#39;black&#39;))

plt.savefig(&#39;./figures/My_2Dlalon_multipanel_plot.png&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_28_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-cartopy-modis&#34;&gt;4 - Cartopy:  MODIS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lance-modis.eosdis.nasa.gov/imagery/gallery/2012270-0926/Miriam.A2012270.2050.2km.jpg&#34; target=&#34;_blank&#34;&gt;https://lance-modis.eosdis.nasa.gov/imagery/gallery/2012270-0926/Miriam.A2012270.2050.2km.jpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lance-modis.eosdis.nasa.gov/imagery/gallery/2012270-0926/Miriam.A2012270.2050.txt&#34; target=&#34;_blank&#34;&gt;https://lance-modis.eosdis.nasa.gov/imagery/gallery/2012270-0926/Miriam.A2012270.2050.txt&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(12, 20))

fname = &#39;./figures/Miriam.A2012270.2050.1km.jpg&#39;
img_extent = (-120.67660000000001, -106.32104523100001, 13.2301484511245, 30.766899999999502)
img = plt.imread(fname)

ax = plt.axes(projection=ccrs.PlateCarree())

# set a margin around the data
ax.set_xmargin(0.05)
ax.set_ymargin(0.10)

# ajout de l&#39;image
ax.imshow(img, origin=&#39;upper&#39;, extent=img_extent, transform=ccrs.PlateCarree())
ax.coastlines(resolution=&#39;50m&#39;, color=&#39;black&#39;, linewidth=1)

# ajout d&#39;une ville
ax.plot(-117.1625, 32.715, &#39;bo&#39;, markersize=7, transform=ccrs.Geodetic())
ax.text(-117, 33, &#39;San Diego&#39;, transform=ccrs.Geodetic())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Text(-117, 33, &#39;San Diego&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_30_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4 Xarray</title>
      <link>/courses/tutorial_python_netcdf/4-xarray_library/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python_netcdf/4-xarray_library/</guid>
      <description>

&lt;p&gt;In this tutorial, we will use the features of the Python xarray library to process and analyze Netcdf files.&lt;/p&gt;

&lt;p&gt;To install the library under anaconda:&lt;/p&gt;

&lt;p&gt;$ conda install xarray&lt;/p&gt;

&lt;p&gt;Here is an example of structure of a Netcdf file under xarray:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/xarray.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt; DataArray &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;xarray.DataArray is xarray’s implementation of a labeled, multi-dimensional array. It has several key properties:
|  |  |
|&amp;ndash;|&amp;ndash;|
| &lt;b&gt;values&lt;/b&gt; |  a numpy.ndarray holding the array’s values |
| &lt;b&gt;dims&lt;/b&gt; |  dimension names for each axis (e.g., (&amp;lsquo;x&amp;rsquo;, &amp;lsquo;y&amp;rsquo;, &amp;lsquo;z&amp;rsquo;,&amp;lsquo;time&amp;rsquo;)) |
| &lt;b&gt;coords&lt;/b&gt; | a dict-like container of arrays (coordinates) that label each point (e.g., 1-dimensional arrays of numbers, datetime objects or strings) |
| &lt;b&gt;attrs&lt;/b&gt; |  an OrderedDict to hold arbitrary metadata (attributes) |&lt;/p&gt;

&lt;p&gt;&lt;b&gt; DataSet &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;xarray.Dataset is xarray’s multi-dimensional equivalent of a DataFrame. It is a dict-like container of labeled arrays (DataArray objects) with aligned dimensions. It is designed as an in-memory representation of the data model from the netCDF file format.&lt;/p&gt;

&lt;p&gt;xarray.DataSet is a collection of DataArrays. Each NetCDF file contains a DataSet.&lt;/p&gt;

&lt;h2 id=&#34;1-open-a-netcdf-file&#34;&gt;1- Open a Netcdf file&lt;/h2&gt;

&lt;p&gt;We will open and store the data of a Netcdf file in a Dataset.&lt;/p&gt;

&lt;p&gt;First we need to import librairies and create aliases.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xarray as xr
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
from matplotlib import pyplot as plt
%matplotlib inline
plt.rcParams[&#39;figure.figsize&#39;] = (8,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To import and store as dataset only one Netcdf file:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will work with temperature fields from cera20c reanalysis.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;unique_dataDIR = &#39;./DATA/CERA20C/cera20c_member0_TAS_197101_day.nc&#39;
TAS = xr.open_dataset(unique_dataDIR)
TAS
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (bnds: 2, latitude: 145, longitude: 288, time: 31)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 ... 1971-01-31T10:30:00
Dimensions without coordinates: bnds
Data variables:
    time_bnds  (time, bnds) datetime64[ns] ...
    t2m        (time, latitude, longitude) float32 ...
Attributes:
    CDI:          Climate Data Interface version 1.6.9 (http://mpimet.mpg.de/...
    Conventions:  CF-1.6
    history:      Thu Oct 25 14:29:40 2018: cdo daymean ./TAS/cera20c_member0...
    CDO:          Climate Data Operators version 1.6.9 (http://mpimet.mpg.de/...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If we want to import several Netcdf files:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, we want to store all files&amp;rsquo; names starting with &amp;lsquo;cera20c_member0&lt;em&gt;TAS&lt;/em&gt;&amp;rsquo; and located in &amp;lsquo;./data/cera20c/&amp;rsquo; path.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;multi_dataDIR = &#39;./DATA/CERA20C/cera20c_member0_TAS_*.nc&#39;
TAS2 = xr.open_mfdataset(multi_dataDIR)
TAS2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (bnds: 2, latitude: 145, longitude: 288, time: 365)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 ... 1971-12-31T10:30:00
Dimensions without coordinates: bnds
Data variables:
    time_bnds  (time, bnds) datetime64[ns] dask.array&amp;lt;shape=(365, 2), chunksize=(31, 2)&amp;gt;
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 145, 288), chunksize=(31, 145, 288)&amp;gt;
Attributes:
    CDI:          Climate Data Interface version 1.6.9 (http://mpimet.mpg.de/...
    Conventions:  CF-1.6
    history:      Thu Oct 25 14:29:40 2018: cdo daymean ./TAS/cera20c_member0...
    CDO:          Climate Data Operators version 1.6.9 (http://mpimet.mpg.de/...
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Combine Netcdf:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To combine variables and coordinates between multiple DataArray and/or Dataset objects, use merge(). It can merge a list of Dataset, DataArray or dictionaries of objects convertible to DataArray objects:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;multi_dataDIR = &#39;./DATA/CERA20C/cera20c_member0_TAS_*.nc&#39;
TAS2 = xr.open_mfdataset(multi_dataDIR)
multi_dataDIR2 = &#39;./DATA/CERA20C/cera20c_member0_SIC_*.nc&#39;
SIC2 = xr.open_mfdataset(multi_dataDIR2)

DS_new = xr.merge([TAS2,SIC2])
DS_new
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (bnds: 2, latitude: 145, longitude: 288, time: 365)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 ... 1971-12-31T10:30:00
Dimensions without coordinates: bnds
Data variables:
    time_bnds  (time, bnds) datetime64[ns] dask.array&amp;lt;shape=(365, 2), chunksize=(31, 2)&amp;gt;
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 145, 288), chunksize=(31, 145, 288)&amp;gt;
    siconc     (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 145, 288), chunksize=(31, 145, 288)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-exploring-the-data&#34;&gt;2- Exploring the data&lt;/h2&gt;

&lt;p&gt;We can quickly explore our datasets by using some methods of the xarray library:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DS.var&lt;/li&gt;
&lt;li&gt;DS.dims&lt;/li&gt;
&lt;li&gt;DS.coords&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DS.attrs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_new.var
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;bound method ImplementsDatasetReduce._reduce_method.&lt;locals&gt;.wrapped_func of &lt;xarray.Dataset&gt;
Dimensions:    (bnds: 2, latitude: 145, longitude: 288, time: 365)
Coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;longitude  (longitude) float32 0.0 1.25 2.5 3.75 &amp;hellip; 356.25 357.5 358.75&lt;/li&gt;
&lt;li&gt;latitude   (latitude) float32 90.0 88.75 87.5 86.25 &amp;hellip; -87.5 -88.75 -90.0&lt;/li&gt;

&lt;li&gt;&lt;p&gt;time       (time) datetime64[ns] 1971-01-01T10:30:00 &amp;hellip; 1971-12-31T10:30:00
Dimensions without coordinates: bnds
Data variables:
time_bnds  (time, bnds) datetime64[ns] dask.array&lt;shape=(365, 2), chunksize=(31, 2)&gt;
t2m        (time, latitude, longitude) float32 dask.array&lt;shape=(365, 145, 288), chunksize=(31, 145, 288)&gt;
siconc     (time, latitude, longitude) float32 dask.array&lt;shape=(365, 145, 288), chunksize=(31, 145, 288)&gt;&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_new.dims
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Frozen(SortedKeysDict({&amp;lsquo;longitude&amp;rsquo;: 288, &amp;lsquo;latitude&amp;rsquo;: 145, &amp;lsquo;time&amp;rsquo;: 365, &amp;lsquo;bnds&amp;rsquo;: 2}))&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_new.coords
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 &amp;hellip; 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 &amp;hellip; -87.5 -88.75 -90.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 &amp;hellip; 1971-12-31T10:30:00&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_new.attrs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OrderedDict()&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-basic-operations-with-xarray&#34;&gt;3- Basic operations with Xarray:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Select a date:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use .sel() method to select one timestamp from our Dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_date = DS_new.sel(time=&#39;1971-01-01&#39;)
DS_date
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (bnds: 2, latitude: 145, longitude: 288, time: 1)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00
Dimensions without coordinates: bnds
Data variables:
    time_bnds  (time, bnds) datetime64[ns] dask.array&amp;lt;shape=(1, 2), chunksize=(1, 2)&amp;gt;
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(1, 145, 288), chunksize=(1, 145, 288)&amp;gt;
    siconc     (time, latitude, longitude) float32 dask.array&amp;lt;shape=(1, 145, 288), chunksize=(1, 145, 288)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Select time range&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can select a time range with slicing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_date_range = DS_new.sel(time=slice(&#39;1971-06-01&#39;, &#39;1971-08-31&#39;))
DS_date_range
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (bnds: 2, latitude: 145, longitude: 288, time: 92)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * time       (time) datetime64[ns] 1971-06-01T10:30:00 ... 1971-08-31T10:30:00
Dimensions without coordinates: bnds
Data variables:
    time_bnds  (time, bnds) datetime64[ns] dask.array&amp;lt;shape=(92, 2), chunksize=(30, 2)&amp;gt;
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(92, 145, 288), chunksize=(30, 145, 288)&amp;gt;
    siconc     (time, latitude, longitude) float32 dask.array&amp;lt;shape=(92, 145, 288), chunksize=(30, 145, 288)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Export a dataset&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can export our dataset into dataframe and then use Pandas library to make analysis.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = DS_date_range.to_dataframe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;time_bnds&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;t2m&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;siconc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(0, 90.0, 0.0, Timestamp(&amp;lsquo;1971-06-01 10:30:00&amp;rsquo;))&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1971-06-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;266.296&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.990234&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(0, 90.0, 0.0, Timestamp(&amp;lsquo;1971-06-02 10:30:00&amp;rsquo;))&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1971-06-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;264.76&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.988525&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(0, 90.0, 0.0, Timestamp(&amp;lsquo;1971-06-03 10:30:00&amp;rsquo;))&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1971-06-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;265.866&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.987502&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(0, 90.0, 0.0, Timestamp(&amp;lsquo;1971-06-04 10:30:00&amp;rsquo;))&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1971-06-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;265.947&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.98738&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(0, 90.0, 0.0, Timestamp(&amp;lsquo;1971-06-05 10:30:00&amp;rsquo;))&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1971-06-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;266.126&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.987152&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;t2m&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;siconc&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;count&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.68384e+06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.68384e+06&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;267.002&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.141752&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;std&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.852&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.312001&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;min&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;192.562&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;25%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;273.221&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;50%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;285.734&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;75%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;296.388&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;max&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;314.804&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Time mean&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mean_array = DS_date_range.mean(dim=&#39;time&#39;)
Mean_array.values
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;bound method Mapping.values of &lt;xarray.Dataset&gt;
Dimensions:    (latitude: 145, longitude: 288)
Coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;longitude  (longitude) float32 0.0 1.25 2.5 3.75 &amp;hellip; 356.25 357.5 358.75&lt;/li&gt;
&lt;li&gt;latitude   (latitude) float32 90.0 88.75 87.5 86.25 &amp;hellip; -87.5 -88.75 -90.0
Data variables:
t2m        (latitude, longitude) float32 dask.array&lt;shape=(145, 288), chunksize=(145, 288)&gt;
siconc     (latitude, longitude) float32 dask.array&lt;shape=(145, 288), chunksize=(145, 288)&gt;&amp;gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To save our results into csv:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Mean_array.t2m.to_dataframe().to_csv(&#39;./DATA/CERA20C_T2m_mean.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mean over all latitudes and longitudes grid points:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_date_range.t2m.mean(dim=(&#39;latitude&#39;, &#39;longitude&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;xarray.DataArray &#39;t2m&#39; (time: 92)&gt;
dask.array&lt;shape=(92,), dtype=float32, chunksize=(30,)&gt;
Coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;time     (time) datetime64[ns] 1971-06-01T10:30:00 &amp;hellip; 1971-08-31T10:30:00&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_date_range.t2m.mean(dim=(&#39;latitude&#39;, &#39;longitude&#39;)).plot()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[&lt;matplotlib.lines.Line2D at 0xabe86a0&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_27_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To save into csv:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_date_range.t2m.mean(dim=(&#39;time&#39;, &#39;longitude&#39;)).to_dataframe().to_csv(&#39;./DATA/CERA20C_T2m_2Dmean.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Quick plot with Xarray&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cartopy.crs as ccrs
fig=plt.figure(figsize=(10,10), frameon=True) 

ax = plt.axes(projection=ccrs.Orthographic(-80, 35))
Mean_array.t2m.plot.contourf(ax=ax, transform=ccrs.PlateCarree());
ax.set_global(); ax.coastlines();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_31_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic operations with Xarray:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this example, we will mean DS_date_range over time and apply a substration to change units.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;centigrade = DS_date_range.t2m.mean(dim=&#39;time&#39;) - 273.16
centigrade.values
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ -1.2229004,  -1.2229004,  -1.2229004, ...,  -1.2229004,
         -1.2229004,  -1.2229004],
       [ -1.3348389,  -1.3311157,  -1.3274231, ...,  -1.3488159,
         -1.3442383,  -1.3395386],
       [ -1.6027222,  -1.5914001,  -1.5804138, ...,  -1.6451721,
         -1.631012 ,  -1.6168518],
       ...,
       [-58.547928 , -58.5663   , -58.58455  , ..., -58.314026 ,
        -58.391983 , -58.46997  ],
       [-59.556473 , -59.577957 , -59.59955  , ..., -59.478424 ,
        -59.50441  , -59.53041  ],
       [-60.739105 , -60.739105 , -60.739105 , ..., -60.739105 ,
        -60.739105 , -60.739105 ]], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig=plt.figure(figsize=(10,10), frameon=True)
ax = plt.axes(projection=ccrs.Orthographic(-80, 35))
centigrade.plot.contourf(ax=ax, transform=ccrs.PlateCarree());
ax.set_global(); ax.coastlines();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_34_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Groupby() method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;groupdby() method with Xarray is very usefull to group our datasets by month, season, year&amp;hellip; and then apply function to compute indices.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_new
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (bnds: 2, latitude: 145, longitude: 288, time: 365)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 ... 1971-12-31T10:30:00
Dimensions without coordinates: bnds
Data variables:
    time_bnds  (time, bnds) datetime64[ns] dask.array&amp;lt;shape=(365, 2), chunksize=(31, 2)&amp;gt;
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 145, 288), chunksize=(31, 145, 288)&amp;gt;
    siconc     (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 145, 288), chunksize=(31, 145, 288)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# monthly mean:
DS_month = DS_new.groupby(&#39;time.month&#39;).mean(&#39;time&#39;)
DS_month
#DS_month.to_dataframe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 145, longitude: 288, month: 12)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * month      (month) int64 1 2 3 4 5 6 7 8 9 10 11 12
Data variables:
    t2m        (month, latitude, longitude) float32 dask.array&amp;lt;shape=(12, 145, 288), chunksize=(1, 145, 288)&amp;gt;
    siconc     (month, latitude, longitude) float32 dask.array&amp;lt;shape=(12, 145, 288), chunksize=(1, 145, 288)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use this method to compute climatology and then anomalies.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;climatology = DS_new.groupby(&#39;time.month&#39;).mean(&#39;time&#39;)
anomalies = DS_new.groupby(&#39;time.month&#39;) - climatology
anomalies
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 145, longitude: 288, time: 365)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 ... 1971-12-31T10:30:00
    month      (time) int64 1 1 1 1 1 1 1 1 1 1 ... 12 12 12 12 12 12 12 12 12
Data variables:
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 145, 288), chunksize=(31, 145, 288)&amp;gt;
    siconc     (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 145, 288), chunksize=(31, 145, 288)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# seaon mean:
DS_season = DS_new.groupby(&#39;time.season&#39;).mean(&#39;time&#39;)
DS_season
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 145, longitude: 288, season: 4)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * season     (season) object &#39;DJF&#39; &#39;JJA&#39; &#39;MAM&#39; &#39;SON&#39;
Data variables:
    t2m        (season, latitude, longitude) float32 dask.array&amp;lt;shape=(4, 145, 288), chunksize=(1, 145, 288)&amp;gt;
    siconc     (season, latitude, longitude) float32 dask.array&amp;lt;shape=(4, 145, 288), chunksize=(1, 145, 288)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# year mean:
DS_year = DS_new.groupby(&#39;time.year&#39;).mean(&#39;time&#39;)
DS_year
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 145, longitude: 288, year: 1)
Coordinates:
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * year       (year) int64 1971
Data variables:
    t2m        (year, latitude, longitude) float32 dask.array&amp;lt;shape=(1, 145, 288), chunksize=(1, 145, 288)&amp;gt;
    siconc     (year, latitude, longitude) float32 dask.array&amp;lt;shape=(1, 145, 288), chunksize=(1, 145, 288)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;to select a specific season:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_winter = DS_season.sel(season=&#39;DJF&#39;)
DS_winter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;xarray.Dataset&gt;
Dimensions:    (latitude: 145, longitude: 288)
Coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;longitude  (longitude) float32 0.0 1.25 2.5 3.75 &amp;hellip; 356.25 357.5 358.75&lt;/li&gt;
&lt;li&gt;latitude   (latitude) float32 90.0 88.75 87.5 86.25 &amp;hellip; -87.5 -88.75 -90.0
season     &lt;U3 &#39;DJF&#39;
Data variables:
t2m        (latitude, longitude) float32 dask.array&lt;shape=(145, 288), chunksize=(145, 288)&gt;
siconc     (latitude, longitude) float32 dask.array&lt;shape=(145, 288), chunksize=(145, 288)&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the example below, we will group the xarray.DataArray data by season, calculate the average, apply a simple arrhythmic operation and plot the resulting fields for each season.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_Season = DS_new.t2m.groupby(&#39;time.season&#39;).mean(&#39;time&#39;)- 273.15
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(9,5))
j = 0
for i, season in enumerate((&#39;DJF&#39;, &#39;MAM&#39;, &#39;JJA&#39;, &#39;SON&#39;)):
    if season ==&#39;JJA&#39;:
        j += 1
        i = 0
    elif season ==&#39;SON&#39;:
        i = 1
        
    DS_Season.sel(season=season).plot.pcolormesh(
        ax=axes[i, j], vmin=-30, vmax=30, cmap=&#39;Spectral_r&#39;,
        add_colorbar=True, extend=&#39;both&#39;)

for ax in axes.flat:
    ax.axes.get_xaxis().set_ticklabels([])
    ax.axes.get_yaxis().set_ticklabels([])
    ax.axes.axis(&#39;tight&#39;)
   
plt.tight_layout()
fig.suptitle(&#39;Seasonal Surface Air Temperature&#39;, fontsize=16, y=1.02)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Text(0.5, 1.02, &#39;Seasonal Surface Air Temperature&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_45_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
lat_bnd = [80, 50]
lon_bnd = [250, 310]
DS_Season = DS_new.sel(longitude=slice(*lon_bnd), latitude=slice(*lat_bnd),).siconc.groupby(&#39;time.season&#39;).mean(&#39;time&#39;) *100

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(16,10))
j = 0
for i, season in enumerate((&#39;DJF&#39;, &#39;MAM&#39;, &#39;JJA&#39;, &#39;SON&#39;)):
    if season ==&#39;JJA&#39;:
        j += 1
        i = 0
    elif season ==&#39;SON&#39;:
        i = 1
        
    DS_Season.sel(season=season).plot.pcolormesh(
        ax=axes[i, j], vmin=0, vmax=100, cmap=&#39;Spectral_r&#39;,
        add_colorbar=True, extend=&#39;both&#39;)
for ax in axes.flat:
    ax.axes.get_xaxis().set_ticklabels([])
    ax.axes.get_yaxis().set_ticklabels([])
    ax.axes.axis(&#39;tight&#39;)
   
plt.tight_layout()
fig.suptitle(&#39;Seasonal Sea Ice Concentration&#39;, fontsize=16, y=1.02)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Text(0.5, 1.02, &#39;Seasonal Sea Ice Concentration&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_46_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To save our result into Netcdf:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DS_season = DS_new.groupby(&#39;time.season&#39;).mean(&#39;time&#39;)
dataDIR = &#39;./DATA/CERA20C_season.nc&#39;
DS_Season.to_netcdf(dataDIR)

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-select-grid-points-from-netcdf-file-using-xarray&#34;&gt;4- Select grid points from Netcdf file using Xarray&lt;/h2&gt;

&lt;p&gt;In the previous section we applied the .sel () method to work on the time dimension. This method can be used on spatial dimensions to extract points or study areas from our netcdf file.&lt;/p&gt;

&lt;h3 id=&#34;gridpoint-to-extract-the-closest-grid-point-of-a-latitude-longitude&#34;&gt;Gridpoint:  to extract the closest grid point of a latitude / longitude:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lati = 45.5
loni = 269.2
data  = DS_new.sel(longitude=loni  , latitude=lati  , method=&#39;nearest&#39;) 
data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (bnds: 2, time: 365)
Coordinates:
    longitude  float32 268.75
    latitude   float32 45.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 ... 1971-12-31T10:30:00
Dimensions without coordinates: bnds
Data variables:
    time_bnds  (time, bnds) datetime64[ns] dask.array&amp;lt;shape=(365, 2), chunksize=(31, 2)&amp;gt;
    t2m        (time) float32 dask.array&amp;lt;shape=(365,), chunksize=(31,)&amp;gt;
    siconc     (time) float32 dask.array&amp;lt;shape=(365,), chunksize=(31,)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data[&#39;t2m&#39;] = data[&#39;t2m&#39;] - 273.15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.t2m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;t2m&#39; (time: 365)&amp;gt;
dask.array&amp;lt;shape=(365,), dtype=float32, chunksize=(31,)&amp;gt;
Coordinates:
    longitude  float32 268.75
    latitude   float32 45.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 ... 1971-12-31T10:30:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can convert our selection into a DataFrame and then use Pandas to analyse our results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = data.t2m.to_dataframe()
fig = plt.figure(figsize=(16,8))
df[&#39;t2m&#39;].plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x13660400&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_55_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;gridpoints-to-extract-a-list-of-points&#34;&gt;Gridpoints:  to extract a list of points&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lats =  [20.0,50.0,90.0]
lons =  [60.0,80.0,120.0]

data  = DS_new.sel(longitude=lons  , latitude=lats  , method=&#39;nearest&#39;)
data[&#39;t2m&#39;] = data[&#39;t2m&#39;]-273.15
data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (bnds: 2, latitude: 3, longitude: 3, time: 365)
Coordinates:
  * longitude  (longitude) float32 60.0 80.0 120.0
  * latitude   (latitude) float32 20.0 50.0 90.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 ... 1971-12-31T10:30:00
Dimensions without coordinates: bnds
Data variables:
    time_bnds  (time, bnds) datetime64[ns] dask.array&amp;lt;shape=(365, 2), chunksize=(31, 2)&amp;gt;
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 3, 3), chunksize=(31, 3, 3)&amp;gt;
    siconc     (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 3, 3), chunksize=(31, 3, 3)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(16,8))
data.t2m.sel(longitude=60.0, latitude=[20.0,50.0,90.0]).plot.line(x=&#39;time&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0xdf31ac8&amp;gt;,
 &amp;lt;matplotlib.lines.Line2D at 0xdd0bf28&amp;gt;,
 &amp;lt;matplotlib.lines.Line2D at 0xdd0b4a8&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_58_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;to-extract-an-area-or-subdomain-delimited-by-latitude-and-longitude-values-slicing&#34;&gt;To extract an area or subdomain delimited by latitude and longitude values: .slicing()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lat_bnd = [80, 50]
lon_bnd = [250, 310]
area = DS_new.sel(longitude=slice(*lon_bnd), latitude=slice(*lat_bnd),)
area
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (bnds: 2, latitude: 25, longitude: 49, time: 365)
Coordinates:
  * longitude  (longitude) float32 250.0 251.25 252.5 ... 307.5 308.75 310.0
  * latitude   (latitude) float32 80.0 78.75 77.5 76.25 ... 52.5 51.25 50.0
  * time       (time) datetime64[ns] 1971-01-01T10:30:00 ... 1971-12-31T10:30:00
Dimensions without coordinates: bnds
Data variables:
    time_bnds  (time, bnds) datetime64[ns] dask.array&amp;lt;shape=(365, 2), chunksize=(31, 2)&amp;gt;
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 25, 49), chunksize=(31, 25, 49)&amp;gt;
    siconc     (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 25, 49), chunksize=(31, 25, 49)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;area.longitude.values
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([250.  , 251.25, 252.5 , 253.75, 255.  , 256.25, 257.5 , 258.75,
       260.  , 261.25, 262.5 , 263.75, 265.  , 266.25, 267.5 , 268.75,
       270.  , 271.25, 272.5 , 273.75, 275.  , 276.25, 277.5 , 278.75,
       280.  , 281.25, 282.5 , 283.75, 285.  , 286.25, 287.5 , 288.75,
       290.  , 291.25, 292.5 , 293.75, 295.  , 296.25, 297.5 , 298.75,
       300.  , 301.25, 302.5 , 303.75, 305.  , 306.25, 307.5 , 308.75,
       310.  ], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To visualize our area::&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cartopy.crs as ccrs
import cartopy.feature as cfeat
def make_figure():
    fig = plt.figure(figsize=(22, 12))
    ax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())

    # generate a basemap with country borders, oceans and coastlines
    ax.add_feature(cfeat.LAND)
    ax.add_feature(cfeat.OCEAN)
    ax.add_feature(cfeat.COASTLINE)
    ax.add_feature(cfeat.BORDERS, linestyle=&#39;dotted&#39;)
    return fig, ax

make_figure();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_63_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_, ax = make_figure()
# plot the temperature field
area.t2m[0].plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.collections.QuadMesh at 0xb2e9240&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_64_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;to-mask-an-area-delimited-by-a-shapefile&#34;&gt;To mask an area delimited by a Shapefile:&lt;/h3&gt;

&lt;p&gt;To do this, we need to import two more librairies:
- Geopandas: conda install -c conda-forge geopandas
- osgeo: conda install -c conda-forge gdal&lt;/p&gt;

&lt;p&gt;The next function will open a shapefile, read the polygons and make a mask from each grid points of our Netcdf inside the polygons.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from osgeo import ogr
import geopandas as gpd
import numpy as np
def get_mask(lons2d, lats2d, shp_path=&amp;quot;&amp;quot;, polygon_name=None):
    &amp;quot;&amp;quot;&amp;quot;
    Assumes that the shape file contains polygons in lat lon coordinates
    :param lons2d:
    :param lats2d:
    :param shp_path:
    :rtype : np.ndarray
    The mask is 1 for the points inside of the polygons
    &amp;quot;&amp;quot;&amp;quot;
    ds = ogr.Open(shp_path)
    &amp;quot;&amp;quot;&amp;quot;
    :type : ogr.DataSource
    &amp;quot;&amp;quot;&amp;quot;

    xx = lons2d.copy()
    yy = lats2d

    # set longitudes to be from -180 to 180
    xx[xx &amp;gt; 180] -= 360

    mask = np.zeros(lons2d.shape, dtype=int)
    nx, ny = mask.shape

    pt = ogr.Geometry(ogr.wkbPoint)

    for i in range(ds.GetLayerCount()):
        layer = ds.GetLayer(i)
        &amp;quot;&amp;quot;&amp;quot;
        :type : ogr.Layer
        &amp;quot;&amp;quot;&amp;quot;

        for j in range(layer.GetFeatureCount()):
            feat = layer.GetFeature(j)
            &amp;quot;&amp;quot;&amp;quot;
            :type : ogr.Feature
            &amp;quot;&amp;quot;&amp;quot;

            # Select polygons by the name property
            if polygon_name is not None:
                if not feat.GetFieldAsString(&amp;quot;NAME&amp;quot;) == polygon_name:
                    continue

            g = feat.GetGeometryRef()
            &amp;quot;&amp;quot;&amp;quot;
            :type : ogr.Geometry
            &amp;quot;&amp;quot;&amp;quot;

            assert isinstance(g, ogr.Geometry)

            for pi in range(nx):
                for pj in range(ny):
                    pt.SetPoint_2D(0, float(xx[pi, pj]), float(yy[pi, pj]))

                    mask[pi, pj] += int(g.Contains(pt))

    return mask

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We first read the Netcdf file and store informations in a Xarray.dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds = xr.open_dataset(&#39;./DATA/CERA20C/cera20c_member0_TAS_197101_day.nc&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then need to extract latitudes and longitudes values and compute a 2D matrix.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Imp_Lats =  ds[&#39;latitude&#39;].values
Imp_Lons =  ds[&#39;longitude&#39;].values
lon2d, lat2d = np.meshgrid(Imp_Lons, Imp_Lats)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds_mean = ds.mean(&#39;time&#39;) - 273.15
ds_mean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 145, longitude: 288)
Coordinates:
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
Data variables:
    t2m        (latitude, longitude) float32 -34.067184 ... -25.249802
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We open the shape file with Geopandas library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes = gpd.read_file(&amp;quot;./DATA/Shapefiles/Countries_Final-polygon.shp&amp;quot;)
list(shapes.columns.values)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;FIPS&#39;,
 &#39;ISO2&#39;,
 &#39;ISO3&#39;,
 &#39;UN&#39;,
 &#39;NAME&#39;,
 &#39;AREA&#39;,
 &#39;POP2005&#39;,
 &#39;REGION&#39;,
 &#39;SUBREGION&#39;,
 &#39;LON&#39;,
 &#39;LAT&#39;,
 &#39;layer&#39;,
 &#39;path&#39;,
 &#39;geometry&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes.loc[27, &#39;geometry&#39;]
shapes.plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0xd8b4b70&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_75_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We want in our study to extract information inside Mexico shapefile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask=get_mask(lon2d,lat2d,shp_path=&amp;quot;./DATA/Shapefiles/Countries_Final-polygon.shp&amp;quot;, polygon_name=&#39;Mexico&#39;) 
np.max(mask)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will convert our mask into numpy 2D array. We&amp;rsquo;ll be later able to apply this matrix to mask our Netcdf file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.save(&#39;DATA/Mexico.npy&#39;,mask) # saving our mask in numpy.array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will mask our area using .where() method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds_mask = ds_mean.where(mask == 1) 
ds_mask.to_netcdf(&#39;DATA/Mexico.nc&#39;)  # we want to save our shapefile mask in Netcdf format
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds_mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 145, longitude: 288)
Coordinates:
  * latitude   (latitude) float32 90.0 88.75 87.5 86.25 ... -87.5 -88.75 -90.0
  * longitude  (longitude) float32 0.0 1.25 2.5 3.75 ... 356.25 357.5 358.75
Data variables:
    t2m        (latitude, longitude) float32 nan nan nan nan ... nan nan nan nan
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.max(ds_mask.t2m)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;t2m&#39; ()&amp;gt;
array(24.010315)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_, ax = make_figure()
# plot the temperature field
lat_bnd = [35, 0]
lon_bnd = [240, 280]
ds_mask.t2m.sel(longitude=slice(*lon_bnd), latitude=slice(*lat_bnd),).plot.pcolormesh(vmin=0, vmax=30, cmap=&#39;Spectral&#39;,add_colorbar=True, extend=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.collections.QuadMesh at 0xdc65400&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_84_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-last-example-using-xarray&#34;&gt;5- Last example using Xarray:&lt;/h2&gt;

&lt;p&gt;In this section, We will calculate the seasonal accumulation of the precipitation, extract a region, plot the domain and record our result in Netcdf:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Let&#39;s open cera20c_enda_ep_PR_*.nc netcdf files 
multi_dataDIR = &#39;./DATA/CERA20C/cera20c_enda_ep_PR_*.nc&#39;
array = xr.open_mfdataset(multi_dataDIR)
array.tp
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;tp&#39; (time: 365, latitude: 181, longitude: 360)&amp;gt;
dask.array&amp;lt;shape=(365, 181, 360), dtype=float32, chunksize=(31, 181, 360)&amp;gt;
Coordinates:
  * longitude  (longitude) float32 0.0 1.0 2.0 3.0 ... 356.0 357.0 358.0 359.0
  * latitude   (latitude) float32 90.0 89.0 88.0 87.0 ... -88.0 -89.0 -90.0
  * time       (time) datetime64[ns] 1971-01-02T18:00:00 ... 1972-01-01T18:00:00
Attributes:
    units:      m
    long_name:  Total precipitation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All Netcdf files are stored in DataArray container, we can now group our Datasets by season, apply a simple sum() method over time and then change units from meters to mm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array_season = array.groupby(&#39;time.season&#39;).sum(&#39;time&#39;)*1000
array_season
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 181, longitude: 360, season: 4)
Coordinates:
  * latitude   (latitude) float32 90.0 89.0 88.0 87.0 ... -88.0 -89.0 -90.0
  * season     (season) object &#39;DJF&#39; &#39;JJA&#39; &#39;MAM&#39; &#39;SON&#39;
  * longitude  (longitude) float32 0.0 1.0 2.0 3.0 ... 356.0 357.0 358.0 359.0
Data variables:
    tp         (season, latitude, longitude) float32 dask.array&amp;lt;shape=(4, 181, 360), chunksize=(1, 181, 360)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to extract a specific domain delimited:
    - latitude boundaries: 50N to 70N
    - longitude boudaries: 250E to 310E&lt;/p&gt;

&lt;p&gt;We finally want to extract winter season.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lat_bnd = [70, 50]
lon_bnd = [250, 310]
subset_season_DJF = array_season.sel(season = &#39;DJF&#39;, longitude=slice(*lon_bnd), latitude=slice(*lat_bnd),)
subset_season_DJF
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 21, longitude: 61)
Coordinates:
  * latitude   (latitude) float32 70.0 69.0 68.0 67.0 ... 53.0 52.0 51.0 50.0
    season     &amp;lt;U3 &#39;DJF&#39;
  * longitude  (longitude) float32 250.0 251.0 252.0 253.0 ... 308.0 309.0 310.0
Data variables:
    tp         (latitude, longitude) float32 dask.array&amp;lt;shape=(21, 61), chunksize=(21, 61)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s save the Dataset to Netcdf.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataDIR = &#39;./DATA/subset_season.nc&#39;
subset_season_DJF.to_netcdf(dataDIR)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can call our make_figure() function to quick plot our Dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_, ax = make_figure()
# plot the temperature field
subset_season_DJF.tp.plot.pcolormesh(vmin=0, vmax=200, cmap=&#39;Spectral&#39;,add_colorbar=True, extend=&#39;both&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.collections.QuadMesh at 0x130aedd8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf/output_94_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array_season
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 181, longitude: 360, season: 4)
Coordinates:
  * latitude   (latitude) float32 90.0 89.0 88.0 87.0 ... -88.0 -89.0 -90.0
  * season     (season) object &#39;DJF&#39; &#39;JJA&#39; &#39;MAM&#39; &#39;SON&#39;
  * longitude  (longitude) float32 0.0 1.0 2.0 3.0 ... 356.0 357.0 358.0 359.0
Data variables:
    tp         (season, latitude, longitude) float32 dask.array&amp;lt;shape=(4, 181, 360), chunksize=(1, 181, 360)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Example Page 2</title>
      <link>/courses/example/example2/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/example/example2/</guid>
      <description>

&lt;p&gt;Here are some more tips for getting started with Academic:&lt;/p&gt;

&lt;h2 id=&#34;tip-3&#34;&gt;Tip 3&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;

&lt;h2 id=&#34;tip-4&#34;&gt;Tip 4&lt;/h2&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spearman correlation between two Netcdf datasets</title>
      <link>/post/spearman/</link>
      <pubDate>Fri, 24 Apr 2020 12:03:32 -0700</pubDate>
      <guid>/post/spearman/</guid>
      <description>

&lt;h2 id=&#34;netcdf-interpolation-between-grids-using-ckdtree-from-scipy-library-and-correlation&#34;&gt;Netcdf: Interpolation between grids using cKDTree from Scipy library and correlation&lt;/h2&gt;

&lt;p&gt;In this post, we will interpolate a nectcdf file to another netcdf grid and then calculate timeseries spearman correlation between two datasets on same resolution grid.&lt;/p&gt;

&lt;p&gt;To interpolate, we will follow this &lt;a href=&#34;https://www.guillaumedueymes.com/post/netcdf_interpolation/&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we will interpolate &lt;a href=&#34;https://daymet.ornl.gov/&#34; target=&#34;_blank&#34;&gt;Daymet-1km dataset&lt;/a&gt; on &lt;a href=&#34;https://www.ecmwf.int/en/forecasts/datasets/reanalysis-datasets/era5&#34; target=&#34;_blank&#34;&gt;ERA5-grid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will compute monthly total precipipitation and then compare the two datasets using spearman correlation.&lt;/p&gt;

&lt;p&gt;The Daymet dataset provides gridded estimates of daily weather parameters. Seven surface weather parameters are available at a daily time step, 1 km x 1 km spatial resolution, with a North American spatial extent.&lt;/p&gt;

&lt;p&gt;ERA5 Reanalyses provide a numerical description, with horizontal resolution of 31 km, of the recent climate (1979-present) by combining models with observations.&lt;/p&gt;

&lt;h3 id=&#34;1-let-s-import-python-librairies&#34;&gt;1-  Let&amp;rsquo;s import Python librairies&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
%matplotlib inline
#for Netcdf manipulation
import xarray as xr
from netCDF4 import Dataset
import netCDF4 as nc

#for array manipulation
import numpy as np
import pandas as pd

#for plotting
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pylab as plt

#for interpolation
from scipy.spatial import cKDTree
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;we-will-only-work-over-july-month-from-1980-to-2019&#34;&gt;We will only work over july month from 1980 to 2019:&lt;/h4&gt;

&lt;h3 id=&#34;2-interpolation-daymet-1km-to-daymet-32km-era5-grid&#34;&gt;2 - Interpolation : Daymet-1km to Daymet-32km (ERA5 grid)&lt;/h3&gt;

&lt;p&gt;We are going to use daily precipitation of Daymet-1km for july. In this analysis, we will use a subset of Daymet-1km and ERA5-32km. Indeed, we will only work over a specific watershed in Canada: Outaouais river&amp;rsquo;s watershed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;attachment:image.png&#34; alt=&#34;watershed.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the script to interpolate:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;path_source = &#39;K:/PROJETS/PROJET_OUTAOUAIS/Daily/prcp/&#39; # path with daily precipitation
import gc
gc.collect()

variable = &#39;Prcp&#39;
yi = 1980
yf = 2019

# Load target grid to interpolate
target = xr.open_dataset(&#39;Outaouais_ERA5_Grid.nc&#39;)
lat_target=target.latitude
lon_target=target.longitude
lat_target.shape

lon_target2d, lat_target2d = np.meshgrid(lon_target, lat_target)

# Load source file to create cKDTree 
source = xr.open_dataset(path_source + &#39;Daymet_v3_prcp_1980_OUTAOUAIS.nc&#39;)
lat_source = source.variables[&#39;lat&#39;][:]
lon_source = source.variables[&#39;lon&#39;][:]

# function to convert latlon to xy coordinate system
def lon_lat_to_cartesian(lon, lat):
    # WGS 84 reference coordinate system parameters
    A = 6378.137 # major axis [km]   
    E2 = 6.69437999014e-3 # eccentricity squared 
    
    lon_rad = np.radians(lon)
    lat_rad = np.radians(lat)
    # convert to cartesian coordinates
    r_n = A / (np.sqrt(1 - E2 * (np.sin(lat_rad) ** 2)))
    x = r_n * np.cos(lat_rad) * np.cos(lon_rad)
    y = r_n * np.cos(lat_rad) * np.sin(lon_rad)
    z = r_n * (1 - E2) * np.sin(lat_rad)
    return x,y,z

xs, ys, zs = lon_lat_to_cartesian(lon_source.values.flatten(), lat_source.values.flatten())
xt, yt, zt = lon_lat_to_cartesian(lon_target2d.flatten(), lat_target2d.flatten())

tree = cKDTree(np.column_stack((xs, ys, zs)))

d, inds = tree.query(np.column_stack((xt, yt, zt)), k = 10)

# let&#39;s define a function to interpolate 
def interpolate(source, target, d, inds):    
    nt = source[&amp;quot;time&amp;quot;].shape[0]
    tmp = []
    for t in range(0, nt):        
        w = 1.0 / d**2
        air_idw = np.sum(w * source.prcp[t].values.flatten()[inds], axis=1) / np.sum(w, axis=1)
        air_idw.shape = target.shape
        tmp.append(air_idw)
    return tmp

# we will make a loop over years and save netcdf files by month
for year in range(yi,yf+1):
    source = xr.open_dataset(path_source + &#39;Daymet_v3_prcp_&#39;+str(year)+&#39;_OUTAOUAIS.nc&#39;)
    air_idw = interpolate(source,lon_target2d, d, inds)
    
    data_set = xr.Dataset( coords={&#39;lon&#39;: ([ &#39;lon&#39;], lon_target),
                                     &#39;lat&#39;: ([&#39;lat&#39;,], lat_target),
                                     &#39;time&#39;: source.time.values})
    data_set[&amp;quot;prcp&amp;quot;] = ([&#39;time&#39;,&#39;lat&#39;, &#39;lon&#39;],  air_idw)
    [data_set.sel(time=str(year)+&#39;-&#39;+&#39;{:02d}&#39;.format(i)).to_netcdf(path_source + &#39;Daymet_v3_&#39; + variable + &#39;_&#39;+str(year)+&#39;_&#39;+&#39;{:02d}&#39;.format(i)+&#39;_OUTAOUAIS_ERA5grid.nc&#39;) for i in range(1,13)]
    

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-compute-monthly-indices&#34;&gt;3 - Compute monthly indices&lt;/h3&gt;

&lt;p&gt;We can now open daily files to compute monthly indices.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;yi = 1990
yf = 2019
#########################################################
tmin_in = &#39;./Daily/prcp/&#39;
monthly_out = &#39;./Month_Indice/&#39; 

# Compute monthly indices
for year in range(yi,yf+1):   # loop over years  
    for i in range(7,8):      # we just want to work over july (i_month = 7)
        data_pcp = tmin_in + &#39;Daymet_v3_Prcp_&#39; + str(year) +&#39;_{:02d}&#39;.format(i) +&#39;_OUTAOUAIS_ERA5grid.nc&#39;
        ds_pcp = xr.open_mfdataset(data_pcp)         
        monthly_pcp = ds_pcp.sum(&#39;time&#39;)     # sum over days to calculate monthly accumulation
        # we can save our netcdf files
        monthly_pcp.to_netcdf(monthly_out + &#39;Daymet_v3_Monthly_PrecTOT_&#39;+str(year) +&#39;{:02d}&#39;.format(i)+&#39;_OUTAOUAIS_ERA5grid.nc&#39;,  format=&#39;NETCDF4&#39;)
            
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-apply-watershed-netcdf-mask&#34;&gt;4 - Apply watershed netcdf mask&lt;/h3&gt;

&lt;p&gt;We will mask a specific area using a netcdf file. To create a netcdf file using any shapefile, please follow this &lt;a href=&#34;https://www.guillaumedueymes.com/post/shapefile_netcdf/&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# this function will be use later to create a netcdf file using source attributs
def create_file_from_source(src_file, trg_file):
    src = nc.Dataset(src_file)
    trg = nc.Dataset(trg_file, mode=&#39;w&#39;)

    # Create the dimensions of the file
    for name, dim in src.dimensions.items():
        trg.createDimension(name, len(dim) if not dim.isunlimited() else None)

    # Copy the global attributes
   # trg.setncatts({a:src.getncattr(a) for a in src.ncattrs()})

    # Create the variables in the file
    for name, var in src.variables.items():
        trg.createVariable(name, var.dtype, var.dimensions)

        # Copy the variable attributes
        trg.variables[name].setncatts({a:var.getncattr(a) for a in var.ncattrs()})

        # Copy the variables values (as &#39;f4&#39; eventually)
        if name not in tomask:
            trg.variables[name][:] = src.variables[name][:]
            
        else:    
            trg.variables[name][:] = data

    # Save the file
    trg.close()

#create 2d grid mask http://meteo.unican.es/work/xarray_seminar/xArray_seminar.html
tomask = [&#39;prcp&#39;]

m_f=xr.open_dataset(&#39;Outaouais_ERA5_Grid.nc&#39;)
lat2d=m_f.variables[&#39;latitude&#39;][:]
lon2d=m_f.variables[&#39;longitude&#39;][:]
mask = m_f[&#39;tp&#39;].values

for year in range(1990,2020):
    for month in range(7,8):
        
        infile = &#39;./Month_Indice/Daymet_v3_Monthly_PrecTOT_&#39;+str(year) +&#39;{:02d}&#39;.format(int(month))+&#39;_OUTAOUAIS_ERA5grid.nc&#39;           
        outfile = &#39;./Month_Indice/Daymet_v3_Monthly_PrecTOT_&#39;+str(year)+&amp;quot;{:02d}&amp;quot;.format(month)+&#39;_OUTAOUAIS_ERA5grid_BV.nc&#39;
       
        nc_Modc=xr.open_dataset(infile)
        nc_Modc.lon.values
        nc_Modf=Dataset(infile,&#39;r&#39;)
        data = nc_Modc[&#39;prcp&#39;].where(mask &amp;gt;= 0)
        create_file_from_source(infile, outfile)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-compute-correlation&#34;&gt;5 - Compute correlation&lt;/h3&gt;

&lt;p&gt;To compute spearman correlation, we use stats module from &lt;a href=&#34;https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.stats.mstats.spearmanr.html/&#34; target=&#34;_blank&#34;&gt;scipy library&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from scipy import stats
import numpy as np

variable = &#39;Monthly_PrecTOT&#39;
yi = 1990
yf = 2020
out = &#39;./Month_Indice/&#39;
for month in [&#39;07&#39;]:  
    # load ERA5 
    path_era5 = &#39;J:/REANALYSES/ERA5/Month_PrecTOT_Outaouais/&#39;
    file = path_era5 + &#39;ERA5_Outaouais_Monthly_PrecTOT_CAN_&#39;
    multi_file = [f&#39;{file}{year}{month}_BV.nc&#39; for year in range(yi,yf,1)]
    era5_all = xr.concat([xr.open_dataset(f) for f in multi_file], &#39;day&#39;)
    
    # load daymet
    path_daymet = &#39;K:/PROJETS/PROJET_OUTAOUAIS/Month_Indice/&#39;
    
    file = path_daymet + &#39;Daymet_v3_&#39;+variable + &#39;_&#39;
    multi_file = [f&#39;{file}{year}{month}_OUTAOUAIS_ERA5grid_BV.nc&#39; for year in range(yi,yf,1)]
    daymet_all = xr.concat([xr.open_dataset(f) for f in multi_file], &#39;time&#39;)
    
    # Spearman correlation between two datasets for each grid point
    corr_spearman_ERA5 = np.zeros((era5_all[&#39;tp&#39;].shape[1],era5_all[&#39;tp&#39;].shape[2]),dtype=float)    
    for ni in range(0,era5_all[&#39;tp&#39;].shape[2]):   # loop over longitudes
        for nj in range(0, era5_all[&#39;tp&#39;].shape[1]):  # loop over latitudes
            
             r, p = stats.spearmanr(era5_all.isel(latitude=[nj], longitude=[ni]).tp.values[:,0,0] ,
                                   daymet_all.isel(lat=[nj], lon=[ni]).prcp.values[:,0,0] ) 
             if p &amp;gt;= 0.1 :
                 corr_spearman_ERA5[nj,ni] = np.nan
             else:
                 corr_spearman_ERA5[nj,ni] = r
                 
    data_set = xr.Dataset( coords={&#39;lon&#39;: ([ &#39;lon&#39;], era5_all.longitude),
                                             &#39;lat&#39;: ([&#39;lat&#39;,], era5_all.latitude)})
    
    data_set[&amp;quot;spearmanr&amp;quot;] = ([&#39;lat&#39;, &#39;lon&#39;],  corr_spearman_ERA5)
        
    data_set.to_netcdf(out + &#39;Daymet_v3_spearmann_Correlation_ERA5grid&#39; + variable + &#39;_&#39;+str(yi)+&#39;_&#39;+str(yf)+&#39;_&#39;+month+&#39;_OUTAOUAIS_python.nc&#39;)             
             
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-plot-correlation&#34;&gt;6 - Plot correlation&lt;/h3&gt;

&lt;p&gt;We can now make a quick plot using matplotlib.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from netCDF4 import Dataset
import matplotlib.pylab as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import numpy as np
import matplotlib as mpl
import pandas as pd
import datetime
####https://uoftcoders.github.io/studyGroup/lessons/python/cartography/lesson/

## Date à utiliser 

path_in=&#39;./Month_Indice/&#39;
file = &#39;Daymet_v3_spearmann_Correlation_ERA5gridMonthly_PrecTOT&#39;
yi = 1990
yf = 2020
# lecture du contour du bassin versant 
BV_border = pd.read_csv(&#39;./points_contour_BV.csv&#39;, sep=&#39;,&#39;)
def plot_background(ax):
    ax.set_extent([-84,-70,45,48])
    ax.coastlines(resolution=&#39;110m&#39;);
    ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      
    ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       
    ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))     
    ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    
    ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))    
    coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,    
                        facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
    ax.add_feature(coast, edgecolor=&#39;black&#39;)
    
    states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;10m&#39;,
        facecolor=&#39;none&#39;)

    ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)

   
    return ax

for month in [&#39;07&#39;]:
        
    monthstr = datetime.date(1900, int(month), 1).strftime(&#39;%B&#39;)   
    filename = path_in + file
    
    dset=Dataset(filename + &#39;_&#39; + str(yi) + &#39;_&#39; + str(yf) + &#39;_&#39; + month +&#39;_OUTAOUAIS_python.nc&#39;)
    ## Lecture du fichier 
    var=dset.variables[&#39;spearmanr&#39;][:].squeeze()
    lon=dset.variables[&#39;lon&#39;][:]
    lat=dset.variables[&#39;lat&#39;][:]

    
    fig = plt.figure(figsize=(28,16))
    crs=ccrs.LambertConformal()
    ax = plt.axes(projection=crs)
    plot_background(ax)
    
    ## Choisissons une colormap
    cmap0 = mpl.cm.get_cmap(&#39;jet&#39;, 11)
    #cmap0.set_under(&#39;w&#39;) ## on met en blanc les valeurs inferieures au min de clev
    #cmap0.set_over(&#39;black&#39;)
    levels = np.arange(0,1.1,0.1) 
    mm = ax.contourf(lon,\
                           lat,\
                           var,\
                           vmin=0.,\
                           vmax=1.1, \
                           transform=ccrs.PlateCarree(),\
                           cmap=cmap0,
                           levels=levels)
        
    # ajout du contour du basson versant 
    colors = [&#39;red&#39;]
    maskBV = [&#39;Outaouais Watershed&#39;]                      
    ax.plot(BV_border.X,BV_border.Y, transform=ccrs.PlateCarree(), color=colors[0], linewidth=2, label=maskBV[0])
    plt.legend(loc=&amp;quot;best&amp;quot;, markerscale=2., fontsize=20)
    xticks = np.arange(-150.0,-40.0,20)
    yticks =np.arange(10,80,10)    
    fig.canvas.draw()    

    cbar = plt.colorbar(mm, orientation=&#39;horizontal&#39;, shrink=0.75, drawedges=&#39;True&#39;, ticks=np.arange(0., 1.1, .1),extend=&#39;both&#39;)
    cbar.set_label(u&#39;\n DAYMET/ERA Correlation - Résolution: 32km&#39;, size=&#39;medium&#39;) # Affichage de la légende de la barre de couleur
    cbar.ax.tick_params(labelsize=17)  
    
    string_title=u&#39;Spearman Correlation Monthly total precipitation Daymet/ERA5 \n &#39; + monthstr + &#39; reference period 1990-2019\n&#39;
    plt.title(string_title, size=&#39;xx-large&#39;)
    plt.savefig(path_in + &#39;Spearman_DAYMET_ERA5_PrecTOT_1990-2019_&#39;+str(month)+&#39;_python.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.1)
    plt.show()  
    plt.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_13_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Netcdf Interpolation using Python</title>
      <link>/post/netcdf_interpolation/</link>
      <pubDate>Wed, 08 Apr 2020 06:48:49 -0700</pubDate>
      <guid>/post/netcdf_interpolation/</guid>
      <description>

&lt;h2 id=&#34;netcdf-interpolation-between-grids-using-ckdtree-from-scipy-library&#34;&gt;Netcdf: Interpolation between grids using cKDTree from Scipy library&lt;/h2&gt;

&lt;p&gt;In this post, we are going to define an algorithm to locate the closest points to a reference points, by using coordinate transformations, k-dimensional trees, and xarray pointwise indexing.&lt;/p&gt;

&lt;p&gt;To select closest grid points, we will use here one approach using &lt;a href=&#34;http://docs.scipy.org/doc/scipy-0.12.0/reference/generated/scipy.spatial.cKDTree.html&#34; target=&#34;_blank&#34;&gt;cKDTree&lt;/a&gt; class from scipy.spatial package.&lt;/p&gt;

&lt;p&gt;Different method are considered here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- nearest neighbour
- nearest neighbours, weighting with the inverse of distance squared: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$T&lt;em&gt;t = \frac{\sum&lt;/em&gt;{i=1}^{m}T_{s,i}w&lt;em&gt;i}{\sum&lt;/em&gt;{i=1}^{m}w_i}$, $w_i = 1/d_i^2$).&lt;/p&gt;

&lt;p&gt;In this example, we will interpolate &lt;a href=&#34;https://daymet.ornl.gov/&#34; target=&#34;_blank&#34;&gt;Daymet-1km dataset&lt;/a&gt; on &lt;a href=&#34;https://www.ecmwf.int/en/forecasts/datasets/reanalysis-datasets/era5&#34; target=&#34;_blank&#34;&gt;ERA5-grid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Daymet dataset provides gridded estimates of daily weather parameters. Seven surface weather parameters are available at a daily time step, 1 km x 1 km spatial resolution, with a North American spatial extent.&lt;/p&gt;

&lt;p&gt;ERA5 Reanalyses provide a numerical description, with horizontal resolution of 31 km, of the recent climate (1979-present) by combining models with observations.&lt;/p&gt;

&lt;h2 id=&#34;1-let-s-import-python-librairies&#34;&gt;1-  Let&amp;rsquo;s import Python librairies&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
%matplotlib inline
#for Netcdf manipulation
import xarray as xr

#for array manipulation
import numpy as np
import pandas as pd

#for plotting
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pylab as plt

#for interpolation
from scipy.spatial import cKDTree
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-loading-source-file&#34;&gt;2 - Loading source file&lt;/h2&gt;

&lt;p&gt;We are going to use daily maximum temperature of Daymet-1km for january 2017. In this analysis, we will use a subset of Daymet-1km and ERA5-32km. Indeed, we will only work over a specific watershed in Canada: Outaouais river&amp;rsquo;s watershed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;watershed.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;source = xr.open_dataset(&#39;DAYMET_1km_subset_BV_tmax_2017_01.nc4&#39;)
lat_source = source.variables[&#39;lat&#39;][:]
lon_source = source.variables[&#39;lon&#39;][:]
lat_source.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(678, 702)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-loading-target-file&#34;&gt;3- Loading target file&lt;/h2&gt;

&lt;p&gt;We want to interpolate our source file on ERA5-grid. Let&amp;rsquo;s load ERA5 reanalysis as target grid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;target = xr.open_dataset(&#39;ERA5_Outaouais_daily_tmax_201701.nc&#39;)
lat_target=target.latitude
lon_target=target.longitude
lat_target.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(29,)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ERA5 latitude and longitude are 1D array dimension.  We must convert these 1-dimensional arrays into  2-dimensional arrays.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lon_target2d, lat_target2d = np.meshgrid(lon_target, lat_target)
lon_target2d.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(29, 121)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This next function will be use for converting lat/lon to cartesian coordinates (x, y, z):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def lon_lat_to_cartesian(lon, lat):
    # WGS 84 reference coordinate system parameters
    A = 6378.137 # major axis [km]   
    E2 = 6.69437999014e-3 # eccentricity squared 
    
    lon_rad = np.radians(lon)
    lat_rad = np.radians(lat)
    # convert to cartesian coordinates
    r_n = A / (np.sqrt(1 - E2 * (np.sin(lat_rad) ** 2)))
    x = r_n * np.cos(lat_rad) * np.cos(lon_rad)
    y = r_n * np.cos(lat_rad) * np.sin(lon_rad)
    z = r_n * (1 - E2) * np.sin(lat_rad)
    return x,y,z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now all necessary inputs are read in memory, we can now convert lat/lon to the Cartesian coordinate reference system (CRS):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;xs, ys, zs = lon_lat_to_cartesian(lon_source.values.flatten(), lat_source.values.flatten())
xt, yt, zt = lon_lat_to_cartesian(lon_target2d.flatten(), lat_target2d.flatten())
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-step1-construct-the-ckdtree-object&#34;&gt;4- Step1:  construct the cKDTree object&lt;/h2&gt;

&lt;p&gt;We can then create a KD-tree with the set of points within which we want to search for a closest point in our source grid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tree = cKDTree(np.column_stack((xs, ys, zs)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-step2-interpolation-on-target-grid&#34;&gt;5- Step2: Interpolation on target grid&lt;/h2&gt;

&lt;p&gt;The second step provides a query point and returns the closest point or points in the KD-tree to the query point, where how &amp;ldquo;closest&amp;rdquo; is defined can be varied.&lt;/p&gt;

&lt;p&gt;Here, we use 3D points on spherical Earth with unit radius.&lt;/p&gt;

&lt;p&gt;Two methods of interpolation are considered here: nearest neighbour and weighting with the inverse of distance squared.&lt;/p&gt;

&lt;h3 id=&#34;a-nearest-neighbour-interpolation&#34;&gt;a- Nearest neighbour interpolation&lt;/h3&gt;

&lt;p&gt;In this step, we find indices of the nearest neighbors in the flattened array using our &amp;lsquo;tree&amp;rsquo; from step1.  To do this, we will apply
&lt;a href=&#34;https://docs.scipy.org/doc/scipy-0.12.0/reference/generated/scipy.spatial.cKDTree.query.html#scipy.spatial.cKDTree.query&#34; target=&#34;_blank&#34;&gt;cKDTree.query method&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#find indices of the nearest neighbors in the flattened array
#d, inds = tree.query(zip(xt, yt, zt), k = 1)
d, inds = tree.query(np.column_stack((xt, yt, zt)), k = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now interpolate our 2d field using our index tree. We will interpolate our first timestep for daymet source file (ie datetime64[ns] 2017-01-01T12:00:00)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#get interpolated 2d field
air_nearest = source.tmax[0].values.flatten()[inds].reshape(lon_target2d.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;b-interpolation-using-inverse-distance-weighting-using-10-nearest-neighbours-k-10&#34;&gt;b- Interpolation using inverse distance weighting, using 10 nearest neighbours (k=10):&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d, inds = tree.query(np.column_stack((xt, yt, zt)), k = 10)
w = 1.0 / d**2
air_idw = np.sum(w * source.tmax[0].values.flatten()[inds], axis=1) / np.sum(w, axis=1)
air_idw.shape = lon_target2d.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-plot-the-results&#34;&gt;6- Plot the results:&lt;/h2&gt;

&lt;p&gt;Now let us plot the results from these two approaches. For ERA5-target grid, we will apply a mask to visualize the same watershed.
This mask was created using a shapefile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MASK = xr.open_dataset(&#39;Outaouais_ERA5_Grid.nc&#39;)
lat1d=MASK.variables[&#39;latitude&#39;][:]
lon1d=MASK.variables[&#39;longitude&#39;][:]
lon2d, lat2d = np.meshgrid(lon1d, lat1d)
mask = MASK[&#39;tp&#39;][ :, :]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(28,20))

subplot(221)
plt.pcolormesh(source.tmax[0,:,:].values.transpose())
plt.xlim([0, source.tmax[0,:,:].shape[0]])
plt.ylim([0, source.tmax[0,:,:].shape[1]])
plt.colorbar()
plt.title(&amp;quot;Daymet grid&amp;quot;, size=&#39;xx-large&#39;)

subplot(222)
plt.pcolormesh(target.t2m[0,:,:].where(mask.values&amp;gt;=0).values.transpose())
plt.xlim([0, target.t2m[0,:,:].shape[0]])
plt.ylim([0, target.t2m[0,:,:].shape[1]])
plt.colorbar()
plt.title(&amp;quot;ERA5 grid&amp;quot;, size=&#39;xx-large&#39;)

subplot(223)
plt.pcolormesh(air_nearest.transpose())
plt.xlim([0, air_nearest.shape[0]])
plt.ylim([0, air_nearest.shape[1]])
plt.colorbar()
plt.title(&amp;quot;Daymet on ERA5 grid Nearest neighbor&amp;quot;, size=&#39;xx-large&#39;)

subplot(224)
plt.pcolormesh(air_idw.transpose())
plt.colorbar()
plt.xlim([0, air_idw.shape[0]])
plt.ylim([0, air_idw.shape[1]])
plt.title(&amp;quot;Daymet on  ERA5 grid IDW of square distance \n using 10 neighbors&amp;quot;, size=&#39;xx-large&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_26_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This was a quick plot, let&amp;rsquo;s make better plots using Cartopy library.&lt;/p&gt;

&lt;p&gt;We first define a function to create the map subplots:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def plot_background(ax):
    ax.set_extent([-82,-73,45,49])
    ax.coastlines(resolution=&#39;110m&#39;);
    ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      
    ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       
    ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))     
    ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    
    ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))    
    coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,    
                        facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
    ax.add_feature(coast, edgecolor=&#39;black&#39;)
    
    states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;10m&#39;,
        facecolor=&#39;none&#39;)

    ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)

   
    return ax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will plot the two different interpolations (a) and (b):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(28,12))
from matplotlib.gridspec import GridSpec
cmap0=plt.cm.jet
cmap0.set_under(&#39;darkblue&#39;) 
cmap0.set_over(&#39;darkred&#39;)

gs = GridSpec(1,3, width_ratios=[1,1, 0.05], wspace = 0.05)
crs=ccrs.LambertConformal()
# Left plot - ERA5 grid Nearest neighbor
ax1 = plt.subplot(gs[0, 0], projection=crs)
plot_background(ax1)
ax1.contourf(lon_target2d,\
                   lat_target2d,\
                   air_nearest,\
                   vmin=-15,\
                   vmax=5, \
                   transform=ccrs.PlateCarree(),\
                   levels=np.arange(-15, 5, 1.0),\
                   cmap=cmap0 )
ax1.contour(lon_target2d, lat_target2d, air_nearest, 
                          levels = np.arange(-15, 5, 1.0), 
                          linewidths=2, 
                          colors=&#39;k&#39;,
                          transform = ccrs.PlateCarree())
ax1.scatter(lon_target2d, lat_target2d, transform=ccrs.PlateCarree(), s=0.5)
string_title=u&#39;Daymet on ERA5 grid Nearest neighbor: 2017-01-01&#39;
plt.title(string_title, size=&#39;xx-large&#39;)

# Right plot - ERA5 grid IDW of square distance 
ax2 = plt.subplot(gs[0, 1], projection=crs)

plot_background(ax2)
mm = ax2.contourf(lon_target2d,\
                   lat_target2d,\
                   air_idw,\
                   vmin=-15,\
                   vmax=5, \
                   transform=ccrs.PlateCarree(),\
                   levels=np.arange(-15, 5, 1.0),\
                   cmap=cmap0 )
ax2.contour(lon_target2d, lat_target2d, air_idw, 
                          levels = np.arange(-15, 5, 1.0), 
                          linewidths=2, 
                          colors=&#39;k&#39;,
                          transform = ccrs.PlateCarree())

ax2.scatter(lon_target2d, lat_target2d, transform=ccrs.PlateCarree(), s=0.5)
string_title=u&#39;Daymet on  ERA5 grid IDW of square distance \n using 10 neighbors: 2017-01-01 &#39;
plt.title(string_title, size=&#39;xx-large&#39;)
ax = fig.add_subplot(gs[0,2])
plt.colorbar(mm,  shrink=0.75, drawedges=&#39;True&#39;, ticks=np.arange(-15, 5.1, 1.), extend=&#39;both&#39;, cax = ax)
cbar.ax.tick_params(labelsize=20) 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_30_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We plot Daymet-1km and ERA5 datasets for the same date: 2017-01-01&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(28,12))
from matplotlib.gridspec import GridSpec
cmap0=plt.cm.jet
cmap0.set_under(&#39;darkblue&#39;) 
cmap0.set_over(&#39;darkred&#39;)

gs = GridSpec(1,3, width_ratios=[1,1, 0.05], wspace = 0.05)
crs=ccrs.LambertConformal()
# Left plot: Daymet: source grid
ax1 = plt.subplot(gs[0, 0], projection=crs)
plot_background(ax1)
ax1.contourf(lon_s,\
                   lat_s,\
                   source.tmax[0,:,:],\
                   vmin=-15,\
                   vmax=5, \
                   transform=ccrs.PlateCarree(),\
                   levels=np.arange(-15, 5, 1.0),\
                   cmap=cmap0 )
ax1.contour(lon_s, lat_s, source.tmax[0,:,:], 
                          levels = np.arange(-15, 5, 1.0), 
                          linewidths=2, 
                          colors=&#39;k&#39;,
                          transform = ccrs.PlateCarree())
string_title=u&#39;Daymet 1km: Tmax: 2017-01-01&#39;
plt.title(string_title, size=&#39;xx-large&#39;)

# Right plot: ERA5: target grid
ax2 = plt.subplot(gs[0, 1], projection=crs)

plot_background(ax2)
mm = ax2.contourf(lon_target2d,\
                   lat_target2d,\
                   target.t2m[0,:,:].where(mask.values&amp;gt;=0),\
                   vmin=-15,\
                   vmax=5, \
                   transform=ccrs.PlateCarree(),\
                   levels=np.arange(-15, 5, 1.0),\
                   cmap=cmap0 )
ax2.contour(lon_target2d, lat_target2d, target.t2m[0,:,:].where(mask.values&amp;gt;=0), 
                          levels = np.arange(-15, 5, 1.0), 
                          linewidths=2, 
                          colors=&#39;k&#39;,
                          transform = ccrs.PlateCarree())
string_title=u&#39;ERA5 grid: Tmax: 2017-01-01&#39;
plt.title(string_title, size=&#39;xx-large&#39;)
ax = fig.add_subplot(gs[0,2])
plt.colorbar(mm,  shrink=0.75, drawedges=&#39;True&#39;, ticks=np.arange(-15, 5.1, 1.), extend=&#39;both&#39;, cax = ax)
cbar.ax.tick_params(labelsize=50) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_32_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-saving-netcdf-files-with-every-daily-timesteps&#34;&gt;7- Saving Netcdf files with every daily timesteps:&lt;/h2&gt;

&lt;p&gt;We can work and interpolate for one timestep (ie 2017-01-01). We can now create a function to interpolate every timesteps of our source grid on target grid and then save the result array into netcdf file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d, inds = tree.query(np.column_stack((xt, yt, zt)), k = 10)
w = 1.0 / d**2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def interpolate(source, target, d, inds):    
    nt = source[&amp;quot;time&amp;quot;].shape[0]
    tmp = []
    for t in range(0, nt):        
        result = np.zeros(target.shape)
        w = 1.0 / d**2
        air_idw = np.sum(w * source.tmax[t].values.flatten()[inds], axis=1) / np.sum(w, axis=1)
        air_idw.shape = target.shape
        tmp.append(air_idw)
    return tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;source = xr.open_dataset(&#39;DAYMET_1km_subset_BV_tmax_2017_01.nc4&#39;)
target = xr.open_dataset(&#39;ERA5_Outaouais_daily_tmax_201701.nc&#39;)
lon_target=target.longitude
lat_target=target.latitude
lon_target2d, lat_target2d = np.meshgrid(lon_target, lat_target)

air_idw = interpolate(source,lon_target2d, d, inds)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now save our numpy array to xarray and then into netcdf file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_set = xr.Dataset( coords={&#39;lon&#39;: ([ &#39;lon&#39;], lon_target),
                                     &#39;lat&#39;: ([&#39;lat&#39;,], lat_target),
                                     &#39;time&#39;: source.time.values})
data_set[&amp;quot;tasmax&amp;quot;] = ([&#39;time&#39;,&#39;lat&#39;, &#39;lon&#39;],  air_idw)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_set.to_netcdf(&#39;DAYMET_32km_subset_BV_tmax_2017_01.nc&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_set
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:  (lat: 29, lon: 121, time: 31)
Coordinates:
  * lon      (lon) float32 270.0 270.25 270.5 270.75 ... 299.5 299.75 300.0
  * lat      (lat) float32 50.0 49.75 49.5 49.25 49.0 ... 43.75 43.5 43.25 43.0
  * time     (time) datetime64[ns] 2017-01-01T12:00:00 ... 2017-01-31T12:00:00
Data variables:
    tasmax   (time, lat, lon) float64 nan nan nan nan nan ... nan nan nan nan&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Working with ERA5 reanalysis</title>
      <link>/post/era5_analyse/</link>
      <pubDate>Sun, 05 Apr 2020 12:49:01 -0700</pubDate>
      <guid>/post/era5_analyse/</guid>
      <description>

&lt;p&gt;﻿&lt;/p&gt;

&lt;h3 id=&#34;exemples-using-era5-reanalysis&#34;&gt;Exemples using ERA5 reanalysis&lt;/h3&gt;

&lt;p&gt;In this post, we will work with ERA5 reanalysis and show how to extract a region using shapefile and compute standard deviation.&lt;/p&gt;

&lt;p&gt;We first import our librairies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from netCDF4 import Dataset, num2date
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
import datetime
import xarray as xr
import pandas as pd
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import xarray as xr 
import numpy as np
import regionmask
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;working-over-canadian-provinces&#34;&gt;Working over canadian provinces&lt;/h3&gt;

&lt;p&gt;Canadian province shapefiles are available on this  &lt;a href=&#34;https://www.arcgis.com/home/item.html?id=5cf4f223c4a642eb9aa7ae1216a04372&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;After downloaded the shapefiles, we must load it using geopandas library:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;PATH_TO_SHAPEFILE = &#39;./Canadian_province/lpr_000b16a_e/lpr_000b16a_e.shp&#39;
province = gpd.read_file(PATH_TO_SHAPEFILE)
province.iloc[:,:-1]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;PRUID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PRNAME&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PRENAME&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PRFNAME&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PREABBR&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PRFABBR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Newfoundland and Labrador / Terre-Neuve-et-Labrador&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Newfoundland and Labrador&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Terre-Neuve-et-Labrador&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.L.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T.-N.-L.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Prince Edward Island / Île-du-Prince-Édouard&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Prince Edward Island&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Île-du-Prince-Édouard&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;P.E.I.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Î.-P.-É.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nova Scotia / Nouvelle-Écosse&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nova Scotia&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nouvelle-Écosse&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.S.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.-É.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;New Brunswick / Nouveau-Brunswick&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;New Brunswick&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nouveau-Brunswick&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.B.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.-B.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec / Québec&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Québec&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Que.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Qc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ontario&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ontario&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ontario&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ont.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ont.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Manitoba&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Manitoba&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Manitoba&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Man.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Man.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saskatchewan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saskatchewan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saskatchewan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sask.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sask.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alberta&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alberta&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alberta&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alta.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alb.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;British Columbia / Colombie-Britannique&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;British Columbia&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Colombie-Britannique&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;B.C.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C.-B.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yukon&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yukon&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yukon&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y.T.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yn&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;61&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Northwest Territories / Territoires du Nord-Ouest&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Northwest Territories&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Territoires du Nord-Ouest&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.W.T.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T.N.-O.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nunavut&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nunavut&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nunavut&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nvt.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tmpWGS84 = province.to_crs({&#39;proj&#39;:&#39;longlat&#39;, &#39;ellps&#39;:&#39;WGS84&#39;, &#39;datum&#39;:&#39;WGS84&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tmpWGS84.plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x436e8908&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_5_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Shapes are here a GeoDataFrame containing all polygons illustrating the canadian province boundaries.&lt;/p&gt;

&lt;p&gt;Now we can load the ERA5 gridded data. The parameter chunks is very important, it defines how big are the “pieces” of data moved from the disk to the memory. With this value the entire computation on a workstation with 32 GB takes a couple of minutes.&lt;/p&gt;

&lt;p&gt;We will load all the temperature files for the year 2018 using Xarray library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model=&#39;ERA5_T2m_1h&#39;
t_in = &#39;J:/REANALYSES/ERA5/T2m_1h/&#39;        
data = t_in + model + &#39;_2018*_sfc.nc&#39;
ds = xr.open_mfdataset(data, chunks = {&#39;time&#39;: 10})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next function &lt;b&gt;assign_coords&lt;/b&gt; will convert the longitude from the 0-360 range to -180,180&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds = ds.assign_coords(longitude=(((ds.longitude + 180) % 360) - 180)).sortby(&#39;longitude&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our xarray Dataset contains a single variable (t2m) which is stored as a dask.array. This is the result of loading files with open_mfdataset.&lt;/p&gt;

&lt;p&gt;Now we will use  regionmask module to create a gridded mask with the function regions_cls documented &lt;a href=&#34;https://regionmask.readthedocs.io/en/stable/generated/regionmask.Regions_cls.html#regionmask.Regions_cls&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this function we will create an object able to mask ERA5 gridded data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;province_mask_poly = regionmask.Regions_cls(name = &#39;PRENAME&#39;, numbers = list(range(0,13)), names = list(tmpWGS84.PRENAME), abbrevs = list(tmpWGS84.PRENAME), outlines = list(tmpWGS84.geometry.values[i] for i in range(0,13)))
province_mask_poly
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;13 &#39;PRENAME&#39; Regions ()
Newfoundland and Labrador Prince Edward Island Nova Scotia New Brunswick Quebec Ontario Manitoba Saskatchewan Alberta British Columbia Yukon Northwest Territories Nunavut
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to apply the mask on the gridded dataset xarray ERA5.&lt;/p&gt;

&lt;p&gt;We select only the first timestep to speed up the process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask = province_mask_poly.mask(ds.isel(time = 0), lat_name=&#39;latitude&#39;, lon_name=&#39;longitude&#39;)
mask.to_netcdf(&#39;ERA5_mask_Canadian_provinces.nc&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;masque = xr.open_mfdataset(&#39;ERA5_mask_Canadian_provinces.nc&#39;)
lat_bnd = [84, 40]
lon_bnd = [-148, -50]
masque = masque.sel(longitude=slice(*lon_bnd), latitude=slice(*lat_bnd),)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s a function to make maps in the future.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def make_figure():
    fig=plt.figure(figsize=(18,8), frameon=True) 
    ax = plt.axes(projection=ccrs.LambertConformal())
    ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
    ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
    ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac

    ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;), linestyle=&#39;dotted&#39;)    # couche frontieres
    ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières 
    coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                                facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
    ax.add_feature(coast, edgecolor=&#39;black&#39;)   
    return fig, ax

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can make a quick visualisation of our netcdf mask:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_, ax = make_figure()
ax.set_extent([-140,-50,32,82])
masque.region.plot.contourf(ax = ax, transform=ccrs.PlateCarree())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.contour.QuadContourSet at 0x16563e48&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_18_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;compute-daily-and-monthly-2-meters-temperature-mean&#34;&gt;Compute daily and monthly 2 meters temperature  mean&lt;/h3&gt;

&lt;p&gt;We will now compute daily and monthly 2 meters temperature mean using hourly ERA5 datasets. To speed up our calcul, we will cut a subset over Canada only.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example code just for one month and one year:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model=&#39;ERA5_T2m_1h&#39;

yi = 1990
yf = 1990
#########################################################
t_in = &#39;J:/REANALYSES/ERA5/T2m_1h/&#39;
daily_out = &#39;J:/REANALYSES/ERA5/T2m_daily/&#39; 
monthly_out = &#39;J:/REANALYSES/ERA5/T2m_monthly/&#39; 
for year in range(yi,yf+1):                    # loop over years
    for i in range (1,2,1):                   # loop over months
        
        data = t_in + model + &#39;_&#39;+str(year) +&#39;{:02d}&#39;.format(i)+&#39;_sfc.nc&#39;
        ds = xr.open_mfdataset(data)        
        ds = ds - 273.15  # convert from Kelvin to Celcius 
        ds = ds.assign_coords(longitude=(((ds.longitude + 180) % 360) - 180)).sortby(&#39;longitude&#39;)
        
        lat_bnd = [84, 40]
        lon_bnd = [-148, -50]
        ds = ds.sel(longitude=slice(*lon_bnd), latitude=slice(*lat_bnd),)
        
        daily_mean = ds.groupby(&#39;time.day&#39;).mean(&#39;time&#39;)
        daily_mean.to_netcdf(daily_out + &#39;Daily_Mean_T2m_CAN_&#39;+str(year) +&#39;{:02d}&#39;.format(i)+&#39;.nc&#39;)
        
        monthly_mean = daily_mean.mean(&#39;day&#39;)
        monthly_mean.to_netcdf(monthly_out + &#39;Monthly_Mean_T2m_CAN_&#39;+str(year) +&#39;{:02d}&#39;.format(i)+&#39;.nc&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;monthly-climatologies-and-standardized-anomalies&#34;&gt;Monthly climatologies and standardized anomalies&lt;/h3&gt;

&lt;p&gt;Once we have monthly mean values, we can now compute climatology and standard anomaly for monthly temperature from 1979 to 2019. Our reference climatology to compute standardized anomalies is 1990-2019 period.&lt;/p&gt;

&lt;p&gt;We will first work with one month (ie january), we will make a loop over all months after.&lt;/p&gt;

&lt;p&gt;First we open and load datasets:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xarray as xr 

#### First we open and load datasets
#for month in range (1,2,1):
m = 1
file = &#39;J:/REANALYSES/ERA5/T2m_monthly/Monthly_Mean_T2m_CAN_&#39;
month = &#39;{:02d}&#39;.format(m)
multi_file = [f&#39;{file}{year}{month}.nc&#39; for year in range(1990,2020,1)]
ds_all = xr.concat([xr.open_dataset(f) for f in multi_file], &#39;time&#39;)
ds_all.time
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&amp;lt;xarray.DataArray &amp;#x27;time&amp;#x27; (time: 30)&amp;gt;
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
       18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], dtype=int64)
Dimensions without coordinates: time&lt;/pre&gt;

&lt;p&gt;Our time is without dimension, it&amp;rsquo;s just an integer. To easly handle our fields, we can define a DatetimeIndex to change &amp;lsquo;time&amp;rsquo; dimension in our Xarray. For more &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases&#34; target=&#34;_blank&#34;&gt;information&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds_all[&#39;time&#39;] = pd.date_range(&#39;1990-&#39;+month+&#39;-01&#39;, freq=&#39;YS&#39;, periods=ds_all.time.shape[0])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds_all.time.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&amp;lt;xarray.DataArray &amp;#x27;time&amp;#x27; (time: 5)&amp;gt;
array([&amp;#x27;1990-01-01T00:00:00.000000000&amp;#x27;, &amp;#x27;1991-01-01T00:00:00.000000000&amp;#x27;,
       &amp;#x27;1992-01-01T00:00:00.000000000&amp;#x27;, &amp;#x27;1993-01-01T00:00:00.000000000&amp;#x27;,
       &amp;#x27;1994-01-01T00:00:00.000000000&amp;#x27;], dtype=&amp;#x27;datetime64[ns]&amp;#x27;)
Coordinates:
  * time     (time) datetime64[ns] 1990-01-01 1991-01-01 ... 1994-01-01&lt;/pre&gt;

&lt;p&gt;We can compute our climatology and standard deviation over 30 years: 1990-2019&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;clim_yi = 1990
clim_yf = 2019
ds_clim =  ds_all.sel(time=slice(str(clim_yi)+&#39;-&#39;+month+&#39;-01&#39;, str(clim_yf)+&#39;-&#39;+month+&#39;-01&#39;))
data_clim = ds_clim.variables[&#39;t2m&#39;][:].mean(&amp;quot;time&amp;quot;)
data_std  = ds_clim.variables[&#39;t2m&#39;][:].std(&amp;quot;time&amp;quot;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can apply a function with .apply_unfunc and groupby methods to compute a standardized anomaly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stand_anomalies = xr.apply_ufunc(
    lambda x, m, s: (x - m) / s,
    ds_all.groupby(&amp;quot;time&amp;quot;),
    data_clim,
    data_std,
)

stand_anomalies.to_netcdf(&#39;J:/REANALYSES/ERA5/T2m_Month_Anomaly/Std_Anomaly_Monthly_Mean_T2m_CAN_&#39;+
                          str(yi)+&#39;-&#39;+str(yf)+&#39;_vs_&#39;+str(clim_yi)+&#39;-&#39;+str(clim_yf)+&#39;_&#39;+str(month)+&#39;.nc&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will mask all Canadian provinces with applying our mask region created at the begining of this post:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_clim_can = data_clim.where(masque.region &amp;gt;= 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now display january monthly mean temperature climatology:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_, ax = make_figure()
ax.set_extent([-140,-50,32,82])
import matplotlib as mpl
import datetime
monthstr = datetime.date(1900, int(month), 1).strftime(&#39;%B&#39;)
data_levels = np.arange(-35, 30, 5.1)
Y=np.array([[77,0,111],[115,14,181],[160,17,222],[195,14,240],\
               [0,0,93],[21,38,177],[33,95,227],[32,162,247],[59,224,248],[202,255,250],\
               [4,255,179],[37,181,139],[32,132,81],[72,162,60],[157,240,96],[213,255,166],\
               [241,247,132],[248,185,68],[255,124,4],[235,78,14],[215,32,24],[189,24,40],[162,16,56],[135,16,65],[107,15,73]])/255.

colbar=mpl.colors.ListedColormap(Y)
mm = ax.contourf(data_clim_can.longitude,\
                   data_clim_can.latitude,\
                   data_clim_can,\
                   vmin=-35,\
                   vmax= 30, \
                   transform=ccrs.PlateCarree(),\
                   levels=data_levels,\
                   cmap=colbar )

data_contour = ax.contour(data_clim_can.longitude, data_clim_can.latitude, data_clim_can, 
                          levels = data_levels, 
                          linewidths=2, 
                          colors=&#39;k&#39;,
                          transform = ccrs.PlateCarree())
#Plot contour labels for the heights, leaving a break in the contours for the text (inline=True)
plt.clabel(data_contour,  data_levels, inline=True, fmt=&#39;%1i&#39;, fontsize=12)
# Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)

cbar = plt.colorbar(mm,  shrink=0.75, drawedges=&#39;True&#39;, ticks=np.arange(-35, 30.1, 5.), extend=&#39;both&#39;) # 2018

cbar.ax.tick_params(labelsize=20) 

string_title=u&#39;Climatology of monthly mean 2meters temperature: &#39; + monthstr
plt.title(string_title, size=&#39;xx-large&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Text(0.5, 1.0, &#39;Climatology of monthly mean 2meters temperature: January&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_34_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If we just want to display over one province, we can adjust our mask.  Let&amp;rsquo;s plot climatology over Quebec:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_clim_qc = data_clim.where(masque.region == 4  )
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;_, ax = make_figure()
ax.set_extent([-80,-60,45,65])
monthstr = datetime.date(1900, int(month), 1).strftime(&#39;%B&#39;)
data_levels = np.arange(-35, 30, 5.1)
Y=np.array([[77,0,111],[115,14,181],[160,17,222],[195,14,240],\
               [0,0,93],[21,38,177],[33,95,227],[32,162,247],[59,224,248],[202,255,250],\
               [4,255,179],[37,181,139],[32,132,81],[72,162,60],[157,240,96],[213,255,166],\
               [241,247,132],[248,185,68],[255,124,4],[235,78,14],[215,32,24],[189,24,40],[162,16,56],[135,16,65],[107,15,73]])/255.

colbar=mpl.colors.ListedColormap(Y)

data_levels = np.arange(-35, 30, 5.1)

mm = ax.contourf(data_clim_qc.longitude,\
                   data_clim_qc.latitude,\
                   data_clim_qc,\
                   vmin=-35,\
                   vmax= 30, \
                   transform=ccrs.PlateCarree(),\
                   levels=data_levels,\
                   cmap=colbar )

data_contour = ax.contour(data_clim_qc.longitude, data_clim_qc.latitude, data_clim_qc, 
                          levels = data_levels, 
                          linewidths=2, 
                          colors=&#39;k&#39;,
                          transform = ccrs.PlateCarree())
#Plot contour labels for the heights, leaving a break in the contours for the text (inline=True)
plt.clabel(data_contour,  data_levels, inline=True, fmt=&#39;%1i&#39;, fontsize=12)
# Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)

cbar = plt.colorbar(mm,  shrink=0.75, drawedges=&#39;True&#39;, ticks=np.arange(-35, 30.1, 5.), extend=&#39;both&#39;) # 2018

cbar.ax.tick_params(labelsize=20) 

string_title=u&#39;ERA5 T2m Climatology (1990-2019) over Quebec &#39; + monthstr
plt.title(string_title, size=&#39;xx-large&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Text(0.5, 1.0, &#39;ERA5 T2m Climatology (1990-2019) over Quebec January&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_37_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;inter-annual-standardised-anomaly&#34;&gt;Inter-annual standardised anomaly&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s compute and draw inter-annual standardised anomaly over Quebec:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stand_anomalies_qc  = stand_anomalies.where(masque.region == 4)
stand_anomalie_serie = stand_anomalies_qc.mean([&#39;latitude&#39;,&#39;longitude&#39;])
stand_anomalie_serie.time.values[-1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;numpy.datetime64(&#39;2019-01-01T00:00:00.000000000&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;color = [&#39;black&#39;,&#39;blue&#39;, &#39;red&#39;]
fig = plt.figure(figsize=(18, 12)) 


plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]       #  
plt.plot(stand_anomalie_serie.time.values, stand_anomalie_serie.t2m.values, 
         label=&#39;ERA5 2m temperature&#39;, linewidth=2, c=color[2])
plt.legend(loc=&amp;quot;upper left&amp;quot;, markerscale=1., scatterpoints=1, fontsize=20)

plt.yticks( fontsize=14)

ax.grid(axis = &amp;quot;x&amp;quot;, linestyle = &amp;quot;--&amp;quot;, color=&#39;black&#39;, linewidth=0.25, alpha=0.5)
ax.grid(axis = &amp;quot;y&amp;quot;, linestyle = &amp;quot;--&amp;quot;, color=&#39;black&#39;, linewidth=0.25, alpha=0.5)

plt.setp(plt.gca().get_xticklabels(), rotation=45, ha=&amp;quot;right&amp;quot;)

plt.xlabel(&#39;Date&#39;, fontsize=20, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.ylabel(&#39;°C&#39;, fontsize=20, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.title(&#39;Inter annual standardised anomaly of monthly mean temperature over Quevec in January: (1990-2019) compared with normal (1990-2019)&#39;, fontsize=20, color=&#39;black&#39;, weight=&#39;semibold&#39;)
 
ax.set_facecolor(&#39;white&#39;)
plt.yticks( fontsize=14)
plt.show()  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_40_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with XML climate data</title>
      <link>/post/working_with_xml_climate_data/</link>
      <pubDate>Tue, 10 Mar 2020 11:16:07 -0700</pubDate>
      <guid>/post/working_with_xml_climate_data/</guid>
      <description>

&lt;p&gt;﻿
In this tutorial, we will extract Hourly Observation from ECCC and display hourly temperature using plotly library.&lt;/p&gt;

&lt;p&gt;We are going to work here with the hourly weather observations data found on the ECCC Datamart.&lt;/p&gt;

&lt;p&gt;These observations data are subject to quality control.
Any value that does not pass quality control is deleted.
This includes values that are categorized as questionable.&lt;/p&gt;

&lt;p&gt;For each province or territory, one file for one specific hour contains:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The coldest place and temperature in Canada for this hour&lt;/li&gt;
&lt;li&gt;The hottest location and temperature in Canada for this hour&lt;/li&gt;
&lt;li&gt;The coldest place and temperature in the province or territory for this hour&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The hottest location and temperature in the province for territory for this hour&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The observations and the records of the stations available in this province:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Present condition (expression)&lt;/li&gt;
&lt;li&gt;Sea level pressure (kPa)&lt;/li&gt;
&lt;li&gt;Value of the pressure trend (kPa)&lt;/li&gt;
&lt;li&gt;Pressure trend (upward, downward, or stable)&lt;/li&gt;
&lt;li&gt;Visibility (km)&lt;/li&gt;
&lt;li&gt;Air temperature (° C)&lt;/li&gt;
&lt;li&gt;Dew point (° C)&lt;/li&gt;
&lt;li&gt;Relative humidity (%)&lt;/li&gt;
&lt;li&gt;Wind speed (km / h)&lt;/li&gt;
&lt;li&gt;Wind direction (code)&lt;/li&gt;
&lt;li&gt;Burst speed (km / h)&lt;/li&gt;
&lt;li&gt;Cloud cover&lt;/li&gt;
&lt;li&gt;Wind Chill&lt;/li&gt;
&lt;li&gt;Humidex&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;stations-information&#34;&gt;Stations information:&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;For each station, the following information is available:
* Station name
* Latitude (decimal degree)
* Longitude (decimal degree)
* Transport Canada identification number
* Observation times are in UTC time and local time
* Climate station ID
* WMO station number&lt;/p&gt;

&lt;p&gt;There are over 500 observation stations in Canada. However, this number is constantly evolving. The stations are present in the files only if observation data are available.&lt;/p&gt;

&lt;p&gt;&amp;lsquo;swob-xml_station_list.csv&amp;rsquo; document on this &lt;a href=&#34;https://dd.weather.gc.ca/observations/doc/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; is a list of XML observations available.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dd.weather.gc.ca/observations/doc/Met-ML-SchemaDescriptionV2_e.pdf&#34; target=&#34;_blank&#34;&gt;Here&lt;/a&gt; is a full documentation for XML description of observation point meteorological:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.opengeospatial.org/standards/om&#34; target=&#34;_blank&#34;&gt;OpenGIS&lt;/a&gt; : Standards for observations and measurement.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.weatheroffice.gc.ca/mainmenu/faq_f.html&#34; target=&#34;_blank&#34;&gt;Frequently Asked Questions from Environment and Change Weather Service Climate Canada&lt;/a&gt; Frequently Asked Questions from Environment and Change Weather Service Climate Canada. Miscellaneous information about meteorology and climatology.&lt;/p&gt;

&lt;p&gt;Historical climatic data are available on this &lt;a href=&#34;http://climate.weatheroffice.gc.ca&#34; target=&#34;_blank&#34;&gt;site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Synoptic and METAR bulletins can also be found on the &lt;a href=&#34;http://dd.weather.gc.ca/bulletins/doc/README_bulletins.txt&#34; target=&#34;_blank&#34;&gt;MSC HTTP data server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we import python librairies and define the date we want to extract:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime, timedelta
import pandas as pd 
import xml.etree.ElementTree as ET
import wget
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
import os 
from os.path import exists
import requests
import numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will work first with all the stations over Quebec (ie file with prefix hourly&lt;em&gt;qc&lt;/em&gt;):&lt;/p&gt;

&lt;p&gt;We will work on this &lt;a href=&#34;https://dd.weather.gc.ca/observations/xml/&#34; target=&#34;_blank&#34;&gt;directory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We want to extreact the latest value recorded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now = datetime.utcnow() - timedelta(hours=1)
tmp_file = &#39;http://dd.weather.ec.gc.ca/observations/xml/QC/hourly/hourly_qc_&#39;+now.strftime(&amp;quot;%Y%m%d%H&amp;quot;)+&#39;_e.xml&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;wget.download(tmp_file)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;hourly_qc_2020031017_e (1).xml&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tree = ET.parse(&#39;hourly_qc_&#39;+now.strftime(&amp;quot;%Y%m%d%H&amp;quot;)+&#39;_e.xml&#39;)
root=tree.getroot()
children = root.getchildren()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Number of elements in our file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# total amount of items
print(len(root))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;122
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;to-scan-the-elements-of-our-set-ie-the-children-of-our-root&#34;&gt;To scan the elements of our set, ie the children of our &amp;lsquo;root&amp;rsquo;:&lt;/h3&gt;

&lt;p&gt;for child in root.iter(&amp;rsquo;*&amp;lsquo;):&lt;br /&gt;
    #print(child)
    #print(child.attrib)
    #print(child.attrib.get(&amp;lsquo;value&amp;rsquo;))
    print(child.attrib.get(&amp;lsquo;name&amp;rsquo;))&lt;/p&gt;

&lt;h3 id=&#34;example-of-station-detection&#34;&gt;Example of station detection:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for child in root.iter(&#39;*&#39;): 
    if child.attrib.get(&#39;value&#39;) == &#39;7110600&#39;:
        print(child.tag)
        print(&#39;station trouvee&#39;)
        print(child.attrib.get(&#39;name&#39;) + &#39;: 7110600&#39; )
        print(child.items())
        print(child.get(&#39;value&#39;))
        test = tree.find(&#39;.//%s/&#39; % child.tag)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{http://dms.ec.gc.ca/schema/point-observation/2.1}element
station trouvee
climate_station_number: 7110600
[(&#39;name&#39;, &#39;climate_station_number&#39;), (&#39;uom&#39;, &#39;unitless&#39;), (&#39;value&#39;, &#39;7110600&#39;)]
7110600
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The list of variables is available on this &lt;a href=&#34;https://dd.weather.gc.ca/observations/doc/Met-ML-SchemaDescriptionV2_f.pdf&#34; target=&#34;_blank&#34;&gt;document&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;1-observations-extraction&#34;&gt;1- Observations extraction:&lt;/h2&gt;

&lt;p&gt;We will loop over all stations in Quebec and extract some meteorological values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mslp=[]
air=[]  
dew=[]
rel=[]
winds=[]
windd=[]
windc=[]
humidex=[]
stid=[]
present_weather = []
horizontal_visibility = []
station_name = []
latitude = []
longitude = []
for child in root.iter(&#39;*&#39;):      
    if child.attrib.get(&#39;name&#39;) == &#39;present_weather&#39;:
        present_weather.append(child.get(&#39;value&#39;))        
    if child.attrib.get(&#39;name&#39;) == &#39;mean_sea_level&#39;:
        mslp.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;air_temperature&#39;:
        air.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;dew_point&#39;:
        dew.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;relative_humidity&#39;:
        rel.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;wind_speed&#39;:
        winds.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;wind_direction&#39;:
        windd.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;wind_chill&#39;:
        windc.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;humidex&#39;:
        humidex.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;horizontal_visibility&#39;:
        horizontal_visibility.append(child.get(&#39;value&#39;)) 
        
    if child.attrib.get(&#39;name&#39;) == &#39;climate_station_number&#39;:
        stid.append(child.get(&#39;value&#39;)) 
    if child.attrib.get(&#39;name&#39;) == &#39;station_name&#39;:
        station_name.append(child.get(&#39;value&#39;))    
    if child.attrib.get(&#39;name&#39;) == &#39;latitude&#39;:
        latitude.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;longitude&#39;:
        longitude.append(child.get(&#39;value&#39;))        
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;date = now.strftime(&amp;quot;%Y-%m-%d %H:00&amp;quot;)
month =  now.strftime(&amp;quot;%Y%m&amp;quot;)
os.makedirs(month, exist_ok=True)  

data = {&#39;climate_station_number&#39;:stid,
        &#39;station_name&#39;: station_name,
        &#39;latitude&#39;: latitude,
        &#39;longitude&#39;: longitude,
        &#39;date&#39;:date, 
        &#39;mean_sea_level&#39;:mslp,
        &#39;air_temperature&#39;:air,
        &#39;dew_point&#39;:dew,
        &#39;relative_humidity&#39;: rel,
        &#39;wind_speed&#39;:winds,
        &#39;wind_direction&#39;:windd,
        &#39;wind_chill&#39;:windc,
        &#39;humidex&#39;:humidex,
        &#39;horizontal_visibility&#39;:horizontal_visibility } 

data= pd.DataFrame(data).set_index(&amp;quot;climate_station_number&amp;quot;)   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to select a specific station:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data[data[&#39;station_name&#39;]== &#39;Montréal&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;| climate_station_number   | station_name   |   latitude |   longitude | date             |   mean_sea_level |   air_temperature |   dew_point |   relative_humidity |   wind_speed | wind_direction   | wind_chill   | humidex   | horizontal_visibility   |
|:-------------------------|:---------------|-----------:|------------:|:-----------------|-----------------:|------------------:|------------:|--------------------:|-------------:|:-----------------|:-------------|:----------|:------------------------|
| 702S006                  | Montréal       |    45.4678 |    -73.7417 | 2020-03-10 17:00 |            100.7 |               2.1 |         1.5 |                  96 |           10 | NNE              |              |           |                         |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To save our data by stations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for index, row in data.iterrows(): 
    file = &#39;D:/Utilisateurs/guillaume/Documents/GitHub/Python_XML/&#39;+month+&#39;/&#39;+index+&#39;_&#39;+month+&#39;.csv&#39;
    if exists(file):
        #print (&amp;quot;File exist&amp;quot;)
        pd.DataFrame(row).T.to_csv(r&#39;D:/Utilisateurs/guillaume/Documents/GitHub/Python_XML/&#39;+month+&#39;/&#39;+index+&#39;_&#39;+month+&#39;.csv&#39;,mode=&#39;a&#39;,index=False,header=False) 
    else:
        #print (&amp;quot;File not exist&amp;quot;)
        pd.DataFrame(row).T.to_csv(r&#39;D:/Utilisateurs/guillaume/Documents/GitHub/Python_XML/&#39;+month+&#39;/&#39;+index+&#39;_&#39;+month+&#39;.csv&#39;,index=False) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have everything we need to use Plotly library in order to have interactive scatter plots on maps.&lt;/p&gt;

&lt;p&gt;We use the Plotly Express function px.scatter_mapbox to display current temperature observations over Canada.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_province =  [&#39;AB&#39;,&#39;BC&#39;,&#39;MB&#39;,&#39;NB&#39;,&#39;NL&#39;,&#39;NS&#39;,&#39;NT&#39;,&#39;NU&#39;,&#39;ON&#39;,&#39;PE&#39;,&#39;QC&#39;,&#39;SK&#39;,&#39;YT&#39;]

dataset = []
for province in list_province:    
    tmp_file = &#39;http://dd.weather.ec.gc.ca/observations/xml/&#39;+province+&#39;/hourly/hourly_&#39;+province.lower()+&#39;_&#39;+now.strftime(&amp;quot;%Y%m%d%H&amp;quot;)+&#39;_e.xml&#39;
    r = requests.get(tmp_file)
    root = ET.fromstring(r.content)
    latitude = []
    longitude = []
    air=[]  
    stid=[]
    station_name = []
    latitude = []
    longitude = []
    data = []
    
    for child in root.iter(&#39;*&#39;):      
        if child.attrib.get(&#39;name&#39;) == &#39;air_temperature&#39;:
            air.append(child.get(&#39;value&#39;))       
        if child.attrib.get(&#39;name&#39;) == &#39;climate_station_number&#39;:
            stid.append(child.get(&#39;value&#39;)) 
        if child.attrib.get(&#39;name&#39;) == &#39;station_name&#39;:
            station_name.append(child.get(&#39;value&#39;))    
        if child.attrib.get(&#39;name&#39;) == &#39;latitude&#39;:
            latitude.append(child.get(&#39;value&#39;))
        if child.attrib.get(&#39;name&#39;) == &#39;longitude&#39;:
            longitude.append(child.get(&#39;value&#39;))    
    data = {&#39;climate_station_number&#39;:stid,
            &#39;station_name&#39;: station_name,
            &#39;latitude&#39;: latitude,
            &#39;longitude&#39;: longitude,
            &#39;date&#39;:date, 
            &#39;air_temperature&#39;:air } 

    data = pd.DataFrame(data)
    dataset.append(data)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = pd.concat(dataset)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[[&#39;latitude&#39;, &#39;longitude&#39;]] = dataset[[&#39;latitude&#39;, &#39;longitude&#39;]].astype(float)
dataset[[&#39;air_temperature&#39;]] = pd.to_numeric(dataset[&#39;air_temperature&#39;].str.replace(&#39; &#39;, &#39;&#39;)).astype(float)
dataset[&#39;Size&#39;]=([0.5] * len(dataset))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now create our scatter plot using plotly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.express as px
# Create a token in mapbox
token = &#39;**** &#39;

fig = px.scatter_mapbox(dataset,
        lat = &#39;latitude&#39;,
        lon = &#39;longitude&#39;,
        zoom=2.5,
        hover_name=&#39;date&#39;,
        range_color=(-30, 5),
        size=&#39;Size&#39;,
        color=&#39;air_temperature&#39;,
        color_continuous_scale=px.colors.sequential.Jet,
        width = 1000,
        height = 1000
        )
# Configure the style of the map
fig.update_layout(
        mapbox_style=&amp;quot;light&amp;quot;, 
        mapbox_accesstoken=token
    )

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;scatter.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can push our visualization to our plotly account using the following lines of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import chart_studio

username = &#39;username&#39;
api_key = &#39;******&#39;

chart_studio.tools.set_credentials_file(username = username, api_key = api_key)
import chart_studio.plotly as py 
py.plot(fig, filename = &#39;scatter_plot&#39;, auto_open = True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If done correctly, this code should open a new window with your visualization on your account and return the link in your notebook.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;https://plot.ly/~guimeteo/19/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have the &lt;a href=&#34;https://plot.ly/~guimeteo/19/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;  to our plotly visualization (either hosted on plotly or github pages).&lt;/p&gt;

&lt;h2 id=&#34;2-plot-timeserie-for-one-station&#34;&gt;2- Plot timeserie for one station:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
end_date = datetime.utcnow() - timedelta(hours=1) 
start_date = datetime.utcnow() - timedelta(days=14)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mydate = start_date
while mydate &amp;lt; end_date:    
    #print((mydate).strftime(&amp;quot;%Y-%m-%d %H:00&amp;quot;))
    mydate += timedelta(hours=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
end_date = datetime.utcnow() - timedelta(hours=1) 
start_date = datetime.utcnow() - timedelta(days=14)
mydate = start_date
dataset = []
while mydate &amp;lt; end_date:    
    #print((mydate).strftime(&amp;quot;%Y-%m-%d %H:00&amp;quot;))  
    tmp_file = &#39;http://dd.weather.ec.gc.ca/observations/xml/QC/hourly/hourly_qc_&#39;+mydate.strftime(&amp;quot;%Y%m%d%H&amp;quot;)+&#39;_e.xml&#39;
    r = requests.get(tmp_file)
    root = ET.fromstring(r.content)
    air=[]  
    stid=[]
    latitude = []
    longitude = []
    data  = []
    station = [] 
    for child in root.iter(&#39;*&#39;):      
        if child.attrib.get(&#39;name&#39;) == &#39;air_temperature&#39;:
            air.append(child.get(&#39;value&#39;))
        if child.attrib.get(&#39;name&#39;) == &#39;climate_station_number&#39;:
            stid.append(child.get(&#39;value&#39;))       
        if child.attrib.get(&#39;name&#39;) == &#39;latitude&#39;:
            latitude.append(child.get(&#39;value&#39;))
        if child.attrib.get(&#39;name&#39;) == &#39;longitude&#39;:
            longitude.append(child.get(&#39;value&#39;))
        if child.attrib.get(&#39;name&#39;) == &#39;station_name&#39;:
            station.append(child.get(&#39;value&#39;))    

    date = now.strftime(&amp;quot;%Y-%m-%d %H:00&amp;quot;)
    month =  now.strftime(&amp;quot;%Y%m&amp;quot;)

    data = {&#39;climate_station_number&#39;:stid,
            &#39;latitude&#39;: latitude,
            &#39;longitude&#39;: longitude,
            &#39;date&#39;:mydate.strftime(&amp;quot;%Y-%m-%d:%H&amp;quot;), 
            &#39;air_temperature&#39;:air,
            &#39;name station&#39;: station} 
    
    mydate += timedelta(hours=1) 
    
    data = pd.DataFrame(data)
    dataset.append(data)   
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = pd.concat(dataset)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | climate_station_number   |   latitude |   longitude | date          |   air_temperature | name station        |
|---:|:-------------------------|-----------:|------------:|:--------------|------------------:|:--------------------|
|  0 | 7100071                  |    60.8186 |    -78.1486 | 2020-02-25:18 |             -29.9 | Akulivik Airport    |
|  1 | 7110600                  |    59.2967 |    -69.5997 | 2020-02-25:18 |             -26.6 | Aupaluk Airport     |
|  2 | 704S001                  |    49.2592 |    -68.1458 | 2020-02-25:18 |               0.6 | Baie-Comeau         |
|  3 | 7040444                  |    49.1325 |    -68.2044 | 2020-02-25:18 |               2.1 | Baie-Comeau Airport |
|  4 | 7040442                  |    49.1333 |    -68.2    | 2020-02-25:18 |               1.7 | Baie-Comeau Climate |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will plot daily timeserie for station with climate_station_number = &amp;lsquo;702S006&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset1 =  dataset[dataset[&#39;climate_station_number&#39;]==&#39;702S006&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset1.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | climate_station_number   |   latitude |   longitude | date          |   air_temperature | name station   |
|---:|:-------------------------|-----------:|------------:|:--------------|------------------:|:---------------|
| 64 | 702S006                  |    45.4678 |    -73.7417 | 2020-02-25:18 |               4.2 | Montréal       |
| 66 | 702S006                  |    45.4678 |    -73.7417 | 2020-02-25:19 |               3.5 | Montréal       |
| 65 | 702S006                  |    45.4678 |    -73.7417 | 2020-02-25:20 |               4.5 | Montréal       |
| 65 | 702S006                  |    45.4678 |    -73.7417 | 2020-02-25:21 |               5   | Montréal       |
| 65 | 702S006                  |    45.4678 |    -73.7417 | 2020-02-25:22 |               5   | Montréal       |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import datetime
fig = px.line(dataset1, x=&#39;date&#39;, y=&#39;air_temperature&#39;)
fig.update_layout(title_text=&#39;Hourly mean temperature in Montreal&#39;,
                  xaxis_rangeslider_visible=True)
fig.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.io as pio
pio.write_html(fig, file = &#39;timeserie.html&#39;, auto_open = True)
fig.write_image(&amp;quot;timeserie.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;timeserie.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Follow this &lt;a href=&#34;https://plot.ly/~guimeteo/22/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; for interactive plot.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ECCC climate data</title>
      <link>/post/working_with_eccc_climate_data/</link>
      <pubDate>Tue, 10 Mar 2020 09:38:17 -0700</pubDate>
      <guid>/post/working_with_eccc_climate_data/</guid>
      <description>

&lt;p&gt;﻿&lt;/p&gt;

&lt;h2 id=&#34;extract-hourly-daily-and-monthly-climate-data-from-eccc-datamart&#34;&gt;- Extract hourly, daily and monthly climate data from ECCC datamart&lt;/h2&gt;

&lt;p&gt;In this post, we will see how to automatically download all weather data for one station from environment and climate change canada using Python librairies.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the  &lt;a href=&#34;https://climate.weather.gc.ca/&#34; target=&#34;_blank&#34;&gt;URL&lt;/a&gt; to get historical data.&lt;/p&gt;

&lt;p&gt;We will use a daily updated list of Climate stations in the National Archive available on this &lt;a href=&#34;https://drive.google.com/drive/folders/1WJCDEU34c60IfOnG4rv5EPZ4IhhW9vZH&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, we import our python librairies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os
import wget
import numpy as np
import shutil
import xml.etree.ElementTree as ET
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we can open and read the list of Climate stations using Pandas:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;J:/Donnees_Stations/Donnees_EC/Codes/Station_Inventory_EN.csv&#39;, sep=&#39;,&#39;, skiprows=3)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | Name                   | Province         |   Climate ID |   Station ID |   WMO ID |   TC ID |   Latitude (Decimal Degrees) |   Longitude (Decimal Degrees) |   Latitude |   Longitude |   Elevation (m) |   First Year |   Last Year |   HLY First Year |   HLY Last Year |   DLY First Year |   DLY Last Year |   MLY First Year |   MLY Last Year |
|---:|:-----------------------|:-----------------|-------------:|-------------:|---------:|--------:|-----------------------------:|------------------------------:|-----------:|------------:|----------------:|-------------:|------------:|-----------------:|----------------:|-----------------:|----------------:|-----------------:|----------------:|
|  0 | ACTIVE PASS            | BRITISH COLUMBIA |      1010066 |           14 |      nan |     nan |                        48.87 |                       -123.28 |  485200000 | -1231700000 |             4   |         1984 |        1996 |              nan |             nan |             1984 |            1996 |             1984 |            1996 |
|  1 | ALBERT HEAD            | BRITISH COLUMBIA |      1010235 |           15 |      nan |     nan |                        48.4  |                       -123.48 |  482400000 | -1232900000 |            17   |         1971 |        1995 |              nan |             nan |             1971 |            1995 |             1971 |            1995 |
|  2 | BAMBERTON OCEAN CEMENT | BRITISH COLUMBIA |      1010595 |           16 |      nan |     nan |                        48.58 |                       -123.52 |  483500000 | -1233100000 |            85.3 |         1961 |        1980 |              nan |             nan |             1961 |            1980 |             1961 |            1980 |
|  3 | BEAR CREEK             | BRITISH COLUMBIA |      1010720 |           17 |      nan |     nan |                        48.5  |                       -124    |  483000000 | -1240000000 |           350.5 |         1910 |        1971 |              nan |             nan |             1910 |            1971 |             1910 |            1971 |
|  4 | BEAVER LAKE            | BRITISH COLUMBIA |      1010774 |           18 |      nan |     nan |                        48.5  |                       -123.35 |  483000000 | -1232100000 |            61   |         1894 |        1952 |              nan |             nan |             1894 |            1952 |             1894 |            1952 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this Dataframe, we have all informations to select and work with climate stations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name : name of the station&lt;/li&gt;
&lt;li&gt;Province:  province of the station&lt;/li&gt;
&lt;li&gt;Climate ID: Climate ID number&lt;/li&gt;
&lt;li&gt;Station ID: Station ID number&lt;/li&gt;
&lt;li&gt;Latitude: latitude of the station in decimal degrees&lt;/li&gt;
&lt;li&gt;Longitude: longitude of the station in decimal degrees&lt;/li&gt;
&lt;li&gt;First Year: first year of record&lt;/li&gt;
&lt;li&gt;Last Year: last year of record&lt;/li&gt;
&lt;li&gt;HLY First Year: first year of hourly record&lt;/li&gt;
&lt;li&gt;HLY Last Year: last year of hourly record&lt;/li&gt;
&lt;li&gt;DLY First Year: first year of daily record&lt;/li&gt;
&lt;li&gt;DLY Last Year: last year of daily record&lt;/li&gt;
&lt;li&gt;MLY First Year: first year of monthly record&lt;/li&gt;
&lt;li&gt;MLY Last Year: last year of monthly record&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can easily create 3 dataframes to distinguish hourly, daily and monthly datasets:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_hourly = df[[&#39;Name&#39;, &#39;Province&#39;,&#39;Climate ID&#39;,&#39;Station ID&#39;,&#39;Latitude (Decimal Degrees)&#39;,
              &#39;Longitude (Decimal Degrees)&#39;,&#39;HLY First Year&#39;,&#39;HLY Last Year&#39;]].dropna()

df_daily = df[[&#39;Name&#39;, &#39;Province&#39;,&#39;Climate ID&#39;,&#39;Station ID&#39;,&#39;Latitude (Decimal Degrees)&#39;,
              &#39;Longitude (Decimal Degrees)&#39;,&#39;DLY First Year&#39;,&#39;DLY Last Year&#39;]].dropna()

df_monthly = df[[&#39;Name&#39;, &#39;Province&#39;,&#39;Climate ID&#39;,&#39;Station ID&#39;,&#39;Latitude (Decimal Degrees)&#39;,
              &#39;Longitude (Decimal Degrees)&#39;,&#39;MLY First Year&#39;,&#39;MLY Last Year&#39;]].dropna()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will use wget python command to download data using a specific path:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=csv&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;year&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;year of the record&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;month&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;month of the record&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;format&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;[csv&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;timeframe = 1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;for hourly data&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;timeframe = 2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;for daily data&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;timeframe = 3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;for monthly data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code&gt;- Day: the value of the &amp;quot;day&amp;quot; variable is not used and can be an arbitrary value
- For another station, change the value of the variable stationID
- For the data in XML format, change the value of the variable format to xml in the URL.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-working-with-hourly-data&#34;&gt;1- Working with hourly data:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_hourly.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | Name              | Province         |   Climate ID |   Station ID |   Latitude (Decimal Degrees) |   Longitude (Decimal Degrees) |   HLY First Year |   HLY Last Year |
|---:|:------------------|:-----------------|-------------:|-------------:|-----------------------------:|------------------------------:|-----------------:|----------------:|
| 28 | DISCOVERY ISLAND  | BRITISH COLUMBIA |      1012475 |        27226 |                        48.42 |                       -123.23 |             1997 |            2020 |
| 39 | ESQUIMALT HARBOUR | BRITISH COLUMBIA |      1012710 |           52 |                        48.43 |                       -123.44 |             1994 |            2020 |
| 49 | KELP REEFS        | BRITISH COLUMBIA |      1013998 |        10853 |                        48.55 |                       -123.24 |             1997 |            2020 |
| 53 | MALAHAT           | BRITISH COLUMBIA |      1014818 |        10730 |                        48.58 |                       -123.58 |             1991 |            1992 |
| 54 | MALAHAT           | BRITISH COLUMBIA |      1014820 |           65 |                        48.57 |                       -123.53 |             1994 |            2020 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to extract hourly observations from DISCOVERY ISLAND in 2019. So we will select id_stat = 27226, year = 2019 and timeframe = 1 .&lt;/p&gt;

&lt;h3 id=&#34;we-want-to-work-in-csv-format&#34;&gt;- We want to work in csv format.&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_stat = 27226
year = 2019
wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=csv&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;en_climate_hourly_BC_1012475_001-2019_P1H.csv&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;en_climate_hourly_BC_1012475_001-2019_P1H.csv&#39;, sep=&#39;,&#39;, skiprows=0)
df.head(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    |   Longitude (x) |   Latitude (y) | Station Name     |   Climate ID | Date/Time        |   Year |   Month |   Day | Time   |   Temp (°C) |   Temp Flag |   Dew Point Temp (°C) |   Dew Point Temp Flag |   Rel Hum (%) |   Rel Hum Flag |   Wind Dir (10s deg) |   Wind Dir Flag |   Wind Spd (km/h) |   Wind Spd Flag |   Visibility (km) |   Visibility Flag |   Stn Press (kPa) |   Stn Press Flag |   Hmdx |   Hmdx Flag |   Wind Chill |   Wind Chill Flag |   Weather |
|---:|----------------:|---------------:|:-----------------|-------------:|:-----------------|-------:|--------:|------:|:-------|------------:|------------:|----------------------:|----------------------:|--------------:|---------------:|---------------------:|----------------:|------------------:|----------------:|------------------:|------------------:|------------------:|-----------------:|-------:|------------:|-------------:|------------------:|----------:|
|  0 |         -123.23 |          48.42 | DISCOVERY ISLAND |      1012475 | 2019-01-01 00:00 |   2019 |       1 |     1 | 00:00  |         5.2 |         nan |                   0.7 |                   nan |            73 |            nan |                   17 |             nan |                 5 |             nan |               nan |               nan |            102.87 |              nan |    nan |         nan |          nan |               nan |       nan |
|  1 |         -123.23 |          48.42 | DISCOVERY ISLAND |      1012475 | 2019-01-01 01:00 |   2019 |       1 |     1 | 01:00  |         5.2 |         nan |                   0.7 |                   nan |            72 |            nan |                   17 |             nan |                 5 |             nan |               nan |               nan |            102.87 |              nan |    nan |         nan |          nan |               nan |       nan |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url_template = &amp;quot;http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&amp;amp;stationID=5415&amp;amp;Year={year}&amp;amp;Month={month}&amp;amp;timeframe=1&amp;amp;submit=Download+Data&amp;quot;
url_template
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;http://climate.weather.gc.ca/climateData/bulkdata_e.html?format=csv&amp;amp;stationID=5415&amp;amp;Year={year}&amp;amp;Month={month}&amp;amp;timeframe=1&amp;amp;submit=Download+Data&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;if-we-work-in-xml-format&#34;&gt;- If we work in xml format:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tmp_file = wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tree=ET.parse(tmp_file)
os.remove(tmp_file)
root=tree.getroot()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the structure of xml file and informations we could find in &amp;lsquo;stationinformation&amp;rsquo; child:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stationsinfo=root.find(&#39;stationinformation&#39;)

stationsinfo[0].text, &#39;latitude&#39;, stationsinfo[3].text, &#39;longitude&#39;, stationsinfo[4].text
###############################################################
######### stationsinfo[0].text : station name
######### stationsinfo[1].text : province
######### stationsinfo[2].text : provider
######### stationsinfo[3].text : latitude  
######### stationsinfo[4].text : longitude
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(&#39;DISCOVERY ISLAND&#39;, &#39;latitude&#39;, &#39;48.42&#39;, &#39;longitude&#39;, &#39;-123.23&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Climate records are available in &amp;lsquo;station data&amp;rsquo; child:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image2.png&#34; alt=&#34;png&#34; /&gt;
Let&amp;rsquo;s extract Temperature data for one year:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stationsdata = root.findall(&#39;.//stationdata&#39;)
result = []
for  stationdata in stationsdata    :# loop over hourly values or child 
    champs=stationdata.find(&#39;temp&#39;) 
    tmp=np.array(result,&amp;quot;float&amp;quot;)  
    result.append(champs.text)   
    tmp=np.array(result,&amp;quot;float&amp;quot;)   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To loop over years available for this station:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_stat = 27226
yi = 2015
yf =2020
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = []
for year in range(yi,yf+1):    ### loop over years
    for month in range(1,13):
        tmp_file = wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=&#39;+str(month)+&#39;&amp;amp;Day=14&amp;amp;timeframe=1&#39;)
        tree=ET.parse(tmp_file)
        os.remove(tmp_file)
        root=tree.getroot()       
        stationsdata = root.findall(&#39;.//stationdata&#39;)
        temperature = []  
        date  = []
        data  = []
        for  stationdata in stationsdata: 
            date.append(stationdata.attrib[&#39;year&#39;]+
                        &#39;-&#39;+stationdata.attrib[&#39;month&#39;]+
                        &#39;-&#39;+stationdata.attrib[&#39;day&#39;]+ 
                        &#39; &#39;+stationdata.attrib[&#39;hour&#39;]+&#39;:00&#39;)                  
            champs=stationdata.find(&#39;temp&#39;)
            tmp = np.array(champs.text,&amp;quot;float&amp;quot;)
            if  tmp == &#39;nan&#39;:
                temperature.append(np.nan)
            else:   
                temperature.append(tmp)   #  loop over days in one year

        data = {&#39;date&#39;:date, 
                &#39;air_temperature&#39;:temperature} 
        data = pd.DataFrame(data)
        dataset.append(data)
dataset = pd.concat(dataset)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabulate import tabulate
print(tabulate(dataset.head(), headers=&#39;keys&#39;, tablefmt=&#39;pipe&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | date          |   air_temperature |
|---:|:--------------|------------------:|
|  0 | 2015-1-1 0:00 |               3   |
|  1 | 2015-1-1 1:00 |               2.9 |
|  2 | 2015-1-1 2:00 |               3   |
|  3 | 2015-1-1 3:00 |               3.1 |
|  4 | 2015-1-1 4:00 |               3.1 |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To save our dataframe into csv format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.to_csv(&amp;quot;./Hourly_dataset.csv&amp;quot;, index = False, header = True, sep = &#39;,&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We Can make  quick plot using  plotly.express:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.express as px
import plotly
fig = px.line(dataset, x=&#39;date&#39;, y=&#39;air_temperature&#39;)
fig.update_layout(title_text=&#39;Hourly temperature record&#39;,
                  xaxis_rangeslider_visible=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;file1.png&#34; alt=&#34;png&#34; /&gt;
Follow this &lt;a href=&#34;http://www.guillaumedueymes.com/Plotly_plots/file1.html&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; for interactive plot:&lt;/p&gt;

&lt;p&gt;To save our file in html:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.io as pio
pio.write_html(fig, file = &#39;file1.html&#39;, auto_open = True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To save our file in png:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig.write_image(&amp;quot;file1.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-working-with-daily-data&#34;&gt;2- Working with daily data:&lt;/h3&gt;

&lt;p&gt;We will do the same job with daily mean temperature for one Climate station:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_daily.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | Name                   | Province         |   Climate ID |   Station ID |   Latitude (Decimal Degrees) |   Longitude (Decimal Degrees) |   DLY First Year |   DLY Last Year |
|---:|:-----------------------|:-----------------|-------------:|-------------:|-----------------------------:|------------------------------:|-----------------:|----------------:|
|  0 | ACTIVE PASS            | BRITISH COLUMBIA |      1010066 |           14 |                        48.87 |                       -123.28 |             1984 |            1996 |
|  1 | ALBERT HEAD            | BRITISH COLUMBIA |      1010235 |           15 |                        48.4  |                       -123.48 |             1971 |            1995 |
|  2 | BAMBERTON OCEAN CEMENT | BRITISH COLUMBIA |      1010595 |           16 |                        48.58 |                       -123.52 |             1961 |            1980 |
|  3 | BEAR CREEK             | BRITISH COLUMBIA |      1010720 |           17 |                        48.5  |                       -124    |             1910 |            1971 |
|  4 | BEAVER LAKE            | BRITISH COLUMBIA |      1010774 |           18 |                        48.5  |                       -123.35 |             1894 |            1952 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tmp_file = wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=2&#39;)
tree=ET.parse(tmp_file)
os.remove(tmp_file)
root=tree.getroot()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the structure of xml file and informations we could find in &amp;lsquo;stationinformation&amp;rsquo; child:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Climate records are available in &amp;lsquo;station data&amp;rsquo; child:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url_template = &#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=2&#39;
url_template
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=5415&amp;amp;Year=2020&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=2&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to extract 4 specific years for Climate station with ID=27226:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_stat = 27226
df_daily[df_daily[&#39;Station ID&#39;] == id_stat][&#39;DLY First Year&#39;]
yi = 2015
yf = 2020
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = []
for year in range(yi,yf+1):    ### loop over years
        tmp_file = wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=1&amp;amp;Day=14&amp;amp;timeframe=2&#39;)
        tree=ET.parse(tmp_file)
        os.remove(tmp_file)
        root=tree.getroot()       
        stationsdata = root.findall(&#39;.//stationdata&#39;)
        temperature = []  
        date  = []
        data  = []
        for  stationdata in stationsdata: 
            date.append(stationdata.attrib[&#39;year&#39;]+
                        &#39;-&#39;+stationdata.attrib[&#39;month&#39;]+
                        &#39;-&#39;+stationdata.attrib[&#39;day&#39;])                  
            champs=stationdata.find(&#39;meantemp&#39;)
            tmp = np.array(champs.text,&amp;quot;float&amp;quot;)
            if  tmp == &#39;nan&#39;:
                temperature.append(np.nan)
            else:   
                temperature.append(tmp)   #  loop over days in one year

        data = {&#39;date&#39;:date, 
                &#39;temperature&#39;:temperature} 
        data = pd.DataFrame(data)
        dataset.append(data)
dataset = pd.concat(dataset)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | date     |   temperature |
|---:|:---------|--------------:|
|  0 | 2015-1-1 |           nan |
|  1 | 2015-1-2 |           nan |
|  2 | 2015-1-3 |           nan |
|  3 | 2015-1-4 |           nan |
|  4 | 2015-1-5 |           nan |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We Can make  quick plot using  plotly.express:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.express as px
fig = px.line(dataset, x=&#39;date&#39;, y=&#39;temperature&#39;)
fig.update_layout(title_text=&#39;Time Series with Rangeslider&#39;,
                  xaxis_rangeslider_visible=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;file2.png&#34; alt=&#34;png&#34; /&gt;
Follow this &lt;a href=&#34;http://www.guillaumedueymes.com/Plotly_plots/file2.html&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; for interactive plot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.to_csv(&amp;quot;./Daily_dataset.csv&amp;quot;, index = False, header = True, sep = &#39;,&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.io as pio
pio.write_html(fig, file = &#39;file2.html&#39;, auto_open = True)
fig.write_image(&amp;quot;file2.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-working-with-monthly-data&#34;&gt;3- Working with monthly data:&lt;/h3&gt;

&lt;p&gt;We will do the same job with monthly total precipitation for one Climate station:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_monthly.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;|    | Name                   | Province         |   Climate ID |   Station ID |   Latitude (Decimal Degrees) |   Longitude (Decimal Degrees) |   MLY First Year |   MLY Last Year |
|---:|:-----------------------|:-----------------|-------------:|-------------:|-----------------------------:|------------------------------:|-----------------:|----------------:|
|  0 | ACTIVE PASS            | BRITISH COLUMBIA |      1010066 |           14 |                        48.87 |                       -123.28 |             1984 |            1996 |
|  1 | ALBERT HEAD            | BRITISH COLUMBIA |      1010235 |           15 |                        48.4  |                       -123.48 |             1971 |            1995 |
|  2 | BAMBERTON OCEAN CEMENT | BRITISH COLUMBIA |      1010595 |           16 |                        48.58 |                       -123.52 |             1961 |            1980 |
|  3 | BEAR CREEK             | BRITISH COLUMBIA |      1010720 |           17 |                        48.5  |                       -124    |             1910 |            1971 |
|  4 | BEAVER LAKE            | BRITISH COLUMBIA |      1010774 |           18 |                        48.5  |                       -123.35 |             1894 |            1952 |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tmp_file = wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=3&#39;)
url_template = &#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=3&#39;
url_template
tree=ET.parse(tmp_file)
os.remove(tmp_file)
root=tree.getroot()
url_template
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=27226&amp;amp;Year=2020&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=3&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Climate records are available in &amp;lsquo;station data&amp;rsquo; child:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image4.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We want to dowload monthly total precipitation for Climate station with ID=5415.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_stat = 5415
df_monthly[df_monthly[&#39;Station ID&#39;] == id_stat][&#39;MLY First Year&#39;]
yi = int(df_monthly[df_monthly[&#39;Station ID&#39;] == id_stat][&#39;MLY First Year&#39;].values)
yf = int(df_monthly[df_monthly[&#39;Station ID&#39;] == id_stat][&#39;MLY Last Year&#39;].values)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = []

tmp_file = wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=2020&amp;amp;Month=1&amp;amp;Day=14&amp;amp;timeframe=3&#39;)
tree=ET.parse(tmp_file)
os.remove(tmp_file)
root=tree.getroot()       
stationsdata = root.findall(&#39;.//stationdata&#39;)
totprecip = []  
date  = []
data  = []
for  stationdata in stationsdata: 
    date.append(stationdata.attrib[&#39;year&#39;]+
                        &#39;-&#39;+stationdata.attrib[&#39;month&#39;])                  
    champs=stationdata.find(&#39;totprecip&#39;)
    tmp = np.array(champs.text,&amp;quot;float&amp;quot;)
    if  tmp == &#39;nan&#39;:
        totprecip.append(np.nan)
    else:   
        totprecip.append(tmp)   #  loop over days in one year

    data = {&#39;date&#39;:date, 
                &#39;totprecip&#39;:totprecip} 
    data = pd.DataFrame(data)
    dataset.append(data)
dataset = pd.concat(dataset)
dataset = dataset.drop_duplicates(&#39;date&#39;,keep=&#39;last&#39;)
dataset[&#39;date&#39;]  = pd.to_datetime(dataset[&#39;date&#39;], format=&#39;%Y-%m&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import plotly.graph_objects as go
fig = go.Figure(data=[
    go.Bar(name=&#39;totprecip1&#39;, 
           x=dataset[dataset[&#39;date&#39;].dt.month == 7][&#39;date&#39;], 
           y=dataset[dataset[&#39;date&#39;].dt.month == 7][&#39;totprecip&#39;])    
])
fig.update_layout(
    title=&#39;July monthly precipitation&#39;,
    xaxis_tickfont_size=14,
    yaxis=dict(
        title=&#39;Total precipitation (mm)&#39;,
        titlefont_size=16,
        tickfont_size=14,
    ),
    barmode=&#39;group&#39;,
    bargap=0.15, # gap between bars of adjacent location coordinates.
    bargroupgap=0.1 # gap between bars of the same location coordinate.
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;file3.png&#34; alt=&#34;png&#34; /&gt;
Follow this &lt;a href=&#34;http://www.guillaumedueymes.com/Plotly_plots/file3.html&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; for interactive plot.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[dataset[&#39;date&#39;].dt.month == 7].to_csv(&amp;quot;./Monthly_dataset.csv&amp;quot;, index = False, header = True, sep = &#39;,&#39;)
import plotly.io as pio
pio.write_html(fig, file = &#39;file2.html&#39;, auto_open = True)
fig.write_image(&amp;quot;file2.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Current and projected distributions of Aedes aegypti and Ae. albopictus in Canada and the U.</title>
      <link>/publication/article10/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      <guid>/publication/article10/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Netcdf select closest gridpoints</title>
      <link>/post/ckdtree_netcdf/</link>
      <pubDate>Wed, 26 Feb 2020 13:10:29 -0800</pubDate>
      <guid>/post/ckdtree_netcdf/</guid>
      <description>

&lt;p&gt;﻿&lt;/p&gt;

&lt;h2 id=&#34;netcdf-select-closest-points-using-ckdtree&#34;&gt;- Netcdf: Select closest points using CKDTree&lt;/h2&gt;

&lt;p&gt;In this post, we are going to define an algorithm to locate the closest points to a reference point, by using coordinate transformations, k-dimensional trees, and xarray pointwise indexing.&lt;/p&gt;

&lt;p&gt;To select closest grid points, we will use here one approach using &lt;a href=&#34;http://docs.scipy.org/doc/scipy-0.12.0/reference/generated/scipy.spatial.cKDTree.html&#34; target=&#34;_blank&#34;&gt;cKDTree&lt;/a&gt; class from scipy.spatial package.&lt;/p&gt;

&lt;p&gt;Different method are considered here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- nearest neighbour
- nearest neighbours, weighting with the inverse of distance squared: 
- 
\begin{equation*}
$T_t = \frac{\sum_{i=1}^{m}T_{s,i}w_i}{\sum_{i=1}^{m}w_i}$, $w_i = 1/d_i^2$)
\end{equation*}

- query ball point : Find all pairs of points whose distance is at most one distance
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-let-s-import-python-librairies&#34;&gt;1- Let&amp;rsquo;s import Python librairies&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#for Netcdf manipulation
#import netCDF4
#from netCDF4 import Dataset
import xarray as xr

#for array manipulation
import numpy as np
import pandas as pd

#for plotting
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pylab as plt

#for interpolation
from scipy.spatial import cKDTree
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-loading-netcdf-files&#34;&gt;2- Loading Netcdf files&lt;/h3&gt;

&lt;p&gt;We are going to use daily ERA5 reanalysis data from April 1st to 31th of october 2018.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;unique_dataDIR = &#39;K:/PROJETS/PROJET_FIRE_INDEX/ERA5_FWI_Netcdf/ERA5_FWI_QC_SNOW_New_2018_from_4_to_8.nc&#39;
TAS = xr.open_dataset(unique_dataDIR)
TAS.lon.shape, TAS.lat.shape,
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;((121,), (77,))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Regrid 1D latitude and longitude to 2D grid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lon2d, lat2d = np.meshgrid(TAS.lon, TAS.lat)
lon2d.shape, lat2d.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;((77, 121), (77, 121))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s have a quick look at our dataset, we will plot one day in our time range:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(12,6))
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-75,-60,50,52])
ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))     
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))    
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,    
                        facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)

states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;10m&#39;,
        facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)

cmap0=plt.cm.jet
cmap0.set_under(&#39;darkblue&#39;) 
cmap0.set_over(&#39;darkred&#39;) 

mm = ax.contourf(TAS.lon,\
                   TAS.lat,\
                   TAS.sel(time=&#39;2018-08-01&#39;).FWI,\
                   vmin=0,\
                   vmax=20, \
                   transform=ccrs.PlateCarree(),\
                   levels=np.arange(0, 20, 1.0),\
                   cmap=cmap0 )
ax.scatter(lon2d, lat2d, transform=ccrs.PlateCarree(), s=5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.collections.PathCollection at 0xc7d6828&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_8_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The blue dots in the plot identify the grid points.&lt;/p&gt;

&lt;p&gt;What we want to achieve is to come up with a way to compare distances between a reference point (defined by latitude and longitude values), and all grid points, and pick the minimum value.&lt;/p&gt;

&lt;p&gt;But first, we need to measure distances between two points on our planet, given their geodetic (latitude/longitude/altitude) coordinates.&lt;/p&gt;

&lt;p&gt;In this post, we are going to use the cartesian or ECEF (“earth-centered, earth-fixed”) geographic coordinate system, which represents positions (in meters) as X, Y, and Z coordinates, approximating the earth surface as an ellipsoid of revolution (close enough for our purposes).&lt;/p&gt;

&lt;p&gt;Once we convert our latitude/longitude coordinates to cartesian coordinates, measuring the distance between two points is as simple as computing the Euclidean distance between them.&lt;/p&gt;

&lt;p&gt;The conversion between cartesian and geodetic coordinates latitude, longitude is done according to:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.codecogs.com/eqnedit.php?latex=\begin{bmatrix}&amp;space;X\\&amp;space;Y\\&amp;space;Z&amp;space;\end{bmatrix}&amp;space;=&amp;space;\begin{bmatrix}&amp;space;r.\cos&amp;space;\phi&amp;space;.\cos&amp;space;\lambda&amp;space;\\&amp;space;r.\cos&amp;space;\phi&amp;space;.\sin&amp;space;\lambda&amp;space;\\&amp;space;(1-e^{2}))r.\sin&amp;space;\phi&amp;space;\end{bmatrix}&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?\begin{bmatrix}&amp;space;X\\&amp;space;Y\\&amp;space;Z&amp;space;\end{bmatrix}&amp;space;=&amp;space;\begin{bmatrix}&amp;space;r.\cos&amp;space;\phi&amp;space;.\cos&amp;space;\lambda&amp;space;\\&amp;space;r.\cos&amp;space;\phi&amp;space;.\sin&amp;space;\lambda&amp;space;\\&amp;space;(1-e^{2}))r.\sin&amp;space;\phi&amp;space;\end{bmatrix}&#34; title=&#34;\begin{bmatrix} X\\ Y\\ Z \end{bmatrix} = \begin{bmatrix} r.\cos \phi .\cos \lambda \\ r.\cos \phi .\sin \lambda \\ (1-e^{2}))r.\sin \phi \end{bmatrix}&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;a href=&#34;https://www.codecogs.com/eqnedit.php?latex=r&amp;space;=&amp;space;\frac{a}{\sqrt{1-e^2&amp;space;sin^2&amp;space;\phi&amp;space;}}&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?r&amp;space;=&amp;space;\frac{a}{\sqrt{1-e^2&amp;space;sin^2&amp;space;\phi&amp;space;}}&#34; title=&#34;r = \frac{a}{\sqrt{1-e^2 sin^2 \phi }}&#34; /&gt;&lt;/a&gt;    is the local curvature of the ellipsoid along the first vertical, and where e, the first eccentricity, and a, the semi-major axis, are the parameters defining the ellipsoid.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finding the closest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our problem falls into the class of nearest neighbour searches. A common approach when it comes to finding the nearest neighbour in a number of points with k dimensions is to use a KD-tree, or k-dimensional tree.
SciPy library provides a very efficient KD-tree implementation . Once we have constructed our tree, all we have to do is to populate it with a (n,m) shaped array of points and then query it the nearest neighbor to a reference point.&lt;/p&gt;

&lt;p&gt;We will have to make use of some NumPy acrobatics to reshape our data structures from a two-dimensional grid to a one-dimensional array, and to convert the returned one-dimensional index to a set of two indices on our original grid.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class KDTreeIndex():    
    &amp;quot;&amp;quot;&amp;quot; A KD-tree implementation for fast point lookup on a 2D grid
    
    Keyword arguments: 
    dataset -- a xarray DataArray containing lat/lon coordinates
               (named &#39;lat&#39; and &#39;lon&#39; respectively)               
    &amp;quot;&amp;quot;&amp;quot;    
    def transform_coordinates(self, coords):
        &amp;quot;&amp;quot;&amp;quot; Transform coordinates from geodetic to cartesian
        
        Keyword arguments:
        coords - a set of lan/lon coordinates (e.g. a tuple or 
                 an array of tuples)
        &amp;quot;&amp;quot;&amp;quot;
        # WGS 84 reference coordinate system parameters
        A = 6378.137 # major axis [km]   
        E2 = 6.69437999014e-3 # eccentricity squared    
        
        coords = np.asarray(coords).astype(np.float)
        
        # is coords a tuple? Convert it to an one-element array of tuples
        if coords.ndim == 1:
            coords = np.array([coords])
        
        # convert to radiants
        lat_rad = np.radians(coords[:,0])
        lon_rad = np.radians(coords[:,1]) 
        
        # convert to cartesian coordinates
        r_n = A / (np.sqrt(1 - E2 * (np.sin(lat_rad) ** 2)))
        x = r_n * np.cos(lat_rad) * np.cos(lon_rad)
        y = r_n * np.cos(lat_rad) * np.sin(lon_rad)
        z = r_n * (1 - E2) * np.sin(lat_rad)
        
        return np.column_stack((x, y, z))
    
    def __init__(self, dataset):
        # store original dataset shape
        self.shape = dataset.shape
        lon2d, lat2d = np.meshgrid(dataset.lon, dataset.lat)
        # reshape and stack coordinates
        coords = np.column_stack((lat2d.ravel(),
                                  lon2d.ravel()))
        
        # construct KD-tree
        self.tree = cKDTree(self.transform_coordinates(coords))
        
    def query(self, point, k):
        &amp;quot;&amp;quot;&amp;quot; Query the kd-tree for nearest neighbour.
        Keyword arguments:
        point -- a (lat, lon) tuple or array of tuples
        &amp;quot;&amp;quot;&amp;quot;
        d, inds  = self.tree.query(self.transform_coordinates(point),k=k)
        w = 1.0 / d**2
        # regrid to 2D grid
        indslatlon = np.unravel_index(inds, self.shape)
        return d, inds, w, indslatlon
    
    def query_ball_point(self, point, radius):
        &amp;quot;&amp;quot;&amp;quot; Query the kd-tree for all point within distance 
        radius of point(s) x
        
        Keyword arguments:
        point -- a (lat, lon) tuple or array of tuples
        radius -- the search radius (km)
        &amp;quot;&amp;quot;&amp;quot;
        
        index = self.tree.query_ball_point(self.transform_coordinates(point),
                                           radius)

        # regrid to 2D grid 
        index = np.unravel_index(index[0], self.shape)
        
        # return DataArray indexers
        return xr.DataArray(index[0], dims=&#39;lat&#39;), \
               xr.DataArray(index[1], dims=&#39;lon&#39;)
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will construct our cKDTree object using one time step from our xarray.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;latlon_tree = KDTreeIndex(TAS.sel(time=&#39;2018-08-01&#39;).FWI)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now query the tree the nearest grid point to one reference point:&lt;/p&gt;

&lt;h3 id=&#34;3-nearest-neighbour-k-1&#34;&gt;3- Nearest neighbour k=1:&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s select reference point defined by:
    - latitude = 50 degN
    - longitude = -68.1461 degE&lt;/p&gt;

&lt;p&gt;We can now query the tree the nearest point :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;site = (50, -68.1461)
d, inds, w, indslatlon = latlon_tree.query(site, k=1)
print(inds)
print(indslatlon)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[5871]
(array([48], dtype=int64), array([63], dtype=int64))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;latpt = indslatlon[0][0]
lonpt = indslatlon[1][0]
print(latpt, lonpt)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;48 63
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query method actually  returns:
- two array objects a latitude and a longitude indexer
- one 1D indexer
- one distance value
- one corresponding weighting.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*inds value (ie 5871) represents the index found for our one-dimensional array. 

*indslatlon are the corresponding longitude and latitude values for the closest point found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To extract the xarray field value using our previous index, first we need to convert a two-dimensional grid to a one-dimensional array and then select index value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TAS.sel(time=&#39;2018-08-01&#39;).FWI.values.flatten()[inds]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([10.517308])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TAS.sel(time=&#39;2018-08-01&#39;).FWI[latpt,lonpt]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;FWI&#39; ()&amp;gt;
array(10.517308)
Coordinates:
    lon      float64 -68.25
    lat      float32 50.0
    time     datetime64[ns] 2018-08-01
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s make a quick look:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(25,12))
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-72,-65,49,51])
   # ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac    
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières 
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                        facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)

  
states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;10m&#39;,
        facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)

## Choisissons une colormap
cmap0=plt.cm.jet
cmap0.set_under(&#39;darkblue&#39;) ## on met en blanc les valeurs inferieures au min de clev
cmap0.set_over(&#39;darkred&#39;) ## bleu fonce pour les valeurs extremes de pluie

mm = ax.contourf(TAS.lon,\
                   TAS.lat,\
                   TAS.sel(time=&#39;2018-08-01&#39;).FWI,\
                   vmin=0,\
                   vmax=20, \
                   transform=ccrs.PlateCarree(),\
                   levels=np.arange(0, 20, 1.0),\
                   cmap=cmap0 )
ax.scatter(lon2d, lat2d, transform=ccrs.PlateCarree(), s=5, label=&#39;ERA5 grid points&#39;)
ax.scatter(TAS.sel(time=&#39;2018-08-01&#39;).FWI[latpt,lonpt].lon, 
           TAS.sel(time=&#39;2018-08-01&#39;).FWI[latpt,lonpt].lat, 
           color=&#39;r&#39;, transform=ccrs.PlateCarree(), s=100, label=&#39;closest grid point&#39;)
ax.scatter(-68.1461, 50, transform=ccrs.PlateCarree(), marker=&#39;x&#39;, color=&#39;black&#39;, s=300, label=&#39;reference point&#39;)
plt.legend(loc=&#39;upper left&#39;, numpoints=1, ncol=3, fontsize=20)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.legend.Legend at 0xc7d6358&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_22_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-nearest-neighbours-k-10&#34;&gt;4- Nearest neighbours k=10&lt;/h3&gt;

&lt;p&gt;We will now make the same exercice using k=10.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;site = (50, -68.1461)
d, inds, w, indslatlon = ground_pixel_tree.query(site, k=10)
print(d)
print(w)
print(inds)
print(indslatlon)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[ 7.44918778 10.47474677 25.37308687 28.39863145 28.78330094 28.79213291
  29.70566615 29.72368634 37.59953757 37.68733316]]
[[0.01802114 0.00911408 0.00155329 0.00123995 0.00120703 0.00120629
  0.00113324 0.00113187 0.00070735 0.00070406]]
[[5871 5872 5870 5873 5750 5992 5751 5993 5749 5991]]
(array([[48, 48, 48, 48, 47, 49, 47, 49, 47, 49]], dtype=int64), array([[63, 64, 62, 65, 63, 63, 64, 64, 62, 62]], dtype=int64))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TAS.sel(time=&#39;2018-08-01&#39;).FWI.values.flatten()[inds]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[10.517308  ,  9.87137321,  8.57146189, 11.99096501,  9.32552318,
        10.0954969 ,  9.84150618, 11.8046335 ,  9.26170112,  8.3454113 ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;latpts = indslatlon[0][0]
lonpts = indslatlon[1][0]
print(latpts, lonpts)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[48 48 48 48 47 49 47 49 47 49] [63 64 62 65 63 63 64 64 62 62]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can know Interpolate our field using inverse distance weighting, using 10 nearest neighbours (k=10):&lt;/p&gt;

&lt;p&gt;(i.e. Tt=∑mi=1Ts,iwi∑mi=1wi, wi=1/d2i).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sum(w * TAS.sel(time=&#39;2018-08-01&#39;).FWI.values.flatten()[inds], axis=1) / np.sum(w, axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([10.21868978])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s make a quick look:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;latpts = indslatlon[0][0]
lonpts = indslatlon[1][0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TAS.sel(time=&#39;2018-08-01&#39;).FWI[latpts,lonpts].lon
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;lon&#39; (lon: 10)&amp;gt;
array([-68.25, -68.  , -68.5 , -67.75, -68.25, -68.25, -68.  , -68.  , -68.5 ,
       -68.5 ])
Coordinates:
  * lon      (lon) float64 -68.25 -68.0 -68.5 -67.75 ... -68.0 -68.0 -68.5 -68.5
    time     datetime64[ns] 2018-08-01
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(25,12))
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-72,-65,49,51])
   # ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac    
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières 
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                        facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)

  
states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;10m&#39;,
        facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)

## Choisissons une colormap
cmap0=plt.cm.jet
cmap0.set_under(&#39;darkblue&#39;) ## on met en blanc les valeurs inferieures au min de clev
cmap0.set_over(&#39;darkred&#39;) ## bleu fonce pour les valeurs extremes de pluie

mm = ax.contourf(TAS.lon,\
                   TAS.lat,\
                   TAS.sel(time=&#39;2018-08-01&#39;).FWI,\
                   vmin=0,\
                   vmax=20, \
                   transform=ccrs.PlateCarree(),\
                   levels=np.arange(0, 20, 1.0),\
                   cmap=cmap0 )
ax.scatter(lon2d, lat2d, transform=ccrs.PlateCarree(), s=5, label=&#39;ERA5 grid points&#39;)
ax.scatter(TAS.sel(time=&#39;2018-08-01&#39;).FWI[latpts,lonpts].lon, 
           TAS.sel(time=&#39;2018-08-01&#39;).FWI[latpts,lonpts].lat, 
           color=&#39;r&#39;, transform=ccrs.PlateCarree(), s=100, label=&#39;closest grid points&#39;)
ax.scatter(-68.1461, 50, transform=ccrs.PlateCarree(), marker=&#39;x&#39;, color=&#39;black&#39;, s=300, label=&#39;reference point&#39;)
plt.legend(loc=&#39;upper left&#39;, numpoints=1, ncol=3, fontsize=20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.legend.Legend at 0xcb78ac8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_32_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we will find all grid points  within a given distance from a reference point, by using the query_ball_point method in SciPy’s KD-tree implementation.&lt;/p&gt;

&lt;p&gt;Let’s find out which ground pixels fall into a 700km radius from our reference point:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ball_point_index = ground_pixel_tree.query_ball_point(site, 50)
lons = TAS.sel(time=&#39;2018-08-01&#39;).FWI[ball_point_index].lon
lats = TAS.sel(time=&#39;2018-08-01&#39;).FWI[ball_point_index].lat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(25,12))
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-72,-65,49,51])
   # ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac    
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières 
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                        facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)

  
states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
        scale=&#39;10m&#39;,
        facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)

## Choisissons une colormap
cmap0=plt.cm.jet
cmap0.set_under(&#39;darkblue&#39;) ## on met en blanc les valeurs inferieures au min de clev
cmap0.set_over(&#39;darkred&#39;) ## bleu fonce pour les valeurs extremes de pluie

mm = ax.contourf(TAS.lon,\
                   TAS.lat,\
                   TAS.sel(time=&#39;2018-08-01&#39;).FWI,\
                   vmin=0,\
                   vmax=20, \
                   transform=ccrs.PlateCarree(),\
                   levels=np.arange(0, 20, 1.0),\
                   cmap=cmap0 )
ax.scatter(lon2d, lat2d, transform=ccrs.PlateCarree(), s=5, label=&#39;ERA5 grid points&#39;)
ax.scatter(lons, 
           lats, 
           color=&#39;r&#39;, transform=ccrs.PlateCarree(), s=100, label=&#39;grid points within 50 km from reference point&#39;)
ax.scatter(-68.1461, 50, transform=ccrs.PlateCarree(), marker=&#39;x&#39;, color=&#39;black&#39;, s=300, label=&#39;reference point&#39;)
plt.legend(loc=&#39;upper left&#39;, numpoints=1, ncol=3, fontsize=20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.legend.Legend at 0xcb86b38&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_35_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ECCC SWOB Stations</title>
      <link>/post/ecc_swob_stations/</link>
      <pubDate>Tue, 18 Feb 2020 13:06:38 -0800</pubDate>
      <guid>/post/ecc_swob_stations/</guid>
      <description>

&lt;p&gt;﻿In this post, we will show how to work with Surface Weather Observation from ECCC in XML language (Extensible Markup Language)&lt;/p&gt;

&lt;h3 id=&#34;sw-ob-xml&#34;&gt;SW-OB-XML&lt;/h3&gt;

&lt;p&gt;For xml files, we will use a package called xml which will allow us to decrypt the xml file.&lt;/p&gt;

&lt;p&gt;Pandas does not directly have tools to transform xml into DataFrame because the semi-structured aspect of xml forces us to perform a few steps before filling out a DataFrame.&lt;/p&gt;

&lt;p&gt;We will first download &lt;a href=&#34;https://dd.weather.gc.ca/observations/doc/&#34; target=&#34;_blank&#34;&gt;an xml file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are going to work here with the meteorological ground (SWOB-ML) and marine observations data found on the ECCC Datamart.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Data are available at the following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Earth observations:
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://dd.meteo.gc.ca/observations/swob-ml/AAAAMMJJ/XXXX/&#34; target=&#34;_blank&#34;&gt;https://dd.meteo.gc.ca/observations/swob-ml/AAAAMMJJ/XXXX/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AAAAMMJJ: observations date, UTC&lt;/li&gt;

&lt;li&gt;&lt;p&gt;XXXX: station ID (OMM ID)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;h2 id=&#34;marine-observations&#34;&gt;Marine observations:&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://dd.meteo.gc.ca/observations/swob-ml/marine/moored-buoys/YYYMMDD/XXXXXXX&#34; target=&#34;_blank&#34;&gt;https://dd.meteo.gc.ca/observations/swob-ml/marine/moored-buoys/YYYMMDD/XXXXXXX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where:
* AAAAMMJJ: observations date, UTC
* XXXXXXX: station ID (OMM ID), can be 5 or 7 digits&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Partner observations:
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://dd.meteo.gc.ca/observations/swob-ml/partners/NETWORK/YYYMMDD/MSC-ID&#34; target=&#34;_blank&#34;&gt;https://dd.meteo.gc.ca/observations/swob-ml/partners/NETWORK/YYYMMDD/MSC-ID&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where:
 - NETWORK: acronym of the partner network
 - YYYYMMDD: observations date, UTC
 - MSC-ID: ID&lt;/p&gt;

&lt;p&gt;################################################&lt;/p&gt;

&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;

&lt;p&gt;################################################&lt;/p&gt;

&lt;p&gt;The markup language for ground weather (SWOB Met-ML) and marine observations is an XML format for the distribution of weather data observed by Environment and Climate Change Canada and its partners.&lt;/p&gt;

&lt;p&gt;The list of observation stations is available here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dd.meteo.gc.ca/observations/doc/swob-xml_station_list.csv&#34; target=&#34;_blank&#34;&gt;https://dd.meteo.gc.ca/observations/doc/swob-xml_station_list.csv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The list of marine observation stations is available here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dd.meteo.gc.ca/observations/doc/swob-xml_marine_station_list.csv&#34; target=&#34;_blank&#34;&gt;https://dd.meteo.gc.ca/observations/doc/swob-xml_marine_station_list.csv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The list of partner stations is available here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dd.meteo.gc.ca/observations/doc/swob-xml_partner_station_list.csv&#34; target=&#34;_blank&#34;&gt;https://dd.meteo.gc.ca/observations/doc/swob-xml_partner_station_list.csv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The format specification is available in the following directory:
&lt;a href=&#34;https://dd.meteo.gc.ca/observations/doc/&#34; target=&#34;_blank&#34;&gt;https://dd.meteo.gc.ca/observations/doc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the structure of a SWOB file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./struc_swob.png&#34; alt=&#34;Indentation&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/p&gt;

&lt;p&gt;First, we import python librairies and define the date we want to extract:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# importations des librairies 
from datetime import datetime, timedelta
import pandas as pd 
import xml.etree.ElementTree as ET
import wget
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
import os 
from os.path import exists
now = datetime.utcnow() - timedelta(hours=1)

year = str(now.year)
month = str(now.month)
day = str(now.day)
hour = f&#39;{now.hour:02d}&#39;
day = f&#39;{now.day:02d}&#39;
month = f&#39;{now.month:02d}&#39;
date = year+month+day
date
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;20200212&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will list the stations we want to extract: example for the province of Quebec and Ontario.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stations = pd.read_table(&amp;quot;swob-xml_station_list.csv&amp;quot;, sep=&amp;quot;,&amp;quot;)
stations_quebec = stations.loc[(stations[&amp;quot;Province/Territory&amp;quot;]==&#39;Quebec&#39;)  ,:]
stations_ontario = stations.loc[(stations[&amp;quot;Province/Territory&amp;quot;]==&#39;Ontario&#39;)  ,:]
stations_mask=pd.concat([stations_quebec,stations_ontario],axis=0)
stations_mask_sans_NaN = stations_mask.dropna() 
#stations_mask_sans_NaN_AUTO = stations_mask_sans_NaN.loc[stations_mask_sans_NaN[&amp;quot;AUTO/MAN&amp;quot;]==&#39;AUTO&#39;,:]
stations_mask_sans_NaN.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;IATA_ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;WMO_ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;MSC_ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Latitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Longitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Elevation(m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Data_Provider&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Dataset/Network&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;AUTO/MAN&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Province/Territory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGAH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LA GRANDE IV&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71823&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7093GJ5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-73.6828&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;306.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGBC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAIE-COMEAU&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71890&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7040442&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.1351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.2024&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGCH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHIBOUGAMAU-CHAPAIS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7091410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.7773&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-74.5304&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;389.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGCL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL AIRPORT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73005&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051201&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.3088&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.2528&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGGA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GASPE AIRPORT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73116&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7052603&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.7833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-64.4833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;1-working-with-one-station&#34;&gt;1- Working with one station&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s work with  CWTQ station ID:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests
stid = &#39;CWTQ&#39;
tmp_file = &#39;https://dd.weather.gc.ca/observations/swob-ml/&#39;+date+&#39;/&#39;+stid+&#39;/&#39;+year+&#39;-&#39;+month+&#39;-&#39;+day+&#39;-&#39;+hour+&#39;00-&#39;+stid+&#39;-AUTO-swob.xml&#39;
tmp_file
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;https://dd.weather.gc.ca/observations/swob-ml/20200212/CWTQ/2020-02-12-1900-CWTQ-AUTO-swob.xml&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;wget.download(tmp_file)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;100% [............................................................] 9408 / 9408




&#39;2020-02-12-1900-CWTQ-AUTO-swob.xml&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tree = ET.parse(year+&#39;-&#39;+month+&#39;-&#39;+day+&#39;-&#39;+hour+&#39;00-&#39;+stid+&#39;-AUTO-swob.xml&#39;)
root=tree.getroot()
children = root.getchildren()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the root of our data to extract:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;root
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Element &#39;{http://www.opengis.net/om/1.0}ObservationCollection&#39; at 0x000000000950ED18&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;children
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;Element &#39;{http://www.opengis.net/om/1.0}member&#39; at 0x000000000950EE08&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Number of elements in our file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# total amount of items
print(len(root))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for child in root.iter(&amp;rsquo;*&amp;lsquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(child.items())

#print(child.keys())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for child in root.iter(&amp;rsquo;*&amp;lsquo;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;print(child)

print(child.attrib)

print(child.attrib.get(&#39;value&#39;))

print(child.attrib.get(&#39;name&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The list of variables is available on page 40 of the document:
&amp;mdash; SWOB-ML_Product_User_Guide_v8.2_f.pdf&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=[]
date_tm=[] 
avg_air_temp_pst1hr=[]
max_air_temp_pst1hr=[]
min_air_temp_pst1hr=[]
max_rel_hum_pst1hr=[]
min_rel_hum_pst1hr=[]
stn_pres=[]
mslp=[]
pcpn_amt_pst1hr=[]
wnd_dir_10m_pst1hr_max_spd=[]
max_wnd_spd_10m_pst1hr=[]
avg_wnd_spd_10m_pst10mts=[]
avg_snw_dpth_pst5mts_1=[]
avg_snw_dpth_pst5mts_2=[]
avg_snw_dpth_pst5mts_3=[]


for child in root.iter(&#39;*&#39;):  
    if child.attrib.get(&#39;name&#39;) == &#39;date_tm&#39;:           # date of actual observation
        date_tm.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;avg_air_temp_pst1hr&#39;:  # average air temperature in the last hour 
        avg_air_temp_pst1hr.append(child.get(&#39;value&#39;))    
    if child.attrib.get(&#39;name&#39;) == &#39;min_air_temp_pst1hr&#39;: # minimum air temperature in the last hour
        min_air_temp_pst1hr.append(child.get(&#39;value&#39;))    
    if child.attrib.get(&#39;name&#39;) == &#39;max_air_temp_pst1hr&#39;: # maximum air temperature in the last hour 
        max_air_temp_pst1hr.append(child.get(&#39;value&#39;))    
    if child.attrib.get(&#39;name&#39;) == &#39;max_rel_hum_pst1hr&#39;: # maximum relative humidity in the past hour
        max_rel_hum_pst1hr.append(child.get(&#39;value&#39;))    
    if child.attrib.get(&#39;name&#39;) == &#39;min_rel_hum_pst1hr&#39;: # minimum relative humidity in the past hour
        min_rel_hum_pst1hr.append(child.get(&#39;value&#39;)) 
    if child.attrib.get(&#39;name&#39;) == &#39;stn_pres&#39;:         # pressure at the station (start of the hour)
        stn_pres.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;pcpn_amt_pst1hr&#39;:   # amount of precipitation in the past hour
        pcpn_amt_pst1hr.append(child.get(&#39;value&#39;))  
    if child.attrib.get(&#39;name&#39;) == &#39;avg_wnd_spd_10m_pst10mts&#39;: # average wind speed at 10 m for 10 min
        avg_wnd_spd_10m_pst10mts.append(child.get(&#39;value&#39;))      
    if child.attrib.get(&#39;name&#39;) == &#39;max_wnd_spd_10m_pst1hr&#39;: #  maximum wind speed at 10 m for one hour
        max_wnd_spd_10m_pst1hr.append(child.get(&#39;value&#39;))      
    if child.attrib.get(&#39;name&#39;) == &#39;wnd_dir_10m_pst1hr_max_spd&#39;: # Instant wind direction at 10 m for maximum hourly wind speed, min 0 to 60
        wnd_dir_10m_pst1hr_max_spd.append(child.get(&#39;value&#39;))          
    if child.attrib.get(&#39;name&#39;) == &#39;mslp&#39;:   # average sea level pressure
        mslp.append(child.get(&#39;value&#39;))      
    if child.attrib.get(&#39;name&#39;) == &#39;avg_snw_dpth_pst5mts_1&#39;:
            avg_snw_dpth_pst5mts_1.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;avg_snw_dpth_pst5mts_2&#39;:
            avg_snw_dpth_pst5mts_2.append(child.get(&#39;value&#39;))
    if child.attrib.get(&#39;name&#39;) == &#39;avg_snw_dpth_pst5mts_3&#39;:
            avg_snw_dpth_pst5mts_3.append(child.get(&#39;value&#39;))
            
            
data_dict = {&#39;date_tm&#39;:date_tm, 
        &#39;avg_air_temp_pst1hr&#39;:avg_air_temp_pst1hr, 
        &#39;min_air_temp_pst1hr&#39;:min_air_temp_pst1hr,
        &#39;max_air_temp_pst1hr&#39;: max_air_temp_pst1hr, 
        &#39;max_rel_hum_pst1hr&#39;:max_rel_hum_pst1hr,
        &#39;min_rel_hum_pst1hr&#39;:min_rel_hum_pst1hr,
        &#39;stn_pres&#39;:stn_pres,
         &#39;mslp&#39;:mslp,
        &#39;pcpn_amt_pst1hr&#39;:pcpn_amt_pst1hr,
        &#39;avg_wnd_spd_10m_pst10mts&#39;:avg_wnd_spd_10m_pst10mts,
        &#39;wnd_dir_10m_pst1hr_max_spd&#39;:wnd_dir_10m_pst1hr_max_spd,
        &#39;max_wnd_spd_10m_pst1hr&#39;:max_wnd_spd_10m_pst1hr,
        &#39;avg_snw_dpth_pst5mts_1&#39;:avg_snw_dpth_pst5mts_1,
        &#39;avg_snw_dpth_pst5mts_2&#39;:avg_snw_dpth_pst5mts_2,
        &#39;avg_snw_dpth_pst5mts_3&#39;:avg_snw_dpth_pst5mts_3
        
       } 

data= pd.DataFrame(data_dict)           
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;date_tm&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;avg_air_temp_pst1hr&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min_air_temp_pst1hr&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max_air_temp_pst1hr&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max_rel_hum_pst1hr&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min_rel_hum_pst1hr&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stn_pres&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mslp&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;pcpn_amt_pst1hr&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;avg_wnd_spd_10m_pst10mts&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;wnd_dir_10m_pst1hr_max_spd&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max_wnd_spd_10m_pst1hr&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;avg_snw_dpth_pst5mts_1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;avg_snw_dpth_pst5mts_2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;avg_snw_dpth_pst5mts_3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2020-02-18T20:00:00.000Z&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;86&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1006.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1010.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;151&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;56.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;2-reading-the-station-list&#34;&gt;2- Reading the station list&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stations = pd.read_table(&amp;quot;swob-xml_station_list.csv&amp;quot;, sep=&amp;quot;,&amp;quot;)
stations.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;IATA_ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;WMO_ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MSC_ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Latitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Longitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Elevation(m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Data_Provider&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dataset/Network&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;AUTO/MAN&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Province/Territory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4400488&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;East Chedabucto Bay&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44488&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9302000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.445&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-60.9538&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4400489&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;West Chedabucto Bay&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44489&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9302001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.4869&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-61.141&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4400490&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;West Bay of Fundy&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44490&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9300300&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44.6606&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-66.3686&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4600303&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Southern Georgia Strait&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46303&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9102000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.025&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-123.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4600304&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Entrance to English Bay&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46304&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9102001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.3017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-123.357&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;3-filter-stations-over-a-specific-province&#34;&gt;3- Filter stations over  a specific province&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stations_mask = stations.loc[stations[&amp;quot;Province/Territory&amp;quot;]==&#39;Quebec&#39;,:]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stations_mask.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;IATA_ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;WMO_ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;MSC_ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Latitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Longitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Elevation(m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Data_Provider&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Dataset/Network&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;AUTO/MAN&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Province/Territory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGAH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LA GRANDE IV&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71823&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7093GJ5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-73.6828&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;306.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGBC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAIE-COMEAU&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71890&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7040442&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.1351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.2024&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGCH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHIBOUGAMAU-CHAPAIS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7091410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.7773&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-74.5304&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;389.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGCL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL AIRPORT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73005&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051201&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.3088&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.2528&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGGA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GASPE AIRPORT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73116&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7052603&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.7833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-64.4833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#stations_mask_sans_NaN = stations_mask.dropna() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#stations_mask_sans_NaN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to work with only stations with automatic recording:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stations_mask_AUTO = stations_mask.loc[stations_mask[&amp;quot;AUTO/MAN&amp;quot;]==&#39;AUTO&#39;,:]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stations_mask_AUTO.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;IATA_ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;WMO_ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;MSC_ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Latitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Longitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Elevation(m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Data_Provider&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Dataset/Network&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;AUTO/MAN&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Province/Territory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGAH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LA GRANDE IV&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71823&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7093GJ5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-73.6828&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;306.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGBC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAIE-COMEAU&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71890&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7040442&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.1351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.2024&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGCH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHIBOUGAMAU-CHAPAIS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7091410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.7773&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-74.5304&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;389.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGCL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL AIRPORT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73005&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051201&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.3088&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.2528&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGGA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GASPE AIRPORT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73116&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7052603&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.7833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-64.4833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Example of a loop on all stations in Quebec:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for index, row in stations_mask_AUTO.iterrows():
    stid = row[&#39;IATA_ID&#39;]
    tmp_file = &#39;https://dd.weather.gc.ca/observations/swob-ml/&#39;+date+&#39;/&#39;+stid+&#39;/&#39;+year+&#39;-&#39;+month+&#39;-&#39;+day+&#39;-&#39;+hour+&#39;00-&#39;+stid+&#39;-AUTO-swob.xml&#39;
    r = requests.get(tmp_file)
   
    if r.status_code != 200:
        continue
    
    root = ET.fromstring(r.content)
    data=[]
    date_tm=[] 
    avg_air_temp_pst1hr=[]
    max_air_temp_pst1hr=[]
    min_air_temp_pst1hr=[]
    max_rel_hum_pst1hr=[]
    min_rel_hum_pst1hr=[]
    stn_pres=[]
    mslp=[]
    pcpn_amt_pst1hr=[]
    wnd_dir_10m_pst1hr_max_spd=[]
    max_wnd_spd_10m_pst1hr=[]
    avg_wnd_spd_10m_pst10mts=[]
    avg_snw_dpth_pst5mts_1=[]
    avg_snw_dpth_pst5mts_2=[]
    avg_snw_dpth_pst5mts_3=[]

    for child in root.iter(&#39;*&#39;):  
        if child.attrib.get(&#39;name&#39;) == &#39;date_tm&#39;:                   # date-heure d’observation réelle
            date_tm.append(child.get(&#39;value&#39;))
        if child.attrib.get(&#39;name&#39;) == &#39;avg_air_temp_pst1hr&#39;:  # température de l&#39;air moyenne au cours de la dernière heure (minutes 00 à 60)
            avg_air_temp_pst1hr.append(child.get(&#39;value&#39;))    
        if child.attrib.get(&#39;name&#39;) == &#39;min_air_temp_pst1hr&#39;: # température de l&#39;air minimale au cours de la dernière heure (minutes 00 à 60)
            min_air_temp_pst1hr.append(child.get(&#39;value&#39;))    
        if child.attrib.get(&#39;name&#39;) == &#39;max_air_temp_pst1hr&#39;: # température de l&#39;air maximale au cours de la dernière heure (minutes 00 à 60) 
            max_air_temp_pst1hr.append(child.get(&#39;value&#39;))    
        if child.attrib.get(&#39;name&#39;) == &#39;max_rel_hum_pst1hr&#39;: # humidité relative maximale au cours de la dernière heure 
            max_rel_hum_pst1hr.append(child.get(&#39;value&#39;))    
        if child.attrib.get(&#39;name&#39;) == &#39;min_rel_hum_pst1hr&#39;:# humidité relative minimale au cours de la dernière heure
            min_rel_hum_pst1hr.append(child.get(&#39;value&#39;)) 
        if child.attrib.get(&#39;name&#39;) == &#39;stn_pres&#39;:         # pression à la station (début de l’heure)
            stn_pres.append(child.get(&#39;value&#39;))
        if child.attrib.get(&#39;name&#39;) == &#39;pcpn_amt_pst1hr&#39;:   # quantité de précipitation au cours de la dernière heure
            pcpn_amt_pst1hr.append(child.get(&#39;value&#39;))  
        if child.attrib.get(&#39;name&#39;) == &#39;avg_wnd_spd_10m_pst10mts&#39;: # vitesse moyenne du vent à 10 m pendant 10 min
            avg_wnd_spd_10m_pst10mts.append(child.get(&#39;value&#39;))      
        if child.attrib.get(&#39;name&#39;) == &#39;max_wnd_spd_10m_pst1hr&#39;: #  vitesse maximale du vent à 10 m pendant une heure
            max_wnd_spd_10m_pst1hr.append(child.get(&#39;value&#39;))      
        if child.attrib.get(&#39;name&#39;) == &#39;wnd_dir_10m_pst1hr_max_spd&#39;: #Direction instantanée du vent à 10 m pour une vitesse horaire maximale du vent, min 0 à 60
            wnd_dir_10m_pst1hr_max_spd.append(child.get(&#39;value&#39;))          
        if child.attrib.get(&#39;name&#39;) == &#39;mslp&#39;:   # pression moyenne au niveau de la mer
            mslp.append(child.get(&#39;value&#39;))      
        if child.attrib.get(&#39;name&#39;) == &#39;avg_snw_dpth_pst5mts_1&#39;:
                avg_snw_dpth_pst5mts_1.append(child.get(&#39;value&#39;))
        if child.attrib.get(&#39;name&#39;) == &#39;avg_snw_dpth_pst5mts_2&#39;:
                avg_snw_dpth_pst5mts_2.append(child.get(&#39;value&#39;))
        if child.attrib.get(&#39;name&#39;) == &#39;avg_snw_dpth_pst5mts_3&#39;:
                avg_snw_dpth_pst5mts_3.append(child.get(&#39;value&#39;))


    data_dict = {&#39;date_tm&#39;:date_tm, 
            &#39;avg_air_temp_pst1hr&#39;:avg_air_temp_pst1hr, 
            &#39;min_air_temp_pst1hr&#39;:min_air_temp_pst1hr,
            &#39;max_air_temp_pst1hr&#39;: max_air_temp_pst1hr, 
            &#39;max_rel_hum_pst1hr&#39;:max_rel_hum_pst1hr,
            &#39;min_rel_hum_pst1hr&#39;:min_rel_hum_pst1hr,
            &#39;stn_pres&#39;:stn_pres,
             &#39;mslp&#39;:mslp,
            &#39;pcpn_amt_pst1hr&#39;:pcpn_amt_pst1hr,
            &#39;avg_wnd_spd_10m_pst10mts&#39;:avg_wnd_spd_10m_pst10mts,
            &#39;wnd_dir_10m_pst1hr_max_spd&#39;:wnd_dir_10m_pst1hr_max_spd,
            &#39;max_wnd_spd_10m_pst1hr&#39;:max_wnd_spd_10m_pst1hr,
            &#39;avg_snw_dpth_pst5mts_1&#39;:avg_snw_dpth_pst5mts_1,
            &#39;avg_snw_dpth_pst5mts_2&#39;:avg_snw_dpth_pst5mts_2,
            &#39;avg_snw_dpth_pst5mts_3&#39;:avg_snw_dpth_pst5mts_3

           } 

    
    for key,value in data_dict.items(): 
        if not value:
            data_dict[key] = &#39;NaN&#39;
            
    data= pd.DataFrame(data_dict)
    os.makedirs(&#39;D:/Utilisateurs/guillaume/Documents/GitHub/Python_XML/SWOB/&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;/&#39;, exist_ok=True)  

       # file = &#39;D:/Utilisateurs/guillaume/Documents/GitHub/Python_XML/SWOB/&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;/&#39;+str(int(row[&#39;WMO_ID&#39;]))+&#39;_&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;.csv&#39;
    file = &#39;D:/Utilisateurs/guillaume/Documents/GitHub/Python_XML/SWOB/&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;/&#39;+str(row[&#39;MSC_ID&#39;])+&#39;_&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;.csv&#39;
    if exists(file):
        #print (&amp;quot;File exist&amp;quot;)
        data.to_csv(r&#39;D:/Utilisateurs/guillaume/Documents/GitHub/Python_XML/SWOB/&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;/&#39;+str(row[&#39;MSC_ID&#39;])+&#39;_&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;.csv&#39;,mode=&#39;a&#39;,index=False,header=False) 
    else:
        #print (&amp;quot;File not exist&amp;quot;)
        pd.DataFrame(row).T.to_csv(r&#39;D:/Utilisateurs/guillaume/Documents/GitHub/Python_XML/SWOB/&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;/&#39;+str(row[&#39;MSC_ID&#39;])+&#39;_&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;.csv&#39;,index=False)  
        data.to_csv(r&#39;D:/Utilisateurs/guillaume/Documents/GitHub/Python_XML/SWOB/&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;/&#39;+str(row[&#39;MSC_ID&#39;])+&#39;_&#39;+now.strftime(&amp;quot;%Y%m&amp;quot;)+&#39;.csv&#39;,mode=&#39;a&#39;,index=False)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-we-will-trace-the-location-of-the-stations&#34;&gt;4- We will trace the location of the stations:&lt;/h3&gt;

&lt;p&gt;We will start by extracting the latitudes and longitudes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_lat = stations.loc[stations[&amp;quot;AUTO/MAN&amp;quot;]==&#39;AUTO&#39;,:][&#39;Latitude&#39;].values
list_lon = stations.loc[stations[&amp;quot;AUTO/MAN&amp;quot;]==&#39;AUTO&#39;,:][&#39;Longitude&#39;].values
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pylab as plt
import numpy as np

fig = plt.figure(figsize=(28,16))   
ax = plt.axes(projection=ccrs.PlateCarree())
ax.set_extent((-150.0, -50, 40, 90))

ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac

ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières      
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                    facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)
states_provinces = cfeature.NaturalEarthFeature(
    category=&#39;cultural&#39;,
    name=&#39;admin_1_states_provinces_lines&#39;,
    scale=&#39;10m&#39;,
    facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  

ax.gridlines()           
mm = ax.scatter(list_lon, list_lat, c=&#39;red&#39;, s=100, label=&#39;SWOB Met-ML MSC&#39;)
#mm = ax.scatter(dfstat[&#39;lon&#39;].values, dfstat[&#39;lat&#39;].values, c=&#39;green&#39;, s=400, label=&#39;Site&#39;)

plt.legend(loc=&amp;quot;best&amp;quot;, markerscale=1., scatterpoints=1, fontsize=40)
          
# Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)     
fig.canvas.draw()
 
plt.savefig(&#39;Localisation_SWOB_CANADA.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.1)
plt.show()  
plt.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_32_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;5-just-over-quebec&#34;&gt;5-  Just over Quebec:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_lat = stations.loc[(stations[&amp;quot;AUTO/MAN&amp;quot;]==&#39;AUTO&#39;) &amp;amp; (stations[&amp;quot;Province/Territory&amp;quot;]==&#39;Quebec&#39;),:][&#39;Latitude&#39;].values
list_lon = stations.loc[(stations[&amp;quot;AUTO/MAN&amp;quot;]==&#39;AUTO&#39;) &amp;amp; (stations[&amp;quot;Province/Territory&amp;quot;]==&#39;Quebec&#39;),:][&#39;Longitude&#39;].values
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pylab as plt
import numpy as np

fig = plt.figure(figsize=(28,16))   
ax = plt.axes(projection=ccrs.PlateCarree())
ax.set_extent((-80.0, -50, 40, 70))

ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac

ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières      
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                    facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)
states_provinces = cfeature.NaturalEarthFeature(
    category=&#39;cultural&#39;,
    name=&#39;admin_1_states_provinces_lines&#39;,
    scale=&#39;10m&#39;,
    facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  

ax.gridlines()           
mm = ax.scatter(list_lon, list_lat, c=&#39;red&#39;, s=100, label=&#39;SWOB Met-ML MSC&#39;)
#mm = ax.scatter(dfstat[&#39;lon&#39;].values, dfstat[&#39;lat&#39;].values, c=&#39;green&#39;, s=400, label=&#39;Site&#39;)

plt.legend(loc=&amp;quot;best&amp;quot;, markerscale=1., scatterpoints=1, fontsize=40)
          
# Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)     
fig.canvas.draw()
 
plt.savefig(&#39;Localisation_SWOB_Quebec.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.1)
plt.show()  
plt.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_35_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;6-if-we-want-to-plot-by-grouping-by-province&#34;&gt;6-  If we want to plot by grouping by province:&lt;/h3&gt;

&lt;p&gt;We only want the &amp;ldquo;Automatic&amp;rdquo; stations and group them by province.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped_dataframe = stations.loc[stations[&amp;quot;AUTO/MAN&amp;quot;]==&#39;AUTO&#39;,:].groupby(&#39;Province/Territory&#39;)
grouped_dataframe.count()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Province/Territory&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;IATA_ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;WMO_ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MSC_ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Latitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Longitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Elevation(m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Data_Provider&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dataset/Network&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;AUTO/MAN&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alberta&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;196&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;240&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;British Columbia&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;101&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;119&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Manitoba&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;New Brunswick&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Newfoundland and Labrador&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;34&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Northwest Territories&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;34&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Nova Scotia&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Nunavut&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ontario&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;103&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;111&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Prince Edward Island&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;103&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;122&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Saskatchewan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;57&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Yukon&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for name,group in grouped_dataframe:
   print(name) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Alberta
British Columbia
Manitoba
New Brunswick
Newfoundland and Labrador
Northwest Territories
Nova Scotia
Nunavut
Ontario
Prince Edward Island
Quebec
Saskatchewan
Yukon
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped_dataframe.get_group(&#39;Quebec&#39;).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;IATA_ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;WMO_ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;MSC_ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Latitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Longitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Elevation(m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Data_Provider&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Dataset/Network&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;AUTO/MAN&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Province/Territory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGAH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LA GRANDE IV&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71823&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7093GJ5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-73.6828&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;306.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGBC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAIE-COMEAU&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;71890&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7040442&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.1351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.2024&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGCH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHIBOUGAMAU-CHAPAIS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73011&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7091410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.7773&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-74.5304&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;389.3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGCL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL AIRPORT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73005&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051201&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.3088&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.2528&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;123&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CGGA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;GASPE AIRPORT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73116&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7052603&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.7833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-64.4833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MSC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AUTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We create a random color list for all of our provinces.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import random
number_of_colors = len(grouped_dataframe)
color = [&amp;quot;#&amp;quot;+&#39;&#39;.join([random.choice(&#39;0123456789ABCDEF&#39;) for j in range(6)])
             for i in range(number_of_colors)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pylab as plt
import numpy as np


fig = plt.figure(figsize=(28,16))   
ax = plt.axes(projection=ccrs.PlateCarree())
ax.set_extent((-150.0, -50, 40, 90))

ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac

ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières      
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                    facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)
states_provinces = cfeature.NaturalEarthFeature(
    category=&#39;cultural&#39;,
    name=&#39;admin_1_states_provinces_lines&#39;,
    scale=&#39;10m&#39;,
    facecolor=&#39;none&#39;)

ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  

ax.gridlines()
i = 0 
for name,group in grouped_dataframe:
    list_lon= grouped_dataframe.get_group(name)[&#39;Longitude&#39;].values
    list_lat= grouped_dataframe.get_group(name)[&#39;Latitude&#39;].values
    
    mm = ax.scatter(list_lon, list_lat, c=color[i], s=100, label=&#39;SWOB Met-ML MSC: &#39;+ name  )
    plt.legend(loc=&amp;quot;best&amp;quot;, markerscale=1., scatterpoints=1, fontsize=10)
    i+=1

# Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)     
fig.canvas.draw()
 
plt.savefig(&#39;Localisation_SWOB_CANADA.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.1)
plt.show()  
plt.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_42_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shapefiles in python</title>
      <link>/post/shapefiles_in_python/</link>
      <pubDate>Mon, 17 Feb 2020 11:51:51 -0800</pubDate>
      <guid>/post/shapefiles_in_python/</guid>
      <description>

&lt;p&gt;﻿&lt;/p&gt;

&lt;h3 id=&#34;about-vector-data&#34;&gt;About Vector Data&lt;/h3&gt;

&lt;p&gt;Vector data are composed of discrete geometric locations (x, y values) known as vertices that define the “shape” of the
spatial object.&lt;/p&gt;

&lt;p&gt;The organization of the vertices determines the type of vector that you are working with. There are three types of vector data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Points: Each individual point is defined by a single x, y coordinate. There can be many points in a vector point file.
&lt;img src=&#34;output_17_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Lines: Lines are composed of many (at least 2) vertices, or points, that are connected. For instance, a road or a stream may be represented by a line. This line is composed of a series of segments, each “bend” in the road or stream represents a vertex that has defined x, y location.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./output_20_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Polygons: A polygon consists of 3 or more vertices that are connected and “closed”. Thus the outlines of plot boundaries, lakes, oceans, and states or countries are often represented by polygons. Occasionally, a polygon can have a hole in the middle of it (like a doughnut), this is something to be aware of but not an issue you will deal with in this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;output_30_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;shapefiles-points-lines-and-polygons&#34;&gt;Shapefiles: Points, Lines, and Polygons&lt;/h3&gt;

&lt;p&gt;Geospatial data in vector format are often stored in a shapefile format. Because the structure of points, lines, and polygons are different, each individual shapefile can only contain one vector type (all points, all lines or all polygons). You will not find a mixture of point, line and polygon objects in a single shapefile.&lt;/p&gt;

&lt;p&gt;Objects stored in a shapefile often have a set of associated attributes that describe the data. For example, a line shapefile that contains the locations of streams, might contain the associated stream name, stream “order” and other information about each stream line object.&lt;/p&gt;

&lt;p&gt;A shapefile is created by 3 or more files, all of which must retain the same NAME and be stored in the same file directory, in order for you to be able to work with them.&lt;/p&gt;

&lt;h3 id=&#34;shapefile-structure&#34;&gt;Shapefile Structure&lt;/h3&gt;

&lt;p&gt;There are 3 key files associated with any and all shapefiles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.shp: the file that contains the geometry for all features.&lt;/li&gt;
&lt;li&gt;.shx: the file that indexes the geometry.&lt;/li&gt;
&lt;li&gt;.dbf: the file that stores feature attributes in a tabular format.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes, a shapefile will have other associated files including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.prj: the file that contains information on projection format including the coordinate system and projection information. It is a plain text file describing the projection using well-known text (WKT) format.&lt;/li&gt;
&lt;li&gt;.sbn and .sbx: the files that are a spatial index of the features.&lt;/li&gt;
&lt;li&gt;.shp.xml: the file that is the geospatial metadata in XML format, (e.g. ISO 19115 or XML format).
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use the geopandas library to work with vector data in Python. You will also use matplotlib.pyplot to plot your data.&lt;/p&gt;

&lt;p&gt;First, we import librairies.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
from matplotlib import pyplot as plt
%matplotlib inline
import geopandas as gpd
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-point-shapefile&#34;&gt;1- Point shapefile&lt;/h3&gt;

&lt;p&gt;We can then open our first shapefile which contains point locations&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes = gpd.read_file(&amp;quot;shapefiles\BV_SJ_ponts.shp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each object in a shapefile has one or more attributes associated with it. Shapefile attributes are similar to fields or columns in a spreadsheet. Each row in the spreadsheet has a set of columns associated with it that describe the row element. In the case of a shapefile, each row represents a spatial object - for example, a road, represented as a line in a line shapefile, will have one “row” of attributes associated with it. These attributes can include different types of information that describe objects stored within a shapefile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes.head(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Id&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;ORIG_FID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;OCEAN_EN&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;OCEAN_FR&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;WSCSSDA&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;WSCSDA&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;WSCMDA&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;WSCSSDA_EN&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;WSCSDA_EN&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;WSCMDA_EN&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;WSCSSDA_FR&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;WSCSDA_FR&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;WSCMDA_FR&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;BUFF_DIST&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;ORIG_FID_1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Shape_Leng&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Shape_Area&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;geometry&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Atlantic Ocean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OcÃ©an Atlantique&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01AE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint John and Southern Bay of Fundy (N.B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Maritime Provinces Drainage Area&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint-Jean et sud de la baie de Fundy (N.-B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Aire de drainage des provinces Maritimes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6325&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.74042&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POINT (-68.31290411677341 47.93509135554499)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Atlantic Ocean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OcÃ©an Atlantique&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01AE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint John and Southern Bay of Fundy (N.B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Maritime Provinces Drainage Area&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint-Jean et sud de la baie de Fundy (N.-B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Aire de drainage des provinces Maritimes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6325&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.74042&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POINT (-68.10019745512986 47.8385423546759)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Atlantic Ocean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OcÃ©an Atlantique&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01AE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint John and Southern Bay of Fundy (N.B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Maritime Provinces Drainage Area&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint-Jean et sud de la baie de Fundy (N.-B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Aire de drainage des provinces Maritimes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6325&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.74042&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POINT (-68.05084811719591 47.67967312057342)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Atlantic Ocean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OcÃ©an Atlantique&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01AE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint John and Southern Bay of Fundy (N.B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Maritime Provinces Drainage Area&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint-Jean et sud de la baie de Fundy (N.-B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Aire de drainage des provinces Maritimes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6325&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.74042&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POINT (-67.94013835894734 47.46553718633378)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Atlantic Ocean&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OcÃ©an Atlantique&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01AE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;01A&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint John and Southern Bay of Fundy (N.B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Maritime Provinces Drainage Area&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fish (Maine)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saint-Jean et sud de la baie de Fundy (N.-B.)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Aire de drainage des provinces Maritimes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6325&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.74042&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POINT (-67.79256589502562 47.36265881338679)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Notice that the geopandas data structure is a data.frame that contains a geometry column where the x, y point location values are stored. All of the other shapefile feature attributes are contained in columns, similar to what you may be used to if you’ve used a GIS tool such as ArcGIS or QGIS.&lt;/p&gt;

&lt;h3 id=&#34;shapefile-metadata-attributes&#34;&gt;Shapefile Metadata &amp;amp; Attributes&lt;/h3&gt;

&lt;p&gt;When you import the  shapefile layer into Python the gpd.read_file() function automatically stores information about the data as attributes. You are particularly interested in the geospatial metadata, describing the format, CRS, extent, and other components of the vector data, and the attributes which describe properties associated with each individual vector object.&lt;/p&gt;

&lt;h3 id=&#34;spatial-metadata&#34;&gt;Spatial Metadata&lt;/h3&gt;

&lt;p&gt;Key metadata for all shapefiles include:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Object Type: the class of the imported object.
- Coordinate Reference System (CRS): the projection of the data.
- Extent: the spatial extent (geographic area that the shapefile covers) of the shapefile. Note that the spatial extent for a shapefile represents the extent for ALL spatial objects in the shapefile.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can view shapefile metadata using the class(), .crs and .total_bounds methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(shapes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;geopandas.geodataframe.GeoDataFrame
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes.total_bounds
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([-70.40000541,  45.21527633, -65.03721851,  48.06254733])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes.crs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;init&#39;: &#39;epsg:4269&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The CRS for our data is epsg code: 4269.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes.geom_type.head(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    Point
1    Point
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes.geometry.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    POINT (-68.31290411677341 47.93509135554499)
1     POINT (-68.10019745512986 47.8385423546759)
2    POINT (-68.05084811719591 47.67967312057342)
3    POINT (-67.94013835894734 47.46553718633378)
4    POINT (-67.79256589502562 47.36265881338679)
Name: geometry, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-many-features-are-in-your-shapefile&#34;&gt;How Many Features Are in Your Shapefile?&lt;/h3&gt;

&lt;p&gt;You can view the number of features (counted by the number of rows in the attribute table) and feature attributes (number of columns) in our data using the pandas .shape method. Note that the data are returned as a vector of two values:&lt;/p&gt;

&lt;p&gt;(rows, columns)&lt;/p&gt;

&lt;p&gt;Also note that the number of columns includes a column where the geometry (the x, y coordinate locations) are stored.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(72, 18)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;plot-our-shapefile&#34;&gt;Plot our Shapefile&lt;/h3&gt;

&lt;p&gt;you can visualize the data in your Python geodata.frame object using the .plot() method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;shapes.loc[:, &#39;geometry&#39;].plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x9b129b0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_17_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-linestring-shapefile&#34;&gt;2- Linestring shapefile&lt;/h3&gt;

&lt;p&gt;We had previously a POINT object.&lt;/p&gt;

&lt;p&gt;We will then convert POINT to LINESTRING.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from shapely.geometry import LineString, mapping

def point_to_linestring(fili_shps):
    gdf = gpd.read_file(fili_shps) #POINTS
    latlon = [mapping(x)[&#39;coordinates&#39;] for x in gdf.geometry]
    lats = [x[1] for x in latlon]
    lons = [x[0] for x in latlon]
    linestr = LineString(zip(lons, lats))
    return gpd.GeoDataFrame(index=[0], crs=gdf.crs, geometry=[linestr])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;line_shapes = point_to_linestring(&amp;quot;shapefiles\BV_SJ_ponts.shp&amp;quot;)
line_shapes.loc[:, &#39;geometry&#39;].plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0xa55f128&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_20_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;line_shapes
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;geometry&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;LINESTRING (-68.31290411677341 47.93509135554499, &amp;hellip; )&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If we want to save our new shapefile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;line_shapes.to_file(&amp;quot;shapefiles\BV_SJ_lines.shp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And for example we can save latitude and longitude values into csv format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import shapefile
import os

def shp2csv(shp_file):
    &#39;&#39;&#39;Outputs a csv file based on input shapefile vertices&#39;&#39;&#39;
    
    out = os.path.splitext(shp_file)[0]+&#39;_pnts.csv&#39;

    with open(out, &#39;w&#39;) as csv:
        with shapefile.Reader(shp_file) as sf:

            for shp_rec in sf.shapeRecords():
                csv.write(&#39;{}\n&#39;.format(shp_rec.record))

                for pnt in shp_rec.shape.points:
                    csv.write(&#39;{}\n&#39;.format(pnt))

shp2csv(&amp;quot;shapefiles\BV_SJ_lines.shp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
BV_border = pd.read_csv(&#39;.\shapefiles\BV_SJ_lines_pnts.csv&#39;, sep=&#39;,&#39;,skiprows = range(0, 1))
BV_border.columns=[&amp;quot;lon&amp;quot;, &amp;quot;lat&amp;quot;]
BV_border[&amp;quot;lon&amp;quot;]=BV_border[&amp;quot;lon&amp;quot;].apply(lambda x: x.replace(&amp;quot;(&amp;quot;, &amp;quot;&amp;quot;)).apply(pd.to_numeric,1)
BV_border[&amp;quot;lat&amp;quot;]=BV_border[&amp;quot;lat&amp;quot;].apply(lambda x: x.replace(&amp;quot;)&amp;quot;, &amp;quot;&amp;quot;)).apply(pd.to_numeric,1)
BV_border.head()
BV_border.lon
BV_border.append(BV_border, ignore_index=True)
BV_border.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lon&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.1002&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.8385&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.0508&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.6797&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.9401&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.4655&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.7926&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.3627&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.6059&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.4158&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import cartopy.crs as ccrs
from cartopy.io.shapereader import Reader
from cartopy.feature import ShapelyFeature

fname = r&#39;shapefiles\BV_SJ_lines.shp&#39;

fig=plt.figure(figsize=(10,10), frameon=True)  
ax = plt.axes(projection=ccrs.Robinson())
ax.set_extent([-70,-64,45,50])
        
#ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac
    
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières 
        
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;50m&#39;,     # ajout de la couche cotière 
                            facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)
states_provinces = cfeature.NaturalEarthFeature(
        category=&#39;cultural&#39;,
        name=&#39;admin_1_states_provinces_lines&#39;,
         scale=&#39;10m&#39;,
         facecolor=&#39;none&#39;)
    
ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  
ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;)  
    
ax.gridlines()


        # Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)
        
fig.canvas.draw()
colors = [&#39;red&#39;]
maskBV = [&#39;BV&#39;]                      
cs = ax.plot(BV_border.lon,BV_border.lat, transform=ccrs.PlateCarree(), color=colors[0], linewidth=2, label=maskBV[0])
shape_feature = ShapelyFeature(Reader(fname).geometries(),
                                ccrs.PlateCarree(), edgecolor=&#39;red&#39;)
ax.add_feature(shape_feature, facecolor=&#39;yellow&#39;)
plt.legend(loc=&amp;quot;best&amp;quot;, markerscale=2., fontsize=10)     
plt.savefig(&#39;./figure.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.1)
plt.show()  
plt.close()
       

print(&#39;Terminé&#39;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_27_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Terminé
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-polygon-shapefile&#34;&gt;3- Polygon shapefile&lt;/h3&gt;

&lt;p&gt;We can now convert our linestring shapefile to a polygon shapefile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from shapely.geometry import Polygon, mapping

def linestring_to_polygon(fili_shps):
    gdf = gpd.read_file(fili_shps) #LINESTRING
    geom = [x for x in gdf.geometry]
    all_coords = mapping(geom[0])[&#39;coordinates&#39;]
    lats = [x[1] for x in all_coords]
    lons = [x[0] for x in all_coords]
    linestr = Polygon(zip(lons, lats))
    return gpd.GeoDataFrame(index=[0], crs=gdf.crs, geometry=[linestr])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;poly_shapes = linestring_to_polygon(&amp;quot;shapefiles\BV_SJ_lines.shp&amp;quot;)
poly_shapes.to_file(&#39;shapefiles\BV_SJ_WGS84.shp&#39;)
poly_shapes.loc[:, &#39;geometry&#39;].plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0xa5f0a90&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_30_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;poly_shapes
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;geometry&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POLYGON ((-68.31290411677341 47.93509135554499, &amp;hellip;))&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;4-check-if-a-point-in-inside-a-polygon&#34;&gt;4- Check if a point in inside a polygon&lt;/h3&gt;

&lt;p&gt;Function bellow will check if a point, defined by a specific latitude and longitude, is inside or not a polygon shapefile.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def check(lon, lat, ds_in):
  lyr_in = ds_in.GetLayer(0)  
  # create point geometry
  pt = ogr.Geometry(ogr.wkbPoint)
  pt.SetPoint_2D(0, lon, lat)
  # go over all the polygons in the layer see if one include the point
  for feat_in in lyr_in:
    # roughly subsets features, instead of go over everything
    ply = feat_in.GetGeometryRef()
    # test
    if ply.Contains(pt):
      # TODO do what you need to do here
        print(&#39;Point in shapefile polygon&#39;)
        return(lon, lat)
        return(True)
    else:
        print(&#39;Point not in shapefile polygon&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds_in  = ogr.Open(&amp;quot;shapefiles\BV_SJ_WGS84.shp&amp;quot;)
lon = -68.
lat = 47
ind = check(lon, lat, ds_in)
ind
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Point in shapefile polygon

(-68.0, 47)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import cartopy.crs as ccrs
from cartopy.io.shapereader import Reader
from cartopy.feature import ShapelyFeature

fname = r&#39;shapefiles\BV_SJ_WGS84.shp&#39;
fig=plt.figure(figsize=(28,16), frameon=True)  
ax = plt.axes(projection=ccrs.Robinson())
ax.set_extent([-70,-64,45,50])
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac
   
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières 
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                            facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)    
states_provinces = cfeature.NaturalEarthFeature(
            category=&#39;cultural&#39;,
            name=&#39;admin_1_states_provinces_lines&#39;,
            scale=&#39;10m&#39;,
            facecolor=&#39;none&#39;)
    
ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;) 
ax.plot(ind[0], ind[1], &#39;go&#39;, ms=20, transform=ccrs.Geodetic())

ax.text(ind[0] + .35, ind[1] + .15, 
                &#39;Point in shapefile polygon&#39;, 
                va=&#39;center&#39;, 
                ha=&#39;right&#39;, color= &#39;green&#39;, transform=ccrs.Geodetic(), fontweight=&#39;bold&#39;)

ax.plot(-66, 48.5, &#39;ro&#39;, ms=20, transform=ccrs.Geodetic())
ax.text(-66 + .35, 48.5 + .15, 
                &#39;Point outside shapefile polygon&#39;, 
                va=&#39;center&#39;, 
                ha=&#39;right&#39;, color= &#39;red&#39;, transform=ccrs.Geodetic(), fontweight=&#39;bold&#39;)

shape_feature = ShapelyFeature(Reader(fname).geometries(),
                                ccrs.PlateCarree(), edgecolor=&#39;black&#39;)
ax.add_feature(shape_feature, facecolor=&#39;yellow&#39;)

plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_35_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Canadian shapefile province</title>
      <link>/post/province_shapefiles/</link>
      <pubDate>Fri, 14 Feb 2020 09:14:48 -0800</pubDate>
      <guid>/post/province_shapefiles/</guid>
      <description>

&lt;p&gt;﻿&lt;/p&gt;

&lt;h3 id=&#34;from-shapefiles-to-netcdf-mask&#34;&gt;From shapefiles to Netcdf Mask&lt;/h3&gt;

&lt;p&gt;In this tutorial, we will use shapefiles to create masks over canadian provinces.&lt;/p&gt;

&lt;p&gt;We will use gridded dataset ANUSPLIN meteorological data.&lt;/p&gt;

&lt;p&gt;Agriculture and Agri-Food Canada have produced daily precipitation, minimum and maximum temperature across Canada (south of 60°N) for climate related application purpose using thin-plate smoothing splines, as implemented in the ANUSPLIN climate modeling software (Hutchinson et al., 2009; McKenney et al., 2011).&lt;/p&gt;

&lt;p&gt;The so-called ANUSPLIN data uses ground-based observations and generates daily gridded data from 1951 to 2017 on a Lambert conformal conic projection with 5’ arc minutes spacing (equivalent to a resolution of about 10 km). The key strength of this spatial interpolation method is its global dependence on all data, permitting robust and stable determination of spatially varying dependences on elevation. Hutchinson et al. (2009) have shown that while ANUSPLIN fall month’s absolute errors were remarkably small, those of winter months were quite large due to rather difficult observation and measurement conditions.&lt;/p&gt;

&lt;p&gt;Data are available on this &lt;a href=&#34;ftp://ftp.nrcan.gc.ca/pub/outgoing/canada_daily_grids&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will present a  solution based on open-source Python modules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - xarray: for manipulating &amp;amp; reading gridded data, and – very important – operate out-of-memory thanks to its dask capabilities
    - numpy: for simple array manipulations
    - geopandas: to open shapefiles
    - osgeo: 
    - matplotlib: for plotting
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-first-we-need-to-import-librairies-and-create-aliases&#34;&gt;1- First we need to import librairies and create aliases.&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xarray as xr 
import numpy as np
import regionmask
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
from osgeo import ogr
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;working-over-canadian-province&#34;&gt;Working over canadian province&lt;/h4&gt;

&lt;p&gt;In this example we will use canadian province shapefiles developped by statistics canada.&lt;/p&gt;

&lt;p&gt;Shapefiles are available on this &lt;a href=&#34;https://www12.statcan.gc.ca/census-recensement/2011/geo/bound-limit/bound-limit-2016-eng.cfm&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After downloaded the shapefile, we must load it using geopandas library:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;PATH_TO_SHAPEFILE = &#39;./Canadian_province/lpr_000b16a_e/lpr_000b16a_e.shp&#39;
province = gpd.read_file(PATH_TO_SHAPEFILE)
province
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;PRUID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PRNAME&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PRENAME&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PRFNAME&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PREABBR&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;PRFABBR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Newfoundland and Labrador / Terre-Neuve-et-Labrador&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Newfoundland and Labrador&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Terre-Neuve-et-Labrador&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.L.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T.-N.-L.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Prince Edward Island / Île-du-Prince-Édouard&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Prince Edward Island&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Île-du-Prince-Édouard&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;P.E.I.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Î.-P.-É.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nova Scotia / Nouvelle-Écosse&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nova Scotia&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nouvelle-Écosse&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.S.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.-É.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;New Brunswick / Nouveau-Brunswick&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;New Brunswick&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nouveau-Brunswick&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.B.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.-B.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec / Québec&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Québec&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Que.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Qc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ontario&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ontario&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ontario&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ont.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ont.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Manitoba&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Manitoba&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Manitoba&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Man.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Man.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saskatchewan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saskatchewan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Saskatchewan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sask.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sask.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alberta&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alberta&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alberta&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alta.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Alb.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;British Columbia / Colombie-Britannique&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;British Columbia&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Colombie-Britannique&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;B.C.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C.-B.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yukon&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yukon&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yukon&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y.T.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yn&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;61&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Northwest Territories / Territoires du Nord-Ouest&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Northwest Territories&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Territoires du Nord-Ouest&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N.W.T.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;T.N.-O.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nunavut&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nunavut&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nunavut&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nvt.&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Nt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Shapes are here a GeoDataFrame containing all polygons illustrating the province boundaries.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ID_PROV = 5
print(province.PRNAME[ID_PROV])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Ontario
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;province.loc[:, &#39;geometry&#39;].plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0xad67400&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output_6_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tmpWGS84 = province.to_crs({&#39;proj&#39;:&#39;longlat&#39;, &#39;ellps&#39;:&#39;WGS84&#39;, &#39;datum&#39;:&#39;WGS84&#39;})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tmpWGS84.plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1327ac88&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output_8_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can load the ANUSPLIN_10km gridded data. The parameter chunks is very important, it defines how big are the “pieces” of data moved from the disk to the memory. With this value the entire computation on a workstation with 32 GB takes a couple of minutes.&lt;/p&gt;

&lt;p&gt;We will load all the temperature files using Xarray library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model=&#39;ANUSPLIN_10km_YEAR_Mean_tasmoy_1950-2017&#39;
t_in = &#39;J:/DONNEES_AMERIQUE_DU_NORD/ANUSPLIN_10km/Netcdf/INDICES_ANNEES/Mean_tasmoy/&#39;        
data = t_in + model + &#39;.nc&#39;
ds = xr.open_mfdataset(data, chunks = {&#39;time&#39;: 10})
ds
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:      (time: 68, x: 510, y: 1068)
Coordinates:
    lon          (y, x) float32 dask.array&amp;lt;shape=(1068, 510), chunksize=(1068, 510)&amp;gt;
    lat          (y, x) float32 dask.array&amp;lt;shape=(1068, 510), chunksize=(1068, 510)&amp;gt;
  * time         (time) float64 1.0 2.0 3.0 4.0 5.0 ... 64.0 65.0 66.0 67.0 68.0
Dimensions without coordinates: x, y
Data variables:
    Mean_tasmoy  (time, y, x) float32 dask.array&amp;lt;shape=(68, 1068, 510), chunksize=(10, 1068, 510)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our xarray Dataset contains a single variable (Mean_tasmoy) which is stored as a dask.array. This is the result of loading files with open_mfdataset.&lt;/p&gt;

&lt;p&gt;Now we will use  regionmask module to create a gridded mask with the function regions_cls documented &lt;a href=&#34;https://regionmask.readthedocs.io/en/stable/generated/regionmask.Regions_cls.html#regionmask.Regions_cls&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this function we will create an object able to mask ANUSPLIN gridded data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;province_mask_poly = regionmask.Regions_cls(name = &#39;PRENAME&#39;, numbers = list(range(0,13)), names = list(tmpWGS84.PRENAME), abbrevs = list(tmpWGS84.PRENAME), outlines = list(tmpWGS84.geometry.values[i] for i in range(0,13)))
province_mask_poly
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;13 &#39;PRENAME&#39; Regions ()
Newfoundland and Labrador Prince Edward Island Nova Scotia New Brunswick Quebec Ontario Manitoba Saskatchewan Alberta British Columbia Yukon Northwest Territories Nunavut
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to apply the mask on the gridded dataset xarray ANUSPLIN.&lt;/p&gt;

&lt;p&gt;We select only the first timestep to speed up the process.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask = province_mask_poly.mask(ds.isel(time = 0), lat_name=&#39;lat&#39;, lon_name=&#39;lon&#39;)
mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray (y: 1068, x: 510)&amp;gt;
array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan]])
Coordinates:
  * y        (y) int64 0 1 2 3 4 5 6 7 ... 1061 1062 1063 1064 1065 1066 1067
  * x        (x) int64 0 1 2 3 4 5 6 7 8 ... 501 502 503 504 505 506 507 508 509
    lat      (y, x) float32 83.45833 83.375 83.291664 ... 41.125 41.041668
    lon      (y, x) float32 -140.95833 -140.95833 ... -52.04167 -52.04167
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray (y: 1068, x: 510)&amp;gt;
array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan]])
Coordinates:
  * y        (y) int64 0 1 2 3 4 5 6 7 ... 1061 1062 1063 1064 1065 1066 1067
  * x        (x) int64 0 1 2 3 4 5 6 7 8 ... 501 502 503 504 505 506 507 508 509
    lat      (y, x) float32 83.45833 83.375 83.291664 ... 41.125 41.041668
    lon      (y, x) float32 -140.95833 -140.95833 ... -52.04167 -52.04167
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mask can be saved (for example as a NetCDF) for a later use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask.to_netcdf(&#39;./mask_all_province.nc&#39;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A quick visualisation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(15,8))
ax = plt.axes()
mask.plot(ax = ax)
province.plot(ax = ax, alpha = 0.8, facecolor = &#39;none&#39;, lw = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x1b989828&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output_20_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-extract-one-province&#34;&gt;2- Extract one province&lt;/h3&gt;

&lt;p&gt;We will sho how to mask Ontario province.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ID_PROV = 5
print(province.PRNAME[ID_PROV])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Ontario
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray (y: 1068, x: 510)&amp;gt;
array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan]])
Coordinates:
  * y        (y) int64 0 1 2 3 4 5 6 7 ... 1061 1062 1063 1064 1065 1066 1067
  * x        (x) int64 0 1 2 3 4 5 6 7 8 ... 501 502 503 504 505 506 507 508 509
    lat      (y, x) float32 83.45833 83.375 83.291664 ... 41.125 41.041668
    lon      (y, x) float32 -140.95833 -140.95833 ... -52.04167 -52.04167
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel2 = ds.where(mask == ID_PROV)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:      (time: 68, x: 510, y: 1068)
Coordinates:
  * y            (y) int64 0 1 2 3 4 5 6 ... 1061 1062 1063 1064 1065 1066 1067
  * x            (x) int64 0 1 2 3 4 5 6 7 8 ... 502 503 504 505 506 507 508 509
    lon          (y, x) float32 dask.array&amp;lt;shape=(1068, 510), chunksize=(1068, 510)&amp;gt;
    lat          (y, x) float32 dask.array&amp;lt;shape=(1068, 510), chunksize=(1068, 510)&amp;gt;
  * time         (time) float64 1.0 2.0 3.0 4.0 5.0 ... 64.0 65.0 66.0 67.0 68.0
Data variables:
    Mean_tasmoy  (time, y, x) float32 dask.array&amp;lt;shape=(68, 1068, 510), chunksize=(10, 1068, 510)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick visualisation, we will display the first step of our DataArray masked.&lt;/p&gt;

&lt;p&gt;For out_sel2 array :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(15,8))
ax = plt.axes()
out_sel2.Mean_tasmoy.isel(time = 0).plot(ax = ax)
province.plot(ax = ax, alpha = 0.8, facecolor = &#39;none&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x18bc95f8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output_28_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel2.to_netcdf(&#39;./Ontario.nc&#39;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pylab as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import numpy as np
import matplotlib as mpl
from netCDF4 import Dataset, num2date
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
import datetime
import xarray as xr
import pandas as pd

filename=&#39;./Ontario.nc&#39;
nc_fid=Dataset(filename,&#39;r&#39;)
data=nc_fid.variables[&#39;Mean_tasmoy&#39;][:].squeeze()
lons=nc_fid.variables[&#39;lon&#39;][:].squeeze()
lats=nc_fid.variables[&#39;lat&#39;][:].squeeze()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(68, 1068, 510)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s use Xarray to compute climatology over 1988-2017.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_m = data[-30:,:,:]
clim_89_2017=data_m.mean(axis=0)
clim_89_2017.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1068, 510)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig=plt.figure(figsize=(28,16), frameon=True)  
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-100,-75,40,58])
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac
   
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières 
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                            facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)    
states_provinces = cfeature.NaturalEarthFeature(
            category=&#39;cultural&#39;,
            name=&#39;admin_1_states_provinces_lines&#39;,
            scale=&#39;10m&#39;,
            facecolor=&#39;none&#39;)
    
ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;) 

 
mm = ax.contourf(lons,\
                   lats,\
                   clim_89_2017,\
                   vmin=-10,\
                   vmax=10, \
                   transform=ccrs.PlateCarree(),\
                   levels=np.arange(-10, 10, 1.),\
                   cmap=plt.cm.jet )
ax.gridlines()

# Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)

cbar.set_label(u&#39;\n Projection = Lambert Conformal Conic \nResolution: 5 Arcs-Minutes (10 km)\nData provided by Natural Resources Canada / Created by Guillaume Dueymes&#39;, size=&#39;medium&#39;) # Affichage de la légende de la barre de couleur

cbar = plt.colorbar(mm,  shrink=0.75, drawedges=&#39;True&#39;,extend=&#39;both&#39;)
cbar.ax.tick_params(labelsize=17) 
    
plt.xlabel(u&#39;\n\n\nTemperature / Température (°C)&#39;,size=&#39;x-large&#39;)
string_title=u&#39;Climate normals of mean annual temperature (°C)\n 1988 - 2017\n&#39;
plt.title(string_title, size=&#39;xx-large&#39;)
plt.savefig(&#39;./ANUSPLIN_Ontario_10km_YEAR_CLIM_1988-2017.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.1)
plt.show() 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output_34_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web scraping using Python</title>
      <link>/post/scrap_eccc/</link>
      <pubDate>Fri, 07 Feb 2020 12:55:20 -0800</pubDate>
      <guid>/post/scrap_eccc/</guid>
      <description>

&lt;p&gt;﻿&lt;/p&gt;

&lt;h3 id=&#34;scraping-web-data-using-python&#34;&gt;Scraping web data using Python&lt;/h3&gt;

&lt;p&gt;In this tutorial, we  will see how to scrap data from Environment Canada webpage.&lt;/p&gt;

&lt;h3 id=&#34;1-exploring-the-structure-of-the-eccc-web-page&#34;&gt;1- Exploring the structure of the ECCC web page&lt;/h3&gt;

&lt;p&gt;We will extract the current weather conditions and weather forecast for &lt;a href=&#34;https://meteo.gc.ca/city/pages/qc-147_metric_f.html&#34; target=&#34;_blank&#34;&gt;Montreal&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests
import pandas as pd
# we download the web page
page = requests.get(&amp;quot;https://meteo.gc.ca/city/pages/qc-147_metric_e.html&amp;quot;)

# Using BeautifulSoup to analyze html code
from bs4 import BeautifulSoup

# we will analyze the previous content with BeautifulSoup
soup = BeautifulSoup(page.content,&#39;html.parser&#39;)
soup.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;/&amp;gt;,
 &amp;lt;meta content=&amp;quot;width=device-width, initial-scale=1&amp;quot; name=&amp;quot;viewport&amp;quot;/&amp;gt;,
 &amp;lt;meta content=&amp;quot;Environment Canada&amp;quot; name=&amp;quot;dcterms.creator&amp;quot;/&amp;gt;,
 &amp;lt;meta content=&amp;quot;eng&amp;quot; name=&amp;quot;dcterms.language&amp;quot; title=&amp;quot;ISO639-2&amp;quot;/&amp;gt;,
 &amp;lt;meta content=&amp;quot;Current conditions and forecasts including 7 day outlook, daily high/low temperature, warnings, chance of precipitation, pressure, humidity/wind chill (when applicable) historical data, normals, record values and sunrise/sunset times&amp;quot; name=&amp;quot;description&amp;quot;/&amp;gt;,
 &amp;lt;meta content=&amp;quot;meteorology;weather;weather warnings;weather forecasts&amp;quot; name=&amp;quot;dcterms.subject&amp;quot; title=&amp;quot;scheme&amp;quot;/&amp;gt;,
 &amp;lt;meta content=&amp;quot;2013-04-16&amp;quot; name=&amp;quot;dcterms.issued&amp;quot; title=&amp;quot;W3CDTF&amp;quot;/&amp;gt;,
 &amp;lt;meta content=&amp;quot;2020-02-07&amp;quot; name=&amp;quot;dcterms.modified&amp;quot; title=&amp;quot;W3CDTF&amp;quot;/&amp;gt;,
 &amp;lt;title&amp;gt;Montréal, QC - 7 Day Forecast - Environment Canada&amp;lt;/title&amp;gt;,
 &amp;lt;meta content=&amp;quot;Montréal, QC - 7 Day Forecast - Environment Canada&amp;quot; name=&amp;quot;dcterms.title&amp;quot;/&amp;gt;,
 &amp;lt;link href=&amp;quot;/template/gcweb/v5.0.1/assets/favicon.ico&amp;quot; rel=&amp;quot;icon&amp;quot; type=&amp;quot;image/x-icon&amp;quot;/&amp;gt;,
 &amp;lt;link href=&amp;quot;/template/gcweb/v5.0.1/css/theme.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;,
 &amp;lt;link href=&amp;quot;/v175/css/city/jquery-ui-1.10.3.custom.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;,
 &amp;lt;noscript&amp;gt;&amp;lt;link href=&amp;quot;/template/gcweb/v5.0.1/css/noscript.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;&amp;lt;/noscript&amp;gt;,
 &amp;lt;link href=&amp;quot;/template/gcweb/v5.0.1/css/noscript.min.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;,
 &amp;lt;link href=&amp;quot;/rss/city/qc-147_e.xml&amp;quot; rel=&amp;quot;alternate&amp;quot; title=&amp;quot;ATOM feed for Montréal - Weather - Environment Canada&amp;quot; type=&amp;quot;application/atom+xml&amp;quot;/&amp;gt;,
 &amp;lt;link href=&amp;quot;/rss/warning/qc-147_e.xml&amp;quot; rel=&amp;quot;alternate&amp;quot; title=&amp;quot;ATOM feed for Montréal - Warning - Environment Canada&amp;quot; type=&amp;quot;application/atom+xml&amp;quot;/&amp;gt;,
 &amp;lt;link href=&amp;quot;/v175/css/city/city.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;,
 &amp;lt;link href=&amp;quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;,
 &amp;lt;link href=&amp;quot;/v175/css/wxotemplate/wxo.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
 &amp;lt;link href=&amp;quot;/v175/css/wxotemplate/print-sm.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;
 &amp;lt;!--[if lte IE 9]&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/v175/css/wxotemplate/wxo-ie8.css&amp;quot; /&amp;gt;&amp;lt;![endif]--&amp;gt;
 &amp;lt;/link&amp;gt;,
 &amp;lt;link href=&amp;quot;/v175/css/wxotemplate/print-sm.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot;/&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;soup.title
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Montréal, QC - 7 Day Forecast - Environment Canada&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-reading-current-conditions&#34;&gt;1-  Reading current conditions&lt;/h3&gt;

&lt;h4 id=&#34;column-1&#34;&gt;Column 1&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;conditions = soup.find(id=&amp;quot;mainContent&amp;quot;)
col1 = conditions.find_all(class_=&amp;quot;dl-horizontal wxo-conds-col1&amp;quot;)
today1 = col1[1]
#print(today1.prettify())
tmp1  = today1.select(&amp;quot;.mrgn-bttm-0&amp;quot;)
print(tmp1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;dd class=&amp;quot;mrgn-bttm-0&amp;quot;&amp;gt;Light Snow and Blowing Snow&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-metric-hide&amp;quot;&amp;gt;98.5 &amp;lt;abbr title=&amp;quot;kilopascals&amp;quot;&amp;gt;kPa&amp;lt;/abbr&amp;gt;
&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-imperial-hide wxo-city-hidden&amp;quot;&amp;gt;29.1 inches&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0&amp;quot;&amp;gt;Falling&amp;lt;/dd&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;short_desc = [tmp1[0].get_text()]
short_desc
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Light Snow and Blowing Snow&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pression = [tmp1[1].get_text().replace(&#39;\n&#39;,&#39;&#39;)]
trend =[ tmp1[3].get_text()]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather = pd.DataFrame({&amp;quot;short_desc&amp;quot;: short_desc,
                        &amp;quot;pression&amp;quot;:   pression,
                        &amp;quot;trend&amp;quot;:   trend,
                       })
weather
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;short_desc&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;pression&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;trend&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Light Snow and Blowing Snow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;98.5 kPa&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Falling&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;column-2&#34;&gt;Column 2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;col2 = conditions.find_all(class_=&amp;quot;dl-horizontal wxo-conds-col2&amp;quot;)
today2 = col2[1]
#print(today2.prettify())
tmp2  = today2.select(&amp;quot;.mrgn-bttm-0&amp;quot;)
print(tmp2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-metric-hide&amp;quot;&amp;gt;-6.7°&amp;lt;abbr title=&amp;quot;Celsius&amp;quot;&amp;gt;C&amp;lt;/abbr&amp;gt;
&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-imperial-hide wxo-city-hidden&amp;quot;&amp;gt;19.9°
                    &amp;lt;abbr title=&amp;quot;Fahrenheit&amp;quot;&amp;gt;F&amp;lt;/abbr&amp;gt;
&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-metric-hide&amp;quot;&amp;gt;-8.8°&amp;lt;abbr title=&amp;quot;Celsius&amp;quot;&amp;gt;C&amp;lt;/abbr&amp;gt;
&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-imperial-hide wxo-city-hidden&amp;quot;&amp;gt;16.2°&amp;lt;abbr title=&amp;quot;Fahrenheit&amp;quot;&amp;gt;F&amp;lt;/abbr&amp;gt;
&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0&amp;quot;&amp;gt;85%&amp;lt;/dd&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;temperature = [tmp2[0].get_text().replace(&#39;\n&#39;,&#39;&#39;)]
rosee = [tmp2[2].get_text().replace(&#39;\n&#39;,&#39;&#39;)]
humidity = [tmp2[4].get_text().replace(&#39;\n&#39;,&#39;&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather = pd.DataFrame({&amp;quot;temperature&amp;quot;: temperature,
                        &amp;quot;temperature_rosee&amp;quot;:   rosee,
                        &amp;quot;humidity&amp;quot;:   humidity,
                       })
weather
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;temperature&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;temperature_rosee&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;humidity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-6.7°C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-8.8°C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;85%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;column-3&#34;&gt;Column 3&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;col3 = conditions.find_all(class_=&amp;quot;dl-horizontal wxo-conds-col3&amp;quot;)
today3 = col3[1]
#print(today2.prettify())
tmp3  = today3.select(&amp;quot;.mrgn-bttm-0&amp;quot;)
print(tmp3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;dd class=&amp;quot;longContent mrgn-bttm-0 wxo-metric-hide&amp;quot;&amp;gt;
&amp;lt;abbr title=&amp;quot;North&amp;quot;&amp;gt;N&amp;lt;/abbr&amp;gt; 35  &amp;lt;br class=&amp;quot;visible-xs&amp;quot;/&amp;gt;gust 53 &amp;lt;abbr title=&amp;quot;kilometres per hour&amp;quot;&amp;gt;km/h&amp;lt;/abbr&amp;gt;
&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;longContent mrgn-bttm-0 wxo-imperial-hide wxo-city-hidden&amp;quot;&amp;gt;
&amp;lt;abbr title=&amp;quot;North&amp;quot;&amp;gt;N&amp;lt;/abbr&amp;gt; 22  &amp;lt;br class=&amp;quot;visible-xs&amp;quot;/&amp;gt;gust 33 &amp;lt;abbr title=&amp;quot;miles per hour&amp;quot;&amp;gt;mph&amp;lt;/abbr&amp;gt;
&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-metric-hide&amp;quot;&amp;gt;-16&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-imperial-hide wxo-city-hidden&amp;quot;&amp;gt;3&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-metric-hide&amp;quot;&amp;gt;0.8 &amp;lt;abbr title=&amp;quot;kilometres&amp;quot;&amp;gt;km&amp;lt;/abbr&amp;gt;
&amp;lt;/dd&amp;gt;, &amp;lt;dd class=&amp;quot;mrgn-bttm-0 wxo-imperial-hide wxo-city-hidden&amp;quot;&amp;gt;0.5 mile
                        &amp;lt;/dd&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;wind = [tmp3[0].get_text().replace(&#39;\n&#39;,&#39;&#39;)]
visibility = [tmp3[2].get_text().replace(&#39;\n&#39;,&#39;&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather = pd.DataFrame({&amp;quot;short_desc&amp;quot;: short_desc,
                        &amp;quot;pression&amp;quot;:   pression,
                        &amp;quot;Trend&amp;quot;:   trend,
                        &amp;quot;temperature&amp;quot;: temperature,
                        &amp;quot;temperature_rosee&amp;quot;:   rosee,
                        &amp;quot;humidity&amp;quot;:   humidity,
                        &amp;quot;wind&amp;quot;:   wind,
                        &amp;quot;visibility&amp;quot;:   visibility,
                       })
weather
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;short_desc&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;pression&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Trend&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;temperature&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;temperature_rosee&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;humidity&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;wind&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;visibility&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Light Snow and Blowing Snow&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;98.5 kPa&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Falling&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-6.7°C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-8.8°C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;85%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N 35  gust 53 km/h&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather.to_csv(&amp;quot;current.csv&amp;quot;, header = True, sep = &#39;,&#39;,encoding=&#39;utf-8&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-reading-forecasting-values&#34;&gt;2-  Reading forecasting values&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;period_tags = soup.find(id=&amp;quot;mainContent&amp;quot;)
row1 = period_tags.find_all(class_=&amp;quot;div-row div-row1 div-row-head&amp;quot;)
row1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;div class=&amp;quot;div-row div-row1 div-row-head&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;/forecast/hourly/qc-147_metric_e.html&amp;quot;&amp;gt;&amp;lt;strong title=&amp;quot;Friday&amp;quot;&amp;gt;Fri&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;7 &amp;lt;abbr title=&amp;quot;February&amp;quot;&amp;gt;Feb&amp;lt;/abbr&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;,
 &amp;lt;div class=&amp;quot;div-row div-row1 div-row-head&amp;quot;&amp;gt;
 &amp;lt;strong title=&amp;quot;Saturday&amp;quot;&amp;gt;Sat&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;8 &amp;lt;abbr title=&amp;quot;February&amp;quot;&amp;gt;Feb&amp;lt;/abbr&amp;gt;
 &amp;lt;/div&amp;gt;,
 &amp;lt;div class=&amp;quot;div-row div-row1 div-row-head&amp;quot;&amp;gt;
 &amp;lt;strong title=&amp;quot;Sunday&amp;quot;&amp;gt;Sun&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;9 &amp;lt;abbr title=&amp;quot;February&amp;quot;&amp;gt;Feb&amp;lt;/abbr&amp;gt;
 &amp;lt;/div&amp;gt;,
 &amp;lt;div class=&amp;quot;div-row div-row1 div-row-head&amp;quot;&amp;gt;
 &amp;lt;strong title=&amp;quot;Monday&amp;quot;&amp;gt;Mon&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;10 &amp;lt;abbr title=&amp;quot;February&amp;quot;&amp;gt;Feb&amp;lt;/abbr&amp;gt;
 &amp;lt;/div&amp;gt;,
 &amp;lt;div class=&amp;quot;div-row div-row1 div-row-head&amp;quot;&amp;gt;
 &amp;lt;strong title=&amp;quot;Tuesday&amp;quot;&amp;gt;Tue&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;11 &amp;lt;abbr title=&amp;quot;February&amp;quot;&amp;gt;Feb&amp;lt;/abbr&amp;gt;
 &amp;lt;/div&amp;gt;,
 &amp;lt;div class=&amp;quot;div-row div-row1 div-row-head&amp;quot;&amp;gt;
 &amp;lt;strong title=&amp;quot;Wednesday&amp;quot;&amp;gt;Wed&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;12 &amp;lt;abbr title=&amp;quot;February&amp;quot;&amp;gt;Feb&amp;lt;/abbr&amp;gt;
 &amp;lt;/div&amp;gt;,
 &amp;lt;div class=&amp;quot;div-row div-row1 div-row-head&amp;quot;&amp;gt;
 &amp;lt;strong title=&amp;quot;Thursday&amp;quot;&amp;gt;Thu&amp;lt;/strong&amp;gt;&amp;lt;br/&amp;gt;13 &amp;lt;abbr title=&amp;quot;February&amp;quot;&amp;gt;Feb&amp;lt;/abbr&amp;gt;
 &amp;lt;/div&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;period_tags = soup.find(id=&amp;quot;mainContent&amp;quot;)
row1 = period_tags.find_all(class_=&amp;quot;div-row div-row1 div-row-head&amp;quot;)
periods = [pt.get_text().replace(&#39;\xa0&#39;, &#39; &#39;).replace(&#39;\n&#39;,&#39;&#39;) for pt in row1]
periods
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Fri7 Feb&#39;,
 &#39;Sat8 Feb&#39;,
 &#39;Sun9 Feb&#39;,
 &#39;Mon10 Feb&#39;,
 &#39;Tue11 Feb&#39;,
 &#39;Wed12 Feb&#39;,
 &#39;Thu13 Feb&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;period_tags = soup.find(id=&amp;quot;mainContent&amp;quot;)
row2 = period_tags.find_all(class_=&amp;quot;div-row div-row2 div-row-data&amp;quot;)
row2[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;div-row div-row2 div-row-data&amp;quot;&amp;gt;
&amp;lt;img alt=&amp;quot;A mix of sun and cloud&amp;quot; class=&amp;quot;center-block&amp;quot; height=&amp;quot;51&amp;quot; src=&amp;quot;/weathericons/02.gif&amp;quot; width=&amp;quot;60&amp;quot;/&amp;gt;&amp;lt;p class=&amp;quot;mrgn-bttm-0&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;high wxo-metric-hide&amp;quot; title=&amp;quot;max&amp;quot;&amp;gt;-13°&amp;lt;abbr title=&amp;quot;Celsius&amp;quot;&amp;gt;C&amp;lt;/abbr&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;high wxo-imperial-hide wxo-city-hidden&amp;quot; title=&amp;quot;max&amp;quot;&amp;gt;9°&amp;lt;abbr title=&amp;quot;Fahrenheit&amp;quot;&amp;gt;F&amp;lt;/abbr&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;mrgn-bttm-0 pop text-center&amp;quot;&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;mrgn-bttm-0&amp;quot;&amp;gt;A mix of sun and cloud&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;period_tags = soup.find(id=&amp;quot;mainContent&amp;quot;)
row2 = period_tags.find_all(class_=&amp;quot;div-row div-row2 div-row-data&amp;quot;)
temperature_f = [pt.get_text().split(&#39;\n&#39;)[1][:] for pt in row2]
temperature_f
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;-5°C23°F&#39;,
 &#39;-13°C9°F&#39;,
 &#39;-6°C21°F&#39;,
 &#39;-3°C27°F&#39;,
 &#39;-2°C28°F&#39;,
 &#39;-6°C21°F&#39;,
 &#39;-6°C21°F&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;temperature_2=[]
for val in enumerate(temperature_f):
    temperature_2.append(val[1].split(&#39;C&#39;)[0] + &#39;C&#39;)
temperature_2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;-5°C&#39;, &#39;-13°C&#39;, &#39;-6°C&#39;, &#39;-3°C&#39;, &#39;-2°C&#39;, &#39;-6°C&#39;, &#39;-6°C&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;conditions_f = [pt.get_text().split(&#39;\n&#39;)[3] for pt in row2]
conditions_f
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;Snow at times heavy and blowing snow&#39;,
 &#39;A mix of sun and cloud&#39;,
 &#39;Sunny&#39;,
 &#39;Snow&#39;,
 &#39;Periods of snow&#39;,
 &#39;A mix of sun and cloud&#39;,
 &#39;Chance of flurries&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather_f = pd.DataFrame({&amp;quot;Period&amp;quot;: periods,
                       &amp;quot;temperature_f&amp;quot;: temperature_f,
                       &amp;quot;conditions_f&amp;quot;:conditions_f,
                       })
weather_f

&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Period&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;temperature_f&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;conditions_f&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fri7 Feb&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-5°C23°F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Snow at times heavy and blowing snow&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sat8 Feb&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-13°C9°F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A mix of sun and cloud&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sun9 Feb&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-6°C21°F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Sunny&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mon10 Feb&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-3°C27°F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Snow&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Tue11 Feb&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-2°C28°F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Periods of snow&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Wed12 Feb&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-6°C21°F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;A mix of sun and cloud&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Thu13 Feb&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;-6°C21°F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Chance of flurries&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;3-download-of-weather-icons-for-the-next-7-days&#34;&gt;3- Download of weather icons for the next 7 days&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from urllib import request
row3 = period_tags.find_all(class_=&amp;quot;div-row div-row2 div-row-data&amp;quot;)
i = 0
for images in row3:
    s = images.find(&#39;img&#39;)
    f = open(str(i) + &#39;.gif&#39;, &#39;wb&#39;)
    f.write(request.urlopen(&amp;quot;https://meteo.gc.ca/weathericons/&amp;quot;+str(s)[str(s).find(&#39;gif&#39;)-3:(str(s).find(&#39;gif&#39;))-1]+&amp;quot;.gif&amp;quot;).read())
    f.close() 
    i += 1 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;scrap.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;weather_f.to_csv(&amp;quot;forecast.csv&amp;quot;, header = True, sep = &#39;,&#39;,encoding=&#39;utf-8&#39;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Web Map Service and Cartopy</title>
      <link>/post/cartopy_wms/</link>
      <pubDate>Fri, 07 Feb 2020 12:42:01 -0800</pubDate>
      <guid>/post/cartopy_wms/</guid>
      <description>

&lt;h2 id=&#34;cartopy-add-wms-image-from-environment-canada&#34;&gt;Cartopy: Add WMS image from Environment Canada&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will use a Web Map Service and Cartopy python library to display products from Environment Canada&lt;/p&gt;

&lt;p&gt;A Web Map Service (WMS) defines an interface that allows a client to get maps of geospatial data and gain detailed information on specific features shown on the map. A &amp;ldquo;map&amp;rdquo; is defined here as a visual representation of geospatial data, not the geospatial data itself.&lt;/p&gt;

&lt;p&gt;Environnement Canada generates and archives  moasic .png images every 5 minutes. These images are served as a Web Map Service. This notebook shows how to add those images to a cartopy figure axes.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href=&#34;https://eccc-msc.github.io/open-data/msc-data/readme_fr/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; with availables datasets.&lt;/p&gt;

&lt;p&gt;Data Source: &lt;a href=&#34;https://geo.weather.gc.ca/geomet?service=WMS&amp;amp;version=1.3.0&amp;amp;request=GetCapabilities&amp;amp;layer=RADAR_1KM_RRAI&#34; target=&#34;_blank&#34;&gt;https://geo.weather.gc.ca/geomet?service=WMS&amp;amp;version=1.3.0&amp;amp;request=GetCapabilities&amp;amp;layer=RADAR_1KM_RRAI&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-plot-rrai-1-km-for-a-specific-date&#34;&gt;1- plot RRAI 1 km for a specific date&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATE = datetime(2020, 2, 7, 19, 0)

fig = plt.figure(figsize=(14, 8))

ax = fig.add_subplot(1, 1, 1,projection=ccrs.LambertConformal(central_longitude=-100))
ax.add_feature(cfeature.COASTLINE.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.STATES.with_scale(&#39;50m&#39;))

# Date string format for data request
strDATE = DATE.strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;)

ax.set_title(&#39;%s&#39; % DATE.strftime(&#39;%H:%M UTC %d %b %Y&#39;), loc=&#39;right&#39;)
ax.set_title( &#39;RADAR_1km_RRAI&#39;, loc=&#39;left&#39;, fontweight=&#39;bold&#39;, fontsize=15)
    
ax.add_wms(wms=&#39;https://geo.weather.gc.ca/geomet?service=WMS&amp;amp;version=1.3.0&amp;amp;request=GetCapabilities&amp;amp;layer=RADAR_1KM_RRAI&#39;,
                layers=&#39;RADAR_1KM_RRAI&#39; ,
                wms_kwargs={&#39;time&#39;:strDATE, &#39;transparent&#39;:True}, zorder=10)
    
ax.stock_img()
ax.set_extent((-80, -60, 40, 52))   

fig.subplots_adjust(wspace=0.02)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_3_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-plot-the-most-recent-time-available&#34;&gt;2- Plot the most recent time available&lt;/h3&gt;

&lt;p&gt;Simply leave out the &amp;lsquo;time&amp;rsquo; argument in the wms_kwargs dict. The transparent option should default to True.&lt;/p&gt;

&lt;p&gt;The timestamp of the image is retrieved from the &lt;a href=&#34;https://mesonet.agron.iastate.edu/data/gis/images/4326/USCOMP/n0q_0.json&#34; target=&#34;_blank&#34;&gt;JSON file&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Get the metadata for the most recent NEXRAD image from JSON file.
import requests

def get_timestamp():
    f = requests.get(&#39;https://mesonet.agron.iastate.edu/data/gis/images/4326/USCOMP/n0q_0.json&#39;).json()
    validDATE = datetime.strptime(f[&#39;meta&#39;][&#39;valid&#39;], &#39;%Y-%m-%dT%H:%M:%SZ&#39;)
    return validDATE
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&#39;Latest Image:&#39;, get_timestamp())
print(&#39;Current Time:&#39;, datetime.utcnow())

diff = (datetime.utcnow()-get_timestamp())
print(&#39;Difference (minutes):&#39;, diff.seconds/60)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Latest Image: 2020-02-07 19:15:00
Current Time: 2020-02-07 19:17:32.276824
Difference (minutes): 2.533333333333333
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(14, 8))

ax = fig.add_subplot(1, 1, 1,
                     projection=ccrs.LambertConformal(central_longitude=-100))
ax.add_feature(cfeature.COASTLINE.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.STATES.with_scale(&#39;50m&#39;))

# Date string format for data reques

ax.set_title(&#39;Most Recent Time&#39;, fontweight=&#39;bold&#39;, loc=&#39;left&#39;)
ax.set_title(&#39;%s&#39; % get_timestamp().strftime(&#39;%H:%M UTC %d %b %Y&#39;), loc=&#39;right&#39;)
ax.add_wms(wms=&#39;https://geo.weather.gc.ca/geomet?service=WMS&amp;amp;version=1.3.0&amp;amp;request=GetCapabilities&amp;amp;layer=RADAR_1KM_RRAI&#39;,
           layers=&#39;RADAR_1KM_RRAI&#39;,
           wms_kwargs={&#39;transparent&#39;:True}, zorder=10)

# ^ For current time (most recent time in last 5 minutes), leave the &#39;time&#39; 
#   wms_kwargs unassigned. Transparetn should be True by default, but it
#   doesn&#39;t hurt to be explicit.

ax.set_extent((-80, -60, 40, 52)) 

fig.subplots_adjust(wspace=0.02)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_7_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3&#34;&gt;3&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(15, 5))

ax = fig.add_subplot(1, 2, 1,
                         projection=ccrs.LambertConformal(central_longitude=-100))
ax.add_feature(cfeature.COASTLINE.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.STATES.with_scale(&#39;50m&#39;))
    
# Date string format for data request
strDATE = DATE.strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;)

ax.set_title(&#39;Most Recent Time&#39;, fontweight=&#39;bold&#39;, loc=&#39;left&#39;)
ax.set_title(&#39;%s&#39; % get_timestamp().strftime(&#39;%H:%M UTC %d %b %Y&#39;), loc=&#39;right&#39;)
ax.add_wms(wms=&#39;https://geo.weather.gc.ca/geomet?service=WMS&amp;amp;version=1.3.0&amp;amp;request=GetCapabilities&amp;amp;layer=RADAR_1KM_RRAI&#39;,
           layers=&#39;RADAR_1KM_RRAI&#39;,
           wms_kwargs={&#39;transparent&#39;:True}, zorder=10)
ax.set_extent((-80, -60, 40, 52))
# ^ If you add a background image or use tiles you neet to set transparent
#   as True and set the zorder as a higher number, i.e. 10.
    
ax.stock_img()
    
ax.set_extent([-120, -75, 23, 50])   
ax = fig.add_subplot(1, 2, 2,projection=ccrs.LambertConformal(central_longitude=-100))
ax.add_feature(cfeature.COASTLINE.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.STATES.with_scale(&#39;50m&#39;))

# Date string format for data reques
# https://mesonet.agron.iastate.edu/docs/nexrad_mosaic/

ax.set_title(&#39;Most Recent Time&#39;, fontweight=&#39;bold&#39;, loc=&#39;left&#39;)
ax.set_title(&#39;%s&#39; % get_timestamp().strftime(&#39;%H:%M UTC %d %b %Y&#39;), loc=&#39;right&#39;)
ax.add_wms(wms=&#39;https://geo.weather.gc.ca/geomet?service=WMS&amp;amp;version=1.3.0&amp;amp;request=GetCapabilities&amp;amp;layer=RADAR_1KM_RRAI&#39;,
           layers=&#39;RADAR_1KM_RRAI&#39;,
           wms_kwargs={&#39;transparent&#39;:True}, zorder=10)
ax.set_extent((-80, -60, 40, 52)) 
fig.subplots_adjust(wspace=0.02)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_9_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;An other example using &lt;a href=&#34;https://mesonet.agron.iastate.edu/docs/nexrad_composites/&#34; target=&#34;_blank&#34;&gt;NEXRAD mosaic&lt;/a&gt;  image from Iowa Environmental Mesonet.&lt;/p&gt;

&lt;p&gt;See the data source URL for dBZ colormaps. You can generate an approximate colormap with MetPy&amp;rsquo;s NWSReflectivity and NWSReflectivityExpanded ctables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;N0Q: Base Reflectivity - 8 bit/0.5 dbz resolution&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;colorbars&#34;&gt;Colorbars&lt;/h4&gt;

&lt;p&gt;See the data source website for the real colormaps.&lt;/p&gt;

&lt;p&gt;Approximate colorbars can be made with metpy. The NWSReflectivity colormap is nearly exact for N0R, but NWSReflectivityExpanded is very different for N0Q. When I need it, I probably will make a custom colormap sometime in the future.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from metpy.plots import colortables
import numpy as np
ctable = &#39;NWSReflectivityExpanded&#39;
norm, cmap = colortables.get_with_steps(ctable, 5, 2.5)

fig = plt.figure(figsize=(14, 8))

ax = fig.add_subplot(1, 1, 1,projection=ccrs.LambertConformal(central_longitude=-100))
ax.add_feature(cfeature.COASTLINE.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.STATES.with_scale(&#39;50m&#39;))

# Date string format for data reques
# https://mesonet.agron.iastate.edu/docs/nexrad_mosaic/

ax.set_title(&#39;Most Recent Time&#39;, fontweight=&#39;bold&#39;, loc=&#39;left&#39;)
ax.set_title(&#39;%s&#39; % get_timestamp().strftime(&#39;%H:%M UTC %d %b %Y&#39;), loc=&#39;right&#39;)
ax.add_wms(wms=&#39;https://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0q-t.cgi?&#39;,
           layers=&#39;nexrad-n0q-wmst&#39;,
           wms_kwargs={&#39;transparent&#39;:True}, zorder=10)

# ^ For current time (most recent time in last 5 minutes), leave the &#39;time&#39; 
#   wms_kwargs unassigned. Transparetn should be True by default, but it
#   doesn&#39;t hurt to be explicit.
norm, cmap = colortables.get_with_steps(ctable, 5, 2.5)

fig = plt.figure(figsize=(5,.1))

# Make a placeholder mesh that the colorbar will be made with,
# then remove the axis and the image
im = plt.pcolormesh(np.ones([1,1]),norm=norm, cmap=cmap)
plt.axis(&#39;off&#39;)
im.remove()

# Add the colorbar
cbar_ax = fig.add_axes([0, .5, 1, 3])
cbar = fig.colorbar(im, cax=cbar_ax, orientation=&#39;horizontal&#39;,
                    label=&#39;N0Q: &#39; + ctable)

ax.set_extent((-80, -60, 40, 52)) 

fig.subplots_adjust(wspace=0.02)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_11_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;output_11_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can combine these two differents products:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(15, 5))

ax = fig.add_subplot(1, 2, 1,projection=ccrs.LambertConformal(central_longitude=-100))
ax.add_feature(cfeature.COASTLINE.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.STATES.with_scale(&#39;50m&#39;))
    
# Date string format for data request
strDATE = DATE.strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;)

ax.set_title(&#39;RADAR_1km_RRAI&#39;, fontweight=&#39;bold&#39;, loc=&#39;left&#39;)
ax.set_title(&#39;%s&#39; % get_timestamp().strftime(&#39;%H:%M UTC %d %b %Y&#39;), loc=&#39;right&#39;)
ax.add_wms(wms=&#39;https://geo.weather.gc.ca/geomet?service=WMS&amp;amp;version=1.3.0&amp;amp;request=GetCapabilities&amp;amp;layer=RADAR_1KM_RRAI&#39;,
           layers=&#39;RADAR_1KM_RRAI&#39;,
           wms_kwargs={&#39;transparent&#39;:True}, zorder=10)
# ^ If you add a background image or use tiles you neet to set transparent
#   as True and set the zorder as a higher number, i.e. 10.
ax.set_extent([-120, -75, 23, 50])  

ax = fig.add_subplot(1, 2, 2,projection=ccrs.LambertConformal(central_longitude=-100))
ax.add_feature(cfeature.COASTLINE.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.STATES.with_scale(&#39;50m&#39;))

# Date string format for data reques
# https://mesonet.agron.iastate.edu/docs/nexrad_mosaic/

ax.set_title(&#39;NOQ&#39;, fontweight=&#39;bold&#39;, loc=&#39;left&#39;)
ax.set_title(&#39;%s&#39; % get_timestamp().strftime(&#39;%H:%M UTC %d %b %Y&#39;), loc=&#39;right&#39;)
ax.add_wms(wms=&#39;https://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0q-t.cgi?&#39;,
           layers=&#39;nexrad-n0q-wmst&#39;,
           wms_kwargs={&#39;transparent&#39;:True}, zorder=10)
ax.set_extent((-120, -75, 23, 50)) 
fig.subplots_adjust(wspace=0.02)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_13_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;exemple-2-gdps&#34;&gt;Exemple 2 : GDPS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(14, 8))

ax = fig.add_subplot(1, 1, 1,
                     projection=ccrs.LambertConformal(central_longitude=-100))
# Date string format for data reques
ax.set_title(&#39;Most Recent Time&#39;, fontweight=&#39;bold&#39;, loc=&#39;left&#39;)
ax.set_title(&#39;%s&#39; % get_timestamp().strftime(&#39;%H:%M UTC %d %b %Y&#39;), loc=&#39;right&#39;)
ax.add_wms(wms=&#39;https://geo.weather.gc.ca/geomet?service=WMS&amp;amp;version=1.3.0&amp;amp;request=GetCapabilities&amp;amp;layer=GDPS.ETA_TT&#39;,
           layers=&#39;GDPS.ETA_TT&#39;,
           wms_kwargs={&#39;transparent&#39;:True}, zorder=10)

ax.add_wms(wms=&#39;https://geo.weather.gc.ca/geomet?service=WMS&amp;amp;version=1.3.0&amp;amp;request=GetCapabilities&amp;amp;layer=GDPS.ETA_UU&#39;,
           layers=&#39;GDPS.ETA_UU&#39;,
           wms_kwargs={&#39;transparent&#39;:True}, zorder=10)

ax.add_feature(cfeature.COASTLINE.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))
ax.add_feature(cfeature.STATES.with_scale(&#39;50m&#39;))

ax.set_extent((-120, -75, 23, 50))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_16_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create Synoptic NARR map</title>
      <link>/post/narr_synoptic/</link>
      <pubDate>Fri, 07 Feb 2020 11:31:00 -0800</pubDate>
      <guid>/post/narr_synoptic/</guid>
      <description>

&lt;h3 id=&#34;working-with-netcd4-python-data-synoptic-map&#34;&gt;Working with Netcd4-python data: Synoptic map&lt;/h3&gt;

&lt;p&gt;In this tutorial, we will use the features of the Python xarray library to process and analyze Netcdf files.
We will then use matplotlib to plot it, and cartopy to map our analyse.&lt;/p&gt;

&lt;p&gt;We will see the different steps to plot an exemple of synoptic map over North America with:
    + geopotential 850hpa
    + Temperature 850hpa
    + UU,VV 250hpa&lt;/p&gt;

&lt;p&gt;We fist import the necessary packages. The plt.rcParams[&amp;lsquo;figure.figsize&amp;rsquo;] just sets the size of the inline figures in this notebook to make them larger and easier to read.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xarray as xr
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
plt.rcParams[&#39;figure.figsize&#39;] = (20, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will work with fields from NARR reanalysis at pressure levels.&lt;/p&gt;

&lt;p&gt;Data can be directly download on this &lt;a href=&#34;ftp://ftp.cdc.noaa.gov/Datasets/NARR/pressure/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tas = xr.open_dataset(&#39;J:/REANALYSES/NARR/3hrs/NARR_air_lc_2018_01_3hrs.nc&#39;)
uu =  xr.open_dataset(&#39;J:/REANALYSES/NARR/3hrs/NARR_uwnd_lc_2018_01_3hrs.nc&#39;)
vv =  xr.open_dataset(&#39;J:/REANALYSES/NARR/3hrs/NARR_vwnd_lc_2018_01_3hrs.nc&#39;)
omega =  xr.open_dataset(&#39;J:/REANALYSES/NARR/Daily/omega/NARR_omega_lc_2018_01_d.nc&#39;)
hgt =  xr.open_dataset(&#39;J:/REANALYSES/NARR/3hrs/NARR_hgt_lc_2018_01_3hrs.nc&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;exploring-the-data&#34;&gt;- Exploring the data&lt;/h3&gt;

&lt;p&gt;We can quickly explore our datasets by using some methods of the xarray library:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- DS.var
- DS.dims
= DS.coords
- DS.attrs
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hgt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:            (level: 29, time: 248, x: 349, y: 277)
Coordinates:
  * time               (time) datetime64[ns] 2018-01-01 ... 2018-01-31T21:00:00
  * level              (level) float32 1000.0 975.0 950.0 ... 150.0 125.0 100.0
    lat                (y, x) float32 ...
    lon                (y, x) float32 ...
  * y                  (y) float32 0.0 32463.0 64926.0 ... 8927325.0 8959788.0
  * x                  (x) float32 0.0 32463.0 64926.0 ... 11264660.0 11297120.0
Data variables:
    Lambert_Conformal  int32 ...
    hgt                (time, level, y, x) float32 ...
Attributes:
    Conventions:    CF-1.2
    centerlat:      50.0
    centerlon:      -107.0
    comments:       
    institution:    National Centers for Environmental Prediction
    latcorners:     [ 1.000001  0.897945 46.3544   46.63433 ]
    loncorners:     [-145.5       -68.32005    -2.569891  148.6418  ]
    platform:       Model
    standardpar1:   50.0
    standardpar2:   50.000001
    title:          8x Daily NARR
    history:        created Mon Jul 18 17:37:00 MDT 2016 by NOAA/ESRL/PSD
    dataset_title:  NCEP North American Regional Reanalysis (NARR)
    references:     https://www.esrl.noaa.gov/psd/data/gridded/data.narr.html
    source:         http://www.emc.ncep.noaa.gov/mmb/rreanl/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hgt.coords
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Coordinates:
  * time     (time) datetime64[ns] 2018-01-01 ... 2018-01-31T21:00:00
  * level    (level) float32 1000.0 975.0 950.0 925.0 ... 150.0 125.0 100.0
    lat      (y, x) float32 ...
    lon      (y, x) float32 ...
  * y        (y) float32 0.0 32463.0 64926.0 ... 8894862.0 8927325.0 8959788.0
  * x        (x) float32 0.0 32463.0 64926.0 ... 11264660.0 11297120.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can quickly explore our datasets by using some methods of the xarray library.&lt;/p&gt;

&lt;p&gt;We want to analyse a specific date : 13/01/2018 at 12UTC.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tas.time
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;time&#39; (time: 248)&amp;gt;
array([&#39;2018-01-01T00:00:00.000000000&#39;, &#39;2018-01-01T03:00:00.000000000&#39;,
       &#39;2018-01-01T06:00:00.000000000&#39;, ..., &#39;2018-01-31T15:00:00.000000000&#39;,
       &#39;2018-01-31T18:00:00.000000000&#39;, &#39;2018-01-31T21:00:00.000000000&#39;],
      dtype=&#39;datetime64[ns]&#39;)
Coordinates:
  * time     (time) datetime64[ns] 2018-01-01 ... 2018-01-31T21:00:00
Attributes:
    axis:                T
    coordinate_defines:  point
    delta_t:             0000-00-00 03:00:00
    long_name:           Time
    standard_name:       time
    actual_range:        [1910952. 1911693.]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#To select a specifi date: 
date = &#39;2018-01-13T12&#39;
tas.sel(time=date).sel(level=500).isel(x=slice(60,340), y=slice(50,230))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:            (x: 280, y: 180)
Coordinates:
    time               datetime64[ns] 2018-01-13T12:00:00
    level              float32 500.0
    lat                (y, x) float32 ...
    lon                (y, x) float32 ...
  * y                  (y) float32 1623150.0 1655613.0 ... 7401564.0 7434027.0
  * x                  (x) float32 1947780.0 1980243.0 ... 10972490.0 11004960.0
Data variables:
    Lambert_Conformal  int32 ...
    air                (y, x) float32 ...
Attributes:
    Conventions:    CF-1.2
    centerlat:      50.0
    centerlon:      -107.0
    comments:       
    institution:    National Centers for Environmental Prediction
    latcorners:     [ 1.000001  0.897945 46.3544   46.63433 ]
    loncorners:     [-145.5       -68.32005    -2.569891  148.6418  ]
    platform:       Model
    standardpar1:   50.0
    standardpar2:   50.000001
    title:          8x Daily NARR
    history:        created Mon Jul 18 17:31:43 MDT 2016 by NOAA/ESRL/PSD
    dataset_title:  NCEP North American Regional Reanalysis (NARR)
    references:     https://www.esrl.noaa.gov/psd/data/gridded/data.narr.html
    source:         http://www.emc.ncep.noaa.gov/mmb/rreanl/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hgt850 = hgt[&#39;hgt&#39;].sel(time=date).sel(level=850).isel(x=slice(60,340), y=slice(50,230))
tt850 = tas[&#39;air&#39;].sel(time=date).sel(level=850).isel(x=slice(60,340), y=slice(50,230))
urel250 = uu[&#39;uwnd&#39;].sel(time=date).sel(level=250).isel(x=slice(60,340), y=slice(50,230))
vrel250 = vv[&#39;vwnd&#39;].sel(time=date).sel(level=250).isel(x=slice(60,340), y=slice(50,230))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def plotMap():
    #Set the projection information
    proj = ccrs.LambertConformal(central_longitude=-97.0,central_latitude=53, standard_parallels=[53])
    #Create a figure with an axes object on which we will plot. Pass the projection to that axes.
    fig, ax = plt.subplots(subplot_kw=dict(projection=proj))
    
    #Zoom in
    #ax.set_extent([-140,-60,10,70])
    
    #Add map features
    ax.add_feature(cfeature.LAND, facecolor=&#39;0.9&#39;) #Grayscale colors can be set using 0 (black) to 1 (white)
    ax.add_feature(cfeature.LAKES, alpha=0.9)  #Alpha sets transparency (0 is transparent, 1 is solid)
    ax.add_feature(cfeature.BORDERS, zorder=10)
    ax.add_feature(cfeature.COASTLINE, zorder=10)

    #We can use additional features from Natural Earth (http://www.naturalearthdata.com/features/)
    states_provinces = cfeature.NaturalEarthFeature(
            category=&#39;cultural&#39;,  name=&#39;admin_1_states_provinces_lines&#39;,
            scale=&#39;50m&#39;, facecolor=&#39;none&#39;)
    ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;, zorder=10)
    
    #Add lat/lon gridlines every 20° to the map
    ax.gridlines(xlocs=np.arange(0,361,20), ylocs=np.arange(-80,90,20)) 
    
    return fig, ax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We specify the interval for our height contours. We use numpy&amp;rsquo;s function arange to select a range of contours from 500 to 2000 m, every 60 m.&lt;/p&gt;

&lt;p&gt;A key thing to note is the transform argument at the end of the contour call. This is what tells matplotlib to transform our variable in lat/lon coordinates onto our map projection coordinates.&lt;/p&gt;

&lt;p&gt;We then plot temperature in filled contours. Matplotlib has many colormaps from which to choose. Here, we use cm.jet_r.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Import scipy.ndimage to get the gaussian_filter function
import scipy.ndimage as ndimage
hght_levels = np.arange(500,2000,60) 
#Plot a new figure and map axes
fig, ax = plotMap()
## Choisissons une colormap
cmap0=plt.cm.jet_r
cmap0.set_under(&#39;w&#39;) ## on met en blanc les valeurs inferieures au min de clev
cmap0.set_over(&#39;darkblue&#39;)

#Smooth and re-plot the temperature field
tt_smooth = ndimage.gaussian_filter(tt850.values-273.15, sigma=1.5, order=0)
tt_contour = ax.contourf(tt850.lon.values, tt850.lat.values, tt_smooth, zorder=2,  
                           cmap=cmap0, transform = ccrs.PlateCarree())

#Smooth and re-plot the height field
hght_smooth = ndimage.gaussian_filter(hgt850, sigma=3, order=0)
hght_contour = ax.contour(hgt850.lon, hgt850.lat, hght_smooth, levels=hght_levels, linewidths=1, colors=&#39;k&#39;,transform = ccrs.PlateCarree())
#Plot contour labels for the heights, leaving a break in the contours for the text (inline=True)
plt.clabel(hght_contour,  hght_levels, inline=True, fmt=&#39;%1i&#39;, fontsize=12)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a list of 18 text.Text objects&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_13_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can improve our synoptic map with adding wind barbs in Knots and using our own colormap.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Import scipy.ndimage to get the gaussian_filter function
import scipy.ndimage as ndimage
hght_levels = np.arange(500,2000,60) 
tt_levels = np.arange(-40,40,2) 
#Plot a new figure and map axes
fig, ax = plotMap()
## Choisissons une colormap
Y=np.array([[77,0,111],[115,14,181],[160,17,222],[195,14,240],\
               [0,0,93],[21,38,177],[33,95,227],[32,162,247],[59,224,248],[202,255,250],\
               [4,255,179],[37,181,139],[32,132,81],[72,162,60],[157,240,96],[213,255,166],\
               [241,247,132],[248,185,68],[255,124,4],[235,78,14],[215,32,24],[189,24,40],[162,16,56],[135,16,65],[107,15,73]])/255.

colbar=mpl.colors.ListedColormap(Y)

cmap0=plt.cm.jet_r
cmap0.set_under(&#39;w&#39;) ## on met en blanc les valeurs inferieures au min de clev
cmap0.set_over(&#39;darkblue&#39;)

#Smooth and re-plot the temperature field
tt_smooth = ndimage.gaussian_filter(tt850.values-273.15, sigma=1.5, order=0)
tt_contour = ax.contourf(tt850.lon.values, tt850.lat.values, tt_smooth,  levels=tt_levels, zorder=2,  
                           cmap=colbar, transform = ccrs.PlateCarree())

#Smooth and re-plot the height field
hght_smooth = ndimage.gaussian_filter(hgt850, sigma=3, order=0)
hght_contour = ax.contour(hgt850.lon, hgt850.lat, hght_smooth, levels=hght_levels, linewidths=1, colors=&#39;red&#39;,transform = ccrs.PlateCarree())
#Plot contour labels for the heights, leaving a break in the contours for the text (inline=True)
plt.clabel(hght_contour,  hght_levels, inline=True, fmt=&#39;%1i&#39;, fontsize=20)

#Plot the barbs
ax.barbs(urel250.lon.values, urel250.lat.values, urel250.values*1.944, vrel250.values*1.944, regrid_shape=12, zorder=20, transform=ccrs.PlateCarree())

#Create a colorbar and shrink it down a bit.
cb = plt.colorbar(tt_contour, shrink=0.5, ticks=np.arange(-40, 40.1, 4))

#Set the title
ax.set_title(&#39;850-hPa Heights, 850-hPa Temperature, Wind (kts) \n &#39;+str(date), fontsize=14)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Text(0.5, 1.0, &#39;850-hPa Heights, 850-hPa Temperature, Wind (kts) \n 2018-01-13T12&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_15_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Python connection to MSS Server</title>
      <link>/post/mss_server/</link>
      <pubDate>Fri, 07 Feb 2020 10:57:37 -0800</pubDate>
      <guid>/post/mss_server/</guid>
      <description>

&lt;h3 id=&#34;connexion-to-microsoft-sql-server-management-studio&#34;&gt;Connexion to Microsoft SQL Server Management Studio&lt;/h3&gt;

&lt;p&gt;This is a short tutorial to connect python to a Miscrosoft SQL Server.&lt;/p&gt;

&lt;h3 id=&#34;steps-to-connect-with-pyodbc-python-library&#34;&gt;Steps to connect with pyodbc python library&lt;/h3&gt;

&lt;p&gt;You need to know some informations on your local server, database and tables you want to connect:
In our case:
    - The Server Name is: DESKTOP-BE6M578
    - The Database Name is: BDSOPFEU
    - The Table Name is: dbo.Meteo_stations
    - The Table dbo.Meteo_stations containes stations information&lt;/p&gt;

&lt;h3 id=&#34;1-retrieve-your-server-name&#34;&gt;1 Retrieve your server name&lt;/h3&gt;

&lt;p&gt;You can get your server name by opening Microsoft SQL Server. You’ll then see the Connect to Server box, where the server name will be displayed.&lt;/p&gt;

&lt;p&gt;In my case, the server name is: DESKTOP-BE6M578&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-retrieve-your-database-name&#34;&gt;2 Retrieve your Database name&lt;/h3&gt;

&lt;p&gt;Next, you’ll need to obtain the database name in which your desired table is stored.&lt;/p&gt;

&lt;p&gt;You can find the database name under the Object Explorer menu (underneath the Databases section) which is located on the left-hand side of your SQL Server.&lt;/p&gt;

&lt;p&gt;In our example, the database name is: BDSOPFEU&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;3-get-the-table-name&#34;&gt;3 Get the table name&lt;/h3&gt;

&lt;p&gt;Now you’ll need to get the name of your desired table.&lt;/p&gt;

&lt;p&gt;The name of your table would also be located under the Object Explorer menu (underneath the Tables section).&lt;/p&gt;

&lt;p&gt;Here, the name of the table is: dbo.Meteo_stations&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;image3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-connect-python-to-our-microsoft-sql-server&#34;&gt;4 Connect Python to our Microsoft SQL Server&lt;/h3&gt;

&lt;p&gt;Now we have all the informations about our server and database to connect Python .&lt;/p&gt;

&lt;p&gt;Here is the structure of the code that you may use in Python:&lt;/p&gt;

&lt;p&gt;import pyodbc
conn = pyodbc.connect(&amp;lsquo;Driver={SQL Server};&amp;rsquo;
                      &amp;lsquo;Server=server_name;&amp;rsquo;
                      &amp;lsquo;Database=db_name;&amp;rsquo;
                      &amp;lsquo;Trusted_Connection=yes;&amp;lsquo;)&lt;/p&gt;

&lt;p&gt;cursor = conn.cursor()
cursor.execute(&amp;lsquo;SELECT * FROM db_name.Table&amp;rsquo;)&lt;/p&gt;

&lt;p&gt;for row in cursor:
    print(row)
And this is how the code would look like in Python using our example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pyodbc 
connexion = pyodbc.connect(&#39;Driver={SQL Server};&#39;
                      &#39;Server=DESKTOP-BE6M578;&#39;
                      &#39;Database=BDSOPFEU;&#39;
                      &#39;Trusted_Connection=yes;&#39;)

cursor = connexion.cursor()
cursor.execute(&#39;SELECT * FROM BDSOPFEU.dbo.Meteo_stations&#39;)

# to loop over each row
#for row in cursor:
#    print(row)
row = cursor.fetchone()
print(row)
connexion.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(111, datetime.datetime(1978, 4, 1, 0, 0), 1, &#39;STE-PERPETUE&#39;, &#39;4113-1-5355&#39;, 111, datetime.datetime(1989, 10, 31, 0, 0), 400, &#39;M&#39;, &#39;N&#39;, 1, 1, &#39;MFFP_CEL&#39;, None, 13, &#39; &#39;, None, False, None, None, None)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For having basic informations about our table:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;columns = [column[0] for column in cursor.description]
columns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&amp;lsquo;No_station&amp;rsquo;,
 &amp;lsquo;Ouverture&amp;rsquo;,
 &amp;lsquo;Base&amp;rsquo;,
 &amp;lsquo;Nom&amp;rsquo;,
 &amp;lsquo;Quadr&amp;rsquo;,
 &amp;lsquo;Secteur&amp;rsquo;,
 &amp;lsquo;Fermeture&amp;rsquo;,
 &amp;lsquo;Elevation&amp;rsquo;,
 &amp;rsquo;T_hr&amp;rsquo;,
 &amp;lsquo;Vent&amp;rsquo;,
 &amp;rsquo;T_donnees&amp;rsquo;,
 &amp;rsquo;T_station&amp;rsquo;,
 &amp;lsquo;Provenance&amp;rsquo;,
 &amp;lsquo;Stn_mere&amp;rsquo;,
 &amp;lsquo;Hre_levee&amp;rsquo;,
 &amp;lsquo;Memo&amp;rsquo;,
 &amp;lsquo;Contour&amp;rsquo;,
 &amp;lsquo;Active&amp;rsquo;,
 &amp;lsquo;Cladonie&amp;rsquo;,
 &amp;lsquo;Latitude&amp;rsquo;,
 &amp;lsquo;Longitude&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I’ll show you how to get data from SQL to pandas DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pyodbc
import pandas as pd

connexion = pyodbc.connect(&#39;Driver={SQL Server};&#39;
                      &#39;Server=DESKTOP-BE6M578;&#39;
                      &#39;Database=BDSOPFEU;&#39;
                      &#39;Trusted_Connection=yes;&#39;)

SQL_Query = pd.read_sql_query(
&#39;&#39;&#39;SELECT
 Nom, No_station, Latitude, Longitude  
FROM dbo.Meteo_stations 
WHERE Active = &#39;True&#39; &#39;&#39;&#39;, connexion)

df = pd.DataFrame(SQL_Query)
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Nom&lt;/th&gt;
      &lt;th&gt;No_station&lt;/th&gt;
      &lt;th&gt;Latitude&lt;/th&gt;
      &lt;th&gt;Longitude&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;LA PÈCHE&lt;/td&gt;
      &lt;td&gt;111&lt;/td&gt;
      &lt;td&gt;45:37:20&lt;/td&gt;
      &lt;td&gt;76:01:09&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;L&#39;ACADIE&lt;/td&gt;
      &lt;td&gt;129&lt;/td&gt;
      &lt;td&gt;45:17:39&lt;/td&gt;
      &lt;td&gt;73:20:56&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;KIPAWA&lt;/td&gt;
      &lt;td&gt;132&lt;/td&gt;
      &lt;td&gt;47:09:23&lt;/td&gt;
      &lt;td&gt;78:56:02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;BAR.TEMISCAMINGUE&lt;/td&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;46:42:36&lt;/td&gt;
      &lt;td&gt;79:06:04&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;COULONGE&lt;/td&gt;
      &lt;td&gt;142&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pyodbc
import pandas as pd

connexion = pyodbc.connect(&#39;Driver={SQL Server};&#39;
                      &#39;Server=DESKTOP-BE6M578;&#39;
                      &#39;Database=BDSOPFEU;&#39;
                      &#39;Trusted_Connection=yes;&#39;)

SQL_Query = pd.read_sql_query(
&#39;&#39;&#39;SELECT
 Date,
 Heure,
 Pluie,
 Hr,
 Tsec,
 Thum,
 Vv,
 Vvr
FROM dbo.Meteo_obs 
 WHERE No_station = 111&#39;&#39;&#39;, connexion)

df = pd.DataFrame(SQL_Query)
df.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;Heure&lt;/th&gt;
      &lt;th&gt;Pluie&lt;/th&gt;
      &lt;th&gt;Hr&lt;/th&gt;
      &lt;th&gt;Tsec&lt;/th&gt;
      &lt;th&gt;Thum&lt;/th&gt;
      &lt;th&gt;Vv&lt;/th&gt;
      &lt;th&gt;Vvr&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;154619&lt;/th&gt;
      &lt;td&gt;2019-06-25&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;47.0&lt;/td&gt;
      &lt;td&gt;18.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;16.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;154620&lt;/th&gt;
      &lt;td&gt;2019-06-25&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;4.2&lt;/td&gt;
      &lt;td&gt;92.0&lt;/td&gt;
      &lt;td&gt;13.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;16.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;154621&lt;/th&gt;
      &lt;td&gt;2019-06-25&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;13.0&lt;/td&gt;
      &lt;td&gt;95.0&lt;/td&gt;
      &lt;td&gt;13.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;16.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;154622&lt;/th&gt;
      &lt;td&gt;2019-06-25&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;13.8&lt;/td&gt;
      &lt;td&gt;96.0&lt;/td&gt;
      &lt;td&gt;13.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;6.0&lt;/td&gt;
      &lt;td&gt;17.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;154623&lt;/th&gt;
      &lt;td&gt;2019-06-25&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;13.8&lt;/td&gt;
      &lt;td&gt;96.0&lt;/td&gt;
      &lt;td&gt;14.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;6.0&lt;/td&gt;
      &lt;td&gt;20.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mask countries using shapefile</title>
      <link>/post/shapefiles_country/</link>
      <pubDate>Tue, 04 Feb 2020 10:39:49 -0800</pubDate>
      <guid>/post/shapefiles_country/</guid>
      <description>

&lt;h3 id=&#34;using-country-shapefiles-to-create-netcdf-mask&#34;&gt;Using country shapefiles to create Netcdf mask&lt;/h3&gt;

&lt;p&gt;In this tutorial, we will use shapefiles to create mask over specific countries.&lt;/p&gt;

&lt;p&gt;In order to work with the whole globe, we will use gridded dataset ERA5 meteorological data.&lt;/p&gt;

&lt;p&gt;I will present a simple solution based on open-source Python modules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - xarray: for manipulating &amp;amp; reading gridded data, and – very important – operate out-of-memory thanks to its dask capabilities
    - regionmask: to mask a gridded file according to a shapefile
    - numpy: for simple array manipulations
    - geopandas: to open shapefiles
    - matplotlib: for plotting
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-import-librairies-and-create-aliases&#34;&gt;1-  Import librairies and create aliases.&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xarray as xr 
import numpy as np
import regionmask
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;working-over-countries&#34;&gt;Working over countries&lt;/h3&gt;

&lt;p&gt;In this example we will focus on countries in Africa. We will use &lt;a href=&#34;https://community.esri.com/external-link.jspa?url=http%3A%2F%2Fwww.maplibrary.org%2Flibrary%2Fstacks%2FAfrica%2Findex.htm&#34; target=&#34;_blank&#34;&gt;shapefiles developped in ESRI format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After downloaded the shapefile, we must load it using geopandas library:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;PATH_TO_SHAPEFILE = &#39;./Countries/Africa_Countries.shp&#39;
countries = gpd.read_file(PATH_TO_SHAPEFILE)
countries.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CODE&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;COUNTRY&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;geometry&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;ALG&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Algeria&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POLYGON ((-5.7636199999979 25.58624999999302, &amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;ANG&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Angola&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;POLYGON ((13.36632442474365 -8.32172966003418,&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries.shape[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;762
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = list(countries[&#39;CODE&#39;])
my_list_unique = set(list(countries[&#39;CODE&#39;]))
indexes = [my_list.index(x) for x in my_list_unique]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shapes are here a GeoDataFrame containing all polygons illustrating the countries boundaries.&lt;/p&gt;

&lt;p&gt;Now we can load the ERA5 gridded data. The parameter chunks is very important, it defines how big are the “pieces” of data moved from the disk to the memory. With this value the entire computation on a workstation with 32 GB takes a couple of minutes.&lt;/p&gt;

&lt;p&gt;We will load all the temperature files for the year 2018 using Xarray library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model=&#39;ERA5_T2m_1h&#39;
t_in = &#39;J:/REANALYSES/ERA5/T2m_1h/&#39;        
data = t_in + model + &#39;_2018*_sfc.nc&#39;
ds = xr.open_mfdataset(data, chunks = {&#39;time&#39;: 10})
ds
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 721, longitude: 1440, time: 8760)
Coordinates:
  * longitude  (longitude) float32 0.0 0.25 0.5 0.75 ... 359.25 359.5 359.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(8760, 721, 1440), chunksize=(10, 721, 1440)&amp;gt;
Attributes:
    Conventions:  CF-1.6
    history:      2019-11-11 13:33:07 GMT by grib_to_netcdf-2.14.0: /opt/ecmw...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next function &lt;b&gt;assign_coords&lt;/b&gt; will convert the longitude from the 0-360 range to -180,180&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds = ds.assign_coords(longitude=(((ds.longitude + 180) % 360) - 180)).sortby(&#39;longitude&#39;)
ds
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 721, longitude: 1440, time: 8760)
Coordinates:
  * longitude  (longitude) float32 -180.0 -179.75 -179.5 ... 179.25 179.5 179.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(8760, 721, 1440), chunksize=(10, 721, 1440)&amp;gt;
Attributes:
    Conventions:  CF-1.6
    history:      2019-11-11 13:33:07 GMT by grib_to_netcdf-2.14.0: /opt/ecmw...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(list(countries.geometry.values[i] for i in indexes))
len(list(countries.COUNTRY[indexes]))
len(indexes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;52
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = range(0,countries.shape[0])
np.shape(a)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(762,)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our xarray Dataset contains a single variable (t2m) which is stored as a dask.array. This is the result of loading files with open_mfdataset.&lt;/p&gt;

&lt;p&gt;Now we will use regionmask module to create a gridded mask with the
&lt;a href=&#34;https://regionmask.readthedocs.io/en/stable/generated/regionmask.Regions_cls.html#regionmask.Regions_cls&#34; target=&#34;_blank&#34;&gt;function regions_cls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this function we will create an object able to mask ERA5 gridded data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;countries_mask_poly = regionmask.Regions_cls(name = &#39;COUNTRY&#39;, numbers = indexes, names = countries.COUNTRY[indexes], abbrevs = countries.COUNTRY[indexes], outlines = list(countries.geometry.values[i] for i in range(0,countries.shape[0])))
countries_mask_poly
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;52 &#39;COUNTRY&#39; Regions ()
Burkina Faso Senegal Botswana Liberia Chad Equatorial Guinea Djibouti Ghana Nigeria Sao Tome and Principe Swaziland Uganda Tanzania Comoros Guinea Algeria Niger Madagascar Burundi Cameroon Mali Zimbabwe Cote d`Ivoire Tunisia Sierra Leone Libya Rwanda Benin Malawi Gabon South Africa Western Sahara Zambia Central African Republic Togo Namibia Gambia Congo-Brazzaville Democratic Republic of Congo Morocco Eritrea Cape Verde Angola Ethiopia Lesotho Egypt Guinea-Bissau Kenya Mozambique Sudan Mauritania Somalia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to apply the mask on the gridded dataset xarray ERA5.&lt;/p&gt;

&lt;p&gt;We select only the first timestep to speed up the process.&lt;/p&gt;

&lt;p&gt;This step could take few minutes because of ERA5 resolution and grid : Dimensions:    (latitude: 721, longitude: 1440)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask = countries_mask_poly.mask(ds.isel(time = 0), lat_name=&#39;latitude&#39;, lon_name=&#39;longitude&#39;)
mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;region&#39; (latitude: 721, longitude: 1440)&amp;gt;
array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan]])
Coordinates:
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * longitude  (longitude) float32 -180.0 -179.75 -179.5 ... 179.25 179.5 179.75
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mask can be saved (for example as a NetCDF) for a later use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask.to_netcdf(&#39;./mask_Africa_by_countries.nc&#39;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use  &lt;a href=&#34;https://www.giss.nasa.gov/tools/panoply/&#34; target=&#34;_blank&#34;&gt;Panoply&lt;/a&gt; free software to plot our netcdf file.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a quick visualisation using Matplotlib:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(16,8))
ax = plt.axes()
mask.plot(ax = ax)
countries.plot(ax = ax, alpha = 0.8, facecolor = &#39;none&#39;, lw = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0xbdf0d68&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s now extract one specific country from our mask. We will for example extract informations only over Algeria.
Remember, index for Algeria is: 0  .&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask_algeria = mask.where(mask == 0 )
mask_algeria.to_netcdf(&#39;./mask_Algeria.nc&#39;) 

plt.figure(figsize=(16,8))
ax = plt.axes()
mask_algeria.plot(ax = ax)
countries.plot(ax = ax, alpha = 0.8, facecolor = &#39;none&#39;, lw = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7528278&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-extract-time-series&#34;&gt;2- Extract time-series&lt;/h3&gt;

&lt;p&gt;We can now for each country aggregate the grid cells in the national borders.
We will first develop two methods to mask our area. Then, we will extract the time series.&lt;/p&gt;

&lt;h3 id=&#34;method-1&#34;&gt;- Method 1:&lt;/h3&gt;

&lt;p&gt;I will focus on Algeria.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ID_COUNTRY = 0
print(countries.COUNTRY[ID_COUNTRY])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Algeria
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As first step, I will save the latitude and longitude vectors because I will use it later. Then, I select the mask points where the value is equal to target value (the ID_COUNTRY code). In the numpy array sel_mask all the values are nan except for the selected ones.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lat = mask.latitude.values
lon = mask.longitude.values

sel_mask = mask.where(mask == ID_COUNTRY).values
sel_mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To speed-up the process I want to crop the xarray Dataset selecting the smallest box containing the entire mask. To do this I store in id_lon and id_lat the coordinate points where the mask has at least a non-nan value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_lon = lon[np.where(~np.all(np.isnan(sel_mask), axis=0))]
id_lat = lat[np.where(~np.all(np.isnan(sel_mask), axis=1))]
id_lat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([37.  , 36.75, 36.5 , 36.25, 36.  , 35.75, 35.5 , 35.25, 35.  ,
       34.75, 34.5 , 34.25, 34.  , 33.75, 33.5 , 33.25, 33.  , 32.75,
       32.5 , 32.25, 32.  , 31.75, 31.5 , 31.25, 31.  , 30.75, 30.5 ,
       30.25, 30.  , 29.75, 29.5 , 29.25, 29.  , 28.75, 28.5 , 28.25,
       28.  , 27.75, 27.5 , 27.25, 27.  , 26.75, 26.5 , 26.25, 26.  ,
       25.75, 25.5 , 25.25, 25.  , 24.75, 24.5 , 24.25, 24.  , 23.75,
       23.5 , 23.25, 23.  , 22.75, 22.5 , 22.25, 22.  , 21.75, 21.5 ,
       21.25, 21.  , 20.75, 20.5 , 20.25, 20.  , 19.75, 19.5 , 19.25,
       19.  ], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Xarray dataset is reduced selecting only the target year and the coordinates containing the target region. Then the dataset is load from the dask array using compute and then filtered using the mask.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel1 = ds.sel(latitude = slice(id_lat[0], id_lat[-1]), longitude = slice(id_lon[0], id_lon[-1])).compute().where(mask == ID_COUNTRY)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 73, longitude: 82, time: 8760)
Coordinates:
  * latitude   (latitude) float64 37.0 36.75 36.5 36.25 ... 19.5 19.25 19.0
  * longitude  (longitude) float64 -8.5 -8.25 -8.0 -7.75 ... 11.25 11.5 11.75
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m        (time, latitude, longitude) float32 nan nan nan ... nan nan nan
Attributes:
    Conventions:  CF-1.6
    history:      2019-11-11 13:33:07 GMT by grib_to_netcdf-2.14.0: /opt/ecmw...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;method-2&#34;&gt;- Method 2:&lt;/h3&gt;

&lt;p&gt;We can directly use xarray library to apply netcdf mask with using .where() method and DataArray mask:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel2 = ds.where(mask == 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 721, longitude: 1440, time: 8760)
Coordinates:
  * longitude  (longitude) float32 -180.0 -179.75 -179.5 ... 179.25 179.5 179.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(8760, 721, 1440), chunksize=(10, 721, 1440)&amp;gt;
Attributes:
    Conventions:  CF-1.6
    history:      2019-11-11 13:33:07 GMT by grib_to_netcdf-2.14.0: /opt/ecmw...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick visualisation, we will display the first step of our DataArray masked.&lt;/p&gt;

&lt;p&gt;For out_sel2 array :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(12,8))
ax = plt.axes()
out_sel2.t2m.isel(time = 0).plot(ax = ax)
countries.plot(ax = ax, alpha = 0.8, facecolor = &#39;none&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0xe73e550&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For out_sel1 array :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(12,8))
ax = plt.axes()
out_sel1.t2m.isel(time = 0).plot(ax = ax)
countries.plot(ax = ax, alpha = 0.8, facecolor = &#39;none&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0xe8024a8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output4.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally we can aggregate by the arithmetic mean using the groupby function to obtain a time-series of national average temperatures.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = out_sel1.groupby(&#39;time&#39;).mean()
x
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:  (time: 8760)
Coordinates:
  * time     (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m      (time) float32 285.01346 284.65833 283.95526 ... 282.03668 281.461
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we plot the time-series…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x.t2m.plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0xe9dc518&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output5.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s resample our dataset by day and then compute a daily mean.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = out_sel1.resample(time = &#39;1D&#39;).mean()-273.15
x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;xarray.Dataset&gt;
Dimensions:    (latitude: 73, longitude: 82, time: 365)
Coordinates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;longitude  (longitude) float64 -8.5 -8.25 -8.0 -7.75 &amp;hellip; 11.25 11.5 11.75&lt;/li&gt;
&lt;li&gt;latitude   (latitude) float64 37.0 36.75 36.5 36.25 &amp;hellip; 19.5 19.25 19.0&lt;/li&gt;

&lt;li&gt;&lt;p&gt;time       (time) datetime64[ns] 2018-01-01 2018-01-02 &amp;hellip; 2018-12-31
Data variables:
t2m        (time, latitude, longitude) float32 nan nan nan &amp;hellip; nan nan nan&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean = x.t2m.mean(dim=(&#39;longitude&#39;,&#39;latitude&#39;))
daily_mean
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;xarray.DataArray &#39;t2m&#39; (time: 365)&gt;
array([14.550091, 13.812102, 13.700798, &amp;hellip;, 10.975014, 11.182918, 10.956429],
      dtype=float32)
Coordinates:
  * time     (time) datetime64[ns] 2018-01-01 2018-01-02 &amp;hellip; 2018-12-31&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean.plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&lt;matplotlib.lines.Line2D at 0xe243f98&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;./output6.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And we save it as a csv&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean.to_pandas().to_csv(&#39;average-temperature-algeria.csv&#39;, header = [&#39;t2m&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-extract-time-series-for-one-specific-localisation&#34;&gt;2- Extract time-series for one specific localisation&lt;/h3&gt;

&lt;p&gt;In this example, we eant to extract time-series for Alger:&lt;/p&gt;

&lt;p&gt;With:
      - longitude = 3.04
      - latitude = 36.75&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lati = 36.75
loni = 3.04
data  = out_sel1.sel(longitude=loni  , latitude=lati  , method=&#39;nearest&#39;) 
data.t2m
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;t2m&#39; (time: 8760)&amp;gt;
array([289.91342, 289.63348, 289.2745 , ..., 285.62613, 284.9182 , 284.80624],
      dtype=float32)
Coordinates:
    latitude   float64 36.75
    longitude  float64 3.0
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Attributes:
    units:      K
    long_name:  2 metre temperature
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data[&#39;t2m&#39;] = data[&#39;t2m&#39;] - 273.15
df = data.t2m.to_dataframe()
fig = plt.figure(figsize=(16,8))
df[&#39;t2m&#39;].plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x20773fd0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output7.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s plot montlhy temperature distribution for Alger:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;month&#39;] = df.index.strftime(&amp;quot;%b&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;time&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;latitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;longitude&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;t2m&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7634&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-01-01 01:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.4835&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-01-01 02:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.1245&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-01-01 03:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.197&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-01-01 04:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;36.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.0389&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;t2m&amp;quot;, data=df, palette=&amp;quot;Set1&amp;quot;)  
figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./output8.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Convert shapefile to netcdf</title>
      <link>/post/shapefile_netcdf/</link>
      <pubDate>Fri, 31 Jan 2020 07:20:28 -0800</pubDate>
      <guid>/post/shapefile_netcdf/</guid>
      <description>

&lt;p&gt;﻿&lt;/p&gt;

&lt;h2 id=&#34;from-shapefiles-to-netcdf-mask&#34;&gt;From shapefiles to Netcdf Mask&lt;/h2&gt;

&lt;p&gt;Many times we need to create Netcdf mask files over continents or maybe countries. In this tutorial, we will use shapefiles to create those masks.&lt;/p&gt;

&lt;p&gt;In order to work with the whole globe, we will use gridded dataset ERA5 meteorological data.&lt;/p&gt;

&lt;p&gt;I will present a simple solution based on open-source Python modules:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - xarray: for manipulating &amp;amp; reading gridded data, and – very important – operate out-of-memory thanks to its dask capabilities
    - regionmask: to mask a gridded file according to a shapefile
    - numpy: for simple array manipulations
    - geopandas: to open shapefiles
    - matplotlib: for plotting
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-first-we-need-to-import-librairies-and-create-aliases&#34;&gt;1- First we need to import librairies and create aliases.&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import xarray as xr 
import numpy as np
import regionmask
import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;working-over-continents&#34;&gt;Working over continents&lt;/h2&gt;

&lt;p&gt;In this example we will use the  classification developed by ARCGIS.&lt;/p&gt;

&lt;p&gt;Shapefiles are available on this &lt;a href=&#34;https://www.arcgis.com/home/item.html?id=5cf4f223c4a642eb9aa7ae1216a04372&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After downloaded the shapefile, we must load it using geopandas library:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;PATH_TO_SHAPEFILE = &#39;./continent_shapefile/continent.shp&#39;
continents = gpd.read_file(PATH_TO_SHAPEFILE)
continents
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;0             Asia
1    North America
2           Europe
3           Africa
4    South America
5          Oceania
6        Australia
7       Antarctica
Name: CONTINENT, dtype: GeoDataFrame&lt;/p&gt;

&lt;p&gt;Shapes are here a GeoDataFrame containing all polygons illustrating the continent boundaries.&lt;/p&gt;

&lt;p&gt;Now we can load the ERA5 gridded data. The parameter chunks is very important, it defines how big are the “pieces” of data moved from the disk to the memory. With this value the entire computation on a workstation with 32 GB takes a couple of minutes.&lt;/p&gt;

&lt;p&gt;We will load all the temperature files for the year 2018 using Xarray library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model=&#39;ERA5_T2m_1h&#39;
t_in = &#39;J:/REANALYSES/ERA5/T2m_1h/&#39;        
data = t_in + model + &#39;_2018*_sfc.nc&#39;
ds = xr.open_mfdataset(data, chunks = {&#39;time&#39;: 10})
ds
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 721, longitude: 1440, time: 8760)
Coordinates:
  * longitude  (longitude) float32 0.0 0.25 0.5 0.75 ... 359.25 359.5 359.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(8760, 721, 1440), chunksize=(10, 721, 1440)&amp;gt;
Attributes:
    Conventions:  CF-1.6
    history:      2019-11-11 13:33:07 GMT by grib_to_netcdf-2.14.0: /opt/ecmw...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next function &lt;b&gt;assign_coords&lt;/b&gt; will convert the longitude from the 0-360 range to -180,180&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ds = ds.assign_coords(longitude=(((ds.longitude + 180) % 360) - 180)).sortby(&#39;longitude&#39;)
ds
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 721, longitude: 1440, time: 8760)
Coordinates:
  * longitude  (longitude) float32 -180.0 -179.75 -179.5 ... 179.25 179.5 179.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(8760, 721, 1440), chunksize=(10, 721, 1440)&amp;gt;
Attributes:
    Conventions:  CF-1.6
    history:      2019-11-11 13:33:07 GMT by grib_to_netcdf-2.14.0: /opt/ecmw...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our xarray Dataset contains a single variable (t2m) which is stored as a dask.array. This is the result of loading files with open_mfdataset.&lt;/p&gt;

&lt;p&gt;Now we will use regionmask module to create a gridded mask with the
&lt;a href=&#34;https://regionmask.readthedocs.io/en/stable/generated/regionmask.Regions_cls.html#regionmask.Regions_cls&#34; target=&#34;_blank&#34;&gt;function regions_cls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this function we will create an object able to mask ERA5 gridded data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;continents_mask_poly = regionmask.Regions_cls(name = &#39;CONTINENT&#39;, numbers = list(range(0,8)), names = list(continents.CONTINENT), abbrevs = list(continents.CONTINENT), outlines = list(continents.geometry.values[i] for i in range(0,8)))
continents_mask_poly
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8 &#39;CONTINENT&#39; Regions ()
Asia North America Europe Africa South America Oceania Australia Antarctica
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to apply the mask on the gridded dataset xarray ERA5.&lt;/p&gt;

&lt;p&gt;We select only the first timestep to speed up the process.&lt;/p&gt;

&lt;p&gt;This step could take few minutes because of ERA5 resolution and grid : Dimensions:    (latitude: 721, longitude: 1440)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask = continents_mask_poly.mask(ds.isel(time = 0), lat_name=&#39;latitude&#39;, lon_name=&#39;longitude&#39;)
mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;region&#39; (latitude: 721, longitude: 1440)&amp;gt;
array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan,  7.,  7., ...,  7.,  7.,  7.],
       [nan,  7.,  7., ...,  7.,  7.,  7.],
       [nan, nan, nan, ..., nan, nan, nan]])
Coordinates:
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * longitude  (longitude) float32 -180.0 -179.75 -179.5 ... 179.25 179.5 179.75
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mask can be saved (for example as a NetCDF) for a later use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask.to_netcdf(&#39;./mask_all_continents.nc&#39;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A quick visualisation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(15,8))
ax = plt.axes()
mask.plot(ax = ax)
continents.plot(ax = ax, alpha = 0.8, facecolor = &#39;none&#39;, lw = 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x787df98&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./continent1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-extract-time-series&#34;&gt;2- Extract time-series&lt;/h2&gt;

&lt;p&gt;We can now for each contient aggregate the grid cells.&lt;/p&gt;

&lt;p&gt;We will first develop two methods to mask our area. Then, we will extract the time series.&lt;/p&gt;

&lt;h3 id=&#34;method-1&#34;&gt;- Method 1:&lt;/h3&gt;

&lt;p&gt;We will do this work over Africa.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ID_CONTINENT = 3
print(continents.CONTINENT[ID_CONTINENT])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Africa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As first step, I will save the latitude and longitude vectors because I will use it later. Then, I select the mask points where the value is equal to target value (the ID_CONTINENT code define before).&lt;/p&gt;

&lt;p&gt;In the numpy array sel_mask all the values are nan except for the selected ones.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lat = mask.latitude.values
lon = mask.longitude.values

sel_mask = mask.where(mask == ID_CONTINENT).values
sel_mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To speed-up the process I want to crop the xarray Dataset selecting the smallest box containing the entire mask. To do this I store in id_lon and id_lat the coordinate points where the mask has at least a non-nan value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_lon = lon[np.where(~np.all(np.isnan(sel_mask), axis=0))]
id_lat = lat[np.where(~np.all(np.isnan(sel_mask), axis=1))]
id_lat
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ 37.25,  37.  ,  36.75,  36.5 ,  36.25,  36.  ,  35.75,  35.5 ,
        35.25,  35.  ,  34.75,  34.5 ,  34.25,  34.  ,  33.75,  33.5 ,
        33.25,  33.  ,  32.75,  32.5 ,  32.25,  32.  ,  31.75,  31.5 ,
        31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,  29.75,  29.5 ,
        29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,  27.5 ,
        27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,
        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,
        23.25,  23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,
        21.25,  21.  ,  20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,
        19.25,  19.  ,  18.75,  18.5 ,  18.25,  18.  ,  17.75,  17.5 ,
        17.25,  17.  ,  16.75,  16.5 ,  16.25,  16.  ,  15.75,  15.5 ,
        15.25,  15.  ,  14.75,  14.5 ,  14.25,  14.  ,  13.75,  13.5 ,
        13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,  11.75,  11.5 ,
        11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,   9.5 ,
         9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,
         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,
         5.25,   5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,
         3.25,   3.  ,   2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,
         1.25,   1.  ,   0.75,   0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,
        -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,  -2.25,  -2.5 ,
        -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,  -4.5 ,
        -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,
        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,
        -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,
       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  , -12.25, -12.5 ,
       -12.75, -13.  , -13.25, -13.5 , -13.75, -14.  , -14.25, -14.5 ,
       -14.75, -15.  , -15.25, -15.5 , -15.75, -16.  , -16.25, -16.5 ,
       -16.75, -17.  , -17.25, -17.5 , -17.75, -18.  , -18.25, -18.5 ,
       -18.75, -19.  , -19.25, -19.5 , -19.75, -20.  , -20.25, -20.5 ,
       -20.75, -21.  , -21.25, -21.5 , -21.75, -22.  , -22.25, -22.5 ,
       -22.75, -23.  , -23.25, -23.5 , -23.75, -24.  , -24.25, -24.5 ,
       -24.75, -25.  , -25.25, -25.5 , -25.75, -26.  , -26.25, -26.5 ,
       -26.75, -27.  , -27.25, -27.5 , -27.75, -28.  , -28.25, -28.5 ,
       -28.75, -29.  , -29.25, -29.5 , -29.75, -30.  , -30.25, -30.5 ,
       -30.75, -31.  , -31.25, -31.5 , -31.75, -32.  , -32.25, -32.5 ,
       -32.75, -33.  , -33.25, -33.5 , -33.75, -34.  , -34.25, -34.5 ,
       -34.75], dtype=float32)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Xarray dataset is reduced selecting only the target year and the coordinates containing the target region. Then the dataset is load from the dask array using compute and then filtered using the mask.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel1 = ds.sel(latitude = slice(id_lat[0], id_lat[-1]), longitude = slice(id_lon[0], id_lon[-1])).compute().where(mask == ID_CONTINENT)
out_sel1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 289, longitude: 333, time: 8760)
Coordinates:
  * latitude   (latitude) float64 37.25 37.0 36.75 36.5 ... -34.25 -34.5 -34.75
  * longitude  (longitude) float64 -25.25 -25.0 -24.75 ... 57.25 57.5 57.75
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m        (time, latitude, longitude) float32 nan nan nan ... nan nan nan
Attributes:
    Conventions:  CF-1.6
    history:      2019-11-11 13:33:07 GMT by grib_to_netcdf-2.14.0: /opt/ecmw...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;method-2&#34;&gt;- Method 2:&lt;/h3&gt;

&lt;p&gt;We can directly use xarray library to apply netcdf mask with using .where() method and DataArray mask:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;region&#39; (latitude: 721, longitude: 1440)&amp;gt;
array([[nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       [nan, nan, nan, ..., nan, nan, nan],
       ...,
       [nan,  7.,  7., ...,  7.,  7.,  7.],
       [nan,  7.,  7., ...,  7.,  7.,  7.],
       [nan, nan, nan, ..., nan, nan, nan]])
Coordinates:
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * longitude  (longitude) float32 -180.0 -179.75 -179.5 ... 179.25 179.5 179.75
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel2 = ds.where(mask == 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 289, longitude: 333, time: 8760)
Coordinates:
  * latitude   (latitude) float64 37.25 37.0 36.75 36.5 ... -34.25 -34.5 -34.75
  * longitude  (longitude) float64 -25.25 -25.0 -24.75 ... 57.25 57.5 57.75
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m        (time, latitude, longitude) float32 nan nan nan ... nan nan nan
Attributes:
    Conventions:  CF-1.6
    history:      2019-11-11 13:33:07 GMT by grib_to_netcdf-2.14.0: /opt/ecmw...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out_sel2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 721, longitude: 1440, time: 8760)
Coordinates:
  * longitude  (longitude) float32 -180.0 -179.75 -179.5 ... 179.25 179.5 179.75
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * time       (time) datetime64[ns] 2018-01-01 ... 2018-12-31T23:00:00
Data variables:
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(8760, 721, 1440), chunksize=(10, 721, 1440)&amp;gt;
Attributes:
    Conventions:  CF-1.6
    history:      2019-11-11 13:33:07 GMT by grib_to_netcdf-2.14.0: /opt/ecmw...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quick visualisation, we will display the first step of our DataArray masked.&lt;/p&gt;

&lt;p&gt;For out_sel1 array :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(12,8))
ax = plt.axes()
out_sel1.t2m.isel(time = 0).plot(ax = ax)
continents.plot(ax = ax, alpha = 0.8, facecolor = &#39;none&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0xba03908&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./continent2.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For out_sel2 array :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(15,8))
ax = plt.axes()
out_sel2.t2m.isel(time = 0).plot(ax = ax)
continents.plot(ax = ax, alpha = 0.8, facecolor = &#39;none&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x759f9e8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;!&lt;img src=&#34;./continent3.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Finally we can resample our dataset by day and then compute a daily mean.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With out_sel1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean = out_sel1.resample(time = &#39;1D&#39;).mean()-273.15
daily_mean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 289, longitude: 333, time: 365)
Coordinates:
  * latitude   (latitude) float64 37.25 37.0 36.75 36.5 ... -34.25 -34.5 -34.75
  * longitude  (longitude) float64 -25.25 -25.0 -24.75 ... 57.25 57.5 57.75
  * time       (time) datetime64[ns] 2018-01-01 2018-01-02 ... 2018-12-31
Data variables:
    t2m        (time, latitude, longitude) float32 nan nan nan ... nan nan nan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To compute spatial mean over Africa:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean = daily_mean.t2m.mean(dim=(&#39;longitude&#39;,&#39;latitude&#39;))
daily_mean
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;t2m&#39; (time: 365)&amp;gt;
array([20.868923, 20.559137, 20.618475, ..., 20.510223, 20.604036, 20.943094],
      dtype=float32)
Coordinates:
  * time     (time) datetime64[ns] 2018-01-01 2018-01-02 ... 2018-12-31
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we plot the time-series…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean.plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0xc2d4cf8&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./continent4.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And we save it as a csv.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean.to_pandas().to_csv(&#39;average-daily-temperature.csv&#39;, header = [&#39;t2m&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just to see if we find same results with masking method 2. We will plot the same time serie with out_sel2 Xarray:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean2 = out_sel2.resample(time = &#39;1D&#39;).mean()-273.15
daily_mean2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.Dataset&amp;gt;
Dimensions:    (latitude: 721, longitude: 1440, time: 365)
Coordinates:
  * latitude   (latitude) float32 90.0 89.75 89.5 89.25 ... -89.5 -89.75 -90.0
  * longitude  (longitude) float32 -180.0 -179.75 -179.5 ... 179.25 179.5 179.75
  * time       (time) datetime64[ns] 2018-01-01 2018-01-02 ... 2018-12-31
Data variables:
    t2m        (time, latitude, longitude) float32 dask.array&amp;lt;shape=(365, 721, 1440), chunksize=(1, 721, 1440)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean2 = daily_mean2.t2m.mean(dim=(&#39;longitude&#39;,&#39;latitude&#39;))
daily_mean2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;xarray.DataArray &#39;t2m&#39; (time: 365)&amp;gt;
dask.array&amp;lt;shape=(365,), dtype=float32, chunksize=(1,)&amp;gt;
Coordinates:
  * time     (time) datetime64[ns] 2018-01-01 2018-01-02 ... 2018-12-31
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;daily_mean2.plot()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0xc2d1f28&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./continent5.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Temperature Radial Chart</title>
      <link>/post/temperature_radial_chart/</link>
      <pubDate>Fri, 06 Dec 2019 20:00:03 -0800</pubDate>
      <guid>/post/temperature_radial_chart/</guid>
      <description>

&lt;h3 id=&#34;plot-of-a-radial-temperature-chart&#34;&gt;Plot of a radial temperature chart&lt;/h3&gt;

&lt;p&gt;In this post, we will plot a radial temperature chart using daily temperature from Environment Canada.&lt;/p&gt;

&lt;p&gt;The objective of this product is to obtain an analysis of the daily evolution of the temperature and its positioning in relation to the norm and the historical records of the Julian day.&lt;/p&gt;

&lt;p&gt;In this work, we will extract data from Environment and Climate Change Canada for the RIGAUD station in Quebec. Here is the information about this station:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Name: RIGAUD
Username: 5252
Latitude: 45.5 degN
Longitude: -74.37 degW
Period covered: 1963 - today
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A list of stations is available on this &lt;a href=&#34;ftp://ftp.tor.ec.gc.ca/Pub/Get_More_Data_More_data/Repository%20of%20stations%20FR.csv&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The data will be uploaded directly to Environment and Climate Change Canada&amp;rsquo;s  &lt;a href=&#34;Repository%20of%20stations%20FR.csv&#34; target=&#34;_blank&#34;&gt;website&lt;/a&gt; &lt;a href=&#34;http://climate.weather.gc.ca/)&#34; target=&#34;_blank&#34;&gt;http://climate.weather.gc.ca/)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The data is in XML format. XML or eXtensible Markup Language is a generic markup language. To read this format, we will call the &lt;a href=&#34;https://docs.python.org/2/library/xml.etree.elementtree.html#module-xml.etree.ElementTree&#34; target=&#34;_blank&#34;&gt;&amp;lsquo;xml.etree.ElementTree&amp;rsquo; library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we import the necessary libraries:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- matplotlib: module to plot our graph
- datetime: python module for manipulating dates
- wget: module to extract data on a url
- pandas: module for working with data structures
- os: &amp;quot;system&amp;quot; module to create, delete ... files from our environment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as ticker
from datetime import date
import os
import wget
import pandas as pd
import xml.etree.ElementTree as ET
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, we will extract the year 2000 daily records of the station RIGAUD (ID: 5252).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;id_stat = 5252
year = 2000
tmp_file = wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=2&#39;)
tree=ET.parse(tmp_file)
os.remove(tmp_file)
root=tree.getroot()
stationsdata = root.findall(&#39;.//stationdata&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-1 / unknown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notre fichier XML a la structure suivant:&lt;br /&gt;
Our XML file got this structure:&lt;/p&gt;

&lt;p&gt;&lt;stationdata year=&#34;1955&#34; month=&#34;1&#34; day=&#34;1&#34;&gt;
    &lt;maxtemp units=&#34;°C&#34; description=&#34;Maximum Temperature&#34;&gt;3.3&lt;/maxtemp&gt;
    &lt;mintemp units=&#34;°C&#34; description=&#34;Minimum Temperature&#34;&gt;-4.4&lt;/mintemp&gt;
    &lt;meantemp units=&#34;°C&#34; description=&#34;Mean Temperature&#34;&gt;-0.6&lt;/meantemp&gt;
    &lt;heatdegdays units=&#34;°C&#34; description=&#34;Heating Degree Days&#34;&gt;18.6&lt;/heatdegdays&gt;
    &lt;cooldegdays units=&#34;°C&#34; description=&#34;Cooling Degree Days&#34;&gt;0.0&lt;/cooldegdays&gt;
    &lt;totalrain units=&#34;mm&#34; description=&#34;Total Rain&#34;&gt;0.0&lt;/totalrain&gt;
    &lt;totalsnow units=&#34;cm&#34; description=&#34;Total Snow&#34;&gt;0.0&lt;/totalsnow&gt;
    &lt;totalprecipitation units=&#34;mm&#34; description=&#34;Total Precipitation&#34;&gt;0.0&lt;/totalprecipitation&gt;
    &lt;snowonground units=&#34;cm&#34; description=&#34;Snow on Ground&#34;/&gt;
    &lt;dirofmaxgust units=&#34;10s Deg&#34; description=&#34;Direction of Maximum Gust&#34;/&gt;
    &lt;speedofmaxgust units=&#34;km/h&#34; description=&#34;Speed of Maximum Gust&#34;/&gt;
&lt;/stationdata&gt;&lt;/p&gt;

&lt;p&gt;We need to target the maxtemp and mintemp tags for our work, so the stationdata[0] and station[1] fields.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resultmax = []
resultmin = []
for stationdata in stationsdata:
    champs1=stationdata.find(&#39;maxtemp&#39;)              
    resultmax.append(champs1.text)   #  we append data for each day in a year 
    data_max=np.array(resultmax,&amp;quot;float&amp;quot;)     
for stationdata in stationsdata:
    champs2=stationdata.find(&#39;mintemp&#39;)              
    resultmin.append(champs2.text)   #  we append data for each day in a year 
    data_min=np.array(resultmin,&amp;quot;float&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then have two python lists with daily minimum and maximum temperatures.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(resultmax[0:5])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;-1.0&#39;, &#39;5.5&#39;, &#39;2.0&#39;, &#39;4.0&#39;, &#39;-3.0&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can do the same over the whole recording period of the station (1963-2019) by applying a for loop over the years.&lt;/p&gt;

&lt;p&gt;For each year and each variable to be extracted we will increment a list in the variables min_array = [] and max_array = [].&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;yi = 1963
yf = 2019
id_stat = 5252
station = &#39;RIGAUD&#39;
max_array = []
min_array = []
for year in range(yi,yf+1):    ### loop over yars 
    tmp_file = wget.download(&#39;http://climate.weather.gc.ca/climate_data/bulk_data_e.html?format=xml&amp;amp;stationID=&#39;+str(int(id_stat))+&#39;&amp;amp;Year=&#39;+str(year)+&#39;&amp;amp;Month=01&amp;amp;Day=14&amp;amp;timeframe=2&#39;)
    tree=ET.parse(tmp_file)
    os.remove(tmp_file)
    root=tree.getroot()
    stationsdata = root.findall(&#39;.//stationdata&#39;)
    resultmax = []
    resultmin = []
    for  stationdata in stationsdata:
         champs1=stationdata.find(&#39;maxtemp&#39;)              
         resultmax.append(champs1.text)   #  loop over days for tmax 
         data_max=np.array(resultmax,&amp;quot;float&amp;quot;)     
    for  stationdata in stationsdata:
         champs2=stationdata.find(&#39;mintemp&#39;)              
         resultmin.append(champs2.text)   #  loop over days for tmin 
         data_min=np.array(resultmin,&amp;quot;float&amp;quot;) 
         
    max_array.append(data_max)
    min_array.append(data_min)
len(max_array)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-1 / unknown




57
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For each min_array and max_array fields, we get a list of lists. We will flatten thoses lists:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def flatten(input):
    new_list = []
    for i in input:
        for j in i:
            new_list.append(j)
    return new_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min_array=flatten(min_array) 
max_array=flatten(max_array)
len(min_array)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;20819
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we now have two lists of 20454 days for each min_array and max_array fields.&lt;/p&gt;

&lt;p&gt;Knowing that the period extends from January 1, 1963 to December 31, 2018, we can add a temporal dimension to our dataframe with the datetime module of python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;start = date(1963, 1, 1)
end = date(2019, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)
tmin_dataset = pd.Series(min_array, index=rng)
tmax_dataset = pd.Series(max_array, index=rng)
tmax_dataset.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1963-01-01   -11.1
1963-01-02    -6.7
1963-01-03    -3.9
1963-01-04    -2.2
1963-01-05    -3.9
Freq: D, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the big advantages of the pandas dataframe is that we can very easily work with time series.
Here we will calculate the daily climatologies of the tmin_dataset and tmax_dataset variables over the 1981-2010 normal period.&lt;/p&gt;

&lt;p&gt;Also, with the pandas groupby tools, we can calculate the daily minimum and maximum of tmin_dataset and tmax_dataset over the full period of the recording.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mintmin = []
maxtmax = []
climtmin = []
climtmax = []

clim_min_dataset=tmin_dataset[&#39;1981&#39;:&#39;2010&#39;]
clim_max_dataset=tmax_dataset[&#39;1981&#39;:&#39;2010&#39;]
climtmin = clim_min_dataset.groupby([clim_min_dataset.index.month, clim_min_dataset.index.day]).mean()
climtmax = clim_max_dataset.groupby([clim_max_dataset.index.month, clim_max_dataset.index.day]).mean()

mintmin = tmin_dataset.groupby([tmin_dataset.index.month, tmin_dataset.index.day]).min()
maxtmax = tmax_dataset.groupby([tmax_dataset.index.month, tmax_dataset.index.day]).max()


data_min_tmin=np.array(mintmin,&amp;quot;float&amp;quot;)  
data_max_tmax=np.array(maxtmax,&amp;quot;float&amp;quot;) 
data_clim_tmax=np.array(climtmax,&amp;quot;float&amp;quot;)     
data_clim_tmin=np.array(climtmin,&amp;quot;float&amp;quot;) 

print(len(data_clim_tmax))
print(len(maxtmax))

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;366
366
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can know visualize our timeries with a radial chart.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = []
ndays=366
Azs=np.arange(0,ndays)
angle = Azs * 2.0 * np.pi / ndays

fig=plt.figure(figsize=(12,12))
ax = fig.add_subplot(111, polar=True)

ax.plot([angle[0],angle[0]], [data_min[0],data_max[0]],&#39;red&#39;, alpha=1.0, linewidth=3.0, label=str(yf))
ax.plot([angle[0],angle[0]], [data_clim_tmin[0],data_clim_tmax[0]],&#39;blue&#39;, alpha=0.3, linewidth=3.0, label=&#39;Climatology (1981-2010)&#39;)
ax.plot([angle[0],angle[0]], [data_min_tmin[0],data_max_tmax[0]],&#39;grey&#39;, alpha=0.4, linewidth=3.0, label=&#39;Extreme (&#39;+str(yi)+&#39;-&#39;+str(yf)+&#39;)&#39;)

leg=plt.legend(bbox_to_anchor=(0.15, 1.0),fontsize=10)
leg.get_frame().set_linewidth(0.0)
leg.set_title(str(station)+&#39; &#39;+str(yf), prop={&#39;size&#39;: 10, &#39;weight&#39;: &#39;heavy&#39;})

ax.plot([angle,angle], [data_min,data_max],&#39;red&#39;, alpha=1.0, linewidth=3.0)
ax.plot([angle,angle], [data_clim_tmin,data_clim_tmax],&#39;blue&#39;, alpha=0.3, linewidth=3.0)
ax.plot([angle,angle], [data_min_tmin,data_max_tmax],&#39;grey&#39;, alpha=0.4, linewidth=3.0)

ax.set_rmin(-40)
ax.set_rmax(+40)
ax.grid(True)
ax.set_theta_direction(-1)
ax.set_theta_offset(np.pi / 2)

ax.set_rticks([-30,-20, -10, 0, 10, 20, 30])  # less radial ticks
ax.set_rlabel_position(-45.)  # get radial labels away from plotted line
ax.set_yticklabels([&#39;$-30^{\circ}$&#39;, &#39;$-20^{\circ}$&#39;, &#39;$-10^{\circ}$&#39;, &#39;$0^{\circ}$&#39;, &#39;$10^{\circ}$&#39;, &#39;$20^{\circ}$&#39;, &#39;$30^{\circ}$&#39; ],
   fontsize=10)

# Set the major and minor tick locations
ax.xaxis.set_major_locator(ticker.MultipleLocator(np.pi/6))
ax.xaxis.set_minor_locator(ticker.MultipleLocator(np.pi/12))
ax.grid(linewidth=1,color=&#39;grey&#39;, linestyle=&#39;-&#39;)

# Turn off major tick labels
ax.xaxis.set_major_formatter(ticker.NullFormatter())
ax.set_frame_on(False)

# Set the minor tick width to 0 so you don&#39;t see them
for tick in ax.xaxis.get_minor_ticks():
    tick.tick1line.set_markersize(0)
    tick.tick2line.set_markersize(0)
    tick.label1.set_horizontalalignment(&#39;center&#39;)

# Set the names of your ticks, with blank spaces for the major ticks
ax.set_xticklabels([&#39;&#39;,&#39;Jan&#39;,&#39;&#39;,&#39;Feb&#39;,&#39;&#39;,&#39;Mar&#39;,&#39;&#39;,&#39;Apr&#39;,&#39;&#39;,&#39;May&#39;,&#39;&#39;,&#39;Jun&#39;,&#39;&#39;,&#39;Jul&#39;,&#39;&#39;,&#39;Aug&#39;,&#39;&#39;,&#39;Sep&#39;,&#39;&#39;,&#39;Oct&#39;,&#39;&#39;,&#39;Nov&#39;,&#39;&#39;,&#39;Dec&#39;],minor=True)

plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_18_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ECCC homogenized dataset</title>
      <link>/post/eccc_temp/</link>
      <pubDate>Fri, 06 Dec 2019 19:50:39 -0800</pubDate>
      <guid>/post/eccc_temp/</guid>
      <description>

&lt;h2 id=&#34;extract-daily-temperature-from-environment-canada-using-python&#34;&gt;Extract daily temperature from Environment Canada using Python&lt;/h2&gt;

&lt;p&gt;The objective of this product is to retrieve daily temperature data from the second generation homogenized dataset of Environment and Climate Change Canada developed by Vincent et al. 2012.&lt;/p&gt;

&lt;p&gt;Adjusted and homogenized Canadian climate dataset (DCCAH) were prepared to provide a better spatial and temporal representation of the climate trends in Canada.&lt;/p&gt;

&lt;p&gt;In the Second Generation of Homogenized Temperature, new adjustments were applied to the daily minimum temperatures at synoptic stations (mainly airports) to address the bias due to the change in observing time in July 1961 (Vincent et al. 2009).&lt;/p&gt;

&lt;p&gt;Daily homogenized temperatures (minimum, maximum and mean) can be dowloaded on this &lt;a href=&#34;ftp://ccrp.tor.ec.gc.ca/pub/EC_data/AHCCD_daily/&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Raw dataset can be downloaded &lt;a href=&#34;http://climate.weather.gc.ca/historical_data/search_historic_data_f.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we will work on a specific province in Canada (using filters). To do this, we will use  Temperature_Stations.xls available on ftp site. This file provide us a list of all stations available.&lt;/p&gt;

&lt;p&gt;We first need to import our librairies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import pandas as pd
import os
from datetime import date
import calendar
import numpy as np
import pathlib
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
from itertools import islice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will work with daily minimum temperature data only for the Northwest Territories of Canada.&lt;/p&gt;

&lt;p&gt;Referring to the document Temperature_Stations.xls, we see that the acronym for this province is: NWT.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Using this Dataframe we can define some input parameters to filter our data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;varin = &#39;dn&#39;                          # variable acronym                                                                  
path = &#39;Homog_daily_min_temp_v2018&#39;   # path to get data                                       
varout = &#39;Tasmin&#39;                      
province = &#39;NWT&#39;                      # Province to work with
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now filter our dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;globals()[&#39;dataframe_&#39;+province] = dataframe.loc[(dataframe[&amp;quot;Prov&amp;quot;] == province),:]
globals()[&#39;dataframe_&#39;+province]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;65&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAPE PARRY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2200675&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1957&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-124.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;87&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;66&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FORT GOOD HOPE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2201450&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1944&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;66.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-128.65&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;82&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;68&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FORT RELIANCE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2201903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-109.17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;69&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FORT SIMPSON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2202103&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;61.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;169&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;70&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FORT SMITH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2202201&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-111.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;205&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;71&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HAY RIVER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2202401&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60.83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-115.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;166&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;72&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;INUVIK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2202578&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1957&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;68.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;103&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;73&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MOULD BAY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;250M001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;76.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;74&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NORMAN WELLS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2202801&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1943&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;65.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;73&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;75&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SACHS HARBOUR&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2503648&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1955&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;86&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;76&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TUKTOYAKTUK&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2203914&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1957&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69.45&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;77&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NWT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;YELLOWKNIFE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2204101&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62.47&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-114.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;206&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We found 13 stations for this province.&lt;/p&gt;

&lt;p&gt;We want to work with YELLOWKNIFE station:  stnid = 2204101.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stnid = &#39;2204101&#39;   
f1 = open(&#39;./&#39;+path+&#39;/&#39;+str(varin)+str(stnid)+&#39;.txt&#39;, &#39;r&#39;)
for line in islice(f1, 7):
        print(line)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2204101,    YELLOWKNIFE    ,  NWT, station joined    , Homogenized daily minimum temperature        , Deg Celcius,          Updated to December 2018

2204101,    YELLOWKNIFE    ,  NWT, station jointe    , Temperature quotidienne minimale homogeneisee, Deg Celcius, Mise a jour jusqu a decembre 2018

 Year Mo  Day 01  Day 02  Day 03  Day 04  Day 05  Day 06  Day 07  Day 08  Day 09  Day 10  Day 11  Day 12  Day 13  Day 14  Day 15  Day 16  Day 17  Day 18  Day 19  Day 20  Day 21  Day 22  Day 23  Day 24  Day 25  Day 26  Day 27  Day 28  Day 29  Day 30  Day 31

Annee Mo Jour 01 Jour 02 Jour 03 Jour 04 Jour 05 Jour 06 Jour 07 Jour 08 Jour 09 Jour 10 Jour 11 Jour 12 Jour 13 Jour 14 Jour 15 Jour 16 Jour 17 Jour 18 Jour 19 Jour 20 Jour 21 Jour 22 Jour 23 Jour 24 Jour 25 Jour 26 Jour 27 Jour 28 Jour 29 Jour 30 Jour 31

 1942  7    12.2    13.3    11.7    10.0     9.4    11.7    14.4    14.4    13.3    12.2    10.6    11.7    11.1    12.8    14.4    15.0    13.9    14.4    13.9    14.4    13.9    13.3    11.7    12.2    11.1    12.2    13.3    10.0    10.6    11.7     8.3 

 1942  8     7.8     5.0     9.4    12.8     9.4     9.4    10.0    10.6    12.8    10.6    12.2    12.2     9.4    15.0    12.8    11.7    14.4    14.4    11.7     8.3     9.4     7.8    12.2     8.9     3.9     7.2    10.6    11.1     7.2     5.0     3.3 

 1942  9     3.9     6.1     6.1     8.3     9.4    11.1    11.1     6.7     6.1     9.4     5.0     9.4     7.2     4.4     5.0     4.4     3.3     1.1     2.2    -0.6    -2.2     0.0    -1.7     1.1    -4.4    -0.6     0.0    -0.6     1.7     1.1 -9999.9M
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cleaning-data&#34;&gt;Cleaning data:&lt;/h3&gt;

&lt;p&gt;We see that in our dataset we have for each line the daily data by year and by month according to the structure:&lt;/p&gt;

&lt;p style=&#34;color:blue;font-size:12px;&#34;&gt;  Year Mo  Day 01  Day 02  Day 03  Day 04  Day 05  Day 06  Day 07  Day 08  Day 09  Day 10  Day 11  Day 12  Day 13  Day 14  Day 15  Day 16  Day 17  Day 18  Day 19  Day 20  Day 21  Day 22  Day 23  Day 24  Day 25  Day 26  Day 27  Day 28  Day 29  Day 30  Day 31 &lt;/p&gt;  

&lt;p&gt;There is a 4 rows header. We will delete this header and also delete the alphanumeric characters, clean the missing values and create a dataframe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;f1 = open(&#39;./&#39;+path+&#39;/&#39;+str(varin)+str(stnid)+&#39;.txt&#39;, &#39;r&#39;)
f2 = open(&#39;./tmp.txt&#39;, &#39;w&#39;)
for line in f1:
    for word in line:
            if word == &#39;M&#39;:
                f2.write(word.replace(&#39;M&#39;, &#39; &#39;))
            elif word == &#39;a&#39;:
                f2.write(word.replace(&#39;a&#39;, &#39; &#39;))                    
            else:
                f2.write(word)
f1.close()
f2.close()      
df_station = pd.read_csv(&#39;./tmp.txt&#39;, delim_whitespace=True, skiprows = range(0, 4))
df_station.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1942&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;12.2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;13.3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;11.7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10.0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9.4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;11.7.1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;14.4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;14.4.1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;13.3.1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;12.2.1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10.6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;11.7.2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;11.1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;12.8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;14.4.2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;15.0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;13.9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;14.4.3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;13.9.1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;14.4.4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;13.9.2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;13.3.2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;11.7.3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;12.2.2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;11.1.1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;12.2.3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;13.3.3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10.0.1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10.6.1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;11.7.4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8.3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9999.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-22.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-22.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-32.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-31.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-34.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-27.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9999.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-27.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-31.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-28.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-31.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-37.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-37.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-38.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-40.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-39.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-35.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-31.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-34.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-28.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-24.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-40.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;That&amp;rsquo;s better but we still have some missing values. We will also change column names.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_station.columns = [&#39;Year&#39;, &#39;Month&#39;, &#39;D1&#39;,&#39;D2&#39;,&#39;D3&#39;,&#39;D4&#39;,&#39;D5&#39;,&#39;D6&#39;,&#39;D7&#39;,&#39;D8&#39;,&#39;D9&#39;,&#39;D10&#39;,
                                  &#39;D11&#39;,&#39;D12&#39;,&#39;D13&#39;,&#39;D14&#39;,&#39;D15&#39;,&#39;D16&#39;,&#39;D17&#39;,&#39;D18&#39;,&#39;D19&#39;,&#39;D20&#39;,
                                  &#39;D21&#39;,&#39;D22&#39;,&#39;D23&#39;,&#39;D24&#39;,&#39;D25&#39;,&#39;D26&#39;,&#39;D27&#39;,&#39;D28&#39;,&#39;D29&#39;,&#39;D30&#39;,&#39;D31&#39;]
     
os.remove(&amp;quot;./tmp.txt&amp;quot;)
   
   # nettoyage des valeurs manquantes 
try:  
    df_station = df_station.replace({&#39;E&#39;:&#39;&#39;}, regex=True)
except:
       pass
try: 
    df_station = df_station.replace({&#39;a&#39;:&#39;&#39;}, regex=True)
except:
       pass
try:     
    df_station = df_station.replace({&#39;-9999.9&#39;:&#39;&#39;}, regex=True)
except:
       pass
try:     
    df_station = df_station.replace({-9999.9:&#39;&#39;}, regex=True)
except:
       pass    
    
for col in  df_station.columns[2:]:
       df_station[col] = pd.to_numeric(df_station[col], errors=&#39;coerce&#39;)      
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_station.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Month&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D11&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D12&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D13&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D14&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D15&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D16&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D17&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D18&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D19&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D20&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D21&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D22&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D23&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D24&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D25&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D26&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D27&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D28&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D29&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D30&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;D31&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9999.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-11.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-22.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-22.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-32.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-31.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-34.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-27.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9999.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-27.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-31.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-28.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-31.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-37.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-37.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-38.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-40.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-39.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-35.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-31.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-34.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-28.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-24.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-40.6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can now detect the minimum and maximum recording years and write the daily data on a single column.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;yearmin = df_station[&#39;Year&#39;].min()                                  
yearmax = df_station[&#39;Year&#39;].max()                                   
m_start =  df_station[&#39;Month&#39;].loc[(df_station[&#39;Year&#39;] == yearmin)].min()
m_end   =  df_station[&#39;Month&#39;].loc[(df_station[&#39;Year&#39;] == yearmax)].max()
d_end = calendar.monthrange(yearmax, m_end)[1]                     

tmp_tmin = [ ] 
for year in range(yearmin,yearmax+1):    ### Loop over years
    for month in range(1,13):
        df = []
        last_day = calendar.monthrange(year, month)[1] 
        tmin = df_station.loc[(df_station[&amp;quot;Year&amp;quot;] == year) &amp;amp; (df_station[&amp;quot;Month&amp;quot;] == month)].iloc[:,2:last_day+2].values
           
        if len(tmin) == 0:
            a = np.empty((calendar.monthrange(year,month)[1]))
            a[:] = np.nan
            df=pd.DataFrame(a)
        else:
            df=pd.DataFrame(tmin.T)
               
        start = date(year, month, 1)
        end =   date(year, month, last_day)
        delta=(end-start) 
        nb_days = delta.days + 1 
        rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)          
        df[&#39;datetime&#39;] = rng
        df.index = df[&#39;datetime&#39;]
        tmp_tmin.append(df)
           
tmp_tmin = pd.concat(tmp_tmin) 
df = pd.DataFrame({&#39;datetime&#39;: tmp_tmin[&#39;datetime&#39;], &#39;Var&#39;: tmp_tmin.iloc[:,0]}, columns = [&#39;datetime&#39;,&#39;Tmin&#39;]) 
df.index = df[&#39;datetime&#39;]
tmp_tmin = tmp_tmin.drop([&amp;quot;datetime&amp;quot;], axis=1)
tmp_tmin.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-27 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-32.6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-27.7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-35.2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;visualization&#34;&gt;Visualization:&lt;/h3&gt;

&lt;p&gt;Quick visualization of the monthly average temperatures for the month of January.
We will group the data by month and calculate the average.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pylab as plt
import datetime
month_tmin = tmp_tmin.resample(&#39;M&#39;).mean()
month_tmin.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-08-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.9871&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-09-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.673333&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-10-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.99032&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-11-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.5233&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.8129&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tmin_janvier = month_tmin[month_tmin.index.month==1]
tmin_janvier.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1942-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1943-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-32.6871&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1944-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25.471&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1945-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-28.6355&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1946-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-33.4032&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[10,6]        
plt.plot(tmin_janvier.index, tmin_janvier[:],  label=&#39;Tmin Station&#39;, linewidth=2, c=&#39;r&#39;)
plt.title(&#39;Monthly mean of daily minimum temperature: January from &#39; + datetime.date(yearmin, 1, 1).strftime(&#39;%Y&#39;)+ &#39; et &#39;  + datetime.date(yearmax, 1, 1).strftime(&#39;%Y&#39;), fontsize=15, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.xlabel(&#39;Year&#39;, fontsize=15, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.ylabel(&#39;°C&#39;, fontsize=15, color=&#39;black&#39;, weight=&#39;semibold&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;output_20_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;final-code&#34;&gt;Final code&lt;/h2&gt;

&lt;p&gt;The following code retrieves all stations for a specific province but for a common period.&lt;/p&gt;

&lt;p&gt;For example, we wish to extract all daily temperature data for the province of the Northwest Territories but only for the common period 1989-2018.&lt;/p&gt;

&lt;p&gt;We wish to have one file per station.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import os
from datetime import date
import calendar
import numpy as np
import pathlib

################################################                                                            #
varin = &#39;dn&#39;                                                                  
path = &#39;Homog_daily_min_temp_v2018&#39;                                           
varout = &#39;Tasmoy&#39;
province = &#39;NWT&#39;  
yearmin = 1989 
yearmax = 2018
###############################################################################

dataframe = pd.read_excel(&amp;quot;./Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))

globals()[&#39;dataframe_&#39;+province] = dataframe.loc[(dataframe[&amp;quot;Prov&amp;quot;] == province) &amp;amp; (dataframe[&amp;quot;année déb.&amp;quot;] &amp;lt;= yearmin) &amp;amp; (dataframe[&amp;quot;année fin.&amp;quot;] &amp;gt;= yearmax),:]

names = []
for i, row in globals()[&#39;dataframe_&#39;+province].iterrows():
   stnid = row[&#39;stnid&#39;]   
   f1 = open(&#39;./&#39;+path+&#39;/&#39;+str(varin)+str(stnid)+&#39;.txt&#39;, &#39;r&#39;)
   f2 = open(&#39;./tmp.txt&#39;, &#39;w&#39;)

   for line in f1:
        for word in line:
            if word == &#39;M&#39;:
                f2.write(word.replace(&#39;M&#39;, &#39; &#39;))
            elif word == &#39;a&#39;:
                f2.write(word.replace(&#39;a&#39;, &#39; &#39;))                    
            else:
                f2.write(word)
   f1.close()
   f2.close()
          
   station = pd.read_csv(&#39;./tmp.txt&#39;, delim_whitespace=True, skiprows = range(0, 4))
   
   station.columns = [&#39;Annee&#39;, &#39;Mois&#39;, &#39;D1&#39;,&#39;D2&#39;,&#39;D3&#39;,&#39;D4&#39;,&#39;D5&#39;,&#39;D6&#39;,&#39;D7&#39;,&#39;D8&#39;,&#39;D9&#39;,&#39;D10&#39;,
                                  &#39;D11&#39;,&#39;D12&#39;,&#39;D13&#39;,&#39;D14&#39;,&#39;D15&#39;,&#39;D16&#39;,&#39;D17&#39;,&#39;D18&#39;,&#39;D19&#39;,&#39;D20&#39;,
                                  &#39;D21&#39;,&#39;D22&#39;,&#39;D23&#39;,&#39;D24&#39;,&#39;D25&#39;,&#39;D26&#39;,&#39;D27&#39;,&#39;D28&#39;,&#39;D29&#39;,&#39;D30&#39;,&#39;D31&#39;]
     
   os.remove(&amp;quot;./tmp.txt&amp;quot;)
 
   try:  
       station = station.replace({&#39;E&#39;:&#39;&#39;}, regex=True)
   except:
       pass
   try: 
       station = station.replace({&#39;a&#39;:&#39;&#39;}, regex=True)
   except:
       pass
   try:     
       station = station.replace({&#39;-9999.9&#39;:&#39;&#39;}, regex=True)
   except:
       pass
   try:     
       station = station.replace({-9999.9:&#39;&#39;}, regex=True)
   except:
       pass    
       
   for col in  station.columns[2:]:
       station[col] = pd.to_numeric(station[col], errors=&#39;coerce&#39;)
        
   m_start =  station[&#39;Mois&#39;].loc[(station[&#39;Annee&#39;] == yearmin)].min()
   m_end   =  station[&#39;Mois&#39;].loc[(station[&#39;Annee&#39;] == yearmax)].max()
   
   d_end = calendar.monthrange(yearmax, m_end)[1]
     
   tmp_tmin = [ ] 
   for year in range(yearmin,yearmax+1):    ### Boucle sur les annees
       for month in range(1,13):
           df = []
           last_day = calendar.monthrange(year, month)[1] 
           tmin = station.loc[(station[&amp;quot;Annee&amp;quot;] == year) &amp;amp; (station[&amp;quot;Mois&amp;quot;] == month)].iloc[:,2:last_day+2].values
           
           if len(tmin) == 0:
               a = np.empty((calendar.monthrange(year,month)[1]))
               a[:] = np.nan
               df=pd.DataFrame(a)
           else:
               df=pd.DataFrame(tmin.T)
               
           start = date(year, month, 1)
           end =   date(year, month, last_day)
           delta=(end-start) 
           nb_days = delta.days + 1 
           rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)          
           df[&#39;datetime&#39;] = rng
           df.index = df[&#39;datetime&#39;]
           tmp_tmin.append(df)
           
   tmp_tmin = pd.concat(tmp_tmin) 
   df = pd.DataFrame({&#39;datetime&#39;: tmp_tmin[&#39;datetime&#39;], &#39;Var&#39;: tmp_tmin.iloc[:,0]}, columns = [&#39;datetime&#39;,&#39;Tmin&#39;]) 
   df.index = df[&#39;datetime&#39;]
   tmp_tmin = tmp_tmin.drop([&amp;quot;datetime&amp;quot;], axis=1)
      
   name = row[&#39;Nom de station&#39;].replace(&#39; &#39;,&#39;_&#39;)
   name = name.replace(&amp;quot;&#39;&amp;quot;,&#39;&#39;)
   names.append(name)
   mypath=&#39;./Daily_data_by_Province/&#39;+varout+&#39;/&#39;
   pathlib.Path(mypath).mkdir(parents=True, exist_ok=True)
   
   tmp_tmin.to_csv(mypath+name+&#39;_daily_&#39;+varout+&#39;_&#39;+str(yearmin)+&#39;-&#39;+str(yearmax)+&#39;.csv&#39;)
         
latlon = pd.DataFrame({&#39;Latitude&#39;: globals()[&#39;dataframe_&#39;+province][&amp;quot;lat (deg)&amp;quot;], &#39;Longitude&#39;: globals()[&#39;dataframe_&#39;+province][&amp;quot;long (deg)&amp;quot;] }, columns = [&#39;Latitude&#39;,&#39;Longitude&#39;]) 
latlon.to_csv(&#39;./Daily_data_by_Province/stations_latlon_&#39;+province+&#39;.csv&#39;)
names = pd.DataFrame(names)
names.to_csv(&#39;./Daily_data_by_Province/stations_noms_&#39;+province+&#39;.csv&#39;)

base_filename = &#39;./Daily_data_by_Province/stations_noms_&#39;+province+&#39;.txt&#39;
names[0].to_csv(base_filename, sep=&#39;\t&#39;, index = False) 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ANUSPLIN 10km climatology</title>
      <link>/post/cartopy_climatology/</link>
      <pubDate>Mon, 02 Dec 2019 17:56:14 -0800</pubDate>
      <guid>/post/cartopy_climatology/</guid>
      <description>

&lt;h3 id=&#34;anusplin-climatology-using-cartopy&#34;&gt;ANUSPLIN climatology using Cartopy&lt;/h3&gt;

&lt;p&gt;Agriculture and Agri-Food Canada have produced daily precipitation, minimum and maximum temperature across Canada (south of 60°N) for climate related application purpose using thin-plate smoothing splines, as implemented in the ANUSPLIN climate modeling software (Hutchinson et al., 2009; McKenney et al., 2011).&lt;/p&gt;

&lt;p&gt;The so-called ANUSPLIN data uses ground-based observations and generates daily gridded data from 1951 to 2017 on a Lambert conformal conic projection with 5’ arc minutes spacing (equivalent to a resolution of about 10 km). The key strength of this spatial interpolation method is its global dependence on all data, permitting robust and stable determination of spatially varying dependences on elevation. Hutchinson et al. (2009) have shown that while ANUSPLIN fall month’s absolute errors were remarkably small, those of winter months were quite large due to rather difficult observation and measurement conditions.&lt;/p&gt;

&lt;p&gt;Data are available on &lt;a href=&#34;ftp://ftp.nrcan.gc.ca/pub/outgoing/canada_daily_grids&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we will see how to use Cartopy with Netcdf in order to display a nice climatology.&lt;/p&gt;

&lt;p&gt;We will display a climatoly of ANUSPLIN from 1981 to 2010.&lt;/p&gt;

&lt;p&gt;This dataset is only availabe with ascii grid format, I&amp;rsquo;ll here show how to convert it into Netcdf using Python in an other post.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://scitools.org.uk/cartopy/docs/latest/#&#34; target=&#34;_blank&#34;&gt;Cartopy&lt;/a&gt; python library allows you to analyze, process and plot georeferenced data with the help of Matplotlib.&lt;/p&gt;

&lt;p&gt;We first import our librairies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from netCDF4 import Dataset, num2date
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
import datetime
import xarray as xr
import pandas as pd
filename=&#39;K:/DATA/ANUSPLIN_10km/Netcdf/all_domaine/YEAR/Mean_tasmoy/ANUSPLIN_10km_MEAN_YEAR_Mean_tasmoy_1950-2017.nc&#39;
nc_fid=Dataset(filename,&#39;r&#39;)
nc_fid.variables
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;OrderedDict([(&#39;lon&#39;, &amp;lt;class &#39;netCDF4._netCDF4.Variable&#39;&amp;gt;
              float32 lon(y, x)
                  units: degrees_east
                  long_name: Longitude
                  CoordinateAxisType: Lon
              unlimited dimensions: 
              current shape = (1068, 510)
              filling on, default _FillValue of 9.969209968386869e+36 used),
             (&#39;lat&#39;, &amp;lt;class &#39;netCDF4._netCDF4.Variable&#39;&amp;gt;
              float32 lat(y, x)
                  units: degrees_north
                  long_name: Latitude
                  CoordinateAxisType: Lat
              unlimited dimensions: 
              current shape = (1068, 510)
              filling on, default _FillValue of 9.969209968386869e+36 used),
             (&#39;time&#39;, &amp;lt;class &#39;netCDF4._netCDF4.Variable&#39;&amp;gt;
              float64 time(time)
                  long_name: Time
                  delta_t: 
              unlimited dimensions: 
              current shape = (68,)
              filling on, default _FillValue of 9.969209968386869e+36 used),
             (&#39;Mean_tasmoy&#39;, &amp;lt;class &#39;netCDF4._netCDF4.Variable&#39;&amp;gt;
              float32 Mean_tasmoy(time, y, x)
                  long_name: Mean_tasmoy
                  units: Celcius
                  missing_value: -999.0
                  coordinates: lon lat
              unlimited dimensions: 
              current shape = (68, 1068, 510)
              filling on, default _FillValue of 9.969209968386869e+36 used)])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data=nc_fid.variables[&#39;Mean_tasmoy&#39;][:].squeeze()
lons=nc_fid.variables[&#39;lon&#39;][:].squeeze()
lats=nc_fid.variables[&#39;lat&#39;][:].squeeze()
time = nc_fid.variables[&#39;time&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(68, 1068, 510)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data_m = data[32:62,:,:]
clim_81_2010=data_m.mean(axis=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;clim_81_2010.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1068, 510)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will add some cities to display on our map. We first need to create a dataframe with names of stations and localisations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;names=[&#39;Whitehorse&#39;,&#39;Yellowknife&#39;,&#39;Iqaluit&#39;,&#39;Victoria&#39;,&#39;Edmonton&#39;,&#39;Regina&#39;,&#39;Winnipeg&#39;,&#39;Toronto&#39;,&#39;Ottawa&#39;,&#39;Quebec&#39;,&#39;Halifax&#39;,&#39;Charlottetown&#39;,&#39;St-John s&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;latitudes=[60.721188,62.453972,63.748611,48.407326,53.631611,50.445210,
          49.895077,43.651070,45.424721,46.829853,44.651070,46.238888,47.560539]
longitudes=[-135.056839,-114.371788,-68.519722,-123.329773,-113.323975,-104.618896,
           -97.138451,-79.347015,-75.695000,-71.254028,-63.582687,-63.129166,-52.712830]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(list(zip(names, latitudes, longitudes)), 
               columns =[&#39;Names&#39;, &#39;latitudes&#39;, &#39;longitudes&#39;]) 
df
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Names&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;latitudes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;longitudes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Whitehorse&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60.7212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-135.057&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Yellowknife&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;62.454&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-114.372&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Iqaluit&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63.7486&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.5197&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Victoria&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.4073&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-123.33&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Edmonton&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.6316&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.324&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Regina&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.4452&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-104.619&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Winnipeg&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.8951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-97.1385&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Toronto&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;43.6511&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-79.347&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ottawa&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.4247&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-75.695&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Quebec&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.8299&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-71.254&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Halifax&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44.6511&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-63.5827&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Charlottetown&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.2389&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-63.1292&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;St-John s&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.5605&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.7128&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pylab as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import numpy as np
import matplotlib as mpl
from carto import scale_bar

Y=np.array([[50,136,189],[102,194,165],[171,221,164],[230,245,152],\
               [255,255,191],[254,224,139],[253,174,97],[244,109,67],[213,62,79]])/255.

colbar=mpl.colors.ListedColormap(Y)
fig=plt.figure(figsize=(28,16), frameon=True)  
ax = plt.subplot(111, projection=ccrs.LambertConformal())
ax.set_extent([-130,-55,35,80])
 #ax.coastlines(resolution=&#39;110m&#39;);
ax.add_feature(cfeature.OCEAN.with_scale(&#39;50m&#39;))      # couche ocean
ax.add_feature(cfeature.LAND.with_scale(&#39;50m&#39;))       # couche land
ax.add_feature(cfeature.LAKES.with_scale(&#39;50m&#39;))      # couche lac
   
ax.add_feature(cfeature.BORDERS.with_scale(&#39;50m&#39;))    # couche frontieres
ax.add_feature(cfeature.RIVERS.with_scale(&#39;50m&#39;))     # couche rivières 
coast = cfeature.NaturalEarthFeature(category=&#39;physical&#39;, scale=&#39;10m&#39;,     # ajout de la couche cotière 
                            facecolor=&#39;none&#39;, name=&#39;coastline&#39;)
ax.add_feature(coast, edgecolor=&#39;black&#39;)    
states_provinces = cfeature.NaturalEarthFeature(
            category=&#39;cultural&#39;,
            name=&#39;admin_1_states_provinces_lines&#39;,
            scale=&#39;10m&#39;,
            facecolor=&#39;none&#39;)
    
ax.add_feature(states_provinces, edgecolor=&#39;gray&#39;) 

ax.plot(df[&#39;longitudes&#39;], df[&#39;latitudes&#39;], &#39;ko&#39;, ms=5, transform=ccrs.Geodetic())

for lg, lt, name in zip(df[&#39;longitudes&#39;], df[&#39;latitudes&#39;], df[&#39;Names&#39;]):
    if name in [u&#39;Nazaré&#39;, &#39;Marinha Grande&#39;]:
        ax.text(lg - .05, lt + .05, 
                name, 
                va=&#39;center&#39;, 
                ha=&#39;right&#39;, transform=ccrs.Geodetic(), fontweight=&#39;bold&#39;)
    else:    
        ax.text(lg + .5, lt + .5, 
                name, 
                va=&#39;center&#39;, 
                ha=&#39;left&#39;, transform=ccrs.Geodetic(), fontweight=&#39;bold&#39;)
        
 
mm = ax.pcolormesh(lons,\
                   lats,\
                   clim_81_2010,\
                   vmin=-30,\
                   vmax=15, \
                   transform=ccrs.PlateCarree(),\
                   cmap=colbar )
ax.gridlines()

# Define gridline locations and draw the lines using cartopy&#39;s built-in gridliner:
xticks = np.arange(-150.0,-40.0,20)
yticks =np.arange(10,80,10)

# Standard 6,000 km scale bar.
scale_bar(ax, (0.85, 0.05), 500 ,plot_kwargs = dict(linestyle=&#39;dashed&#39;, color=&#39;black&#39;))

cbar = plt.colorbar(mm, orientation=&#39;horizontal&#39;, shrink=0.5, drawedges=&#39;True&#39;, ticks=np.arange(-30, 15.1, 5),extend=&#39;both&#39;)
cbar.set_label(u&#39;\n Projection = Lambert Conformal Conic \nResolution: 5 Arcs-Minutes (10 km)\nData provided by Natural Resources Canada / Created by Guillaume Dueymes&#39;, size=&#39;medium&#39;) # Affichage de la légende de la barre de couleur
cbar.ax.tick_params(labelsize=17) 
 
plt.xlabel(u&#39;\n\n\nTemperature / Température (°C)&#39;,size=&#39;x-large&#39;)
string_title=u&#39;Climate normals of mean annual temperature (°C)\n reference period 1981-2010\n&#39;
plt.title(string_title, size=&#39;xx-large&#39;)
plt.savefig(&#39;./ANUSPLIN_NLDAS_10km_YEAR_CLIM_1981-2010.png&#39;, bbox_inches=&#39;tight&#39;, pad_inches=0.1)
plt.show() 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./Plot_Climatoloy_Netcdf_10_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>/project/external-project/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Predicted Northward Expansion of the Geographic Range of the Tick Vector Amblyomma americanum in North America under Future Climate Conditions</title>
      <link>/publication/article9/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/publication/article9/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Writing technical content in Academic</title>
      <link>/post/writing-technical-content/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>/post/writing-technical-content/</guid>
      <description>&lt;p&gt;Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On this page, you&#39;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;

&lt;p&gt;Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code&gt;highlight&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;

&lt;p&gt;Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file and adding &lt;code&gt;markup: mmark&lt;/code&gt; to your page front matter.&lt;/p&gt;

&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$$...$$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\gamma_{n} = \frac{ 
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T 
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$$\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2$$&lt;/code&gt; renders as &lt;span  class=&#34;math&#34;&gt;\(\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2\)&lt;/span&gt; .&lt;/p&gt;

&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the &lt;code&gt;\\&lt;/code&gt; math linebreak:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[f(k;p_0^*) = \begin{cases} p_0^* &amp; \text{if }k=1, \\
1-p_0^* &amp; \text {if }k=0.\end{cases}\]&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;

&lt;p&gt;Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;

&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```mermaid
graph TD;
  A--&amp;gt;B;
  A--&amp;gt;C;
  B--&amp;gt;D;
  C--&amp;gt;D;
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD;
  A--&amp;gt;B;
  A--&amp;gt;C;
  B--&amp;gt;D;
  C--&amp;gt;D;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
  participant Alice
  participant Bob
  Alice-&amp;gt;John: Hello John, how are you?
  loop Healthcheck
      John-&amp;gt;John: Fight against hypochondria
  end
  Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail...
  John--&amp;gt;Alice: Great!
  John-&amp;gt;Bob: How about you?
  Bob--&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
  participant Alice
  participant Bob
  Alice-&amp;gt;John: Hello John, how are you?
  loop Healthcheck
      John-&amp;gt;John: Fight against hypochondria
  end
  Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail...
  John--&amp;gt;Alice: Great!
  John-&amp;gt;Bob: How about you?
  Bob--&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```mermaid
gantt
  dateFormat  YYYY-MM-DD
  section Section
  A task           :a1, 2014-01-01, 30d
  Another task     :after a1  , 20d
  section Another
  Task in sec      :2014-01-12  , 12d
  another task      : 24d
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
  dateFormat  YYYY-MM-DD
  section Section
  A task           :a1, 2014-01-01, 30d
  Another task     :after a1  , 20d
  section Another
  Task in sec      :2014-01-12  , 12d
  another task      : 24d
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;

&lt;p&gt;You can even write your todo lists in Academic too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked=&#34;&#34; disabled=&#34;&#34;&gt; Write math example&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked=&#34;&#34; disabled=&#34;&#34;&gt; Write diagram example&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled=&#34;&#34;&gt; Do something else&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Represent your data in tables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;asides&#34;&gt;Asides&lt;/h3&gt;

&lt;p&gt;Academic supports a Markdown extension for asides, also referred to as &lt;em&gt;notices&lt;/em&gt; or &lt;em&gt;hints&lt;/em&gt;. By prefixing a paragraph with &lt;code&gt;A&amp;gt;&lt;/code&gt;, it will render as an aside. You can enable this feature by adding &lt;code&gt;markup: mmark&lt;/code&gt; to your page front matter, or alternatively using the &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34;&gt;&lt;em&gt;Alert&lt;/em&gt; shortcode&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;A&amp;gt; A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;aside&gt;
&lt;p&gt;A Markdown aside is useful for displaying notices, hints, or definitions to your readers.&lt;/p&gt;
&lt;/aside&gt;

&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>2 List in Python</title>
      <link>/courses/tutorial_python/2-lists_in_python/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/2-lists_in_python/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;img src=&#34;./figures/pylogo.png&#34; alt=&#34;Indentation&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;p&gt;Python includes several built-in container types, but the most common ones are lists and tuples, which we would see in this tutorial.&lt;/p&gt;

&lt;p&gt;There are certain things you can do with all container types. These operations include indexing, slicing, adding, multiplying. In addition, Python has built-in functions like finding the length of a sequence, finding its largest and smallest elements&amp;hellip;&lt;/p&gt;

&lt;p&gt;Each element of a sequence is assigned by a number - its position or index. The first index is zero, the second index is one&amp;hellip;&lt;/p&gt;

&lt;p&gt;Creating a list is as simple as putting different comma-separated values between square brackets :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;list1 = [ a, b, c, d, e]&lt;/li&gt;
&lt;li&gt;list2 = [ 1, 2, 3, 4, 5]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python is an object-oriented language, lists are associated with methods: object.method()
Functions can be applied to lists.&lt;/p&gt;

&lt;h2 id=&#34;2-1-create-a-list&#34;&gt;2.1 Create a list&lt;/h2&gt;

&lt;p&gt;To create a list, we use comma-separated values between square brackets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)  # fonction to print elements in list 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use &lt;b&gt;range()&lt;/b&gt; function to generate a sequence of numbers over time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = list(range(10))
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = list(range(1981,2011,2))
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1981,
 1983,
 1985,
 1987,
 1989,
 1991,
 1993,
 1995,
 1997,
 1999,
 2001,
 2003,
 2005,
 2007,
 2009]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we work with Python object, dir() command always shows us the tasks we can do with this object: dir(my_list)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;__add__&#39;,
 &#39;__class__&#39;,
 &#39;__contains__&#39;,
 &#39;__delattr__&#39;,
 &#39;__delitem__&#39;,
 &#39;__dir__&#39;,
 &#39;__doc__&#39;,
 &#39;__eq__&#39;,
 &#39;__format__&#39;,
 &#39;__ge__&#39;,
 &#39;__getattribute__&#39;,
 &#39;__getitem__&#39;,
 &#39;__gt__&#39;,
 &#39;__hash__&#39;,
 &#39;__iadd__&#39;,
 &#39;__imul__&#39;,
 &#39;__init__&#39;,
 &#39;__init_subclass__&#39;,
 &#39;__iter__&#39;,
 &#39;__le__&#39;,
 &#39;__len__&#39;,
 &#39;__lt__&#39;,
 &#39;__mul__&#39;,
 &#39;__ne__&#39;,
 &#39;__new__&#39;,
 &#39;__reduce__&#39;,
 &#39;__reduce_ex__&#39;,
 &#39;__repr__&#39;,
 &#39;__reversed__&#39;,
 &#39;__rmul__&#39;,
 &#39;__setattr__&#39;,
 &#39;__setitem__&#39;,
 &#39;__sizeof__&#39;,
 &#39;__str__&#39;,
 &#39;__subclasshook__&#39;,
 &#39;append&#39;,
 &#39;clear&#39;,
 &#39;copy&#39;,
 &#39;count&#39;,
 &#39;extend&#39;,
 &#39;index&#39;,
 &#39;insert&#39;,
 &#39;pop&#39;,
 &#39;remove&#39;,
 &#39;reverse&#39;,
 &#39;sort&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-2-accessing-values-in-lists&#34;&gt;2.2 Accessing Values in Lists :&lt;/h2&gt;

&lt;p&gt;To access values in a list, use the square brackets for slicing along with the index or indices to obtain value available at that index.&lt;/p&gt;

&lt;p&gt;The first index is zero, the second index is one&amp;hellip; to read first element, we use index 0. Then to read last element, we use -1 index.&lt;/p&gt;

&lt;p&gt;It is also possible to modify a value with its index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
my_list[:]  # To use all elements
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[1] # to access an item from the list: here we access the second element. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[2:4] # slicing:  to access the elements between the 3rd position and the 4th

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[:4] # slicing: to access all elements up to index 4 or 4th position
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[3:] # slicing: to access all elements from index 3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[-2] # to get the 2nd value from the end, with use negative indexes, we do not start from 0 anymore.

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;hello&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[1:-4] # we start from the index 1, with slicing, we stop at the 4th index from the end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[::2] # to extract the elements with an increment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 3, 5, 7, &#39;hello&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[1::2] # to extract the elements with an increment
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 4, 6, 8, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-3-updating-lists&#34;&gt;2.3 Updating Lists&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/tutorial/datastructures.html#more-on-lists&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/tutorial/datastructures.html#more-on-lists&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;2-3-1-add-elements&#34;&gt;2.3.1 Add elements&lt;/h3&gt;

&lt;p&gt;To &lt;b&gt;add&lt;/b&gt; an element: we use &lt;b&gt;.append()&lt;/b&gt; method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1,2,3,4,5,6,7,8,&amp;quot;hello&amp;quot;,10.5]
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.append(2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-2-insert-elements&#34;&gt;2.3.2 Insert elements&lt;/h3&gt;

&lt;p&gt;To &lt;b&gt;insert&lt;/b&gt; an element to our list using index: &lt;b&gt;insert()&lt;/b&gt; method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.insert(5,&amp;quot;new&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-3-update-elements&#34;&gt;2.3.3 Update elements&lt;/h3&gt;

&lt;p&gt;To &lt;b&gt;change&lt;/b&gt; an element in our list using index&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[0]=&amp;quot;a&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;a&#39;, 2, 3, 4, 5, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To &lt;b&gt;change&lt;/b&gt; several elements in our list: slicing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[3:5]=[8,10,11,22]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;a&#39;, 2, 3, 8, 10, 11, 22, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-3-4-remove-elements&#34;&gt;2.3.4 Remove elements&lt;/h3&gt;

&lt;p&gt;To &lt;b&gt;remove&lt;/b&gt; in our list: 2 methods&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list[0:2]=[]  # remove using slicing 
print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 8, 10, 11, 22, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 8, 10, 11, 22, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del my_list[3] # to remove using keywords
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[3, 8, 10, 22, &#39;new&#39;, 6, 7, 8, &#39;hello&#39;, 10.5, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://www.programiz.com/python-programming/keyword-list&#34; target=&#34;_blank&#34;&gt;https://www.programiz.com/python-programming/keyword-list&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-4-some-useful-operations-on-lists&#34;&gt;2.4  Some useful operations on lists&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Concatenate two lists&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list1=[1,2,3,4,5]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list2=[6,7,8,9,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list3=my_list1+my_list2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Duplicate a list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list1=[1,2,3,4,5]
my_list1*3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reverse elements in list&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;.reverse()&lt;/b&gt; method is used to reverse elements in list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list1=[1,2,3,4,5]
print(my_list1)
my_list1.reverse()
print(my_list1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5]
[5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Count elements in list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;.count()&lt;/b&gt; method is used to return count of how many times obj occurs in list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list2= [&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;]
my_list2.count(&amp;quot;a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;.index()&lt;/b&gt; method returns the lowest index in list that obj appears&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list2=[&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;,&amp;quot;c&amp;quot;]
my_list2.index(&amp;quot;c&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;function &lt;b&gt;sum()&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list1=[1,2,3,4,5]
sum(my_list1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;function &lt;b&gt;.len()&lt;/b&gt; gives the total length of the list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(my_list1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.sort()&lt;/b&gt; function to sort objects of list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [90,3,8,4,1,10,25,99]
my_list.sort() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1, 3, 4, 8, 10, 25, 90, 99]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [90,3,8,4,1,10,25,99]
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[90, 3, 8, 4, 1, 10, 25, 99]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.sort()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list.reverse()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[99, 90, 25, 10, 8, 4, 3, 1]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;min()&lt;/b&gt; and &lt;b&gt;max()&lt;/b&gt; functions to return the &lt;b&gt;minimum&lt;/b&gt; and the &lt;b&gt;maximum&lt;/b&gt; from list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[99, 90, 25, 10, 8, 4, 3, 1]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(my_list)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;99&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;example applying a loop &lt;b&gt;for&lt;/b&gt; and &lt;b&gt;print()&lt;/b&gt; function to return values from a list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_month = [&amp;quot;jan&amp;quot;,&amp;quot;feb&amp;quot;,&amp;quot;mar&amp;quot;]
for month in list_month:
print(month)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jan
feb
mar&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;enumerate()&lt;/b&gt; function to return values and index&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_month = [&amp;quot;jan&amp;quot;,&amp;quot;feb&amp;quot;,&amp;quot;mar&amp;quot;]
for month in enumerate(list_month):
 print(month)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(0, &amp;lsquo;jan&amp;rsquo;)
(1, &amp;lsquo;feb&amp;rsquo;)
(2, &amp;lsquo;mar&amp;rsquo;)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.split()&lt;/b&gt; method to transform string into list&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_string = &amp;quot;January-February-March&amp;quot;
my_string.split(&amp;quot;-&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[&amp;lsquo;January&amp;rsquo;, &amp;lsquo;February&amp;rsquo;, &amp;lsquo;March&amp;rsquo;]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.join()&lt;/b&gt; method to transform list into string&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [&#39;January&#39;, &#39;February&#39;, &#39;March&#39;]
&amp;quot;:&amp;quot;.join(list1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lsquo;January:February:March&amp;rsquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-5-loop-over-lists&#34;&gt;2.5 Loop over lists&lt;/h2&gt;

&lt;p&gt;You can loop over the elements of a list like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [&#39;January&#39;, &#39;February&#39;, &#39;March&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for month in list1:
    print(month)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;January
February
March
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want access to the index of each element within the body of a loop, use the built-in enumerate function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list1 = [&#39;January&#39;, &#39;February&#39;, &#39;March&#39;]
for idx, month in enumerate(list1):
    print(&#39;#%d: %s&#39; % (idx + 1, month))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#1: January
#2: February
#3: March
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-6-list-comprehensions&#34;&gt;2.6 List comprehensions&lt;/h2&gt;

&lt;p&gt;When programming, frequently we want to transform one type of data into another. As a simple example, consider the following code that computes square numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = [0, 1, 2, 3, 4]
squares = []
for x in nums:
    squares.append(x ** 2)
print(squares)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 1, 4, 9, 16]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But, with You can make this code simpler using a list comprehension:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = [0, 1, 2, 3, 4]
squares = [x ** 2 for x in nums]
print(squares)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 1, 4, 9, 16]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List comprehensions can also contain conditions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;nums = [0, 1, 2, 3, 4]
even_squares = [x ** 2 for x in nums if x % 2 == 0]
print(even_squares)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[0, 4, 16]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-7-tuples&#34;&gt;2.7 Tuples&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1 tuple is a list, a set of stored values, but with the difference that a tuple can not be modified as in a list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the interest of a tuple is what is stored in a tuple will never be modifiable&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We write all the elements of a tuple by separating them with commas and all surrounded by parentheses:
         - my_tuple = (,,,,)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use a tuple to define some kinds of constants that are not intended to change&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1=(1,2,3,4,5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(1, 2, 3, 4, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1[0]=0 # we can&#39;t change a tuple
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-60-c1b0272b0229&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 tuple1[0]=0 # we can&#39;t change a tuple
TypeError: &#39;tuple&#39; object does not support item assignment
----------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tuple1[1]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercice-on-lists&#34;&gt;- Exercice on lists:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    1- Create a list named &amp;quot;my_notes&amp;quot; which contains the following numbers:
                 19,7,15,9,10,6,18,10,16,14,13,10,2,20,17,8,12,10,11,4

    2- Calculate the overall average of this class of 20 students and put the result in a variable called &amp;quot;general_note&amp;quot;

    3- Find the lowest score and the highest score

    4- Sort the list of notes from largest to smallest

    5- Replace note 2 by 6

    6- Count the number of notes equal to 10 in the class

    7- Count the number of notes equal to 10 in the class

    8- Find the number of students with a grade&amp;gt; 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1- Create a list named &amp;ldquo;my_notes&amp;rdquo; which contains the following numbers&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes=[19,7,15,9,10,6,18,10,16,14,13,10,2,20,17,8,12,10,11,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[19, 7, 15, 9, 10, 6, 18, 10, 16, 14, 13, 10, 2, 20, 17, 8, 12, 10, 11, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 - Calculate the overall average of this class of 20 students and put the result in a variable called &amp;ldquo;general_note&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy
moyenne_generale=numpy.mean(mes_notes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;moyenne_generale
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11.55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3- Find the lowest score and the highest score&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min(mes_notes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max(mes_notes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4- Sort the list of notes from largest to smallest
    - method 1 :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes.sort()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[2, 4, 6, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes.reverse()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 10, 10, 10, 9, 8, 7, 6, 4, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;method 2: using .sort() method&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(mes_notes.sort)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Help on built-in function sort:&lt;/p&gt;

&lt;p&gt;sort(*, key=None, reverse=False) method of builtins.list instance
    Stable sort &lt;em&gt;IN PLACE&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes.sort(reverse=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 10, 10, 10, 9, 8, 7, 6, 4, 2]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5- Replace note 2 by 6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes[19]=6
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 10, 10, 10, 9, 8, 7, 6, 4, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6-  Count the number of notes equal to 10 in the class? : method count()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes.count(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7- Count the number of notes equal to 10 in the class&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array=numpy.asarray(mes_notes)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 10, 10, 10,  9,  8,  7,
        6,  4,  6])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array[mes_notes_array&amp;gt;10] # affichage des notes supérieures à 10 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([20, 19, 18, 17, 16, 15, 14, 13, 12, 11])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array&amp;gt;10 # cette opération est un masque avec des booléens
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False, False, False, False, False, False, False, False,
       False, False])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(mes_notes_array[mes_notes_array&amp;gt;10])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mes_notes_array[mes_notes_array&amp;gt;10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([20, 19, 18, 17, 16, 15, 14, 13, 12, 11])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>3 Flow control</title>
      <link>/courses/tutorial_python/3-flow_control/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/3-flow_control/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;img src=&#34;./figures/pylogo.png&#34; alt=&#34;Indentation&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-1-flow-control-with-the-conditional-structure-if-else&#34;&gt;3.1  Flow control with the conditional structure: If, else&lt;/h2&gt;

&lt;p&gt;The flow control statements can be classified into Conditional Statements and Iteration Statements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Conditional Statements selects a particular set of statements for execution depending upon a specified condition.
The most popular conditional control statement is ‘if else’, so let’s see how it works in python.:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                                 Syntax IF:

                                 if condition:
                                 indentation ---&amp;gt; action 1
                                 elif:
                                 indentation ---&amp;gt; action 2
                                 else:
                                 indentation ---&amp;gt; action 3
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WARNING: python works in indentation
&lt;img src=&#34;/img/indentation.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Multiple tasks can be assigned in conditional structures.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_variable = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (my_variable &amp;gt; 5 ):
my_variable = my_variable + 1 
my_variable    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (my_variable &amp;gt; 5 ):
my_variable = my_variable + 1 
else:
my_variable = my_variable - 1 
my_variable   

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (my_variable &amp;gt; 5 ):
my_variable = my_variable + 1 
elif (my_variable == 5) :
my_variable = my_variable * 10 
else:
my_variable = my_variable - 1 
my_variable   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-2-flow-control-loop-for&#34;&gt;3.2 Flow control: Loop for:&lt;/h2&gt;

&lt;p&gt;A loop allows to repeat instructions according to your needs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                         Syntax FOR:
                                     items = [1,2,3]
                                     for i in items:
                                     indentation ---&amp;gt; print (i) # 1,2,3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Be careful once again to respect the indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list=[1,2,3,4,5,6,7,8,9,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for value in my_list:
    print(value*2)
    print(&amp;quot;---&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2
---
4
---
6
---
8
---
10
---
12
---
14
---
16
---
18
---
20
---
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for value in my_list:
    my_new_value=value*2
    print(&amp;quot;The multiplication of 2 * %d = %d&amp;quot; % (value,my_new_value))  # to concatenate text and a variable
                               #% d: python knows we&#39;ll display an integer
                               #% s: python knows we&#39;ll display a string
                               #% f: python knows we will display a float
                               # we give a tuple to display
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The multiplication of 2 * 1 = 2
The multiplication of 2 * 2 = 4
The multiplication of 2 * 3 = 6
The multiplication of 2 * 4 = 8
The multiplication of 2 * 5 = 10
The multiplication of 2 * 6 = 12
The multiplication of 2 * 7 = 14
The multiplication of 2 * 8 = 16
The multiplication of 2 * 9 = 18
The multiplication of 2 * 10 = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-3-flow-control-while-loop-same-as-if-structure-but-repeated&#34;&gt;3.3 Flow control:  while() loop , same as if structure but repeated&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;                        Syntaxe WHILE:
                                       run = True
                                       while run:
                                       indentation ---&amp;gt; print(&#39;running&#39;)
                                            if &amp;lt;condition&amp;gt;:
                                               run = False
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As long as the condition is met, the iteration in the loop continues.
Be careful to respect the indentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list=[1,2,3,4,5,6,7,8,9,10]
counter=0
while (counter &amp;lt; 10):
    print(&amp;quot;My counter = %d&amp;quot; % (counter))
    print(&amp;quot;My value = %d&amp;quot; % (my_list[counter]))   # in a tuple, we want the value from our list
    counter=counter+1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My counter = 0
My value = 1
My counter = 1
My value = 2
My counter = 2
My value = 3
My counter = 3
My value = 4
My counter = 4
My value = 5
My counter = 5
My value = 6
My counter = 6
My value = 7
My counter = 7
My value = 8
My counter = 8
My value = 9
My counter = 9
My value = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we can combine several conditions in a while loop
# we will for example extract only the even values
# If modulo value = 0, even number
counter=0
counter_true_result=0
while (counter &amp;lt; 10):
    if my_list[counter] % 2 == 0:
        print(&amp;quot;My counter = %d&amp;quot; % (counter))
        print(&amp;quot;My value = %d&amp;quot; % (my_list[counter]))  
        counter_true_result=counter_true_result+1
    counter=counter+1
print(counter_true_result)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;My counter = 1
My value = 2
My counter = 3
My value = 4
My counter = 5
My value = 6
My counter = 7
My value = 8
My counter = 9
My value = 10
5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-4-loop-range&#34;&gt;3.4 Loop  range&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s possible to create a loop with range() function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for my_value in range(0,10):
    print(my_value*2)
    print(&amp;quot;---&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
---
2
---
4
---
6
---
8
---
10
---
12
---
14
---
16
---
18
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-5-to-stop-a-loop&#34;&gt;3.5 To stop a loop:&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s possible to stop a loop with break command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list=[1,2,3,4,5,6,7,8,9,10]
for i in my_list:
     if i &amp;gt; 5:
             print(&amp;quot;stop: the following values are greater than 5.&amp;quot;)
             break
     print(i)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
2
3
4
5
stop: the following values are greater than 5.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# to import a library
import numpy as np
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(np)    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;b&gt;help()&lt;/b&gt; function provides help on a function of the library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Example: help(numpy.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help (np.median) # for help on a library function
                 # we can distinguish between optional and mandatory arguments
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Help on function median in module numpy:

median(a, axis=None, out=None, overwrite_input=False, keepdims=False)
    Compute the median along the specified axis.

    Returns the median of the array elements.

    Parameters
    ----------
    a : array_like
        Input array or object that can be converted to an array.
    axis : {int, sequence of int, None}, optional
        Axis or axes along which the medians are computed. The default
        is to compute the median along a flattened version of the array.
        A sequence of axes is supported since version 1.9.0.
    out : ndarray, optional
        Alternative output array in which to place the result. It must
        have the same shape and buffer length as the expected output,
        but the type (of the output) will be cast if necessary.
    overwrite_input : bool, optional
       If True, then allow use of memory of input array `a` for
       calculations. The input array will be modified by the call to
       `median`. This will save memory when you do not need to preserve
       the contents of the input array. Treat the input as undefined,
       but it will probably be fully or partially sorted. Default is
       False. If `overwrite_input` is ``True`` and `a` is not already an
       `ndarray`, an error will be raised.
    keepdims : bool, optional
        If this is set to True, the axes which are reduced are left
        in the result as dimensions with size one. With this option,
        the result will broadcast correctly against the original `arr`.

        .. versionadded:: 1.9.0

    Returns
    -------
    median : ndarray
        A new array holding the result. If the input contains integers
        or floats smaller than ``float64``, then the output data-type is
        ``np.float64``.  Otherwise, the data-type of the output is the
        same as that of the input. If `out` is specified, that array is
        returned instead.

    See Also
    --------
    mean, percentile

    Notes
    -----
    Given a vector ``V`` of length ``N``, the median of ``V`` is the
    middle value of a sorted copy of ``V``, ``V_sorted`` - i
    e., ``V_sorted[(N-1)/2]``, when ``N`` is odd, and the average of the
    two middle values of ``V_sorted`` when ``N`` is even.

    Examples
    --------
    &amp;gt;&amp;gt;&amp;gt; a = np.array([[10, 7, 4], [3, 2, 1]])
    &amp;gt;&amp;gt;&amp;gt; a
    array([[10,  7,  4],
           [ 3,  2,  1]])
    &amp;gt;&amp;gt;&amp;gt; np.median(a)
    3.5
    &amp;gt;&amp;gt;&amp;gt; np.median(a, axis=0)
    array([ 6.5,  4.5,  2.5])
    &amp;gt;&amp;gt;&amp;gt; np.median(a, axis=1)
    array([ 7.,  2.])
    &amp;gt;&amp;gt;&amp;gt; m = np.median(a, axis=0)
    &amp;gt;&amp;gt;&amp;gt; out = np.zeros_like(m)
    &amp;gt;&amp;gt;&amp;gt; np.median(a, axis=0, out=m)
    array([ 6.5,  4.5,  2.5])
    &amp;gt;&amp;gt;&amp;gt; m
    array([ 6.5,  4.5,  2.5])
    &amp;gt;&amp;gt;&amp;gt; b = a.copy()
    &amp;gt;&amp;gt;&amp;gt; np.median(b, axis=1, overwrite_input=True)
    array([ 7.,  2.])
    &amp;gt;&amp;gt;&amp;gt; assert not np.all(a==b)
    &amp;gt;&amp;gt;&amp;gt; b = a.copy()
    &amp;gt;&amp;gt;&amp;gt; np.median(b, axis=None, overwrite_input=True)
    3.5
    &amp;gt;&amp;gt;&amp;gt; assert not np.all(a==b)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise&#34;&gt;- Exercise&lt;/h2&gt;

&lt;h3 id=&#34;objective-to-manipulate-a-list-containing-the-prices-of-58-houses&#34;&gt;Objective: To manipulate a list containing the prices of 58 houses&lt;/h3&gt;

&lt;p&gt;Creation of the list &amp;ldquo;price_of_58_houses&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;price_of_58_houses=list(range(125000,700000,10000))   
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;price_of_58_houses[0:20]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[125000,
 135000,
 145000,
 155000,
 165000,
 175000,
 185000,
 195000,
 205000,
 215000,
 225000,
 235000,
 245000,
 255000,
 265000,
 275000,
 285000,
 295000,
 305000,
 315000]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(price_of_58_houses)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;58



1- How many houses have a price greater than or equal to 300000 euros?

2- How many houses have a price between 250000 and 400000 euros?

3- How many houses have a price that is not higher than 600000 euros?

4- How many houses have a price lower than 150000 euros or more than 650000 euros?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hint: Scroll through the list with a loop, use if condition statements, and a counter to count the true results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 1. 
nombre_maisons=0
for prix in price_of_58_houses:    
    if prix &amp;gt;= 300000:             
        nombre_maisons=nombre_maisons+1
print(&amp;quot;Number of house with price greater than or equal to 300000 euros : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Number of house with price greater than or equal to 300000 euros : 40
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2. 

nombre_maisons=0
for prix in price_of_58_houses:   
    if (prix &amp;gt;= 250000) and (prix &amp;lt;= 400000):  compteur
        nombre_maisons=nombre_maisons+1
print(&amp;quot;The result is : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The result is : 15
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 3.
nombre_maisons=0
for prix in price_of_58_houses:
    if not(prix &amp;gt; 600000):
        nombre_maisons=nombre_maisons+1
print(&amp;quot;The result is : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The result is : 48
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 4. 
nombre_maisons=0
for prix in price_of_58_houses:
    if (prix &amp;lt; 150000) or (prix &amp;gt; 650000):
        nombre_maisons=nombre_maisons+1
print(&amp;quot;The result is : : %d&amp;quot; % (nombre_maisons))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result is : 8&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4 Functions</title>
      <link>/courses/tutorial_python/4-functions/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/4-functions/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;img src=&#34;./figures/pylogo.png&#34; alt=&#34;Indentation&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;4-libraries-and-functions-in-python&#34;&gt;4  Libraries and functions in  Python&lt;/h1&gt;

&lt;h2 id=&#34;4-1-introduction-to-librairies&#34;&gt;4.1 Introduction to librairies&lt;/h2&gt;

&lt;p&gt;To facilitate the processing, manipulation and visualization of data, Python has many libraries.&lt;/p&gt;

&lt;p&gt;Python libraries allow you to import codes and functions that will make our analysis easier.&lt;/p&gt;

&lt;p&gt;Here are the most popular libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;numpy: mathematics or scientific calculations: &lt;a href=&#34;http://www.numpy.org/&#34; target=&#34;_blank&#34;&gt;http://www.numpy.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pandas: data manipulation: &lt;a href=&#34;http://pandas.pydata.org/&#34; target=&#34;_blank&#34;&gt;http://pandas.pydata.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;matplotlib: visualization of data: &lt;a href=&#34;https://matplotlib.org/&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;scikit-learn: machine learning: &lt;a href=&#34;https://scikit-learn.org&#34; target=&#34;_blank&#34;&gt;https://scikit-learn.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Datetime: formatting dates: https: //docs.python.org/2/library/datetime.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To import a library under Python, use the function: &lt;b&gt; import &lt;/b&gt; + library_name&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# To import a library
import numpy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every library imported under python has help.&lt;/p&gt;

&lt;p&gt;To know what a library contains, we use the function: dir ()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Example: dir(numpy)    
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(numpy)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;b&gt; help () &lt;/b&gt; function provides help with a function in the library&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    - Example: help(numpy.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(numpy.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Help on function mean in module numpy:

mean(a, axis=None, dtype=None, out=None, keepdims=&amp;lt;no value&amp;gt;)
    Compute the arithmetic mean along the specified axis.

    Returns the average of the array elements.  The average is taken over
    the flattened array by default, otherwise over the specified axis.
    `float64` intermediate and return values are used for integer inputs.

    Parameters
    ----------
    a : array_like
        Array containing numbers whose mean is desired. If `a` is not an
        array, a conversion is attempted.
    axis : None or int or tuple of ints, optional
        Axis or axes along which the means are computed. The default is to
        compute the mean of the flattened array.

        .. versionadded:: 1.7.0

        If this is a tuple of ints, a mean is performed over multiple axes,
        instead of a single axis or all the axes as before.
    dtype : data-type, optional
        Type to use in computing the mean.  For integer inputs, the default
        is `float64`; for floating point inputs, it is the same as the
        input dtype.
    out : ndarray, optional
        Alternate output array in which to place the result.  The default
        is ``None``; if provided, it must have the same shape as the
        expected output, but the type will be cast if necessary.
        See `doc.ufuncs` for details.

    keepdims : bool, optional
        If this is set to True, the axes which are reduced are left
        in the result as dimensions with size one. With this option,
        the result will broadcast correctly against the input array.

        If the default value is passed, then `keepdims` will not be
        passed through to the `mean` method of sub-classes of
        `ndarray`, however any non-default value will be.  If the
        sub-class&#39; method does not implement `keepdims` any
        exceptions will be raised.

    Returns
    -------
    m : ndarray, see dtype parameter above
        If `out=None`, returns a new array containing the mean values,
        otherwise a reference to the output array is returned.

    See Also
    --------
    average : Weighted average
    std, var, nanmean, nanstd, nanvar

    Notes
    -----
    The arithmetic mean is the sum of the elements along the axis divided
    by the number of elements.

    Note that for floating-point input, the mean is computed using the
    same precision the input has.  Depending on the input data, this can
    cause the results to be inaccurate, especially for `float32` (see
    example below).  Specifying a higher-precision accumulator using the
    `dtype` keyword can alleviate this issue.

    By default, `float16` results are computed using `float32` intermediates
    for extra precision.

    Examples
    --------
    &amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2], [3, 4]])
    &amp;gt;&amp;gt;&amp;gt; np.mean(a)
    2.5
    &amp;gt;&amp;gt;&amp;gt; np.mean(a, axis=0)
    array([ 2.,  3.])
    &amp;gt;&amp;gt;&amp;gt; np.mean(a, axis=1)
    array([ 1.5,  3.5])

    In single precision, `mean` can be inaccurate:

    &amp;gt;&amp;gt;&amp;gt; a = np.zeros((2, 512*512), dtype=np.float32)
    &amp;gt;&amp;gt;&amp;gt; a[0, :] = 1.0
    &amp;gt;&amp;gt;&amp;gt; a[1, :] = 0.1
    &amp;gt;&amp;gt;&amp;gt; np.mean(a)
    0.54999924

    Computing the mean in float64 is more accurate:

    &amp;gt;&amp;gt;&amp;gt; np.mean(a, dtype=np.float64)
    0.55000000074505806
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;list_1=[1,2,3,4,5,6,7,8,9,10]
list_1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numpy.mean(list_1)  # name of library + name of function 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;numpy.max(list_1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-2-built-in-function&#34;&gt;4.2  Built-in function&lt;/h2&gt;

&lt;p&gt;Python gives you many built-in functions like print(), etc&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a list: &lt;a href=&#34;https://docs.python.org/3/library/functions.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/3/library/functions.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;some-examples&#34;&gt;Some examples:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;abs(-1)  # Return the absolute value of a number 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len([1,2,3]) # Return the length (the number of items) of an object. 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;max([1,3,2,6,99,1])    #Return max value from a list
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;99
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;round(1.2)  # Return number rounded to ndigits precision 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-3-create-own-functions&#34;&gt;4.3  Create own functions.&lt;/h2&gt;

&lt;p&gt;These functions are called user-defined functions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a function makes our code more fluid and readable:&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Syntax: to write a function, we start with the def() keyword&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;           def sum (a, b): # we define the parameters
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;indentation &amp;mdash;&amp;gt; return a + b # return keyword to return result variable&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It does not specify the type of return, it is dynamically resolved at the time of execution of the program.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Call of the function: result = sum (12,4) # result = 16&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python also supports keyword arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                def sum (a, b): # we define the parameters
                    return a + b # return keyword to return result variable
                result = sum (12, b = 4)
            -----------------------------
                def sum (a, b = 4): # we define the parameters
                      return a + b # return keyword to return result variable
                result = sum (12)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sign(x):
    if x &amp;gt; 0:
        return &#39;positive&#39;
    elif x &amp;lt; 0:
        return &#39;negative&#39;
    else:
        return &#39;zero&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list_to_test = [0,2,-8,10,1,-6]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for element in my_list_to_test:
    print(sign(element))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;zero
positive
negative
positive
positive
negative
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will often define functions to take optional keyword arguments, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def hello(name, loud=False):
    if loud:
        print(&#39;HELLO, %s&#39; % name.upper())
    else:
        print(&#39;Hello, %s!&#39; % name)

hello(&#39;Bob&#39;)
hello(&#39;Fred&#39;, loud=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Hello, Bob!
HELLO, FRED
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-4-functions-with-args&#34;&gt;4.4  Functions with *args&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Special syntax in python that allows to manage a variable number of parameters when calling a function&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s the * that counts&lt;/li&gt;
&lt;li&gt;args is a convention&lt;/li&gt;
&lt;li&gt;* args is a list of parameters containing the parameters of a function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntax * args:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def print_ingredients (* args):
            for ingredients in args:
                print (ingredient)

        print_ingredients ( &#39;Tomatoes&#39;)
        print_ingredients ( &#39;Tomatoes&#39; Banana)
        print_ingredients ( &#39;Tomatoes&#39; Banana, apple)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def sum(*args):
    total = 0 
    for number in args: 
        total += number 
    print(total)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sum(2,3)
sum(2,3,10,90,23)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;5
128
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-5-functions-with-kwargs&#34;&gt;4.5 Functions with **kwargs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Like * args, but for keyword arguments&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s the * that counts&lt;/li&gt;
&lt;li&gt;** kwargs is a python dictionary containing the keys / values ​​of the parameters of a function&lt;/li&gt;
&lt;li&gt;it must always be present last in the list of parameters of a function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Syntax ** kwargs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        def print_languages ​​(** args):
            for language, definition in kwargs.items ():
                print (&#39;{} is {}&#39;. format (language, definition))

        print_languages ​​(Python = &#39;awesome&#39;)
        print_languages ​​(Python = &#39;awesome&#39;, Java = &#39;verbose&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def capitals(**kwargs):
    for country, capital in kwargs.items():
        print(&amp;quot;The capital of {} in {}&amp;quot;.format(country, capital))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;capitals(France = &#39;Paris&#39;, Germany=&#39;Berlin&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;The capital of France in Paris
The capital of Germany in Berlin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def capitals(title, ending=&#39;&#39;,  **kwargs):
    print(title)
    for country, capital in kwargs.items():
        print(&amp;quot;The capital of {} in {}&amp;quot;.format(country, capital))
    if ending:
        print(ending)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;capitals(&amp;quot;List of countries&amp;quot;,
    France = &#39;Paris&#39;, Germany=&#39;Berlin&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;List of countries
The capital of France in Paris
The capital of Germany in Berlin
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;keywords = {&#39;france&#39;: &#39;Paris&#39;, &#39;Germany&#39; : &#39;Allemage&#39;}
capitals(&amp;quot;List of countries 2 &amp;quot;, **keywords)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;List of countries 2 
The capital of france in Paris
The capital of Germany in Allemage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4-6-import-own-functions&#34;&gt;4.6 Import own functions&lt;/h2&gt;

&lt;p&gt;Modules refer to a file containing Python statements and definitions.&lt;/p&gt;

&lt;p&gt;A file containing Python code, for e.g.: example.py, is called a module and its module name would be example.&lt;/p&gt;

&lt;p&gt;We use modules to break down large programs into small manageable and organized files. Furthermore, modules provide reusability of code.&lt;/p&gt;

&lt;p&gt;We can define our most used functions in a module and import it, instead of copying their definitions into different programs.&lt;/p&gt;

&lt;p&gt;Here, we have defined different funcitons inside a module named my_functions.&lt;/p&gt;

&lt;p&gt;We use the import keyword to import our module and then our functions. To import our previously defined module example we type the following in the Python prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import my_functions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the module name we can access the function using the dot . operator. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_functions.substraction(4,6)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;-2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>5 Dictionaries</title>
      <link>/courses/tutorial_python/5-dictionaries/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/5-dictionaries/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;
&lt;img src=&#34;./figures/pylogo.png&#34; alt=&#34;Indentation&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The dictionary stores (key, value) pairs&lt;/li&gt;
&lt;li&gt;They are unordered data structures&lt;/li&gt;
&lt;li&gt;Principle: we can link a key to a value&lt;/li&gt;
&lt;li&gt;The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.&lt;/li&gt;
&lt;li&gt;Keys are unique within a dictionary while values may not be.&lt;/li&gt;
&lt;li&gt;Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces.&lt;/li&gt;
&lt;li&gt;An empty dictionary without any items is written with just two curly braces, like this: {}.&lt;/li&gt;
&lt;li&gt;Dictionary values have no restrictions. They can be any arbitrary Python object, either standard objects or user-defined objects. However, same is not true for the keys.&lt;/li&gt;
&lt;li&gt;Keys must be immutable. Which means you can use strings, numbers or tuples as dictionary keys but something like [&amp;lsquo;key&amp;rsquo;] is not allowed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find all you need to know about dictionaries in the documentation:
&lt;a href=&#34;https://docs.python.org/2/library/stdtypes.html#dict&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/library/stdtypes.html#dict&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-1-create-a-dictionary&#34;&gt;5.1 Create a dictionary:&lt;/h2&gt;

&lt;p&gt;In a dictionary, each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces like this: {}.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# exemple : students&#39; note dictionary
my_dictionary = {
    &amp;quot;Marie&amp;quot; : 15,
    &amp;quot;Thomas&amp;quot; : 12,
    &amp;quot;Julien&amp;quot; : &amp;quot;absent&amp;quot;,
    &amp;quot;Elise&amp;quot; : 9,
    &amp;quot;Samuel&amp;quot; : 17
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_dictionary  # We have the key : the value 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Marie&#39;: 15, &#39;Thomas&#39;: 12, &#39;Julien&#39;: &#39;absent&#39;, &#39;Elise&#39;: 9, &#39;Samuel&#39;: 17}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-2-update-a-dictionary&#34;&gt;5.2 Update a dictionary:&lt;/h2&gt;

&lt;p&gt;You can update a dictionary by adding a new entry or a key-value pair, modifying an existing entry, or deleting an existing entry as shown below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To &lt;b&gt;add&lt;/b&gt; key-value pair&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Adding a key-value pair in a dictionary
my_dictionary[&amp;quot;Julie&amp;quot;]=9
print(my_dictionary)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;Marie&amp;rsquo;: 15, &amp;lsquo;Thomas&amp;rsquo;: 12, &amp;lsquo;Julien&amp;rsquo;: &amp;lsquo;absent&amp;rsquo;, &amp;lsquo;Elise&amp;rsquo;: 9, &amp;lsquo;Samuel&amp;rsquo;: 17, &amp;lsquo;Julie&amp;rsquo;: 9}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To &lt;b&gt;change&lt;/b&gt; a value using existing key&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_dictionary[&amp;quot;Julien&amp;quot;]=13
print(my_dictionary)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;Marie&amp;rsquo;: 15, &amp;lsquo;Thomas&amp;rsquo;: 12, &amp;lsquo;Julien&amp;rsquo;: 13, &amp;lsquo;Elise&amp;rsquo;: 9, &amp;lsquo;Samuel&amp;rsquo;: 17, &amp;lsquo;Julie&amp;rsquo;: 9}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More than one entry per key not allowed. Which means no duplicate key is allowed. When duplicate keys encountered during assignment, the last assignment wins.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dict = {&#39;Name&#39;: &#39;Zara&#39;, &#39;Age&#39;: 7, &#39;Name&#39;: &#39;Manni&#39;}
dict
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Name&#39;: &#39;Manni&#39;, &#39;Age&#39;: 7}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To &lt;b&gt;delete&lt;/b&gt; a value using a key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can either remove individual dictionary elements or clear the entire contents of a dictionary. You can also delete entire dictionary in a single operation.&lt;/p&gt;

&lt;p&gt;To explicitly remove an entire dictionary, just use the del statement. Following is a simple example −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del my_dictionary[&amp;quot;Julie&amp;quot;] # remove entry with key &#39;Name&#39;
my_dictionary.clear()     # remove all entries in my_dictionary
del my_dictionary       # delete entire dictionary
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(my_dictionary)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&amp;lt;ipython-input-7-04bcd56b6daf&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 print(my_dictionary)
NameError: name &#39;my_dictionary&#39; is not defined
---------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-3-access-a-dictionary&#34;&gt;5.3 Access a dictionary:&lt;/h2&gt;

&lt;p&gt;To access dictionary elements, you can use the familiar square brackets along with the key to obtain its value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_dictionary = {
    &amp;quot;Marie&amp;quot; : 15,
    &amp;quot;Thomas&amp;quot; : 12,
    &amp;quot;Julien&amp;quot; : &amp;quot;absent&amp;quot;,
    &amp;quot;Elise&amp;quot; : 9,
    &amp;quot;Samuel&amp;quot; : 17
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_dictionary[&amp;quot;Samuel&amp;quot;]   
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We can access ditionary elements using &lt;b&gt;FOR&lt;/b&gt; loop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;by value valeur&lt;/li&gt;
&lt;li&gt;by key&lt;/li&gt;

&lt;li&gt;&lt;p&gt;by key-value pair&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# .keys() method returns list of dictionary dict&#39;s keys:
my_dictionary.keys()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;dict_keys([&amp;lsquo;Marie&amp;rsquo;, &amp;lsquo;Thomas&amp;rsquo;, &amp;lsquo;Julien&amp;rsquo;, &amp;lsquo;Elise&amp;rsquo;, &amp;lsquo;Samuel&amp;rsquo;])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# .values() method returns list of dictionary dict&#39;s values
my_dictionary.values()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_values([15, 12, &amp;lsquo;absent&amp;rsquo;, 9, 17])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example using for loop and keys dictionary
for key in my_dictionary.keys():
print(key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Marie
Thomas
Julien
Elise
Samuel&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for value in my_dictionary.values():
print(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15
12
absent
9
17&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# .items() method returns a list of dict&#39;s (key, value) tuple pairs
my_dictionary.items()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_items([(&amp;lsquo;Marie&amp;rsquo;, 15), (&amp;lsquo;Thomas&amp;rsquo;, 12), (&amp;lsquo;Julien&amp;rsquo;, &amp;lsquo;absent&amp;rsquo;), (&amp;lsquo;Elise&amp;rsquo;, 9), (&amp;lsquo;Samuel&amp;rsquo;, 17)])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example using for loop and key-value pairs in dictionary
for key,value in my_dictionary.items(): # la boucle for obtient un tuple à chaque itération
if value == &#39;absent&#39;:
    print(&#39;Absent&#39;)
else:
    print(&#39;The average of %s is %s /20&#39; % (key, value))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The average of Marie is 15 /20
The average of Thomas is 12 /20
Absent
The average of Elise is 9 /20
The average of Samuel is 17 /20&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;exercise-on-dictionaries&#34;&gt;Exercise on dictionaries&lt;/h3&gt;

&lt;h3 id=&#34;goal-to-manipulate-a-dictionary-containing-the-notes-of-15-students&#34;&gt;Goal: To manipulate a dictionary containing the notes of 15 students.&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1- Create a dictionary named notes_levels containing the following notes:
Mary: 15; Samuel: 17; Gaston: 12; Fred: 10; Mae: 5; Julie: 15; Zoe: 7; Claire: 20; Chloe: 8; Julian: 14, Gael: 9, Samia: 15, Omar: 11, Gabriel: 16, Manon: 2

2- What is the average of the class?

3- Display the total number of students in the class.

4- How many students have a grade strictly above average?

5- What is the name of the best student in the class?

6- How many students have a first name with strictly less than 4 letters?

7- Show the first name of the pupils who have an even note (multiple of 2).! 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;correction&#34;&gt;Correction&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notes_levels ={
&amp;quot;Marie&amp;quot; : 15,
&amp;quot;Samuel&amp;quot; : 17,
&amp;quot;Gaston&amp;quot; : 12,
&amp;quot;Fred&amp;quot; : 10,
&amp;quot;Mae&amp;quot; : 5,
&amp;quot;Julie&amp;quot; : 15,
&amp;quot;Zoe&amp;quot; : 7,
&amp;quot;Claire&amp;quot; : 20,
&amp;quot;Chloe&amp;quot; : 8,
&amp;quot;Julien&amp;quot; : 14,
&amp;quot;Gaël&amp;quot; : 9,
&amp;quot;Samia&amp;quot; : 15,
&amp;quot;Omar&amp;quot; : 11,
&amp;quot;Gabriel&amp;quot; : 16,
&amp;quot;Manon&amp;quot; : 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;notes_eleves.values()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dict_values([15, 17, 12, 10, 5, 15, 7, 20, 8, 14, 9, 15, 11, 16, 2])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
import numpy  
average_note =numpy.mean(list(notes_eleves.values()))  

``
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;average_note&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    11.733333333333333



- 3: 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
nombre_eleves=len(notes_eleves)
print(&amp;ldquo;Le nombre d&amp;rsquo;élèves dans la classe est de %d&amp;rdquo; % (nombre_eleves))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Le nombre d&#39;élèves dans la classe est de 15
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
len(notes_eleves.keys())&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    15

- 4: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
nombre_eleves_avec_note_sup_moyenne=0
for valeur in notes_eleves.values():
    if valeur &amp;gt; moyenne_generale:&lt;br /&gt;
        nombre_eleves_avec_note_sup_moyenne=nombre_eleves_avec_note_sup_moyenne+1
print(&amp;ldquo;Le nombre d&amp;rsquo;élèves avec une note supérieure à %.2f est de %d élèves&amp;rdquo; % (moyenne_generale, nombre_eleves_avec_note_sup_moyenne))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    Le nombre d&#39;élèves avec une note supérieure à 11.73 est de 8 élèves
    

- 5:  


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python&lt;/p&gt;

&lt;h3 id=&#34;on-va-d-abord-déterminer-la-meilleure-note-utilisation-de-la-fonction-max&#34;&gt;On va d&amp;rsquo;abord déterminer  la meilleure note: utilisation de la fonction max()&lt;/h3&gt;

&lt;p&gt;meilleure_note=max(notes_eleves.values())&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;meilleure_note
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;20
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On va parcourir notre dictionnaire et trouver la clef associée à notre valeur
# Pour cela on va travailler sur les tuples avec la méthode item()
for prenom,note in notes_eleves.items():
    if note == meilleure_note:
        print(prenom)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Claire
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;6:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On va parcourir les clefs de notre dictionnaire et mettre une condition sur la longueur de chaque clef

nombre_eleves=0
for prenom in notes_eleves.keys():
if len(prenom) &amp;lt; 4:
    nombre_eleves=nombre_eleves+1
print(nombre_eleves)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;7:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# On va parcourir les tuples du dictionnaire et mettre une condition sur les valeurs 
for prenom,note in notes_eleves.items():
if note % 2 == 0:
    print(prenom, note)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gaston 12
Fred 10
Claire 20
Chloe 8
Julien 14
Gabriel 16
Manon 2&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>6 Numpy library</title>
      <link>/courses/tutorial_python/6-numpy_library/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/6-numpy_library/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/numpy.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Numpy is the core library for scientific computing in Python&lt;/li&gt;
&lt;li&gt;A new data container will be used: the ndarray (N-dimensional array). There are vectors (one-dimensional arrays), multidimensional arrays&lt;/li&gt;
&lt;li&gt;It provides a high-performance multidimensional array object, and tools for working with these arrays
We&amp;rsquo;ll see how to initialize Numpy arrays in several ways, access values in arrays, perform math and matrix operations, and use arrays for both masking and comparisons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/&#34; target=&#34;_blank&#34;&gt;https://docs.scipy.org/doc/numpy/reference/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-1-create-a-numpy-array-or-ndarray&#34;&gt;6.1- Create a Numpy array or ndarray&lt;/h2&gt;

&lt;p&gt;We first need to import the numpy package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We will import Numpy library and create alias. 
# Codes with aliases are easier to write and read. 
import numpy as np
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the rank of the array; the shape of an array is a tuple of integers giving the size of the array along each dimension.&lt;/p&gt;

&lt;p&gt;Unlike a list, you can not create empty Numpy tables. You will find below several ways to initialize a Numpy table according to your needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using &lt;b&gt;array()&lt;/b&gt; function to create Numpy array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table1 = np.array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])
table1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
       18, 19, 20])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creation of a two-dimensional array with rows and columns; we create a list of lists. Each list is a row of the table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#  2 rows and 3 columns
table2 = np.array([[1,2,3], [4,5,6]])
table2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#  3 rows and 3 columns
table3 = np.array([[1,2,3], [4,5,6], [7,8,9]])
table3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using &lt;b&gt;range()&lt;/b&gt; function to create Numpy array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table4 = np.array(range(10)) # table with values from 0 to 9
table4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;zeros()&lt;/b&gt; function to create Numpy array with &amp;lsquo;0&amp;rsquo; value :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table5 = np.zeros((4,3)) # table with 4 rows and 3 columns
table5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;ones()&lt;/b&gt; function to create Numpy array with ones:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table6 = np.ones((4,3)) # table with 4 rows and 3 columns
table6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;identity()&lt;/b&gt; function to create Numpy array as matrix identity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table7 = np.identity(4) # 4 dimensions
table7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Converting list to ndarray with &lt;b&gt;array()&lt;/b&gt; function&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [0,1,2,3,4,5,6]
my_list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[0, 1, 2, 3, 4, 5, 6]&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table8 = np.array(my_list)
table8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([0, 1, 2, 3, 4, 5, 6])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;random()&lt;/b&gt; function to create ndarray with random values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table9 = np.random.randint(100,size=(4,3))  #  4*3  ndarray with random values between  0 and 100 
table9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[78, 47, 23],
       [79, 17,  5],
       [61, 41, 71],
       [12, 41, 27]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Using &lt;b&gt;full()&lt;/b&gt;  to create a constant array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table10 = np.full((2,2), 7) # Create a constant array
table10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[7, 7],
       [7, 7]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-2-access-data-in-a-numpy-or-ndarray-array&#34;&gt;6.2 Access data in a Numpy or ndarray array&lt;/h2&gt;

&lt;p&gt;We can access an individual element or a slice of values. Similar to lists, the first element is indexed to 0. For example, array1 [0,0] indicates that we are accessing the first row and the first column. The first number of the tuple [0,0] indicates the index of the line and the second number indicates the index of the column:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table = np.array([[1,2,3], [4,5,6], [7,8,9]])
my_table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here are some examples to access values in a numpy array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[1,2]     # We want the element located at row with index 1 and column with index 2
              #  ndarray(row,column) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[1,-1]    # We want the element at row index 1 and last column
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[0,1]     # We want the element located at row with index 0 and column with index 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[1,0]     # We want the element located at row with index 1 and column with index 0                     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Here are some examples to access data using &lt;b&gt;Slicing&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[:,0]    # We want all rows with column index 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([1, 4, 7])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[0,:]    # We want all columns with row index 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([1, 2, 3])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[:,0:3:2] # We want all rows and index columns from 0 to 3 with steps of 2.
              # So all rows and columns 1 and 2.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1, 3],
       [4, 6],
       [7, 9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[:,-1]  #We want all rows at last column
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([3, 6, 9])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[:,1:-1] # We want all rows with columns between index 1 and last index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[2],
       [5],
       [8]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table[2,1:-1] # We want values at row with index 2 and rows between index 1 and last index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([8])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-3-mathematical-and-matrix-calculations-on-a-numpy-array&#34;&gt;6.3 Mathematical and matrix calculations on a Numpy array:&lt;/h2&gt;

&lt;p&gt;Numpy tables are very easy to manipulate: concatenate, add, multiply, transpose with a single line of code.
Below you will find some examples of various arithmetic and multiplicative operations with Numpy tables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 = np.arange(9).reshape(3,3)
array1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2 = np.random.randint(50, size=(3,3))
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[47, 20, 49],
       [40, 15,  7],
       [ 4, 35, 14]])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Basic arithmetic operations: addition, subtraction, multiplication, division
Here a list of mathematical functions provided by numpy in: &lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/routines.math.html&#34; target=&#34;_blank&#34;&gt;https://docs.scipy.org/doc/numpy/reference/routines.math.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 + 10 # add a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[10, 11, 12],
       [13, 14, 15],
       [16, 17, 18]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 - 10 # substract value to each element 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[-10,  -9,  -8],
       [ -7,  -6,  -5],
       [ -4,  -3,  -2]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 * 100 # multiply value to each element 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[  0, 100, 200],
       [300, 400, 500],
       [600, 700, 800]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1[:,0] * 10 # we multiply by 10 all elements at column with index 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([ 0, 30, 60])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 / 2 # we divide a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[0. , 0.5, 1. ],
       [1.5, 2. , 2.5],
       [3. , 3.5, 4. ]])&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;some Numpy functions and methods applicable on Numpy tables:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.all.html#numpy.all&#34; title=&#34;numpy.all&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;all&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.any.html#numpy.any&#34; title=&#34;numpy.any&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;any&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis&#34; title=&#34;numpy.apply_along_axis&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;apply_along_axis&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmax.html#numpy.argmax&#34; title=&#34;numpy.argmax&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argmax&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argmin.html#numpy.argmin&#34; title=&#34;numpy.argmin&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argmin&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.argsort.html#numpy.argsort&#34; title=&#34;numpy.argsort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;argsort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.average.html#numpy.average&#34; title=&#34;numpy.average&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;average&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.bincount.html#numpy.bincount&#34; title=&#34;numpy.bincount&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;bincount&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ceil.html#numpy.ceil&#34; title=&#34;numpy.ceil&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ceil&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.clip.html#numpy.clip&#34; title=&#34;numpy.clip&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;clip&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.conj.html#numpy.conj&#34; title=&#34;numpy.conj&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;conj&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.corrcoef.html#numpy.corrcoef&#34; title=&#34;numpy.corrcoef&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;corrcoef&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cov.html#numpy.cov&#34; title=&#34;numpy.cov&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cov&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cross.html#numpy.cross&#34; title=&#34;numpy.cross&#34;&gt;
&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cross&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cumprod.html#numpy.cumprod&#34; title=&#34;numpy.cumprod&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cumprod&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.cumsum.html#numpy.cumsum&#34; title=&#34;numpy.cumsum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;cumsum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.diff.html#numpy.diff&#34; title=&#34;numpy.diff&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;diff&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.dot.html#numpy.dot&#34; title=&#34;numpy.dot&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;dot&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.floor.html#numpy.floor&#34; title=&#34;numpy.floor&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;floor&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.inner.html#numpy.inner&#34; title=&#34;numpy.inner&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;inner&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.lexsort.html#numpy.lexsort&#34; title=&#34;numpy.lexsort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;lexsort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#max&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;max&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.maximum.html#numpy.maximum&#34; title=&#34;numpy.maximum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;maximum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.mean.html#numpy.mean&#34; title=&#34;numpy.mean&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;mean&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.median.html#numpy.median&#34; title=&#34;numpy.median&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;median&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#min&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;min&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.minimum.html#numpy.minimum&#34; title=&#34;numpy.minimum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;minimum&lt;/span&gt;
&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.nonzero.html#numpy.nonzero&#34; title=&#34;numpy.nonzero&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;nonzero&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.outer.html#numpy.outer&#34; title=&#34;numpy.outer&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;outer&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/re.html#module-re&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;re&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/dev/library/functions.html#round&#34; title=&#34;(in Python v3.7)&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;round&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.sort.html#numpy.sort&#34; title=&#34;numpy.sort&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;sort&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.std.html#numpy.std&#34; title=&#34;numpy.std&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;std&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.sum.html#numpy.sum&#34; title=&#34;numpy.sum&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;sum&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.trace.html#numpy.trace&#34; title=&#34;numpy.trace&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;trace&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.transpose.html#numpy.transpose&#34; title=&#34;numpy.transpose&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;transpose&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.var.html#numpy.var&#34; title=&#34;numpy.var&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;var&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vdot.html#numpy.vdot&#34; title=&#34;numpy.vdot&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vdot&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vectorize.html#numpy.vectorize&#34; title=&#34;numpy.vectorize&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vectorize&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.where.html#numpy.where&#34; title=&#34;numpy.where&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;where&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.add(array1,10) # add a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[10, 11, 12],
       [13, 14, 15],
       [16, 17, 18]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.subtract(array1,10) # substract a value to each element 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[-10,  -9,  -8],
       [ -7,  -6,  -5],
       [ -4,  -3,  -2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.multiply(array1,100) # multiply a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  0, 100, 200],
       [300, 400, 500],
       [600, 700, 800]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.divide(array1, 2) # divide a value to each element
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[0. , 0.5, 1. ],
       [1.5, 2. , 2.5],
       [3. , 3.5, 4. ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1) # computing the Numpy table average using the mean() function
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.mean()  #  computing the Numpy table average using the mean() method
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.min()  #  computing the Numpy table mimimum using the min() method
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1.max()  # computing the Numpy table maximum using the max() method
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1, axis=0)  # we apply mean() function only over columns 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([3., 4., 5.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.mean(array1, axis=1) # we apply mean() function only over rows 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1., 4., 7.])
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Operations between several tables&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(array1 +1) * array2     # multiplication of 2 tables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 47,  40, 147],
       [160,  75,  42],
       [ 28, 280, 126]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1 + array2 # sum of 2 tables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[47, 21, 51],
       [43, 19, 12],
       [10, 42, 22]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.dot(array1, array2) # dot product of 2 tables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 48,  85,  35],
       [321, 295, 245],
       [594, 505, 455]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;6-4-update-numpy-array&#34;&gt;6.4 Update Numpy array:&lt;/h2&gt;

&lt;p&gt;Other interesting features include concatenation, splitting, transposition (changing elements from one row to another and vice versa) and obtaining elements diagonally.&lt;/p&gt;

&lt;h3 id=&#34;a-to-manipulate-modify-the-dimensions-of-a-numpy-array&#34;&gt;a) - To manipulate / modify the dimensions of a Numpy array:&lt;/h3&gt;

&lt;p&gt;The dimension of a table is given by the number of elements following each axis. We have specific methods and attributes specific to ndarray ():&lt;/p&gt;

&lt;table border=&#34;1&#34; class=&#34;docutils&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;27%&#34;&gt;
&lt;col width=&#34;57%&#34;&gt;
&lt;/colgroup&gt;
&lt;tbody valign=&#34;top&#34;&gt;

&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;ndim&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tool to know Numpy array dimension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;shape&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tool to know Numpy array shape &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;dtype&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tool to know Numpy array type &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;size&lt;/span&gt;&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Tool to know Numpy array size&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.floor(10*np.random.random((3,4)))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1., 5., 5., 0.],
       [5., 5., 4., 4.],
       [6., 2., 5., 2.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = np.floor(10*np.random.random((3,4)))
print(a, a.shape, a.ndim)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[3. 5. 5. 6.]
 [0. 7. 1. 6.]
 [4. 8. 2. 5.]] (3, 4) 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on our programming needs, we can change the size of a table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.ravel() # ravel() function to write over table on 1 dimension (flattened)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([3., 5., 5., 6., 0., 7., 1., 6., 4., 8., 2., 5.])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.reshape(6,2)  # reshape() function to change the dimension of our array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[3., 5.],
       [5., 6.],
       [0., 7.],
       [1., 6.],
       [4., 8.],
       [2., 5.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.T  #T method to calculate the transpose of our array.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[3., 0., 4.],
       [5., 7., 8.],
       [5., 1., 2.],
       [6., 6., 5.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(a.T.shape, a.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(4, 3) (3, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reshape function returns its argument with a modified form, while the ndarray.resize method modifies the array itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.resize((2,6))
a
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[3., 5., 5., 6., 0., 7.],
       [1., 6., 4., 8., 2., 5.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If a dimension is set to -1 in a resizing operation, the other dimensions are automatically calculated:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a.reshape(4,-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[3., 5., 5.],
       [6., 0., 7.],
       [1., 6., 4.],
       [8., 2., 5.]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;b-working-with-a-subset-of-a-numpy-table&#34;&gt;b) - Working with a subset of a Numpy table:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table = np.array([[1,2,3], [4,5,6], [7,8,9]])
my_table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will select a subset of our ndarray with selecting the first row.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;subset = my_table[0]
subset
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to change the first element of our subset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;subset[0] = 100
subset
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([100,   2,   3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But by modifying our sub-table, we realize that we have modified our initial table.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[100,   2,   3],
       [  4,   5,   6],
       [  7,   8,   9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A modification of the subset causes a modification of the initial table.
Our subset array is a view of our initial table. Reason: saving memory when working with large volumes of data.&lt;/p&gt;

&lt;p&gt;If you really want to work with a subset without modifying the original array, you must make a copy with the &lt;b&gt; copy () &amp;lt;/ b&amp;gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table = np.array([[1,2,3], [4,5,6], [7,8,9]])
subset = my_table[0].copy()
subset[0]=101
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;subset
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([101,   2,   3])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;### c)- To concatenate Numpy array:&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.vstack.html#numpy.vstack&#34; title=&#34;numpy.vstack&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;vstack&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.column_stack.html#numpy.column_stack&#34; title=&#34;numpy.column_stack&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;column_stack&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, &lt;a class=&#34;reference internal&#34; href=&#34;https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.concatenate.html#numpy.concatenate&#34; title=&#34;numpy.concatenate&#34;&gt;&lt;code class=&#34;xref py py-obj docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;concatenate&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;concatenate()&lt;/b&gt; function to join a sequence of arrays along an existing axis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concatenate function can take two or more arrays of the same shape and by default it concatenates row-wise i.e. axis=0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1=np.array([[1,2,3],[4,5,6],[7,8,9]])
array1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2=np.array([[2,5,6],[9,10,11],[5,6,9]])
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 2,  5,  6],
       [ 9, 10, 11],
       [ 5,  6,  9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.concatenate([array1,array2], axis=0)   # to join a sequence of arrays along rows  (axis = 0) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [ 2,  5,  6],
       [ 9, 10, 11],
       [ 5,  6,  9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.concatenate([array1,array2], axis=1)    # to join a sequence of arrays along columns  (axis = 1) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ 1,  2,  3,  2,  5,  6],
       [ 4,  5,  6,  9, 10, 11],
       [ 7,  8,  9,  5,  6,  9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the concatenate function, NumPy also offers two convenient functions hstack and vstack to stack/combine arrays horizontally or vertically.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;vstack()&lt;/b&gt; function stacks arrays in sequence vertically i.e. row wise. And the result is the same as using concatenate with axis=0.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;hstack()&lt;/b&gt; function stacks arrays horizontally i.e. column wise. And the result is the same as using concatenate with axis=1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array3=np.array([10,20,30]) # 1D Numpy array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([10, 20, 30])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array4=np.array([[1,2,3],[4,5,6],[7,8,9]]) # bi-dimentionnal Numpy array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.vstack([array4,array3])    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 20, 30]])&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array5=np.array([[10],[20],[30]]) 
array5.shape
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(3, 1)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.hstack([array4,array5]) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;array([[ 1,  2,  3, 10],
       [ 4,  5,  6, 20],
       [ 7,  8,  9, 30]])&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;### d)- To split Numpy arrays:&lt;/p&gt;

&lt;p&gt;This is the opposite of concatenation.
We have the split (), hsplit () and vsplit () functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array=np.array([15,16,17,12,49,52,12,14,36]) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(array) # array size
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.split(array,3) # we split the array into 3 arrays
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[array([15, 16, 17]), array([12, 49, 52]), array([12, 14, 36])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can split our numpy array using breaking point with index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.split(array,[2,6]) # we want to cut our table into 3 tables, the numbers between [] are the breakpoints.
                      # corresponds to the indexes where we cut
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[array([15, 16]), array([17, 12, 49, 52]), array([12, 14, 36])]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array2,array3=np.split(array,[2,6]) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(array1,array2,array3)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[15 16] [17 12 49 52] [12 14 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array2,array3,array4=np.split(array,[2,4,6]) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(array1,array2,array3,array4)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[15 16] [17 12] [49 52] [12 14 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To break 2-dimensional tables. we use hsplit or vsplit.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2=np.array([[1,2,3],[4,5,6],[7,8,9]])
array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array1bis=np.vsplit(array2, [2]) 
print(array1,array1bis)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1 2 3]
 [4 5 6]] [[7 8 9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array1,array1bis=np.hsplit(array2,[2]) 
print(array1,array1bis)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1 2]
 [4 5]
 [7 8]] [[3]
 [6]
 [9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;e-to-delete-rows-and-columns-in-a-numpy-array-b-delete-b-function&#34;&gt;e)- To delete rows and  columns in a Numpy array: &lt;b&gt;delete()&lt;/b&gt; function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array=np.array([[1,2,3],[4,5,6],[7,8,9]])
array
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.delete(array,2,axis=0) # to delete row with index 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.delete(array2,2,axis=1)  # to delete column with index 2 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 2],
       [4, 5],
       [7, 8]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;f-to-calculate-the-transpose-of-a-numpy-table-b-transpose-b-function&#34;&gt;f)- To calculate the transpose of a Numpy table: &lt;b&gt;transpose()&lt;/b&gt; function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.transpose(array)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[1, 4, 7],
       [2, 5, 8],
       [3, 6, 9]])
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;g-to-get-the-values-of-the-diagonal-of-a-numpy-table-b-diagonal-b-function&#34;&gt;g)- To get the values of the diagonal of a Numpy table: &lt;b&gt;diagonal()&lt;/b&gt; function&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;array.diagonal() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([1, 5, 9])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-5-comparisons-and-masks&#34;&gt;6.5 Comparisons and masks :&lt;/h2&gt;

&lt;p&gt;With Numpy arrays, you can use a boolean matrix to filter and compare Numpy arrays.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table = np.random.randint(100,size=(6,6))  #  4*3 Numpy array with random values between 0 and 100 
table
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[62, 72, 26, 37, 76, 39],
       [38, 66, 42, 78, 15, 97],
       [81, 19, 83, 89, 87, 66],
       [11, 49, 53, 71, 63, 25],
       [75, 87, 68, 88, 30, 12],
       [95, 61, 14, 40, 61, 31]])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mask = table&amp;gt;50 # we generate here a mask with same dimension than our original table but with Boolean values
mask
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[ True,  True, False, False,  True, False],
       [False,  True, False,  True, False,  True],
       [ True, False,  True,  True,  True,  True],
       [False, False,  True,  True,  True, False],
       [ True,  True,  True,  True, False, False],
       [ True,  True, False, False,  True, False]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Being both of the same size, we can use this Boolean matrix to our advantage. In other words, we can do Boolean masking. With this Boolean matrix as a mask, we can use it to select the particular subset of data that interests us.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table[mask] 
#table[table&amp;gt;50]  # same job
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([62, 72, 76, 66, 78, 97, 81, 83, 89, 87, 66, 53, 71, 63, 75, 87, 68,
       88, 95, 61, 61])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;table[table&amp;gt;50]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([62, 72, 76, 66, 78, 97, 81, 83, 89, 87, 66, 53, 71, 63, 75, 87, 68,
       88, 95, 61, 61])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have many other comparison operators to compare two arrays such as == (equality),! = (No equality), &amp;lt;= (less than or equal to). We can even combine two Boolean statements &amp;amp; (for &amp;ldquo;AND&amp;rdquo; conditions) or | (for the &amp;ldquo;OR&amp;rdquo; conditions).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#table[table&amp;gt;=50]                 
#table[table&amp;lt;50]                     
#table[table!=50]                    
#table[table==50]                     
#table[(table &amp;gt;=50) &amp;amp; (table &amp;lt;=70)]  
table[(table&amp;gt;=50) | (table&amp;lt;=40)]     
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([62, 72, 26, 37, 76, 39, 38, 66, 78, 15, 97, 81, 19, 83, 89, 87, 66,
       11, 53, 71, 63, 25, 75, 87, 68, 88, 30, 12, 95, 61, 14, 40, 61, 31])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;exercise-using-numpy-library&#34;&gt;Exercise using Numpy library&lt;/h2&gt;

&lt;h3 id=&#34;we-will-work-on-data-station-using-numpy-library&#34;&gt;we will work on data station using Numpy library.&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;read the file containing the daily precipitation and temperature data for the Ottawa station for the year 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1- Create a Numpy table with a column for temperature and a column for precipitation. (With two Numpy 1D tables, create a 2D array (365 rows and 2 columns).&lt;/p&gt;

&lt;p&gt;2- Convert the temperature data into Celcius (T [Celcius] = T [Kelvin] - 273.15).&lt;/p&gt;

&lt;p&gt;3- How many days have an accumulation greater than 25mm?&lt;/p&gt;

&lt;p&gt;4- What temperature was recorded for the day with the greatest accumulation?&lt;/p&gt;

&lt;p&gt;5- Calculate the number of degree days (&amp;gt; 0degC) for the year 2017.&lt;/p&gt;

&lt;p&gt;6- Calculate the daily precipitation totals for the year 2017 and assign this variable to the cumul_recipitation table. Add the cumul_recipitation table to the table.&lt;/p&gt;

&lt;p&gt;7- Just for the exercise, split the array into 2 arrays, then concatenate them again to get the initial array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
# to read a csv file with numpy, we can use genfromtxt() function. 
temperature = np.genfromtxt(&amp;quot;./DATA/OTTAWA_tasmoy_2017.csv&amp;quot;, dtype=float)
precipitation = np.genfromtxt(&amp;quot;./DATA/OTTAWA_PrecTOT_2017.csv&amp;quot;, dtype=float)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(temperature.shape, precipitation.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(365,) (365,)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;correction&#34;&gt;Correction&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#1- 

tableau = np.column_stack([temperature,precipitation])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#tableau = np.hstack([temperature,precipitation])
tableau = np.hstack([temperature.reshape(len(temperature),-1),precipitation.reshape(len(precipitation),-1)])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(tableau.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(365, 2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#2- 
tableau[:,0]=tableau[:,0]-273.15  
``

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
len(tableau[tableau[:,1]&amp;gt;=25])&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    10

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
 4-
precipitation_max = np.nanmax(tableau[:,1])
print(precipitation_max)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    45.01
    


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
tableau[tableau[:,1] == precipitation_max]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    array([[15.8 , 45.01]])




&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
 5-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
sum(tableau[:,1][tableau[:,1]&amp;gt;0])&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;



    1328.5300000000002




&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
 6-
cumul_precipitation = np.nancumsum(tableau[:,1])&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python&lt;/p&gt;

&lt;p&gt;tableau = np.column_stack([tableau, cumul_precipitation])&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;



    array([[-6.50000e+00,  1.10000e-01,  1.10000e-01],
           [-6.80000e+00,  3.03000e+00,  3.14000e+00],
           [-1.80000e+00,  2.65700e+01,  2.97100e+01],
           ...,
           [         nan,  0.00000e+00,  1.32726e+03],
           [-2.15000e+01,  1.27000e+00,  1.32853e+03],
           [-2.20000e+01,  0.00000e+00,  1.32853e+03]])


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
 7.&lt;/p&gt;

&lt;p&gt;temperature2,precipitation2,cumul2 = np.hsplit(tableau, 3)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
tableau_original=np.concatenate([temperature2+273.15, precipitation2], axis = 1)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;python
print(tableau_original)
```&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>7 Pandas library</title>
      <link>/courses/tutorial_python/7-pandas_library/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/7-pandas_library/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pandas.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Pandas is a library specialized in data manipulation. This library contains a set of optimized functions for handling large datasets. It allows to create and export tables of data from text files (separators, .csv, fixed format, compressed), binary (HDF5 with Pytable), HTML, XML, JSON, MongoDB, SQL &amp;hellip;&lt;/p&gt;

&lt;p&gt;A new data structure is used with this library: the DataFrame. There are two types of data with pandas: &lt;b&gt;series&lt;/b&gt; and &lt;b&gt;dataframes&lt;/b&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a dataframe is an array that is created with dictionaries or lists&lt;/li&gt;
&lt;li&gt;they are based on Numpy or ndarray tables&lt;/li&gt;
&lt;li&gt;they can have column and line names&lt;/li&gt;

&lt;li&gt;&lt;p&gt;they have the particularity of being able to mix the types of data: str, float, Nan, Int &amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;they can be viewed as an excel sheet but with a larger number of data volumes and a larger number of functions and attributes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;7-1-series-introduction&#34;&gt;7.1 Series introduction  -&lt;/h2&gt;

&lt;p&gt;Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects, etc.). The axis labels are collectively called index.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# first, we must import Pandas library
import pandas as pd      # aliasing as pd
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A pandas Series can be created using the following constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie = pd.Series([11,15,12,13,14])
print(serie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0    11
1    15
2    12
3    13
4    14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have in series, indexes and values. These indexes can be replaced by text with the index option. Be careful, the number of indexes must correspond to the number of values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie = pd.Series([11,15,12,13,14], index=[&amp;quot;Montreal&amp;quot;, &amp;quot;Ottawa&amp;quot;, &amp;quot;Toronto&amp;quot;, &amp;quot;Gatineau&amp;quot;, &amp;quot;Quebec&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(serie)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montreal    11
Ottawa      15
Toronto     12
Gatineau    13
Quebec      14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The describe() method computes a summary of statistic&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count     5.000000
mean     13.000000
std       1.581139
min      11.000000
25%      12.000000
50%      13.000000
75%      14.000000
max      15.000000
dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use index to access to an element.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[&amp;quot;Montreal&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use index number.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[3]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use several indexes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[[&amp;quot;Montreal&amp;quot;, &amp;quot;Quebec&amp;quot;, &amp;quot;Toronto&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montreal    11
Quebec      14
Toronto     12
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are large number of methods collectively compute descriptive statistics such as min(), max(), sum() &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.min()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie.max()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can apply comparison operators.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie[serie&amp;gt;12]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Ottawa      15
Gatineau    13
Québec      14
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;serie&amp;gt;12 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Montréal    False
Ottawa       True
Toronto     False
Gatineau     True
Québec       True
dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;7-2-pandas-dataframes&#34;&gt;7.2 Pandas Dataframes&lt;/h2&gt;

&lt;p&gt;Pandas DataFrame is two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. Pandas DataFrame consists of three principal components, the data, rows, and columns.&lt;/p&gt;

&lt;h3 id=&#34;7-2-1-create-a-dataframe&#34;&gt;7.2.1  Create a  Dataframe&lt;/h3&gt;

&lt;p&gt;In the real world, a Pandas DataFrame will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, and Excel file. Pandas DataFrame can be created from the lists, dictionary, and from a list of dictionary etc. Dataframe can be created in different ways here are some ways by which we create a dataframe:&lt;/p&gt;

&lt;p&gt;### - a) Using a Numpy array&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np  
stations = np.genfromtxt(&amp;quot;./DATA/DATA_Barrage_1963_2017_5.csv&amp;quot;, delimiter=&amp;quot;,&amp;quot;, dtype=&#39;float&#39;)   
stations
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([[  39.7       ,   39.09      ,   39.55645161,   23.23      ,
          22.5       ,   22.85903226, 2390.52612903, 3164.97      ,
        1673.8       ],
       [  41.16      ,   40.96      ,   41.08806452,   23.22      ,
          22.43      ,   22.7583871 , 2227.28290323, 3008.18      ,
        1697.87      ],
       [  41.15      ,   41.05      ,   41.11322581,   23.35      ,
          22.87      ,   23.15548387, 2851.27419355, 3231.8       ,
        2367.85      ],
       [  41.09      ,   40.61      ,   40.9683871 ,   23.78      ,
          22.7       ,   23.03258065, 2635.03774194, 3967.33      ,
        2069.65      ],
       [  41.09      ,   39.6       ,   40.26967742,   24.24      ,
          22.87      ,   23.64580645, 3924.23451613, 5407.32      ,
        2417.89      ]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create the dataframe, we use the Pandas &lt;b&gt; DataFrame () &lt;/b&gt; function. It is at this stage that we define the names of our columns. In input we put the table Numpy.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.DataFrame(stations, columns=[&amp;quot;Amont Max&amp;quot;, &amp;quot;Amont Min&amp;quot;, &amp;quot;Amont Mean&amp;quot;, &amp;quot;Aval Max&amp;quot;, &amp;quot;Aval Max&amp;quot;, &amp;quot;Aval Mean&amp;quot;, &amp;quot;Debit Mean&amp;quot;, &amp;quot;Debit Max&amp;quot;,&amp;quot;Debit Min&amp;quot;])
dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont Max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont Min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont Mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval Max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval Max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval Mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit Mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit Max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit Min&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.5565&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.859&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2390.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3164.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1673.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.0881&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.7584&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2227.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3008.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1697.87&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.1132&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1555&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2851.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3231.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2367.85&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.9684&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.0326&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2635.04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3967.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2069.65&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.2697&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.24&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6458&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3924.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5407.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2417.89&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;b-create-dataframe-loading-csv-file-b-read-table-b-or-b-read-csv-b-function&#34;&gt;- b) Create Dataframe loading csv file: &lt;b&gt;read_table()&lt;/b&gt; or &lt;b&gt;read_csv()&lt;/b&gt; function&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt; read_table () &lt;/b&gt; and &lt;b&gt; read_csv () &lt;/b&gt; are the most useful functions under Pandas for reading text files and generating a DataFrame.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will work with a dataset from a hydraulic dam.
Our csv file has 9 variables, the first line gives us the names of the variables (or labels).&lt;/p&gt;

&lt;p&gt;A csv document can be read with the &lt;b&gt; read_table () &lt;/b&gt; function, with the separator attribute &amp;ldquo;,&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;barrage = pd.read_table(&amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;, sep=&amp;quot;,&amp;quot;)
barrage.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont_max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont_min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Amont_moyen&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval_max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval_min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Aval_moyen&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit_Moyen&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit_max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Debit_min&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.5565&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.859&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2390.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3164.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1673.8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.0881&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.43&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.7584&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2227.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3008.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1697.87&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.1132&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1555&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2851.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3231.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2367.85&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.9684&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.0326&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2635.04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3967.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2069.65&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.2697&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.24&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6458&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3924.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5407.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2417.89&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;However, if we know that our file to read is a csv, we can use a simpler function of Pandas which is &lt;b&gt; read_csv () &lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;No need to use sep=&amp;rdquo; option. He will find the separator by default.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;help(pd.read_csv)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Several options are available to the read_csv () function. It is important to know the list of possibilities and options offered by this simple command.&lt;/p&gt;

&lt;p&gt;|  |  |
|&amp;ndash;|&amp;ndash;|
| &lt;b&gt;path&lt;/b&gt; | Path to our file |
| &lt;b&gt;sep&lt;/b&gt;| Delimiter like , ; \t or \s+ for a variable number of spaces |
| &lt;b&gt;header&lt;/b&gt;| default 0, the first line contains the name of the variables; if None the names are generated or defined later |
| &lt;b&gt;index_col&lt;/b&gt;| Names or numbers of columns defining the indexes of lines, indexes which can be hierarchized |
| &lt;b&gt;names&lt;/b&gt;| If header = None, list of variable names |
| &lt;b&gt;nrows&lt;/b&gt;| Useful for testing and limiting the number of lines to read |
| &lt;b&gt;skiprow&lt;/b&gt;| List of lines to jump in reading |
| &lt;b&gt;skip_footer&lt;/b&gt;| Number of lines to jump at the end of file |
| &lt;b&gt;na_values&lt;/b&gt;| Definition of the code or codes signaling missing values. They can be defined in a dictionary to associate variables and codes specific missing values |
| &lt;b&gt;usecols&lt;/b&gt;| Selects a list of variables to read to avoid reading large or unnecessary fields or variables |
| &lt;b&gt;skip_blank_lines&lt;/b&gt;| If &lt;b&gt; True &lt;/b&gt;, we skip the white lines |
| &lt;b&gt;thousand&lt;/b&gt;| Separator: &amp;ldquo;.&amp;rdquo; or &amp;ldquo;,&amp;rdquo; |&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Using example

file1 = &amp;quot;./DATA/DATA_EXTREME_Carillon_1963_2017_5.csv&amp;quot;
col_names = [&#39;Variable1&#39;, &#39;Variable2&#39;, &#39;Variable3&#39;]
df2 = pd.read_csv(file1, skiprows=1, usecols=[0, 1, 3], names=col_names)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Variable1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Variable2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Variable3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.96&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.22&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.35&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40.61&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.78&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;39.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;b-c-b-create-dataframe-loading-ascii-file&#34;&gt;&lt;b&gt;- c)&lt;/b&gt; Create Dataframe loading ascii file:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;./DATA/Daily_Precipitation_1963-2017.txt&#39;, &#39;r&#39;) as file:
        rows = file.read() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;./DATA/Daily_Precipitation_1963-2017.txt&#39;, &#39;r&#39;) as file:
        rows = file.read()      
dataset = [float(row) for row in rows.split()]   
df3 = pd.DataFrame({&amp;quot;Precipitation&amp;quot; : dataset})
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;b-d-b-create-dataframe-loading-excell-xls-file-b-read-excel-b-function&#34;&gt;&lt;b&gt;- d)&lt;/b&gt; Create Dataframe loading excell (.xls) file: &lt;b&gt;read_excel()&lt;/b&gt; function&lt;/h3&gt;

&lt;p&gt;We will open here an excel file (.xls extension). This file is a database containing information on all homogenized Environmental and Climate Change Canada temperature stations.&lt;/p&gt;

&lt;p&gt;This database has 11 columns with data starting at the 4 th line.&lt;/p&gt;

&lt;p&gt;We will define the &amp;ldquo;Province&amp;rdquo; column as index of our DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df4 = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, index_col=0,skiprows = range(0, 3))
df4.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-2-access-data-from-dataframes&#34;&gt;7.2.2  Access data from DataFrames&lt;/h3&gt;

&lt;p&gt;The first thing to do when opening a new dataset is print out a few rows. We accomplish this with &lt;b&gt;.head()&lt;/b&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To see the last five rows use  &lt;b&gt;.tail()&lt;/b&gt; method. tail() also accepts a number, and in this case we printing the bottom two rows.:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;332&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PLUM POINT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8402958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1972&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-56.88&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;333&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PORT AUXBASQUES&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8402975&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1909&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;334&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST ANTHONY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8403389&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-55.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;335&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST JOHN&amp;rsquo;S&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8403505&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1874&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;141&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;336&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;STEPHENVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8403801&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;337&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WABUSH LAKE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;8504177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-66.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;551&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Before exploring a Dataframe, you can modify the index to make it easier to analyze the dataset. For this, we use the &lt;b&gt; .set_index () &lt;/b&gt; function. We must create a new object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index = dataframe.set_index(&amp;quot;Prov&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can directly select a column from a Dataframe:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index[&#39;Nom de station&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
BC        AGASSIZ
BC          ATLIN
BC    BARKERVILLE
BC     BEAVERDELL
BC    BELLA COOLA
Name: Nom de station, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pandas supports Multi-axes indexing to get the subset of pandas object.
Then, to access an element in a dataframe, there are two methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;b&gt; iloc () &lt;/b&gt; method to access data from index numbers&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the &lt;b&gt; loc () &lt;/b&gt; method to access data from labels&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#### a- &lt;b&gt; iloc () &lt;/b&gt; method:&lt;/p&gt;

&lt;p&gt;We can access data from Dataframe using index integer. Like numpy, this method is 0-based indexing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example1: select specific row and specific column
dataframe_Prov_index.iloc[0,0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;AGASSIZ&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example2: iloc: # select first 4 rows f and all columns
dataframe_Prov_index.iloc[0:4,:]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example3: iloc: # select all rows and 4 specific columns 
dataframe_Prov_index.iloc[:,0:4].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example4: iloc:# Slicing through list of values
print(dataframe_Prov_index.iloc[[1, 3, 5], [1, 3]])
print(dataframe_Prov_index.iloc[1:3, :])
dataframe_Prov_index.iloc[:,1:3].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;        stnid  mois déb.
Prov                    
BC    1200560          8
BC    1130771          1
BC    1021480          7
     Nom de station    stnid  année déb.  mois déb.  année fin.  mois fin.  \
Prov                                                                         
BC            ATLIN  1200560        1905          8        2017         12   
BC      BARKERVILLE  1090660        1888          2        2015          3   

      lat (deg)  long (deg)  élév (m) stns jointes  
Prov                                                
BC        59.57     -133.70       674            N  
BC        53.07     -121.52      1265            N  
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#### b- La méthode loc():&lt;/p&gt;

&lt;p&gt;This method has purely label based indexing.&lt;/p&gt;

&lt;p&gt;.loc() has multiple access methods like −&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    -single scalar label

    -list of labels

    -slice object

    -Boolean array
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.loc takes two single/list/range operator separated by &amp;lsquo;,&amp;rsquo;. The first one indicates the row and the second one indicates columns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example1: loc: select all rows for a specific column
dataframe_Prov_index.loc[:,&amp;quot;Nom de station&amp;quot;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
BC        AGASSIZ
BC          ATLIN
BC    BARKERVILLE
BC     BEAVERDELL
BC    BELLA COOLA
Name: Nom de station, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example2: loc: select all rows for a specific index name
dataframe_Prov_index.loc[&amp;quot;QC&amp;quot;,:].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AMOS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;709CEE9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;305&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAGOTVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7060400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;159&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAIE COMEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;704S001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1965&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;130&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAUCEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7027283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-70.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLETERRE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7080600&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2004&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.38&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;322&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example3: Select all rows for multiple columns, say list[]

dataframe_Prov_index.loc[:,[&amp;quot;Nom de station&amp;quot;, &amp;quot;année déb.&amp;quot;, &amp;quot;année fin.&amp;quot;]].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example4: Select few rows for multiple columns, say list[]
dataframe_Prov_index.loc[[&#39;BC&#39;,&#39;QC&#39;],[&amp;quot;Nom de station&amp;quot;, &amp;quot;année déb.&amp;quot;, &amp;quot;année fin.&amp;quot;]].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example 5: # for getting values with a boolean array

(dataframe_Prov_index.loc[&#39;BC&#39;,[&amp;quot;année déb.&amp;quot;]]&amp;gt;1900).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;True&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;False&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example 6: # for getting values with a boolean array
dataframe_Prov_index.loc[dataframe_Prov_index[&amp;quot;année fin.&amp;quot;]&amp;gt;2015,:].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLUE RIVER&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1160899&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;683&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Example 7: # for getting values with a boolean array
df2 = dataframe_Prov_index.loc[&amp;quot;QC&amp;quot;,:]
df2.loc[df2[&amp;quot;année fin.&amp;quot;]==2017,:].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AMOS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;709CEE9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;305&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAGOTVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7060400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;159&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAIE COMEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;704S001&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1965&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-68.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;130&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAUCEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7027283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-70.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-3-change-a-dataframe&#34;&gt;7.2.3  Change a Dataframe&lt;/h3&gt;

&lt;p&gt;### 7.2.3.1 Column Selection/Addition/Deletion-&lt;/p&gt;

&lt;p&gt;We will use here our previous Dataframe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;a-create-a-new-variable&#34;&gt;a- Create a new variable&lt;/h4&gt;

&lt;p&gt;We can select columns from our Dataframe to create a new one. In this example, we will calculate the number of recording years for each station.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delta_year = (dataframe_Prov_index[&amp;quot;année fin.&amp;quot;] - dataframe_Prov_index[&amp;quot;année déb.&amp;quot;]) + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;delta_year.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
BC    125
BC    113
BC    128
BC     68
BC    123
dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#### b- Column Addition in  a DataFrame&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index[&amp;quot;total année&amp;quot;] = delta_year
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_Prov_index.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total année&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;125&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;113&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;128&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;#### c- Column Deletion in a DataFrame&lt;/p&gt;

&lt;p&gt;Columns from a Dataframe can be deleted or popped; let us take an example to understand how.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# using del function
print (&amp;quot;Deleting &#39;stns jointes&#39; column using DEL function:&amp;quot;)
del dataframe[&#39;stns jointes&#39;]
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Deleting &#39;stns jointes&#39; column using DEL function:
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# using pop function
print (&amp;quot;Deleting &#39;stnid&#39; column using POP function:&amp;quot;)
dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.pop(&#39;stnid&#39;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Deleting &#39;stnid&#39; column using POP function:
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# using drop method
dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3))
dataframe.drop([&amp;quot;stns jointes&amp;quot;], axis=1).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;### 7.2.3.2  Row Selection/Addition/Deletion-&lt;/p&gt;

&lt;p&gt;We will now understand row selection, addition and deletion through examples. Let us begin with the concept of selection.&lt;/p&gt;

&lt;p&gt;#### a-  Row Selection&lt;/p&gt;

&lt;p&gt;Selection by Label
Rows can be selected by passing row label to a loc function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3)).set_index(&amp;quot;Prov&amp;quot;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.loc[&#39;BC&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Rows can be selected by passing integer location to an iloc function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.iloc[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Nom de station    AGASSIZ
stnid             1100120
année déb.           1893
mois déb.               1
année fin.           2017
mois fin.              12
lat (deg)           49.25
long (deg)        -121.77
élév (m)               15
stns jointes            N
Name: BC, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Multiple rows can be selected using ‘ : ’ operator.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[2:4]
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;b-row-addition&#34;&gt;b-  Row Addition&lt;/h4&gt;

&lt;p&gt;Add new rows to a DataFrame using function &lt;b&gt;append()&lt;/b&gt; function. This function will append the rows at the end.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3)).set_index(&amp;quot;Prov&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_new = pd.DataFrame({&#39;Nom de station&#39;: [&#39;station1&#39;, &#39;station2&#39;], &#39;stnid&#39;: [8888, 9999], &#39;Prov&#39;: [&#39;BC&#39;, &#39;QC&#39;]}).set_index(&amp;quot;Prov&amp;quot;)
df_new
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;station1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8888&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;station2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9999&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = dataframe.append(df_new)
dataframe.tail()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST JOHN&amp;rsquo;S&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1874&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403505&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;141&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;STEPHENVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403801&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WABUSH LAKE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-66.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8504177&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;551&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;station1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8888&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;station2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9999&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;c-row-deletion&#34;&gt;c-  Row Deletion&lt;/h4&gt;

&lt;p&gt;Use index label to delete or drop rows from a DataFrame. If label is duplicated, then multiple rows will be dropped.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3)).set_index(&amp;quot;Prov&amp;quot;)
dataframe.head()

&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLA COOLA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1060841&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-126.68&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Drop rows with label &#39;BC&#39;
dataframe = dataframe.drop(&#39;BC&#39;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BURWASH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100181&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1966&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;61.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-139.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;807&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;DAWSON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100LRP&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1901&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-139.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;370&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;N   YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HAINES JUNCTIO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100630&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1944&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-137.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;596&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KOMAKUK BEACH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100682&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-140.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MAYO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2100701&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1924&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;63.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-135.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;504&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_excel(&amp;quot;./DATA/Homog_Temperature_Stations.xls&amp;quot;, skiprows = range(0, 3)).set_index(&amp;quot;Prov&amp;quot;)
dataframe.loc[&#39;ON&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATIKOKAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6020LPQ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-91.58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;442&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEATRICE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6110607&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1878&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-79.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;297&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BELLEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6150689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1921&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-77.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;76&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BIG TROUT LAKE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6010735&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.83&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-89.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;224&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BROCKVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;6100971&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1915&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;44.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-75.67&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;96&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-2-3-3-merging-joining-dataframe&#34;&gt;7.2.3.3 Merging/Joining Dataframe-&lt;/h3&gt;

&lt;p&gt;Pandas has full-featured, high performance in-memory join operations idiomatically very similar to relational databases like SQL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left, right, how=&#39;inner&#39;, on=None, left_on=None, right_on=None,left_index=False, right_index=False, sort=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;|  |  |
|&amp;ndash;|&amp;ndash;|
| &lt;b&gt;left&lt;/b&gt; | DataFrame object |
| &lt;b&gt;right&lt;/b&gt; | Another DataFrame object |
| &lt;b&gt;on&lt;/b&gt; | Columns (names) to join on. Must be found in both the left and right DataFrame objects |
| &lt;b&gt;left_on&lt;/b&gt; |Columns from the left DataFrame to use as keys. Can either be column names or arrays with length equal to the length of the DataFrame |
| &lt;b&gt;right_on&lt;/b&gt; |Columns from the right DataFrame to use as keys. Can either be column names or arrays with length equal to the length of the DataFrame |
| &lt;b&gt;left_index&lt;/b&gt; |If True, use the index (row labels) from the left DataFrame as its join key(s). In case of a DataFrame with a MultiIndex (hierarchical), the number of levels must match the number of join keys from the right DataFrame |
| &lt;b&gt;right_index&lt;/b&gt; |Same usage as left_index for the right DataFrame |
| &lt;b&gt;how&lt;/b&gt; |One of &amp;lsquo;left&amp;rsquo;, &amp;lsquo;right&amp;rsquo;, &amp;lsquo;outer&amp;rsquo;, &amp;lsquo;inner&amp;rsquo;. Defaults to inner. Each method has been described below |
| &lt;b&gt;sort&lt;/b&gt; |Sort the result DataFrame by the join keys in lexicographical order. Defaults to True, setting to False will improve the performance substantially in many cases |&lt;/p&gt;

&lt;p&gt;Let us now create two different DataFrames and perform the merging operations on it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left_dataframe = pd.DataFrame({
   &#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;MONTREAL TAVISH&#39;, &#39;QUEBEC&#39;, &#39;TADOUSSAC&#39;,&#39;OKA&#39;],
   &#39;variable&#39;:[&#39;var1&#39;,&#39;var2&#39;,&#39;var6&#39;,&#39;var5&#39;]})

right_dataframe = pd.DataFrame(
   {&#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;TORONTO&#39;, &#39;OTTAWA&#39;, &#39;KINGSTON&#39;,&#39;CHAPLEAU&#39;],
   &#39;variable&#39;:[&#39;var3&#39;,&#39;var1&#39;,&#39;var6&#39;,&#39;var5&#39;]})
left_dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;right_dataframe
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;a-merge-two-dataframes-on-a-key&#34;&gt;a-  Merge Two DataFrames on a Key&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left_dataframe,right_dataframe,on=&#39;id&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;b-merge-two-dataframes-on-a-key&#34;&gt;b-  Merge Two DataFrames on a Key&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left_dataframe,right_dataframe,on=[&#39;id&#39;,&#39;variable&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;c-merge-two-dataframes-using-how-argument&#34;&gt;c-  Merge Two DataFrames Using &amp;lsquo;How&amp;rsquo; argument&lt;/h4&gt;

&lt;p&gt;The how argument to merge specifies how to determine which keys are to be included in the resulting table. If a key combination does not appear in either the left or the right tables, the values in the joined table will be NA.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Left Join
pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;left&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# right Join
pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;right&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# outer Join
pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;outer&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# inner Join
pd.merge(left_dataframe, right_dataframe, on=&#39;variable&#39;, how=&#39;inner&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_x&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id_y&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station_y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-3-4-dataframe-concatenation&#34;&gt;7.2.3.4  Dataframe Concatenation-&lt;/h3&gt;

&lt;p&gt;Pandas provides various facilities for easily combining together DataFrame objects.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pd.concat(objs,axis=0,join=&#39;outer&#39;,join_axes=None,ignore_index=False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;|  |  |
|&amp;ndash;|&amp;ndash;|
| &lt;b&gt;objs&lt;/b&gt; | This is a sequence or mapping of Series, DataFrame objects |
| &lt;b&gt;axis&lt;/b&gt; |  {0, 1, &amp;hellip;}, default 0. This is the axis to concatenate along |
| &lt;b&gt;join&lt;/b&gt; |  {‘inner’, ‘outer’}, default ‘outer’. How to handle indexes on other axis(es). Outer for union and inner for intersection |
| &lt;b&gt;ignore_index&lt;/b&gt; |boolean, default False. If True, do not use the index values on the concatenation axis. The resulting axis will be labeled 0, &amp;hellip;, n - 1 |
| &lt;b&gt;join_axes&lt;/b&gt; |This is the list of Index objects. Specific indexes to use for the other (n-1) axes instead of performing inner/outer set logic |&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe1 = pd.DataFrame({
   &#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;MONTREAL TAVISH&#39;, &#39;QUEBEC&#39;, &#39;TADOUSSAC&#39;,&#39;OKA&#39;],
   &#39;variable&#39;:[&#39;var1&#39;,&#39;var2&#39;,&#39;var6&#39;,&#39;var5&#39;]})

dataframe2 = pd.DataFrame(
   {&#39;id&#39;:[1,2,3,4],
   &#39;Nom de station&#39;: [&#39;TORONTO&#39;, &#39;OTTAWA&#39;, &#39;KINGSTON&#39;,&#39;CHAPLEAU&#39;],
   &#39;variable&#39;:[&#39;var3&#39;,&#39;var1&#39;,&#39;var6&#39;,&#39;var5&#39;]})

pd.concat([dataframe1,dataframe2])
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Suppose we wanted to associate specific keys with each of the pieces of the chopped up DataFrame. We can do this by using the keys argument −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.concat([dataframe1,dataframe2],keys=[&#39;QC&#39;,&#39;ON&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;QC&amp;rsquo;, 0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;QC&amp;rsquo;, 1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;QC&amp;rsquo;, 2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;QC&amp;rsquo;, 3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;ON&amp;rsquo;, 0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;ON&amp;rsquo;, 1)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;ON&amp;rsquo;, 2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;(&amp;lsquo;ON&amp;rsquo;, 3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If we don&amp;rsquo;t want the index being duplicated, set ignore_index to True.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.concat([dataframe1,dataframe2],keys=[&#39;QC&#39;,&#39;ON&#39;],ignore_index=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If the two Dataframes need to be added along axis=1, then the new columns will be appended.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.concat([dataframe1,dataframe2],axis=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;concatenating-using-append&#34;&gt;Concatenating Using append&lt;/h4&gt;

&lt;p&gt;A useful shortcut to concat are the append instance methods on DataFrame. They concatenate along axis=0, namely the index&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe1.append(dataframe2)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;id&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;variable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MONTREAL TAVISH&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QUEBEC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TADOUSSAC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OKA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;TORONTO&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;OTTAWA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;KINGSTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHAPLEAU&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;var5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-4-basic-functionality-on-dataframe&#34;&gt;7.2.4  Basic Functionality on DataFrame&lt;/h3&gt;

&lt;p&gt;There are many built-in functions and methods:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.DataFrame.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will present some useful functions with exploring a dataset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.shape&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns a tuple representing the dimensionality of the DataFrame. Tuple (a,b), where a represents the number of rows and b represents the number of columns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.shape 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(289, 17)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.columns&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns names of the columns in our Dataframe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Index([&#39;Unnamed: 0&#39;, &#39;Prov&#39;, &#39;Nom de station&#39;, &#39;stnid&#39;, &#39;année déb.&#39;,
       &#39;mois déb.&#39;, &#39;année fin.&#39;, &#39;mois fin.&#39;, &#39;lat (deg)&#39;, &#39;long (deg)&#39;,
       &#39;élév (m)&#39;, &#39;stns jointes&#39;, &#39;Tmax&#39;, &#39;Tmax90p&#39;, &#39;Tmin&#39;, &#39;Tmin10p&#39;,
       &#39;DG0&#39;],
      dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.empty&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns the Boolean value saying whether the Object is empty or not; True indicates that the object is empty.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.empty
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.isnull&lt;/b&gt; method:
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To detect missing values easier (and across different array dtypes), Pandas provides the isnull() and notnull() functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Tmax&#39;].isnull().head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0     True
1    False
2     True
3    False
4    False
Name: Tmax, dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We combine this method with .sum() to know the number of missing values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Tmax&#39;].isnull().sum() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;117
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.dropna&lt;/b&gt; method:
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to exclude the missing values, then use the dropna function along with the axis argument. By default, axis=0, i.e., along row, which means that if any value within a row is NA then the whole row is excluded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_sans_NaN = dataframe.dropna() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_sans_NaN[&#39;Tmax&#39;].isnull().sum() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_sans_NaN.shape # nouvelle dimension de notre tableau 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(169, 17)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;sort_values&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sort_values() is the method for sorting by values. It accepts a &amp;lsquo;by&amp;rsquo; argument which will use the column name of the DataFrame with which the values are to be sorted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted = dataframe.sort_values(by=&amp;quot;Prov&amp;quot;)
df_label_sorted.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;127&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;127&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;SLAVE LAKE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3065995&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1922&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-114.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;583&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.48137&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.4643&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.42227&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.3803&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1131.03&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;EDMONTON&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3012216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;723&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.328&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.11709&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.1907&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1095.93&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;104&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;104&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;COLD LAKE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3081680&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1925&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-110.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;541&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.72448&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.2737&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.03759&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.2037&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1303.95&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;103&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;103&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CARWAY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3031402&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1914&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1354&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1397&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.925&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.61886&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.98&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;956.837&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;102&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAMROSE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3011240&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-112.82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;739&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.96497&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.1757&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.71442&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.588&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1048.13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The argument could takes a list of column values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted = dataframe.sort_values(by=[&#39;Prov&#39;,&#39;année déb.&#39;])
df_label_sorted.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;EDMONTON&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3012216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;723&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.328&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.11709&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.1907&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1095.93&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FORT CHIPEWYAN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3072655&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-111.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;238&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.28219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.566&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.54421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-28.6297&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1135.11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;121&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MEDICINE HAT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3034485&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-110.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;717&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6489&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.4973&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1559&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.7833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1563.87&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;99&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;99&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CALGARY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3031092&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1885&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-114.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1084&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.835&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.4673&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.44461&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1172.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BANFF&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3050519&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1887&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-115.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1397&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.90652&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.132&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.08488&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.8583&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;750.37&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;sort_index()&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the sort_index() method, by passing the axis arguments and the order of sorting, DataFrame can be sorted. By default, sorting is done on row labels in ascending order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted.sort_index().head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted.sort_index(ascending=False).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;288&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;WABUSH LAKE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8504177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1960&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.93&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-66.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;551&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.33974&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.6937&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.02478&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-29.4537&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;792.913&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;287&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;287&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;STEPHENVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403801&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.53&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.80653&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.614&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.81275&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.582&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1710.17&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;286&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;286&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST JOHN&amp;rsquo;S&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403505&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1874&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-52.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;141&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.07367&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.6237&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.54977&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.919&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1474.82&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;285&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;285&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ST ANTHONY&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8403389&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-55.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;284&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;284&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PORT AUXBASQUES&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8402975&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1909&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;47.58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-58.97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;40&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_label_sorted.sort_index(axis=1).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1095.93&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;EDMONTON&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.98212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.328&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.11709&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.1907&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3012216&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;723&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1135.11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FORT CHIPEWYAN&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.28219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.566&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.54421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-28.6297&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;110&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;58.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-111.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3072655&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;238&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1563.87&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MEDICINE HAT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6489&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.4973&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1559&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.7833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;121&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1883&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-110.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3034485&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;717&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;99&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1172.05&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CALGARY&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.835&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;24.4673&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.44461&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;99&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1885&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-114.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3031092&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1084&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;750.37&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BANFF&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.90652&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.132&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.08488&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.8583&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1887&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-115.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3050519&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1397&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.describe()&lt;/b&gt; method:&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generates descriptive statistics that summarize the central tendency, dispersion and shape of a dataset’s distribution, excluding NaN values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&#39;Tmax&#39;].describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;count    172.000000
mean       7.916314
std        5.524630
min      -15.366463
25%        7.364646
50%        8.988052
75%       11.018241
max       16.105511
Name: Tmax, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.dtypes()&lt;/b&gt; method:&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns the dtypes in this object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.dtypes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Unnamed: 0          int64
Prov               object
Nom de station     object
stnid              object
année déb.          int64
mois déb.           int64
année fin.          int64
mois fin.           int64
lat (deg)         float64
long (deg)        float64
élév (m)            int64
stns jointes       object
Tmax              float64
Tmax90p           float64
Tmin              float64
Tmin10p           float64
DG0               float64
dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-2-5-dataframe-function-application&#34;&gt;7.2.5  DataFrame Function Application&lt;/h3&gt;

&lt;p&gt;To apply your own or another library’s functions to Pandas objects, you should be aware of the three important methods. The methods have been discussed below. The appropriate method to use depends on whether your function expects to operate on an entire DataFrame, row- or column-wise, or element wise.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Table wise Function Application: &lt;b&gt;.pipe()&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Row or Column Wise Function Application: &lt;b&gt;.apply()&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Element wise Function Application: &lt;b&gt;.applymap()&lt;/b&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.apply()&lt;/b&gt; method:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arbitrary functions can be applied along the axes of a DataFrame or Panel using the apply() method, which, like the descriptive statistics methods, takes an optional axis argument. By default, the operation performs column wise, taking each column as an array-like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
dataframe[&amp;quot;stns jointes&amp;quot;]=dataframe[&amp;quot;stns jointes&amp;quot;].apply(lambda x: x.replace(&amp;quot;N&amp;quot;, &amp;quot;NaN&amp;quot;))
dataframe[&amp;quot;stns jointes&amp;quot;]=dataframe[&amp;quot;stns jointes&amp;quot;].apply(lambda x: x.replace(&amp;quot;Y&amp;quot;, &amp;quot;1&amp;quot;))
dataframe = dataframe.dropna() 
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLUE RIVER&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1160899&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.4408&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.12501&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.5823&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;987.363&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;COMOX&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021830&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-124.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.7376&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1023&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.42485&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.526&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2444.39&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&amp;quot;Tmin&amp;quot;]=dataframe[&amp;quot;Tmin&amp;quot;].apply(lambda x: round(x,2))
dataframe[&amp;quot;Tmax&amp;quot;]=dataframe[&amp;quot;Tmax&amp;quot;].apply(lambda x: int(x))
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLUE RIVER&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1160899&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9917&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.5823&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;987.363&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;COMOX&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021830&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-124.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.1023&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.526&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2444.39&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;7-2-6-dataframe-groupby-method&#34;&gt;7.2.6  DataFrame GroupBY method&lt;/h3&gt;

&lt;p&gt;Any groupby operation involves one of the following operations on the original object. They are −&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Splitting the Object&lt;/li&gt;
&lt;li&gt;Applying a function&lt;/li&gt;
&lt;li&gt;Combining the results&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In many situations, we split the data into sets and we apply some functionality on each subset. In the apply functionality, we can perform the following operations −&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aggregation − computing a summary statistic&lt;/li&gt;
&lt;li&gt;Transformation − perform some group-specific operation&lt;/li&gt;
&lt;li&gt;Filtration − discarding the data with some condition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us now create a DataFrame object and perform all the operations on it −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
dataframe.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AGASSIZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1100120&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1893&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.77&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ATLIN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200560&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1905&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;59.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-133.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;674&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.63043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.46052&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.235&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;860.083&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BARKERVILLE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1090660&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1888&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2015&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.07&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-121.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1265&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAVERDELL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1130771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2006&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49.48&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-119.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;838&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.628&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.6417&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.01748&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.646&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1798.09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BLIND CHANNEL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1021480&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2016&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50.42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-125.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.1556&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.2007&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.77689&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.09467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2518.68&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Looking at the DataFrame above, we see that there are at least 3 variables that we can use to group our dataset. For example, we can group our data by province (Prov), by year of beginning of recording or year of end of recording.&lt;/p&gt;

&lt;p&gt;We will use the Pandas groupby module to group our data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.unique()&lt;/b&gt; method :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Returns the unique values of a column.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe[&amp;quot;Prov&amp;quot;].unique() 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;array([&#39;BC&#39;, &#39;YT&#39;, &#39;N   YT&#39;, &#39;NT&#39;, &#39;NU&#39;, &#39;AB&#39;, &#39;SK&#39;, &#39;MB&#39;, &#39;ON&#39;, &#39;QC&#39;,
       &#39;NB&#39;, &#39;NS&#39;, &#39;PE&#39;, &#39;NL&#39;], dtype=object)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;split-data-into-groups&#34;&gt;Split Data into Groups:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.groupby(&#39;Prov&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000000008D35860&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To view groups:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.groupby(&#39;Prov&#39;).groups
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;lsquo;AB&amp;rsquo;: Int64Index([ 96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
             109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
             122, 123, 124, 125, 126, 127, 128, 129, 130],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;BC&amp;rsquo;: Int64Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
             17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
             34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
             50],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;MB&amp;rsquo;: Int64Index([156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
             169, 170, 171, 172, 173, 174, 175],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;N   YT&amp;rsquo;: Int64Index([52], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NB&amp;rsquo;: Int64Index([254, 255, 256, 257, 258, 259, 260, 261], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NL&amp;rsquo;: Int64Index([275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287,
             288],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NS&amp;rsquo;: Int64Index([262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NT&amp;rsquo;: Int64Index([61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;NU&amp;rsquo;: Int64Index([74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
             91, 92, 93, 94, 95],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;ON&amp;rsquo;: Int64Index([176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
             189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
             202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
             215],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;PE&amp;rsquo;: Int64Index([274], dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;QC&amp;rsquo;: Int64Index([216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
             229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
             242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;SK&amp;rsquo;: Int64Index([131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
             144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 &amp;lsquo;YT&amp;rsquo;: Int64Index([51, 53, 54, 55, 56, 57, 58, 59, 60], dtype=&amp;lsquo;int64&amp;rsquo;)}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Group by with multiple columns:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.groupby([&#39;Prov&#39;,&#39;année fin.&#39;]).groups
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{(&amp;lsquo;AB&amp;rsquo;, 2011): Int64Index([116], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;AB&amp;rsquo;, 2013): Int64Index([101], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;AB&amp;rsquo;, 2016): Int64Index([100, 130], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;AB&amp;rsquo;,
  2017): Int64Index([ 96,  97,  98,  99, 102, 103, 104, 105, 106, 107, 108, 109, 110,
             111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
             125, 126, 127, 128, 129],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2006): Int64Index([3], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2013): Int64Index([20], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2014): Int64Index([21, 25], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2015): Int64Index([2, 8, 11, 16], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;, 2016): Int64Index([4, 6, 41], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;BC&amp;rsquo;,
  2017): Int64Index([ 0,  1,  5,  7,  9, 10, 12, 13, 14, 15, 17, 18, 19, 22, 23, 24, 26,
             27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44,
             45, 46, 47, 48, 49, 50],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;MB&amp;rsquo;, 2016): Int64Index([156], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;MB&amp;rsquo;,
  2017): Int64Index([157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
             170, 171, 172, 173, 174, 175],
            dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;N   YT&amp;rsquo;, 2017): Int64Index([52], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;NB&amp;rsquo;,
  2017): Int64Index([254, 255, 256, 257, 258, 259, 260, 261], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;NL&amp;rsquo;, 2011): Int64Index([282], dtype=&amp;lsquo;int64&amp;rsquo;),
 (&amp;lsquo;NL&amp;rsquo;, 2015): Int64Index([276], dtype=&amp;lsquo;int64&amp;rsquo;)}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;iterating-through-groups&#34;&gt;Iterating through Groups:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped = dataframe.groupby(&#39;Prov&#39;)

for name,group in grouped:
   print(name)
   print(group)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;AB
     Unnamed: 0 Prov   Nom de station    stnid  année déb.  mois déb.  \
96           96   AB        ATHABASCA  3060L20        1918          6   
97           97   AB            BANFF  3050519        1887         11   
98           98   AB      BEAVERLODGE  3070600        1913          4   
99           99   AB          CALGARY  3031092        1885          1   


     année fin.  mois fin.  lat (deg)  long (deg)  élév (m) stns jointes  \
96         2017         12      54.82     -113.53       626            Y   
97         2017         12      51.20     -115.55      1397            Y   
98         2017         12      55.20     -119.40       745            Y   
99         2017         12      51.12     -114.02      1084            Y   
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;select-a-group&#34;&gt;Select a group:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;.get_group()&lt;/b&gt; method:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can select a single group.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped.get_group(&#39;QC&#39;).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;AMOS&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;709CEE9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-78.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;305&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;217&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BAGOTVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7060400&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1880&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.33&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;159&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.28139&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.2973&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.83359&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8117&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1528.41&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;218&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;218&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BEAUCEVILLE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7027283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-70.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.5515&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.0783&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.37634&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.6283&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1509.36&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;219&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;219&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;BROME&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7020840&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1890&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2014&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-72.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;206&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.1409&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.1767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.294151&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1676.23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;220&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;220&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CAUSAPSCAL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;7051200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1913&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;48.37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-67.23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;168&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;aggregations&#34;&gt;Aggregations&lt;/h4&gt;

&lt;p&gt;An aggregated function returns a single aggregated value for each group. Once the group by object is created, several aggregation operations can be performed on the grouped data.&lt;/p&gt;

&lt;p&gt;An obvious one is aggregation via the aggregate or equivalent agg method −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe = pd.read_csv(&amp;quot;./DATA/Climato_Stations_ECCC_1981_2010_YEAR.csv&amp;quot;, encoding=&#39;latin-1&#39;)
grouped = dataframe.groupby(&#39;Prov&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped[&#39;Tmin&#39;].agg(np.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Prov
AB        -3.050928
BC         1.578024
MB        -4.493900
N   YT          NaN
NB         0.341750
NL        -1.324334
NS         2.542629
NT        -8.518655
NU       -16.522658
ON         0.031970
PE         1.986827
QC        -1.992695
SK        -3.208984
YT        -8.995421
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;applying-multiple-aggregation-functions-at-once&#34;&gt;Applying Multiple Aggregation Functions at Once&lt;/h4&gt;

&lt;p&gt;With grouped Series, you can also pass a list or dict of functions to do aggregation with, and generate DataFrame as output −&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped[&#39;Tmin&#39;].agg([np.min, np.mean, np.max, np.std])
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;std&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;AB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.54421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.05093&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1559&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.40133&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.06858&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.57802&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.01629&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.89638&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.0943&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.4939&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.98027&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.61835&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;N   YT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.491043&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.34175&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.840796&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.598429&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.02478&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.32433&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.81275&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42585&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.21413&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.54263&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.75946&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.982653&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.4518&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.51865&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.68323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.16937&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;NU&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-21.9351&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-16.5227&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.2332&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.0491&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ON&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.48484&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0319696&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.91872&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.64788&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;PE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.98683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.98683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.98683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;QC&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.76805&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.99269&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.62212&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.70668&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SK&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.01656&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.20898&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.42885&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.03055&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;YT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.2177&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.99542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.77313&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.72858&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;transformations&#34;&gt;Transformations&lt;/h4&gt;

&lt;p&gt;Transformation on a group or a column returns an object that is indexed the same size of that is being grouped. Thus, the transform should return a result that is the same size as that of a group chunk.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;grouped = dataframe.groupby(&#39;Prov&#39;)
and_stand = lambda x: (x - x.mean()) / x.std()
grouped[&#39;Tmin&#39;].transform(and_stand).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;0         NaN
1   -1.293133
2         NaN
3    0.626082
4    1.334280
Name: Tmin, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;filtration&#34;&gt;Filtration&lt;/h4&gt;

&lt;p&gt;Filtration filters the data on a defined criteria and returns the subset of data. The filter() function is used to filter the data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.groupby(&#39;Prov&#39;).filter(lambda x: len(x) == 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Unnamed: 0&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Prov&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Nom de station&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;stnid&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois déb.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;année fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mois fin.&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;lat (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;long (deg)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;élév (m)&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;stns jointes&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmax90p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Tmin10p&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;DG0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N   YT&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HAINES JUNCTIO&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2100630&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1944&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;60.75&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-137.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;596&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;N&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;274&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;274&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;PE&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;CHARLOTTETOWN&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8300301&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1872&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2017&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;46.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-63.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;49&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.0063&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.7683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.98683&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.0367&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1912.16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In the above filter condition, we are asking to return the Provinces which have only one station.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-2-7-save-a-dataframe&#34;&gt;7.2.7  Save a DataFrame:&lt;/h3&gt;

&lt;p&gt;For writing a DataFrame, use the &lt;b&gt; .to_csv &lt;/b&gt; or &lt;b&gt; _table &lt;/b&gt; functions with similar options as read_csv () seen previously.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe.to_csv(&amp;quot;./DATA/My_new_DataFrame.csv&amp;quot;, index = False, header = True, sep = &#39;,&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-3-date-functionality&#34;&gt;7.3 Date Functionality:&lt;/h3&gt;

&lt;p&gt;Using the &lt;b&gt;date.range()&lt;/b&gt; function by specifying the periods and the frequency, we can create the date series. By default, the frequency of range is Days.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.date_range(&#39;1/1/2011&#39;, periods=5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-01&#39;, &#39;2011-01-02&#39;, &#39;2011-01-03&#39;, &#39;2011-01-04&#39;,
               &#39;2011-01-05&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can change the date frequency:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.date_range(&#39;1/1/2011&#39;, periods=5,freq=&#39;M&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-31&#39;, &#39;2011-02-28&#39;, &#39;2011-03-31&#39;, &#39;2011-04-30&#39;,
               &#39;2011-05-31&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;M&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;bdate_range()&lt;/b&gt; stands for business date ranges. Unlike date_range(), it excludes Saturday and Sunday.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.bdate_range(&#39;1/1/2011&#39;, periods=10)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-03&#39;, &#39;2011-01-04&#39;, &#39;2011-01-05&#39;, &#39;2011-01-06&#39;,
               &#39;2011-01-07&#39;, &#39;2011-01-10&#39;, &#39;2011-01-11&#39;, &#39;2011-01-12&#39;,
               &#39;2011-01-13&#39;, &#39;2011-01-14&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;B&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Convenience functions like date_range and bdate_range utilize a variety of frequency aliases. The default frequency for date_range is a calendar day while the default for bdate_range is a business day.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;start = pd.datetime(2011, 1, 1)
end = pd.datetime(2011, 1, 5)
pd.date_range(start, end)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2011-01-01&#39;, &#39;2011-01-02&#39;, &#39;2011-01-03&#39;, &#39;2011-01-04&#39;,
               &#39;2011-01-05&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-4-format-dates-with-the-datetime-module&#34;&gt;7.4 Format dates with the Datetime module:&lt;/h3&gt;

&lt;p&gt;Python provides many features to work with dates and time.&lt;/p&gt;

&lt;p&gt;Datetime is a module that allows you to manipulate dates and times as objects. The idea is simple: you manipulate the object to do all your calculations, and when you need to display it, you format the object into a string.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/library/datetime.html&#34; target=&#34;_blank&#34;&gt;https://docs.python.org/2/library/datetime.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can artificially create a datetime object with the following parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    datetime (year, month, day, hour, minute, second, microsecond, timezone)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The parameters &amp;ldquo;year&amp;rdquo;, &amp;ldquo;month&amp;rdquo; and &amp;ldquo;day&amp;rdquo; are mandatory.&lt;/p&gt;

&lt;p&gt;The datetime module provides the following classes:&lt;/p&gt;

&lt;p&gt;| Class | Description |
|&amp;ndash;|&amp;ndash;|
| &lt;b&gt;datetime.date&lt;/b&gt; | A date instance represents a date |
| &lt;b&gt;datetime.datetime&lt;/b&gt; |  An instance of datetime represents a date and time according to the Gregorian calendar |
| &lt;b&gt;datetime.time&lt;/b&gt; |  An instance of time represents the time, except for the date |
| &lt;b&gt;datetime.timedelta&lt;/b&gt; |The timedelta class is used to keep the differences between two temporal or dated objects |
| &lt;b&gt;datetime.tzinfo&lt;/b&gt; |The tzinfo class is used to implement time zone support for time and datetime objects |&lt;/p&gt;

&lt;p&gt;We will see some examples of using DateTime and its classe.&lt;/p&gt;

&lt;h4 id=&#34;1-the-b-datetime-b-class-of-the-datetime-module&#34;&gt;1-  The &lt;b&gt; datetime &lt;/b&gt; class of the datetime module&lt;/h4&gt;

&lt;p&gt;&lt;b&gt;-a Creating a datetime object&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
datetime(2019, 3, 1)       # instance of datetime
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 0, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now = datetime.now()
now
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 10, 24, 14, 8, 0, 512783)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now = now.today()
now
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 10, 24, 14, 8, 0, 531785)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now = datetime.utcnow()
now
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 10, 24, 18, 8, 0, 546785)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When opening a csv or text file, we have information about the date and time of the measurements but in the form of strings: &amp;ldquo;2018-11-01 15:20&amp;rdquo; or &amp;ldquo;2017/12/1 16:35:22 &amp;ldquo;&amp;hellip;&lt;/p&gt;

&lt;p&gt;It is possible during the reading to convert these strings into a datetime object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;2018/11/01 15:20&amp;quot;, &amp;quot;%Y/%m/%d %H:%M&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2018, 11, 1, 15, 20)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;2017/12/1 16:35:22&amp;quot;, &amp;quot;%Y/%m/%d %H:%M:%S&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2017, 12, 1, 16, 35, 22)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;01/11/19 10-35:22&amp;quot;, &amp;quot;%d/%m/%y %H-%M:%S&amp;quot;)
dt

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 11, 1, 10, 35, 22)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dt = datetime.strptime(&amp;quot;1Mar 2019 à 09h35&amp;quot;, &amp;quot;%d%b %Y à %Hh%M&amp;quot;)
dt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 3, 1, 9, 35)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;b&gt;b- Manipulate datetime object&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;From an object or instance of datetime, you can retrieve the time and date.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#now.year
#now.month
#now.day
#maintenant.hour
now.minute
#now.second
#now.microsecond
#now
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can change datetime instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now.replace(year=1995) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(1995, 10, 24, 18, 8, 0, 546785)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now.replace(month=1)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2019, 1, 24, 18, 8, 0, 546785)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then convert datetime instance to string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = datetime.now(); print(d)
d
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2019-10-24 14:08:00.720795





datetime.datetime(2019, 10, 24, 14, 8, 0, 720795)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.strftime(&amp;quot;%H:%M&amp;quot;), d.strftime(&amp;quot;%Hh%Mmin&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(&#39;14:08&#39;, &#39;14h08min&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d.strftime(&amp;quot;%Y-%m %H:%M&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;2019-10 14:08&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;The day today is {0:%d} {0:%B} and it s  {0:%Hh%Mmin} &#39;.format(d, &amp;quot;day&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;time&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&#39;The day today is 24 October and it s  14h08min &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;date&lt;/b&gt; et &lt;b&gt;time&lt;/b&gt; class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two classes can be used to create a datetime instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime, date, time
d = date(2005, 7, 14)
t = time(12, 30)
t
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.time(12, 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.combine(d, t)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.datetime(2005, 7, 14, 12, 30)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;now = datetime.utcnow()
now.date()
now.time()

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime.time(18, 8, 0, 855803)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;b&gt; timedelta &lt;/b&gt; class of the datetime module&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import timedelta
delta = timedelta(days=3, seconds=100)    # we create our own timedelta
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;datetime.datetime(2019, 10, 24, 14, 8, 0, 899806)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now() + delta
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;datetime.datetime(2019, 10, 27, 14, 9, 40, 935808)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;datetime.now() + timedelta(days=2, hours=4, minutes=3, seconds=12)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;datetime.datetime(2019, 10, 26, 18, 11, 12, 966809)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;time_range = datetime(2010, 12, 31) - datetime(1981, 12, 31)
time_range
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;datetime.timedelta(days=10592)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Example1: Calculate the year of birth from a given age&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime
 
old = 25
month = 10
 
actual_year = datetime.today().year
actual_month = datetime.today().month
 
result = actual_year - old - (1 if month &amp;gt; actual_month else 0)
print(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1994&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Example2: Calculate the year of birth from a given age&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can  generate dates for time series with an arbitrary time step:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import timedelta
dt = timedelta(days = 5, hours = 6, minutes = 25)
d0 = datetime(2000, 2, 21)
[str(d0 + i * dt) for i in range(10)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;2000-02-21 00:00:00&#39;,
 &#39;2000-02-26 06:25:00&#39;,
 &#39;2000-03-02 12:50:00&#39;,
 &#39;2000-03-07 19:15:00&#39;,
 &#39;2000-03-13 01:40:00&#39;,
 &#39;2000-03-18 08:05:00&#39;,
 &#39;2000-03-23 14:30:00&#39;,
 &#39;2000-03-28 20:55:00&#39;,
 &#39;2000-04-03 03:20:00&#39;,
 &#39;2000-04-08 09:45:00&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>8 Matplotlib library</title>
      <link>/courses/tutorial_python/8-matplotlib_library/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/8-matplotlib_library/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/matplotlib.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The Matplotlib library is one of the most used libraries for plotting data in Python.&lt;/p&gt;

&lt;p&gt;Many types of graphics can be developed with this library:
&lt;a href=&#34;https://matplotlib.org/gallery/index.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/gallery/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To illustrate some features of the Python matplotlib.pyplot module (which provides a plotting system similar to that of MATLAB), we will use a database from the UQAM station.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
import numpy as np
import warnings; warnings.filterwarnings(action=&#39;ignore&#39;)

dataframe_UQAM = pd.read_csv(&#39;./DATA/UQAM_DATA_STATION_2018.csv&#39;)
dataframe_UQAM[&#39;Date&#39;]=pd.to_datetime(dataframe_UQAM[&#39;Date&#39;])
dataframe_UQAM = dataframe_UQAM.set_index(&amp;quot;Date&amp;quot;, drop=True)
dataframe_UQAM.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature minimale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature maximale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature moyenne&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation totale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dir_wind&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mod_wind&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;244&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;163&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;255&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;148&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2014-02-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;261&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;8-1-introduction-to-matplotlib&#34;&gt;8.1 Introduction to Matplotlib&lt;/h2&gt;

&lt;h3 id=&#34;conda-install-matplotlib&#34;&gt;conda install matplotlib&lt;/h3&gt;

&lt;p&gt;By running this special iPython command, we will be displaying plots inline:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot() # you create an empty graph or instance and then add layers.
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_6_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-2-add-data-to-our-charts&#34;&gt;8.2 Add data to our charts&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_UQAM[&#39;2015&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Date&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature minimale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature maximale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature moyenne&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation totale&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dir_wind&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mod_wind&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;254&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;231&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;282&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;2015-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;178&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_9_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], marker=&#39;x&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_10_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;marker&lt;/b&gt; option :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://matplotlib.org/api/markers_api.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/api/markers_api.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;linestyle&lt;/b&gt; option: to delete or not the lines&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;year_to_plot = dataframe_UQAM[&#39;2015&#39;]
plt.plot(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], marker=&#39;x&#39;, linestyle=&amp;quot;--&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_12_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;scatter &lt;/b&gt; fonction: function allows you to create scatter plot&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;.rcParams&lt;/b&gt; method is used to enlarge the graphic window&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]  
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_14_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to use the scatter color option, python wants an input list and not a dictionary&lt;/li&gt;

&lt;li&gt;&lt;p&gt;color option : c=list()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], c=list(year_to_plot[&#39;Temperature moyenne&#39;]))
plt.xlabel(&amp;quot;Temps&amp;quot;)
plt.ylabel(&amp;quot;Température&amp;quot;)
plt.title(&amp;quot;Temperature&amp;quot;, y=1.05)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_16_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We used default scatter color ()&lt;/li&gt;
&lt;li&gt;with the &lt;b&gt; cmap &lt;/b&gt; option, we can choose our color panel: &lt;a href=&#34;https://matplotlib.org/examples/color/colormaps_reference.html&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/examples/color/colormaps_reference.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;we will for example choose the color palette &amp;ldquo;seismic&amp;rdquo; via the option &lt;b&gt; cmap &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;to change the shape and size of the points: use the &lt;b&gt; marker &lt;/b&gt; and &lt;b&gt; s &lt;/b&gt; options&lt;/li&gt;
&lt;li&gt;to save a graph: pyplot function: &lt;b&gt; savefig () &lt;/b&gt;&lt;/li&gt;
&lt;li&gt;To add a color bar: &lt;b&gt; colorbar () &lt;/b&gt; function&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To rotate the labels in x: function &lt;b&gt; xticks () &lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.rcParams[&amp;quot;figure.figsize&amp;quot;]=[16,9]
plt.scatter(year_to_plot.index,year_to_plot[&#39;Temperature moyenne&#39;], c=list(year_to_plot[&#39;Temperature moyenne&#39;]),
        cmap=&amp;quot;seismic&amp;quot;,
        marker=&amp;quot;D&amp;quot;, 
        s=100)
plt.xlabel(&amp;quot;Time&amp;quot;)
plt.ylabel(&amp;quot;Temperature&amp;quot;)
plt.title(&amp;quot;Temperature&amp;quot;, y=1.05)
plt.colorbar()
plt.xticks(rotation=45)
plt.show()
plt.savefig(&amp;quot;figures/my_graph.png&amp;quot;, bbox_inches=&amp;quot;tight&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_18_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Figure size 1152x648 with 0 Axes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;8-3-matplotlib-classes&#34;&gt;8.3 Matplotlib classes&lt;/h2&gt;

&lt;p&gt;When creating a graph, matplotlib:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stores a container for all the graphics&lt;/li&gt;
&lt;li&gt;stores a container so that the graphic is positioned on a grid&lt;/li&gt;
&lt;li&gt;stores visual symbols on the graph&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can plot different things in the same figure using the subplot function. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()
ax1 = fig.add_subplot(2,2,1) # up and left 
ax2 = fig.add_subplot(2,2,2) # up and right 
ax3 = fig.add_subplot(2,2,3) # down and left 
ax4 = fig.add_subplot(2,2,4) # down and right
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_21_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a documentation on subplot:
&lt;a href=&#34;https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot&#34; target=&#34;_blank&#34;&gt;https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-4-add-some-data&#34;&gt;8.4 Add some data&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()
ax1 = fig.add_subplot(2,1,1) 
ax2 = fig.add_subplot(2,1,2)

ax1.plot(dataframe_UQAM[&#39;2017&#39;].index,dataframe_UQAM[&#39;2017&#39;][&#39;Temperature moyenne&#39;])
ax2.plot(dataframe_UQAM[&#39;2016&#39;].index,dataframe_UQAM[&#39;2016&#39;][&#39;Temperature moyenne&#39;])

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0xa516dd8&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_24_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-5-improvement-of-the-graph&#34;&gt;8.5 Improvement of the graph&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(15, 8))
colors = [&#39;green&#39;, &#39;blue&#39;, &#39;red&#39;]
for i in range(3):
    ax = fig.add_subplot(3,1,i+1)
    year = str(2014+i)
    label=year
    plt.plot(dataframe_UQAM[year].index,dataframe_UQAM[year][&#39;Temperature moyenne&#39;], c=colors[i], label = label)
    plt.legend(loc=&#39;upper left&#39;)
plt.show()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_26_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-6-example&#34;&gt;8.6 Example&lt;/h2&gt;

&lt;h3 id=&#34;objectives-to-draw-a-meteogram-of-the-uqam-station-for-the-day-of-14-12-2018&#34;&gt;Objectives: to draw a meteogram of the UQAM station for the day of 14/12/2018&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
dataframe_UQAM = pd.read_csv(&#39;./DATA/UQAM_DATA_STATION.csv&#39;)
print(dataframe_UQAM.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;          Time  Precipitation  pressure  humidex  Rosee  Temperature  Chill  \
0  18-12-09_09           0.14    1038.0     -8.0   -7.8         -5.1   -8.0   
1  18-12-09_10           0.00    1039.0     -7.0   -6.7         -3.9   -7.0   
2  18-12-09_11           0.00    1033.0     -5.0   -6.0         -2.7   -5.0   
3  18-12-09_12           0.00    1018.0     -2.0   -5.8         -0.2   -3.0   
4  18-12-09_13           0.00    1106.0     -2.0   -6.0          0.0   -5.0   

   Humidite  Dir_wind  Mod_wind  
0      81.0     208.0       6.0  
1      81.0     201.0       6.0  
2      78.0     184.0       5.0  
3      66.0     208.0       8.0  
4      64.0     268.0      18.0  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataframe_UQAM2 = pd.read_csv(&#39;./DATA/UQAM_DATA_STATION.csv&#39;, parse_dates=[&amp;quot;Time&amp;quot;],date_parser=lambda x: pd.to_datetime(x, format=&amp;quot;%y-%m-%d_%H&amp;quot;))
dataframe_UQAM2.head()

&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Time&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;pressure&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;humidex&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Rosee&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Chill&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Humidite&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Dir_wind&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Mod_wind&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 09:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1038&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;81&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;208&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 10:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1039&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;81&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;201&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 11:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1033&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;78&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;184&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 12:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1018&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;66&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;208&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2018-12-09 13:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;268&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We just want data for 14/12/2018
start_date = &#39;2018-12-14&#39;
end_date = &#39;2018-12-15&#39;
df= dataframe_UQAM2
mask = (df[&#39;Time&#39;] &amp;gt; start_date) &amp;amp; (df[&#39;Time&#39;] &amp;lt;= end_date)


dataframe_jour = dataframe_UQAM2.loc[mask]
print(dataframe_jour.head())
print(len(dataframe_jour))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;                   Time  Precipitation  pressure  humidex  Rosee  Temperature  \
112 2018-12-14 01:00:00            0.0    1039.0    -10.0  -10.0         -6.3   
113 2018-12-14 02:00:00            0.0    1039.0     -9.0   -9.0         -5.8   
114 2018-12-14 03:00:00            0.0    1036.0     -9.0   -8.5         -5.4   
115 2018-12-14 04:00:00            0.0    1036.0     -9.0   -8.4         -5.3   
116 2018-12-14 05:00:00            0.0    1037.0     -8.0   -7.5         -4.8   

     Chill  Humidite  Dir_wind  Mod_wind  
112   -8.0      75.0     208.0       4.0  
113   -8.0      78.0     117.0       4.0  
114   -7.0      79.0      89.0       4.0  
115   -7.0      79.0      79.0       3.0  
116   -7.0      81.0      92.0       4.0  
24
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from matplotlib.font_manager import FontProperties
import matplotlib.dates as mdates
from datetime import datetime
from datetime import timedelta as td


daylabels = []
i = 0 
for index, row in dataframe_jour.iterrows():
    daylabels.append(dataframe_jour.iloc[i][0].replace(minute=0, second=0, microsecond=0).strftime(&#39;%Hh&#39;))
    i += 1
print(daylabels)

start_date = &#39;2018-12-14&#39;
end_date = &#39;2018-12-15&#39;
fig = plt.figure(figsize=(20, 8))
fontP = FontProperties()
fontP.set_size(&#39;xx-small&#39;)
t = np.arange(0, 24, 1)
##### on trace les températures
ax1 = plt.subplot(411)
ax1.grid(True)
plt.plot(t, dataframe_jour[&#39;Temperature&#39;], &#39;r-&#39;, label=&#39;Temperature de l\&#39;air&#39;, linewidth=2)
plt.plot(t, dataframe_jour[&#39;Rosee&#39;], &#39;r--&#39;,label=&#39;Temperature du point de rosee&#39;, linewidth=2)
plt.plot(t, dataframe_jour[&#39;Chill&#39;], &#39;g--&#39;,label=&#39;Wind Chill&#39;, linewidth=2)
plt.legend(loc=&#39;upper left&#39;, ncol=1, bbox_to_anchor=(0, 1, 1, 0),fontsize =15)
plt.ylabel(&#39;Température ($^\circ$C)&#39;, {&#39;color&#39;: &#39;black&#39;, &#39;fontsize&#39;: 15})

plt.setp(ax1.get_xticklabels(), fontsize=15)
plt.title(&#39;Meteogram station UQAM:&#39;+ start_date + &#39; / &#39; + end_date, weight=&#39;bold&#39;).set_fontsize(&#39;20&#39;)
plt.setp(ax1.get_xticklabels(), visible=False)

##########  TRACE DES ACCUMULATIONS PRECIPITATION  ##########  
# share x only
ax2 = plt.subplot(412, sharex=ax1)
ax2.grid(True)
t = np.arange(0, 24, 1)
width=1
ax2.bar(t,dataframe_jour[&#39;Precipitation&#39;].values,width,color=&#39;b&#39;, label=&#39;Pluie&#39;, linewidth=2)
plt.setp(ax2.get_xticklabels(), visible=False)
plt.ylim(0,  np.round(dataframe_jour[&#39;Precipitation&#39;].max() ) +1)
plt.ylabel(&#39;Accumulation (mm)&#39;, {&#39;color&#39;: &#39;black&#39;, &#39;fontsize&#39;: 15})
plt.legend(loc=&#39;upper left&#39;, ncol=1, bbox_to_anchor=(0, 0, 1, 1), fontsize =15)

# share x only
##### on trace l humidite
ax2 = plt.subplot(413, sharex=ax1)
ax2.grid(True)
plt.plot(t, dataframe_jour[&#39;Humidite&#39;], &#39;b-&#39;, linewidth=2)
plt.setp(ax2.get_xticklabels(), visible=False)
plt.ylabel(&#39;Humidite relative (%)&#39;, {&#39;color&#39;: &#39;black&#39;, &#39;fontsize&#39;: 15})
plt.legend(loc=&#39;upper left&#39;, ncol=1, bbox_to_anchor=(0, 0, 1, 1), fontsize =15)

##### on trace la pression
ax3 = plt.subplot(414, sharex=ax1)
plt.plot(t, dataframe_jour[&#39;pressure&#39;], &#39;g-&#39;, linewidth=2)
plt.xlim(0.01, 24)
plt.ylim(np.round(min(dataframe_jour[&#39;pressure&#39;])) - 2, np.round(max(dataframe_jour[&#39;pressure&#39;])) + 2)
plt.ylabel(&#39;Pression (hPa)&#39;, {&#39;color&#39;: &#39;black&#39;, &#39;fontsize&#39;: 15})
plt.legend(loc=&#39;upper left&#39;, ncol=1, bbox_to_anchor=(0, 0, 1, 1), fontsize =15)
ax3.grid(True)

for label in ax3.get_yticklabels():
    label.set_color(&amp;quot;black&amp;quot;)

ax3.set(xticks=np.arange(0,len(daylabels),1), xticklabels=daylabels) #Same as plt.xticks
spacing = 1
visible = ax3.xaxis.get_ticklabels()[::spacing]
for label in ax3.xaxis.get_ticklabels():
    if label not in visible:
        label.set_visible(False)


fig.autofmt_xdate()
fig.set_size_inches(18.5, 10.5)
fileout=&#39;figures/Meteogram_UQAM.png&#39;
plt.savefig(fileout)
fig.autofmt_xdate()
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[&#39;01h&#39;, &#39;02h&#39;, &#39;03h&#39;, &#39;04h&#39;, &#39;05h&#39;, &#39;06h&#39;, &#39;07h&#39;, &#39;08h&#39;, &#39;09h&#39;, &#39;10h&#39;, &#39;11h&#39;, &#39;12h&#39;, &#39;13h&#39;, &#39;14h&#39;, &#39;15h&#39;, &#39;16h&#39;, &#39;17h&#39;, &#39;18h&#39;, &#39;19h&#39;, &#39;20h&#39;, &#39;21h&#39;, &#39;22h&#39;, &#39;23h&#39;, &#39;00h&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/output_31_1.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Project 1 ECCC temperature data</title>
      <link>/courses/tutorial_python/project1-eccc_temperature/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/project1-eccc_temperature/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-eccc-temperature-data&#34;&gt;1: ECCC temperature data&lt;/h3&gt;

&lt;p&gt;In previous sections, we presented how to use the Pandas library which allowed us to process and manipulate data sets. Combining this with Python&amp;rsquo;s Datetime and Matplotlib libraries, we were able to quickly visualize our data.&lt;/p&gt;

&lt;p&gt;We will continue to discover the functionality of these libraries in a practical case by analyzing the daily temperature data recorded by one of the Environment and Climate Change Canada stations located in Montreal / McTavish between the period 1948 and 2017 (file named &amp;lsquo;MONTREAL_tasmoy_1948_2017.txt&amp;rsquo; in ./DATA directory)&lt;/p&gt;

&lt;p&gt;To complete and enrich our analysis, a new Python library will be presented: &lt;b&gt; Seaborn &lt;/b&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Seaborn library is based on matplotlib.&lt;/li&gt;
&lt;li&gt;it allows to draw more complex graphs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&#34; target=&#34;_blank&#34;&gt;https://jakevdp.github.io/PythonDataScienceHandbook/04.14-visualization-with-seaborn.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This link presents a gallery of chart types to be realized with Seaborn:
&lt;a href=&#34;https://seaborn.pydata.org/examples/index.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/examples/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-opening-and-reading-our-time-series&#34;&gt;1- Opening and reading our time series&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
import datetime
from datetime import date
import numpy as np 
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)

df = pd.DataFrame()

# We open ascii file and store information in a new DataFrame
with open(&#39;./DATA/MONTREAL_tasmoy_1948_2017.txt&#39;, &#39;r&#39;) as file:
     rows = file.read()
data_EC_Montreal = [float(row) for row in rows.split()]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have created a 1D field but we have no temporal information in our file.
Knowing that our registration covers the period 1948 - 2017, we will format our dates with the &lt;b&gt; datetime &lt;/b&gt; module of Python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# We know that the time series starts on January 1, 1948 and ends on December 31, 2017 inclusively
# We create a Datetime object instance to complete our DataFrame
start = date(1948, 1, 1)
end = date(2017, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)

# We will use DateTime object as DataFrame index
df[&#39;datetime&#39;] = rng
df.index = df[&#39;datetime&#39;] 

df[&#39;Temperature Montreal&#39;] = data_EC_Montreal
df.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Temperature Montreal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dir(df) # the dir () function allows to list the functions that are applicable to our DataFrame object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We assigned our time series in a Pandas DataFrame and then formatted the date as a Datetime object.&lt;/p&gt;

&lt;p&gt;It is now easy to manipulate the dataset and apply some simple functions.&lt;/p&gt;

&lt;h3 id=&#34;2-calculation-of-indices-on-the-temperature-data&#34;&gt;2- Calculation of indices on the temperature data&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We will develop and apply a function to calculate the quantiles of our distribution&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;By resampling our series with the &lt;b&gt; .resample () &lt;/b&gt; method of Pandas, we will see how to apply native functions of numpy and apply our own function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Creating our index that calculates the quantile of the distribution
# We use the numpy .percentile () function
def percentile(n):
def percentile_(x):
    return np.nanpercentile(x, n)
percentile_.__name__ = &#39;percentile_%s&#39; % n
return percentile_         
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt; .resample () &lt;/b&gt; and &lt;b&gt; .agg () &lt;/b&gt; methods of Pandas&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;b&gt; .resample () &lt;/b&gt; method is very useful for frequency conversion and time series resampling. The object (here DataFrame) must have a data / time index (DatetimeIndex) in order to be used.
Several resampling frequencies are available (time, week, month, season, year &amp;hellip;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.resample.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.resample.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;b&gt; .agg () &lt;/b&gt; method is used for aggregation of data according to a list of functions to be applied to each column, resulting in an aggregated result with a hierarchical index.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.agg.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.agg.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our example, we will resample our data set by month and calculate for each month the average, the minimum, the maximum and the 90th and 95th quantiles.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal = df.resample(&#39;M&#39;).agg([np.mean, np.min, np.max, percentile(90), percentile(95)])
resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# simple step to remove the row &#39;Temperature Montreal&#39; 
resamp_Montreal = resamp_Montreal.loc[:,&#39;Temperature Montreal&#39;] 
resamp_Montreal.head() 
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;3-some-examples-of-graphics-with-the-seaborn-library&#34;&gt;3- Some examples of graphics with the Seaborn library&lt;/h3&gt;

&lt;p&gt;Now that we have some statistics on our DataFrame, we will use Python&amp;rsquo;s Seaborn library to visualize them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/img/seaborn.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Example: Heatmap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.heatmap.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.heatmap.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, we would like to observe the variation of the average temperature for all the months of the year and all the years. We are going to define two new columns in our DataFrame in which will be assigned only the years and the months respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal[&#39;year&#39;]  = resamp_Montreal.index.year
resamp_Montreal[&#39;MonthNo&#39;] = resamp_Montreal.index.month
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Before we plot our heatmap, we need to reorganize our dataframe.
- The &lt;b&gt; .pivot_table () &lt;/b&gt; method: this method allows you to cross tables dynamically.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would like to visualize only the average monthly temperatures, so work with the &amp;lsquo;mean&amp;rsquo; column, put the year in Index and have one month per column. The &lt;b&gt; .pivot_table () &lt;/b&gt; method allows us to do this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Montreal_pivot = resamp_Montreal.pivot_table(values=&#39;mean&#39;,index=&#39;year&#39;,columns=[&#39;MonthNo&#39;])
Montreal_pivot.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;3&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;4&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;5&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;6&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;7&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;8&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;9&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;10&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;11&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;12&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.7467&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.4903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.1065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.98333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.52258&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1949&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.77419&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.69286&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.19677&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.51667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.5129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.56&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.871&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.5452&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.62&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.0258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.193333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.21935&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1950&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.34839&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.79643&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.89355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.71&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.1161&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.9567&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.3258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.1129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.6167&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.95667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.83548&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.35484&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-6.48571&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.490323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.29667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.4097&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.3129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.6677&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15.1333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.371&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.3129&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;right&#34;&gt;1952&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.80323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.27241&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.987097&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.99667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.4065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23.0806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;20.7323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.03&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.67419&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.65667&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.18387&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We then apply &lt;b&gt;.heatmap()&lt;/b&gt; function on our DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns 
import matplotlib.pyplot as plt 
ax = plt.axes()
sns.heatmap(Montreal_pivot)
figure = ax.get_figure()    
figure.set_size_inches(15, 10) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_20_0.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can improve our display.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.heatmap(Montreal_pivot, cmap=&#39;RdYlGn_r&#39;, linewidths=0.5, annot=True , ax = ax,vmin=-30, vmax=30,center=0, fmt=&#39;.1f&#39;,yticklabels=True, cbar_kws={&#39;label&#39;: &#39;Celcius&#39;})
ax.set_title(&#39;Mean temperature&#39;, weight=&#39;bold&#39;, fontsize=&amp;quot;x-large&amp;quot;)
figure = ax.get_figure()    
figure.set_size_inches(22, 15) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_20_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Other examples: Boxplot,  violin plot, line plot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.boxplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.boxplot.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.violinplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.violinplot.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.lineplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.lineplot.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first, we create a new variable containing the months but in string of characters. For this we apply the &lt;b&gt; .strftime () &lt;/b&gt; method of datetime.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal[&#39;month&#39;] = resamp_Montreal.index.strftime(&amp;quot;%b&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Boxplot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;Set1&amp;quot;)  
figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_26_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Violin plot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.violinplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;Set1&amp;quot;)  
figure = ax.get_figure()    
figure.set_size_inches(12, 8)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_28_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Line plot:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.lineplot(x=resamp_Montreal.index.year, y=&amp;quot;mean&amp;quot;,
         hue=&amp;quot;month&amp;quot;,
         data=resamp_Montreal,
         palette=&amp;quot;tab10&amp;quot;)
figure = ax.get_figure()    
figure.set_size_inches(12, 8)
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_30_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.catplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;percentile_90&amp;quot;, data=resamp_Montreal, kind=&amp;quot;swarm&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_31_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We can combine several Seaborn charts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
ax1 = plt.subplot2grid((2, 2), (0, 0), colspan=2)
sns.lineplot(x=resamp_Montreal.index.year, y=&amp;quot;mean&amp;quot;, hue=&amp;quot;month&amp;quot;, data=resamp_Montreal, palette=&amp;quot;tab10&amp;quot;)
ax2 = plt.subplot2grid((2, 2), (1, 0), colspan=1)
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;tab10&amp;quot;) 
ax3 = plt.subplot2grid((2, 2), (1, 1), colspan=1)
sns.violinplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;mean&amp;quot;, data=resamp_Montreal, palette=&amp;quot;tab10&amp;quot;) 
figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_33_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;4-fonction-groupby&#34;&gt;4- Fonction groupby&lt;/h3&gt;

&lt;p&gt;We previously see  &lt;b&gt;.groupby()&lt;/b&gt;  method from Pandas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.tutorialspoint.com/python_pandas/python_pandas_groupby.htm&#34; target=&#34;_blank&#34;&gt;https://www.tutorialspoint.com/python_pandas/python_pandas_groupby.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method is very useful using datetime objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.9903&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-02-29 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.58621&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.32&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.46129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.64&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-1.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.08&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.6645&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We want to group our dataframe by month  with  &lt;b&gt;.groupeby()&lt;/b&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal_grouped  = resamp_Montreal.groupby(&amp;quot;month&amp;quot;) 
resamp_Montreal_grouped.groups     # Pour voir les groupes
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;{&#39;Apr&#39;: DatetimeIndex([&#39;1948-04-30&#39;, &#39;1949-04-30&#39;, &#39;1950-04-30&#39;, &#39;1951-04-30&#39;,
                &#39;1952-04-30&#39;, &#39;1953-04-30&#39;, &#39;1954-04-30&#39;, &#39;1955-04-30&#39;,
                &#39;1956-04-30&#39;, &#39;1957-04-30&#39;, &#39;1958-04-30&#39;, &#39;1959-04-30&#39;,
                &#39;1960-04-30&#39;, &#39;1961-04-30&#39;, &#39;1962-04-30&#39;, &#39;1963-04-30&#39;,
                &#39;1964-04-30&#39;, &#39;1965-04-30&#39;, &#39;1966-04-30&#39;, &#39;1967-04-30&#39;,
                &#39;1968-04-30&#39;, &#39;1969-04-30&#39;, &#39;1970-04-30&#39;, &#39;1971-04-30&#39;,
                &#39;1972-04-30&#39;, &#39;1973-04-30&#39;, &#39;1974-04-30&#39;, &#39;1975-04-30&#39;,
                &#39;1976-04-30&#39;, &#39;1977-04-30&#39;, &#39;1978-04-30&#39;, &#39;1979-04-30&#39;,
                &#39;1980-04-30&#39;, &#39;1981-04-30&#39;, &#39;1982-04-30&#39;, &#39;1983-04-30&#39;,
                &#39;1984-04-30&#39;, &#39;1985-04-30&#39;, &#39;1986-04-30&#39;, &#39;1987-04-30&#39;,
                &#39;1988-04-30&#39;, &#39;1989-04-30&#39;, &#39;1990-04-30&#39;, &#39;1991-04-30&#39;,
                &#39;1992-04-30&#39;, &#39;1993-04-30&#39;, &#39;1994-04-30&#39;, &#39;1995-04-30&#39;,
                &#39;1996-04-30&#39;, &#39;1997-04-30&#39;, &#39;1998-04-30&#39;, &#39;1999-04-30&#39;,
                &#39;2000-04-30&#39;, &#39;2001-04-30&#39;, &#39;2002-04-30&#39;, &#39;2003-04-30&#39;,
                &#39;2004-04-30&#39;, &#39;2005-04-30&#39;, &#39;2006-04-30&#39;, &#39;2007-04-30&#39;,
                &#39;2008-04-30&#39;, &#39;2009-04-30&#39;, &#39;2010-04-30&#39;, &#39;2011-04-30&#39;,
                &#39;2012-04-30&#39;, &#39;2013-04-30&#39;, &#39;2014-04-30&#39;, &#39;2015-04-30&#39;,
                &#39;2016-04-30&#39;, &#39;2017-04-30&#39;],
               dtype=&#39;datetime64[ns]&#39;, name=&#39;datetime&#39;, freq=&#39;12M&#39;),
 &#39;Aug&#39;: DatetimeIndex([&#39;1948-08-31&#39;, &#39;1949-08-31&#39;, &#39;1950-08-31&#39;, &#39;1951-08-31&#39;,
                &#39;1952-08-31&#39;, &#39;1953-08-31&#39;, &#39;1954-08-31&#39;, &#39;1955-08-31&#39;,
                &#39;1956-08-31&#39;, &#39;1957-08-31&#39;, &#39;1958-08-31&#39;, &#39;1959-08-31&#39;,
                &#39;1960-08-31&#39;, &#39;1961-08-31&#39;, &#39;1962-08-31&#39;, &#39;1963-08-31&#39;,
                &#39;1964-08-31&#39;, &#39;1965-08-31&#39;, &#39;1966-08-31&#39;, &#39;1967-08-31&#39;,
                &#39;1968-08-31&#39;, &#39;1969-08-31&#39;, &#39;1970-08-31&#39;, &#39;1971-08-31&#39;,
                &#39;1972-08-31&#39;, &#39;1973-08-31&#39;, &#39;1974-08-31&#39;, &#39;1975-08-31&#39;,
                &#39;1976-08-31&#39;, &#39;1977-08-31&#39;, &#39;1978-08-31&#39;, &#39;1979-08-31&#39;,
                &#39;1980-08-31&#39;, &#39;1981-08-31&#39;, &#39;1982-08-31&#39;, &#39;1983-08-31&#39;,
                &#39;1984-08-31&#39;, &#39;1985-08-31&#39;, &#39;1986-08-31&#39;, &#39;1987-08-31&#39;,
                &#39;1988-08-31&#39;, &#39;1989-08-31&#39;, &#39;1990-08-31&#39;, &#39;1991-08-31&#39;,
                &#39;1992-08-31&#39;, &#39;1993-08-31&#39;, &#39;1994-08-31&#39;, &#39;1995-08-31&#39;,
                &#39;1996-08-31&#39;, &#39;1997-08-31&#39;, &#39;1998-08-31&#39;, &#39;1999-08-31&#39;,
                &#39;2000-08-31&#39;, &#39;2001-08-31&#39;, &#39;2002-08-31&#39;, &#39;2003-08-31&#39;,
                &#39;2004-08-31&#39;, &#39;2005-08-31&#39;, &#39;2006-08-31&#39;, &#39;2007-08-31&#39;,
                &#39;2008-08-31&#39;, &#39;2009-08-31&#39;, &#39;2010-08-31&#39;, &#39;2011-08-31&#39;,
                &#39;2012-08-31&#39;, &#39;2013-08-31&#39;, &#39;2014-08-31&#39;, &#39;2015-08-31&#39;,
                &#39;2016-08-31&#39;, &#39;2017-08-31&#39;],
             ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To iterate through groups:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for MonthNo,group in resamp_Montreal_grouped :                              
print(MonthNo)
print(group)
    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apr
                 mean  amin  amax  percentile_90  percentile_95  year  &lt;br /&gt;
datetime&lt;br /&gt;
1948-04-30   6.640000  -1.7  14.5          12.08         13.130  1948&lt;br /&gt;
1949-04-30   7.516667   2.0  15.8          12.43         14.370  1949&lt;br /&gt;
1950-04-30   4.710000  -4.2  11.7           8.56         10.770  1950&lt;br /&gt;
1951-04-30   7.296667   1.4  15.0          11.78         13.105  1951&lt;br /&gt;
1952-04-30   7.996667  -1.4  15.3          14.01         15.000  1952&lt;br /&gt;
&amp;hellip;&lt;/p&gt;

&lt;p&gt;[70 rows x 8 columns]
Aug
                 mean  amin  amax  percentile_90  percentile_95  year  &lt;br /&gt;
datetime&lt;br /&gt;
1948-08-31  21.106452  15.0  27.8          26.40         27.400  1948&lt;br /&gt;
1949-08-31  21.545161  15.0  27.0          25.60         26.700  1949&lt;br /&gt;
1950-08-31  19.112903  12.5  23.4          22.50         23.050  1950&lt;br /&gt;
1951-08-31  18.667742  13.1  23.4          22.00         22.950  1951&lt;br /&gt;
1952-08-31  20.732258  14.2  25.6          23.40         25.300  1952&lt;br /&gt;
1953-08-31  20.480645  15.6  27.2          25.00         27.000  1953&lt;br /&gt;
1954-08-31  19.312903  12.8  24.5          22.00         23.350  1954&lt;br /&gt;
&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To select a group: get_group()&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we grouped our dataframe using month index
resamp_Montreal_grouped.get_group(&#39;Dec&#39;).head()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amin&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;amax&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_90&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;percentile_95&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;MonthNo&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.52258&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1948&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1949-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.21935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1949&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1950-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.83548&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.95&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1950&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1951-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.3129&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1951&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1952-12-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3.18387&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1952&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Dec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Aggregation:
Python has several methods are available to perform aggregations on data. It is done using the pandas and numpy libraries. The data must be available or converted to a dataframe to apply the aggregation functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# to calculate &#39;percentile_90&#39; in each  group. 
resamp_Montreal_grouped[&#39;percentile_90&#39;].agg(np.mean)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;month
Apr    12.434848
Aug    24.283582
Dec     1.790000
Feb    -0.098529
Jan    -1.046324
Jul    25.119242
Jun    23.557385
Mar     5.021493
May    19.483846
Nov     8.615147
Oct    15.280294
Sep    21.236765
Name: percentile_90, dtype: float64&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp_Montreal_grouped[&#39;percentile_90&#39;].agg(np.size)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;month
Apr    70.0
Aug    70.0
Dec    70.0
Feb    70.0
Jan    70.0
Jul    70.0
Jun    70.0
Mar    70.0
May    70.0
Nov    70.0
Oct    70.0
Sep    70.0
Name: percentile_90, dtype: float64&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;exercice&#34;&gt;Exercice :&lt;/h2&gt;

&lt;h2 id=&#34;compute-day-degres-index-for-montreal-station&#34;&gt;Compute day degres index for Montreal station&lt;/h2&gt;

&lt;p&gt;1- open and read file &amp;ldquo;MONTREAL_tasmoy_1948_2017.txt&amp;rdquo;&lt;/p&gt;

&lt;p&gt;2- Define datetime index (time range: 01/01/1948 : 31/12/2017 )&lt;/p&gt;

&lt;p&gt;3- Write a function to compute the index&lt;/p&gt;

&lt;p&gt;4- For each year, compute temperature mean, min , max and DG0 index&lt;/p&gt;

&lt;p&gt;5- Make a plot&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
with open(&#39;./data/MONTREAL_tasmoy_1948_2017.txt&#39;, &#39;r&#39;) as file:
     rows = file.read()
data_EC_Montreal = [float(row) for row in rows.split()]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import datetime
from datetime import date
df = pd.DataFrame()

start = date(1948, 1, 1)
end = date(2017, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)

df[&#39;datetime&#39;] = rng
df.index = df[&#39;datetime&#39;] 
df[&#39;Temperature Montreal&#39;] = data_EC_Montreal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def DG0(S):  
     ind_DGO=[]
     ind_DGO = sum(x for x in S if x &amp;gt;= 0)
     return ind_DGO  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;resamp = df.resample(&#39;AS&#39;)
dataset = resamp.agg([np.mean, np.min, np.max, DG0])
dataset.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;amin&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;amax&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;DG0&amp;rsquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.23388&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3506.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1949-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.04767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3602.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1950-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.84877&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3318.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1951-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.24521&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-24.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3404.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1952-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.85546&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3474.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;5-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.columns = dataset.columns.droplevel(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[&#39;DG0&#39;].head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime
1948-01-01    3506.1
1949-01-01    3602.9
1950-01-01    3318.9
1951-01-01    3404.9
1952-01-01    3474.2
Freq: AS-JAN, Name: DG0, dtype: float64
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
dataset[&#39;DG0&#39;].plot(figsize=(12,5))
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_58_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we must filter missing values
def DG0bis(S):  
     ind_DGObis=[]      
     S_no_nan = S[~np.isnan(S)]
     N = len(S)
     N2 = len(S_no_nan)
     if ((N2/N) &amp;lt; 0.8): 
         ind_DGObis = np.empty(1)
         ind_DGObis = np.nan
     else:       
         ind_DGObis = sum(x for x in S if x &amp;gt;= 0)
     return ind_DGObis 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = resamp.agg([np.mean, np.min, np.max, DG0, DG0bis])
dataset.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;amin&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;amax&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;DG0&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Temperature Montreal&amp;rsquo;, &amp;lsquo;DG0bis&amp;rsquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1948-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.23388&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3506.1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3506.1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1949-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.04767&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3602.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3602.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1950-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.84877&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-23.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3318.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3318.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1951-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.24521&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-24.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3404.9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3404.9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1952-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.85546&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;27.5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3474.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3474.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset.columns = dataset.columns.droplevel(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset[&#39;DG0&#39;].plot(figsize=(12,5))
dataset[&#39;DG0bis&#39;].plot(figsize=(12,5))
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf1_62_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project 2 ECCC precipitation data</title>
      <link>/courses/tutorial_python/project2-eccc_precipitation/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>/courses/tutorial_python/project2-eccc_precipitation/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;/img/pylogo.png&#34; alt=&#34;image0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;eccc-precipitation-data&#34;&gt;ECCC Precipitation Data&lt;/h2&gt;

&lt;p&gt;We will continue to discover the functionality of these libraries in a practical case by now analyzing the daily precipitation data recorded by the ECCC stations located at the Montreal Trudeau Airport between the period 1961 and 2010.&lt;/p&gt;

&lt;p&gt;We will use &amp;lsquo;MONTREAL_preacc_1961_2010.dat&amp;rsquo; file in .data/ directory.&lt;/p&gt;

&lt;h3 id=&#34;1-opening-and-reading-our-time-series&#34;&gt;1- Opening and reading our time series&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
import datetime
from datetime import date
import numpy as np 
import warnings
warnings.filterwarnings(&amp;quot;ignore&amp;quot;)

df_Precipitation = pd.DataFrame()
# Ouverture du fichier text  
with open(&#39;./DATA/MONTREAL_preacc_1961_2010.dat&#39;, &#39;r&#39;) as file:
     rows = file.read()
data_EC_Montreal = [float(row) for row in rows.split()]  

# We know that the time series begins on January 1, 1961
# and ends on December 31, 2010
# We can rebuild the index of Dataframes

start = date(1961, 1, 1)
end = date(2010, 12, 31)
delta=(end-start) 
nb_days = delta.days + 1 
rng = pd.date_range(start, periods=nb_days, freq=&#39;D&#39;)

# Create a column from the datetime datatype
df_Precipitation[&#39;datetime&#39;] = rng
# Set the datetime column as the index
df_Precipitation.index = df_Precipitation[&#39;datetime&#39;] 

# Create a column from the numeric score variable
df_Precipitation[&#39;Precipitation Montreal&#39;] = data_EC_Montreal
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation Montreal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-04 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-05 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;2-applying-functions-to-datafram-precipitation-indices&#34;&gt;2- Applying functions to DataFram:  precipitation indices:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CDD: calculation of the maximum number of consecutive dry days (Precipitation &amp;lt;1mm)&lt;/li&gt;
&lt;li&gt;CWD: calculation of the maximum number of consecutive wet days (Precipitation&amp;gt; 1mm)&lt;/li&gt;
&lt;li&gt;Prcp1: calculation of the percentage of precipitation days (Precipitation&amp;gt; 1mm)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SDII: calculation of the precipitation intensity average for wet days (Precipitation&amp;gt; 1mm&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# calculation of the maximum number of consecutive dry days (inf to 1mm) 
# on the incoming signal (less than 20% of missing values) 
def CDD(S):
 import numpy as np
 ind_CDD=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if ((N2/N) &amp;lt; 0.8): 
     ind_CDD = np.empty(1)
     ind_CDD = np.nan
 else:
     temp = 0
     ind_CDD = 0 
     j =0
     while (j &amp;lt; N2):
         while (j &amp;lt; N2 ) and (S_no_nan[j] &amp;lt; 1.0 ):
             j += 1
             temp +=1
         if ind_CDD &amp;lt; temp:
             ind_CDD = temp
         temp = 0
         j += 1 
 return ind_CDD      
 
# calculation of the maximum number of consecutive wet days (sup to 1mm) 
# on the incoming signal (less than 20% of missing values) 
def CWD(S):
 import numpy as np
 ind_CWD=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if ((N2/N) &amp;lt; 0.8): 
     ind_CWD = np.empty(1)
     ind_CWD = np.nan
 else:
     temp = 0
     ind_CWD = 0 
     j =0
     while (j &amp;lt; N2):
         while (j &amp;lt; N2 ) and (S_no_nan[j] &amp;gt; 1.0 ):
             j += 1
             temp +=1
         if ind_CWD &amp;lt; temp:
             ind_CWD = temp
         temp = 0
         j += 1 
 return ind_CWD  

# Calculation of the percentage of precipitation days 
# on the incoming signal (less than 20% of missing values)
def Prcp1(S):
 import numpy as np
 ind_Prcp1=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if (N2 == 0):
     N2=1
         
 if ((N2/N) &amp;lt; 0.8): 
     ind_Prcp1 = np.empty(1)
     ind_Prcp1 = np.nan
 else:
     ind_Prcp1 = 0
     for row in S_no_nan:
         if row &amp;gt;= 1 :
             ind_Prcp1 += 1 
                 
     ind_Prcp1 = 100 * (ind_Prcp1/N2)
 return ind_Prcp1     

# average precipitation intensity for wet days (PR greater than 1mm) (less than 20% missing values)

def SDII(S):
 import numpy as np
 ind_SDII=[]
 S_no_nan = S[~np.isnan(S)]
 N = len(S)
 N2 = len(S_no_nan)
 if ((N2/N) &amp;lt; 0.8): 
     ind_SDII = np.empty(1)
     ind_SDII = np.nan
 else:
     SS = S[S &amp;gt; 1]        
     ind_SDII = np.nanmean(SS)
 return ind_SDII      
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The previous functions make it possible to calculate precipitation indices on a daily signal. We want to apply these functions per month.&lt;/p&gt;

&lt;p&gt;So we have to work with a subset of our &lt;b&gt; df_Precipitation &lt;/b&gt; dataframe grouped by month.&lt;/p&gt;

&lt;p&gt;In the same way as the previous section on temperatures, we will apply the &lt;b&gt; .resample (&amp;rsquo;M&amp;rsquo;) &lt;/b&gt; method: &amp;ldquo;M&amp;rdquo; for months (it&amp;rsquo;s possible here to work at week , season or year scale)
As a reminder, at this stage there is no calculation, the data are simply sorted on a monthly basis.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df_Precipitation_resamp = df_Precipitation.resample(&#39;M&#39;)
df_Precipitation_resamp.count().head()            
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation Montreal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;31&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can now apply our functions defined previously for each month of our DataFrame. For this, we will use the &lt;b&gt; .agg () &lt;/b&gt; method on our subset grouped by month.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation = df_Precipitation_resamp.agg([CDD, CWD, Prcp1, SDII, np.sum, np.mean])
indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;CDD&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;CWD&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;Prcp1&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;SDII&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;sum&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;3-filter-the-data-directly-on-a-dataframe&#34;&gt;3- Filter the data directly on a dataframe&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;the data can be filtered according to a condition on a column.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will for example only extract precipitation data greater than or equal to 1mm.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SDII2=df_Precipitation[df_Precipitation[&amp;quot;Precipitation Montreal&amp;quot;]&amp;gt;=1.0]
SDII2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Precipitation Montreal&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-01 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.66&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-02 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-03 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-06 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-06 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.65&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-07 00:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-07 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.05&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We first created a Boolean type mask on the column &amp;lsquo;Precipitation Montreal&amp;rsquo; which was then applied to our DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;(df_Precipitation[&amp;quot;Precipitation Montreal&amp;quot;]&amp;gt;1.0).head()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;datetime
1961-01-01     True
1961-01-02     True
1961-01-03     True
1961-01-04    False
1961-01-05    False
Name: Precipitation Montreal, dtype: bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We then group our DataFrame by month and we apply a function by calling .agg() method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SDII2 = SDII2.resample(&#39;M&#39;).agg({&#39;SDII2&#39;: lambda x: x.mean()})
SDII2.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;SDII2&amp;rsquo;, &amp;lsquo;Precipitation Montreal&amp;rsquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;4-updating-our-initial-dataframe&#34;&gt;4- Updating our initial DataFrame&lt;/h3&gt;

&lt;p&gt;We want to add to our initial DataFrame the variable SDII2 previously created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation[&amp;quot;SDII2&amp;quot;]=SDII2[:].values
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;CDD&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;CWD&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;Prcp1&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;SDII&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;sum&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;Precipitation Montreal&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;(&amp;lsquo;SDII2&amp;rsquo;, &amp;ldquo;)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.columns = indice_precipitation.columns.droplevel(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Using index datetime column, we want to create new columns with year and month.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation[&#39;year&#39;]  = indice_precipitation.index.year
indice_precipitation[&#39;month&#39;]  = indice_precipitation.index.month
indice_precipitation[&#39;month&#39;] = indice_precipitation.index.strftime(&#39;%b&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We want to save our Dataframe &lt;b&gt;indice_precipitation&lt;/b&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.to_csv(&#39;indice_precipitation.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-viewing-the-results&#34;&gt;4- Viewing the results&lt;/h3&gt;

&lt;p&gt;We will visualize our final dataframe &lt;b&gt; index_precipitation &lt;/b&gt; with the Seaborn library.
&lt;img src = &#34;./figures/seaborn.png&#34; alt = &#34;Seaborn&#34; width = &#34;60%&#34; height = &#34;70%&#34;&gt;&lt;/p&gt;

&lt;p&gt;However, we will see some examples with multi-dimensional graphics.
- Boxplot: &lt;b&gt;boxplot()&lt;/b&gt; function&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s use our precipitation DataFrame:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We want to visualize the nomber of days with precipitation by month. We will then plot Prcp1 variable from our DataFrame.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
import matplotlib.pyplot as plt 
ax = plt.axes()
sns.boxplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;Prcp1&amp;quot;, data=indice_precipitation, palette=&amp;quot;Set1&amp;quot;) 

ax.set_title(&#39;Number of days with precipitation in Montreal from 1948 to 2017&#39;)
ax.set_ylabel(&#39;%&#39;)

figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_29_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Histogram: &lt;b&gt;barplot()&lt;/b&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this example, we will plot the mean accumulation of prepicipitation by month, to do this we must use &amp;lsquo;sum&amp;rsquo; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = plt.axes()
sns.barplot(x=&amp;quot;month&amp;quot;, y=&amp;quot;sum&amp;quot;, data=indice_precipitation)
ax.set_title(&#39;Monthly mean of cumulated precipitation in Montréal from 1948 to 2017&#39;)
ax.set_ylabel(&#39;mm&#39;)

figure = ax.get_figure()    
figure.set_size_inches(12, 8) 
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_31_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bivariate graph: &lt;b&gt;jointplot()&lt;/b&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jointplot displays a relationship between 2 variables (bivariate)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.jointplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.jointplot.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(x=&amp;quot;Prcp1&amp;quot;, y=&amp;quot;sum&amp;quot;, data=indice_precipitation,kind=&#39;reg&#39;,
                   space=0, height=6, ratio=4)
plt.show()

# kind = &#39;kde&#39; 
# kind=&amp;quot;hex&amp;quot;
# kind=&amp;quot;reg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_33_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;bivariate graph: &lt;b&gt;pairplot()&lt;/b&gt; function
&lt;a href=&#34;https://seaborn.pydata.org/generated/seaborn.pairplot.html&#34; target=&#34;_blank&#34;&gt;https://seaborn.pydata.org/generated/seaborn.pairplot.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Attributes of interest
cols = [&#39;CWD&#39;, 
    &#39;SDII&#39;, 
    &#39;sum&#39;, 
    &#39;Prcp1&#39;, 
    &#39;mean&#39;]

pp = sns.pairplot(indice_precipitation[cols], 
              height=1.8, aspect=1.2, markers=&amp;quot;+&amp;quot;,
              plot_kws=dict(edgecolor=&amp;quot;k&amp;quot;, linewidth=0.5),
              diag_kws=dict(shade=True), # &amp;quot;diag&amp;quot; adjusts/tunes the diagonal plots
              diag_kind=&amp;quot;kde&amp;quot;) # use &amp;quot;kde&amp;quot; for diagonal plots

fig = pp.fig 
fig.subplots_adjust(top=0.93, wspace=0.3)
fig.suptitle(&#39;Indice de précipitation Pairwise Plots&#39;, 
          fontsize=14, fontweight=&#39;bold&#39;)
plt.show()



&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_35_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Correlation matrix:
The Pandas library has a method for calculating the correlations between each column of a DataFrame.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html&#34; target=&#34;_blank&#34;&gt;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.corr.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We first drop &amp;lsquo;year&amp;rsquo; column and then apply .corr() method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation2 = indice_precipitation.drop([&amp;quot;year&amp;quot;], axis=1)
corr_matrix = indice_precipitation2.corr()
corr_matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CDD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.288579&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.687758&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0253577&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.480416&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.481019&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0251715&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;CWD&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.288579&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.631665&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0400715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.41894&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.417954&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0396542&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Prcp1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.687758&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.631665&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0645136&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661685&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.663935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0645538&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;SDII&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0253577&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0400715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0645136&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.659944&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.999642&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;sum&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.480416&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.41894&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661685&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.659944&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.997694&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.660287&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;mean&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.481019&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.417954&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.663935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661113&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.997694&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661422&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0251715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0396542&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0645538&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.999642&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.660287&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.661422&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We can call the &lt;b&gt; .heatmap () &lt;/b&gt; function to visualize our correlation matrix and thus facilitate our interpretations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, (ax) = plt.subplots(1, 1, figsize=(10,6))
hm = sns.heatmap(corr_matrix, 
                 ax=ax,           # Axes in which to draw the plot, otherwise use the currently-active Axes.
                 cmap=&amp;quot;coolwarm&amp;quot;, # Color Map.
                 #square=True,    # If True, set the Axes aspect to “equal” so each cell will be square-shaped.
                 annot=True, 
                 fmt=&#39;.2f&#39;,       # String formatting code to use when adding annotations.
                 #annot_kws={&amp;quot;size&amp;quot;: 14},
                 linewidths=.05)

fig.subplots_adjust(top=0.93)
fig.suptitle(&#39;Correlation Matrix: Precipitation Indices Montreal Station&#39;, 
              fontsize=14, 
              fontweight=&#39;bold&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_41_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Graphiques 3D:&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bonus-add-correlation-indices-with-the-scipy-library&#34;&gt;Bonus: add correlation indices with the scipy library&lt;/h3&gt;

&lt;p&gt;The &lt;b&gt; stats &lt;/b&gt; module of the &lt;b&gt; Scipy library &lt;/b&gt; has many statistical functions.
&lt;a href=&#34;https://docs.scipy.org/doc/scipy/reference/stats.html&#34; target=&#34;_blank&#34;&gt;https://docs.scipy.org/doc/scipy/reference/stats.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def corr_pearson(x, y, **kws):
    r, p = stats.pearsonr(x, y)
    p_stars = &#39;&#39;
    if p &amp;lt;= 0.05:
        p_stars = &#39;*&#39;
    if p &amp;lt;= 0.01:
        p_stars = &#39;**&#39;
    if p &amp;lt;= 0.001:
        p_stars = &#39;***&#39;
   # r, _ = stats.spearmanr(x, y)
    ax = plt.gca()   
    pos = (0, .9) 
    color2=&#39;red&#39;                                                                   
    ax.annotate(&amp;quot;Pearson = {:.2f}&amp;quot;.format(r) + p_stars,
                xy=pos, xycoords=ax.transAxes, color=color2, fontweight=&#39;bold&#39;)
    

def corr_spearman(x, y, **kws):
    r, p = stats.spearmanr(x, y)
    p_stars = &#39;&#39;
    if p &amp;lt;= 0.05:
        p_stars = &#39;*&#39;
    if p &amp;lt;= 0.01:
        p_stars = &#39;**&#39;
    if p &amp;lt;= 0.001:
        p_stars = &#39;***&#39;
   # r, _ = stats.spearmanr(x, y)
    ax = plt.gca()  
    pos = (0, .6) 
    color2=&#39;darkgreen&#39; 
    ax.annotate(&amp;quot;Spearman = {:.2f}&amp;quot;.format(r) + p_stars,
                xy=pos, xycoords=ax.transAxes, color=color2, fontweight=&#39;bold&#39;)

def corr_kendall(x, y, **kws):
    r, p = stats.kendalltau(x, y)
    p_stars = &#39;&#39;
    if p &amp;lt;= 0.05:
        p_stars = &#39;*&#39;
    if p &amp;lt;= 0.01:
        p_stars = &#39;**&#39;
    if p &amp;lt;= 0.001:
        p_stars = &#39;***&#39;
   # r, _ = stats.spearmanr(x, y)
    ax = plt.gca()   
    pos = (0, .3) 
    color2=&#39;darkorange&#39; 
    ax.annotate(&amp;quot;Kendall = {:.2f}&amp;quot;.format(r) + p_stars,
                xy=pos, xycoords=ax.transAxes, color=color2, fontweight=&#39;bold&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_precipitation.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;datetime&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CDD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;CWD&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Prcp1&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;SDII&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sum&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;month&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-01-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29.0323&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55.09&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.7771&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.69111&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Jan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-02-28 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.5714&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;80.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.88821&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.895&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Feb&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-03-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.8065&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8687&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;97.59&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.14806&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11.8688&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Mar&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-04-30 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;50&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102.7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.42333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.68333&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Apr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1961-05-31 00:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;41.9355&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;70.22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.26516&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1961&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;May&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;indice_month=indice_precipitation[[&amp;quot;CWD&amp;quot;, &amp;quot;SDII&amp;quot;, &amp;quot;sum&amp;quot;, &amp;quot;Prcp1&amp;quot;]].loc[(indice_precipitation[&amp;quot;month&amp;quot;]==&amp;quot;Jan&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from scipy import stats
import seaborn as sns; sns.set()

g = sns.PairGrid(indice_month[[&amp;quot;CWD&amp;quot;, &amp;quot;SDII&amp;quot;, &amp;quot;sum&amp;quot;, &amp;quot;Prcp1&amp;quot;g]]) 

g.map_upper(corr_pearson) 
g.map_upper(corr_spearman) 
g.map_upper(corr_kendall) 
g.map_lower(sns.regplot) 
g.map_diag(plt.hist) 
g.set(alpha=0.5)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/img/netcdf2_47_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Assessment of the Probability of Autochthonous Transmission of Chikungunya Virus in Canada under Recent and Projected Climate Change</title>
      <link>/publication/article8/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      <guid>/publication/article8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Investigating added value of regional climate modeling in North American winter storm track simulations</title>
      <link>/publication/article7/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      <guid>/publication/article7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Guide to identifying alert thresholds for heat waves in Canada based on evidence</title>
      <link>/publication/article6/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      <guid>/publication/article6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>/project/internal-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>West African monsoon intraseasonal activity and its daily precipitation indices in regional climate models: diagnostics and challenges.</title>
      <link>/publication/article5/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      <guid>/publication/article5/</guid>
      <description></description>
    </item>
    
    <item>
      <title>L’interdisciplinarité au service de la santé: cas du Québec. Territoires incubateurs de santé ?</title>
      <link>/publication/article4/</link>
      <pubDate>Mon, 01 Sep 2014 00:00:00 +0000</pubDate>
      <guid>/publication/article4/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Assessment of the effects of acid-coated ice nuclei on the Arctic cloud microstructure, atmospheric dehydration, radiation and temperature during winter </title>
      <link>/publication/article2/</link>
      <pubDate>Fri, 01 Mar 2013 00:00:00 +0000</pubDate>
      <guid>/publication/article2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evaluation of regional Climate Model simulations: intercomparaisonover Canada and specific region </title>
      <link>/publication/article3/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>/publication/article3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Assessment of the Dehydration-Greenhouse Feedback Over the Arctic During Winter</title>
      <link>/publication/assessment_of_dehydration/</link>
      <pubDate>Thu, 01 Nov 2007 00:00:00 +0000</pubDate>
      <guid>/publication/assessment_of_dehydration/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
